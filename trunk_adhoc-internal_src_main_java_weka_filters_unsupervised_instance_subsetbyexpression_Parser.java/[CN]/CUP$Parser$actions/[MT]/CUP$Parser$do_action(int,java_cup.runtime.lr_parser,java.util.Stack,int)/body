{
  java_cup.runtime.Symbol CUP$Parser$result;
switch (CUP$Parser$act_num) {
case 37:
{
      Double RESULT=null;
      int eleft=((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
      int eright=((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
      Double e=(Double)((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
      RESULT=new Double(Math.ceil(e));
      CUP$Parser$result=parser.getSymbolFactory().newSymbol("funcexpr",4,((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 3)),((java_cup.runtime.Symbol)CUP$Parser$stack.peek()),RESULT);
    }
  return CUP$Parser$result;
case 36:
{
  Double RESULT=null;
  int baseleft=((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).left;
  int baseright=((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).right;
  Double base=(Double)((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).value;
  int exponentleft=((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
  int exponentright=((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
  Double exponent=(Double)((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
  RESULT=new Double(Math.pow(base,exponent));
  CUP$Parser$result=parser.getSymbolFactory().newSymbol("funcexpr",4,((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 5)),((java_cup.runtime.Symbol)CUP$Parser$stack.peek()),RESULT);
}
return CUP$Parser$result;
case 35:
{
Double RESULT=null;
int eleft=((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
int eright=((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
Double e=(Double)((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
RESULT=new Double(Math.floor(e));
CUP$Parser$result=parser.getSymbolFactory().newSymbol("funcexpr",4,((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 3)),((java_cup.runtime.Symbol)CUP$Parser$stack.peek()),RESULT);
}
return CUP$Parser$result;
case 34:
{
Double RESULT=null;
int eleft=((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
int eright=((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
Double e=(Double)((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
RESULT=new Double(Math.rint(e));
CUP$Parser$result=parser.getSymbolFactory().newSymbol("funcexpr",4,((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 3)),((java_cup.runtime.Symbol)CUP$Parser$stack.peek()),RESULT);
}
return CUP$Parser$result;
case 33:
{
Double RESULT=null;
int eleft=((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
int eright=((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
Double e=(Double)((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
RESULT=new Double(Math.tan(e));
CUP$Parser$result=parser.getSymbolFactory().newSymbol("funcexpr",4,((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 3)),((java_cup.runtime.Symbol)CUP$Parser$stack.peek()),RESULT);
}
return CUP$Parser$result;
case 32:
{
Double RESULT=null;
int eleft=((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
int eright=((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
Double e=(Double)((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
RESULT=new Double(Math.cos(e));
CUP$Parser$result=parser.getSymbolFactory().newSymbol("funcexpr",4,((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 3)),((java_cup.runtime.Symbol)CUP$Parser$stack.peek()),RESULT);
}
return CUP$Parser$result;
case 31:
{
Double RESULT=null;
int eleft=((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
int eright=((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
Double e=(Double)((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
RESULT=new Double(Math.sin(e));
CUP$Parser$result=parser.getSymbolFactory().newSymbol("funcexpr",4,((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 3)),((java_cup.runtime.Symbol)CUP$Parser$stack.peek()),RESULT);
}
return CUP$Parser$result;
case 30:
{
Double RESULT=null;
int eleft=((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
int eright=((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
Double e=(Double)((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
RESULT=new Double(Math.exp(e));
CUP$Parser$result=parser.getSymbolFactory().newSymbol("funcexpr",4,((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 3)),((java_cup.runtime.Symbol)CUP$Parser$stack.peek()),RESULT);
}
return CUP$Parser$result;
case 29:
{
Double RESULT=null;
int eleft=((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
int eright=((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
Double e=(Double)((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
RESULT=new Double(Math.log(e));
CUP$Parser$result=parser.getSymbolFactory().newSymbol("funcexpr",4,((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 3)),((java_cup.runtime.Symbol)CUP$Parser$stack.peek()),RESULT);
}
return CUP$Parser$result;
case 28:
{
Double RESULT=null;
int eleft=((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
int eright=((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
Double e=(Double)((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
RESULT=new Double(Math.sqrt(e));
CUP$Parser$result=parser.getSymbolFactory().newSymbol("funcexpr",4,((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 3)),((java_cup.runtime.Symbol)CUP$Parser$stack.peek()),RESULT);
}
return CUP$Parser$result;
case 27:
{
Double RESULT=null;
int eleft=((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
int eright=((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
Double e=(Double)((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
RESULT=new Double(Math.abs(e));
CUP$Parser$result=parser.getSymbolFactory().newSymbol("funcexpr",4,((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 3)),((java_cup.runtime.Symbol)CUP$Parser$stack.peek()),RESULT);
}
return CUP$Parser$result;
case 26:
{
Double RESULT=null;
int lleft=((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
int lright=((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
Double l=(Double)((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
int rleft=((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
int rright=((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
Double r=(Double)((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).value;
RESULT=new Double(l.doubleValue() / r.doubleValue());
CUP$Parser$result=parser.getSymbolFactory().newSymbol("opexpr",3,((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)),((java_cup.runtime.Symbol)CUP$Parser$stack.peek()),RESULT);
}
return CUP$Parser$result;
case 25:
{
Double RESULT=null;
int lleft=((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
int lright=((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
Double l=(Double)((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
int rleft=((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
int rright=((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
Double r=(Double)((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).value;
RESULT=new Double(l.doubleValue() * r.doubleValue());
CUP$Parser$result=parser.getSymbolFactory().newSymbol("opexpr",3,((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)),((java_cup.runtime.Symbol)CUP$Parser$stack.peek()),RESULT);
}
return CUP$Parser$result;
case 24:
{
Double RESULT=null;
int lleft=((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
int lright=((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
Double l=(Double)((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
int rleft=((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
int rright=((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
Double r=(Double)((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).value;
RESULT=new Double(l.doubleValue() - r.doubleValue());
CUP$Parser$result=parser.getSymbolFactory().newSymbol("opexpr",3,((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)),((java_cup.runtime.Symbol)CUP$Parser$stack.peek()),RESULT);
}
return CUP$Parser$result;
case 23:
{
Double RESULT=null;
int lleft=((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
int lright=((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
Double l=(Double)((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
int rleft=((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
int rright=((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
Double r=(Double)((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).value;
RESULT=new Double(l.doubleValue() + r.doubleValue());
CUP$Parser$result=parser.getSymbolFactory().newSymbol("opexpr",3,((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)),((java_cup.runtime.Symbol)CUP$Parser$stack.peek()),RESULT);
}
return CUP$Parser$result;
case 22:
{
Double RESULT=null;
int fleft=((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
int fright=((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
Double f=(Double)((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).value;
RESULT=f;
CUP$Parser$result=parser.getSymbolFactory().newSymbol("expr",2,((java_cup.runtime.Symbol)CUP$Parser$stack.peek()),((java_cup.runtime.Symbol)CUP$Parser$stack.peek()),RESULT);
}
return CUP$Parser$result;
case 21:
{
Double RESULT=null;
int oleft=((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
int oright=((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
Double o=(Double)((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).value;
RESULT=o;
CUP$Parser$result=parser.getSymbolFactory().newSymbol("expr",2,((java_cup.runtime.Symbol)CUP$Parser$stack.peek()),((java_cup.runtime.Symbol)CUP$Parser$stack.peek()),RESULT);
}
return CUP$Parser$result;
case 20:
{
Double RESULT=null;
int eleft=((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
int eright=((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
Double e=(Double)((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
RESULT=e;
CUP$Parser$result=parser.getSymbolFactory().newSymbol("expr",2,((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)),((java_cup.runtime.Symbol)CUP$Parser$stack.peek()),RESULT);
}
return CUP$Parser$result;
case 19:
{
Double RESULT=null;
int aleft=((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
int aright=((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
String a=(String)((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).value;
if (parser.getSymbols().containsKey(a)) RESULT=(Double)parser.getSymbols().get(a);
 else throw new IllegalStateException("Unknown symbol '" + a + "'!");
CUP$Parser$result=parser.getSymbolFactory().newSymbol("expr",2,((java_cup.runtime.Symbol)CUP$Parser$stack.peek()),((java_cup.runtime.Symbol)CUP$Parser$stack.peek()),RESULT);
}
return CUP$Parser$result;
case 18:
{
Double RESULT=null;
int nleft=((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
int nright=((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
Double n=(Double)((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).value;
RESULT=n;
CUP$Parser$result=parser.getSymbolFactory().newSymbol("expr",2,((java_cup.runtime.Symbol)CUP$Parser$stack.peek()),((java_cup.runtime.Symbol)CUP$Parser$stack.peek()),RESULT);
}
return CUP$Parser$result;
case 17:
{
Boolean RESULT=null;
int aleft=((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
int aright=((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
String a=(String)((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
if (parser.getSymbols().containsKey(a)) RESULT=(parser.getSymbols().get(a) instanceof Double) && Utils.isMissingValue((Double)parser.getSymbols().get(a));
 else throw new IllegalStateException("Unknown symbol '" + a + "'!");
CUP$Parser$result=parser.getSymbolFactory().newSymbol("boolexpr",5,((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 3)),((java_cup.runtime.Symbol)CUP$Parser$stack.peek()),RESULT);
}
return CUP$Parser$result;
case 16:
{
Boolean RESULT=null;
int aleft=((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
int aright=((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
String a=(String)((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
int sleft=((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
int sright=((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
String s=(String)((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).value;
if (parser.getSymbols().containsKey(a)) RESULT=(parser.getSymbols().get(a) instanceof String) && ((String)parser.getSymbols().get(a)).equals(s);
 else throw new IllegalStateException("Unknown symbol '" + a + "'!");
CUP$Parser$result=parser.getSymbolFactory().newSymbol("boolexpr",5,((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)),((java_cup.runtime.Symbol)CUP$Parser$stack.peek()),RESULT);
}
return CUP$Parser$result;
case 15:
{
Boolean RESULT=null;
int lleft=((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
int lright=((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
Boolean l=(Boolean)((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
int rleft=((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
int rright=((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
Boolean r=(Boolean)((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).value;
RESULT=l || r;
CUP$Parser$result=parser.getSymbolFactory().newSymbol("boolexpr",5,((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)),((java_cup.runtime.Symbol)CUP$Parser$stack.peek()),RESULT);
}
return CUP$Parser$result;
case 14:
{
Boolean RESULT=null;
int lleft=((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
int lright=((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
Boolean l=(Boolean)((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
int rleft=((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
int rright=((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
Boolean r=(Boolean)((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).value;
RESULT=l && r;
CUP$Parser$result=parser.getSymbolFactory().newSymbol("boolexpr",5,((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)),((java_cup.runtime.Symbol)CUP$Parser$stack.peek()),RESULT);
}
return CUP$Parser$result;
case 13:
{
Boolean RESULT=null;
int bleft=((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
int bright=((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
Boolean b=(Boolean)((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).value;
RESULT=!b;
CUP$Parser$result=parser.getSymbolFactory().newSymbol("boolexpr",5,((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)),((java_cup.runtime.Symbol)CUP$Parser$stack.peek()),RESULT);
}
return CUP$Parser$result;
case 12:
{
Boolean RESULT=null;
int bleft=((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
int bright=((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
Boolean b=(Boolean)((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
RESULT=b;
CUP$Parser$result=parser.getSymbolFactory().newSymbol("boolexpr",5,((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)),((java_cup.runtime.Symbol)CUP$Parser$stack.peek()),RESULT);
}
return CUP$Parser$result;
case 11:
{
Boolean RESULT=null;
int lleft=((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
int lright=((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
Double l=(Double)((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
int rleft=((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
int rright=((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
Double r=(Double)((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).value;
RESULT=new Boolean(l.doubleValue() == r.doubleValue());
CUP$Parser$result=parser.getSymbolFactory().newSymbol("boolexpr",5,((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)),((java_cup.runtime.Symbol)CUP$Parser$stack.peek()),RESULT);
}
return CUP$Parser$result;
case 10:
{
Boolean RESULT=null;
int lleft=((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
int lright=((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
Double l=(Double)((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
int rleft=((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
int rright=((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
Double r=(Double)((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).value;
RESULT=new Boolean(l.doubleValue() >= r.doubleValue());
CUP$Parser$result=parser.getSymbolFactory().newSymbol("boolexpr",5,((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)),((java_cup.runtime.Symbol)CUP$Parser$stack.peek()),RESULT);
}
return CUP$Parser$result;
case 9:
{
Boolean RESULT=null;
int lleft=((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
int lright=((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
Double l=(Double)((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
int rleft=((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
int rright=((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
Double r=(Double)((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).value;
RESULT=new Boolean(l.doubleValue() > r.doubleValue());
CUP$Parser$result=parser.getSymbolFactory().newSymbol("boolexpr",5,((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)),((java_cup.runtime.Symbol)CUP$Parser$stack.peek()),RESULT);
}
return CUP$Parser$result;
case 8:
{
Boolean RESULT=null;
int lleft=((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
int lright=((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
Double l=(Double)((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
int rleft=((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
int rright=((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
Double r=(Double)((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).value;
RESULT=new Boolean(l.doubleValue() <= r.doubleValue());
CUP$Parser$result=parser.getSymbolFactory().newSymbol("boolexpr",5,((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)),((java_cup.runtime.Symbol)CUP$Parser$stack.peek()),RESULT);
}
return CUP$Parser$result;
case 7:
{
Boolean RESULT=null;
int lleft=((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
int lright=((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
Double l=(Double)((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
int rleft=((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
int rright=((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
Double r=(Double)((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).value;
RESULT=new Boolean(l.doubleValue() < r.doubleValue());
CUP$Parser$result=parser.getSymbolFactory().newSymbol("boolexpr",5,((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)),((java_cup.runtime.Symbol)CUP$Parser$stack.peek()),RESULT);
}
return CUP$Parser$result;
case 6:
{
Boolean RESULT=null;
RESULT=new Boolean(false);
CUP$Parser$result=parser.getSymbolFactory().newSymbol("boolexpr",5,((java_cup.runtime.Symbol)CUP$Parser$stack.peek()),((java_cup.runtime.Symbol)CUP$Parser$stack.peek()),RESULT);
}
return CUP$Parser$result;
case 5:
{
Boolean RESULT=null;
RESULT=new Boolean(true);
CUP$Parser$result=parser.getSymbolFactory().newSymbol("boolexpr",5,((java_cup.runtime.Symbol)CUP$Parser$stack.peek()),((java_cup.runtime.Symbol)CUP$Parser$stack.peek()),RESULT);
}
return CUP$Parser$result;
case 4:
{
Boolean RESULT=null;
int bleft=((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
int bright=((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
Boolean b=(Boolean)((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).value;
RESULT=b;
CUP$Parser$result=parser.getSymbolFactory().newSymbol("boolexpr",5,((java_cup.runtime.Symbol)CUP$Parser$stack.peek()),((java_cup.runtime.Symbol)CUP$Parser$stack.peek()),RESULT);
}
return CUP$Parser$result;
case 3:
{
Object RESULT=null;
int eleft=((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
int eright=((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
Boolean e=(Boolean)((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).value;
parser.setResult(e);
CUP$Parser$result=parser.getSymbolFactory().newSymbol("boolexpr_part",1,((java_cup.runtime.Symbol)CUP$Parser$stack.peek()),((java_cup.runtime.Symbol)CUP$Parser$stack.peek()),RESULT);
}
return CUP$Parser$result;
case 2:
{
Object RESULT=null;
CUP$Parser$result=parser.getSymbolFactory().newSymbol("boolexpr_list",0,((java_cup.runtime.Symbol)CUP$Parser$stack.peek()),((java_cup.runtime.Symbol)CUP$Parser$stack.peek()),RESULT);
}
return CUP$Parser$result;
case 1:
{
Object RESULT=null;
int start_valleft=((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
int start_valright=((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
Object start_val=(Object)((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
RESULT=start_val;
CUP$Parser$result=parser.getSymbolFactory().newSymbol("$START",0,((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)),((java_cup.runtime.Symbol)CUP$Parser$stack.peek()),RESULT);
}
CUP$Parser$parser.done_parsing();
return CUP$Parser$result;
case 0:
{
Object RESULT=null;
CUP$Parser$result=parser.getSymbolFactory().newSymbol("boolexpr_list",0,((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)),((java_cup.runtime.Symbol)CUP$Parser$stack.peek()),RESULT);
}
return CUP$Parser$result;
default :
throw new Exception("Invalid action number found in internal parse table");
}
}
