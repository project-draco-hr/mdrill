{
  HashMap<String,Set<ShardDoc>> shardMap=new HashMap<String,Set<ShardDoc>>();
  for (  TopGroups<String> topGroups : rb.mergedTopGroups.values()) {
    for (    GroupDocs<String> group : topGroups.groups) {
      mapShardToDocs(shardMap,group.scoreDocs);
    }
  }
  for (  QueryCommandResult queryCommandResult : rb.mergedQueryCommandResults.values()) {
    mapShardToDocs(shardMap,queryCommandResult.getTopDocs().scoreDocs);
  }
  ShardRequest[] shardRequests=new ShardRequest[shardMap.size()];
  SchemaField uniqueField=rb.req.getSchema().getUniqueKeyField();
  int i=0;
  for (  Collection<ShardDoc> shardDocs : shardMap.values()) {
    ShardRequest sreq=new ShardRequest();
    sreq.purpose=ShardRequest.PURPOSE_GET_FIELDS;
    sreq.shards=new String[]{shardDocs.iterator().next().shard};
    sreq.params=new ModifiableSolrParams();
    sreq.params.add(rb.req.getParams());
    sreq.params.remove(GroupParams.GROUP);
    sreq.params.remove(CommonParams.SORT);
    sreq.params.remove(ResponseBuilder.FIELD_SORT_VALUES);
    String fl=sreq.params.get(CommonParams.FL);
    if (fl != null) {
      fl=fl.trim();
      if (fl.length() != 0 && !"score".equals(fl) && !"*".equals(fl)) {
        sreq.params.set(CommonParams.FL,fl + ',' + uniqueField.getName());
      }
    }
    List<String> ids=new ArrayList<String>(shardDocs.size());
    for (    ShardDoc shardDoc : shardDocs) {
      ids.add(shardDoc.id.toString());
    }
    sreq.params.add(ShardParams.IDS,StrUtils.join(ids,','));
    shardRequests[i++]=sreq;
  }
  return shardRequests;
}
