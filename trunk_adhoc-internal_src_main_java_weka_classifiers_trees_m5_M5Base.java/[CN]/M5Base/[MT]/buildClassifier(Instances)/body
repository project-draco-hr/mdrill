{
  getCapabilities().testWithFail(data);
  data=new Instances(data);
  data.deleteWithMissingClass();
  m_instances=new Instances(data);
  m_replaceMissing=new ReplaceMissingValues();
  m_replaceMissing.setInputFormat(m_instances);
  m_instances=Filter.useFilter(m_instances,m_replaceMissing);
  m_nominalToBinary=new NominalToBinary();
  m_nominalToBinary.setInputFormat(m_instances);
  m_instances=Filter.useFilter(m_instances,m_nominalToBinary);
  m_removeUseless=new RemoveUseless();
  m_removeUseless.setInputFormat(m_instances);
  m_instances=Filter.useFilter(m_instances,m_removeUseless);
  m_instances.randomize(new Random(1));
  m_ruleSet=new FastVector();
  Rule tempRule;
  if (m_generateRules) {
    Instances tempInst=m_instances;
    do {
      tempRule=new Rule();
      tempRule.setSmoothing(!m_unsmoothedPredictions);
      tempRule.setRegressionTree(m_regressionTree);
      tempRule.setUnpruned(m_useUnpruned);
      tempRule.setSaveInstances(false);
      tempRule.setMinNumInstances(m_minNumInstances);
      tempRule.buildClassifier(tempInst);
      m_ruleSet.addElement(tempRule);
      tempInst=tempRule.notCoveredInstances();
      tempRule.freeNotCoveredInstances();
    }
 while (tempInst.numInstances() > 0);
  }
 else {
    tempRule=new Rule();
    tempRule.setUseTree(true);
    tempRule.setSmoothing(!m_unsmoothedPredictions);
    tempRule.setSaveInstances(m_saveInstances);
    tempRule.setRegressionTree(m_regressionTree);
    tempRule.setUnpruned(m_useUnpruned);
    tempRule.setMinNumInstances(m_minNumInstances);
    Instances temp_train;
    temp_train=m_instances;
    tempRule.buildClassifier(temp_train);
    m_ruleSet.addElement(tempRule);
  }
  m_instances=new Instances(m_instances,0);
}
