{
  if (m_fileChooser == null) {
    m_fileChooser=new JFileChooser(new File(System.getProperty("user.home")));
    m_fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
    FileFilter filter=new ExtensionFileFilter(".periodics","Time series date-derived " + "periodic attribute definitions (*periodics)");
    m_fileChooser.addChoosableFileFilter(filter);
  }
  int result=m_fileChooser.showOpenDialog(this);
  if (result == JFileChooser.APPROVE_OPTION) {
    File loadFile=m_fileChooser.getSelectedFile();
    BufferedReader br=new BufferedReader(new FileReader(loadFile));
    String identifierLine=br.readLine();
    boolean ok=false;
    if (identifierLine != null) {
      if (identifierLine.equalsIgnoreCase("time-series-periodics")) {
        ok=true;
      }
    }
    if (!ok) {
      JOptionPane.showConfirmDialog(this,"\"" + loadFile.toString() + "\" does not"+ "\nappear to be a periodic attribute definition file","Unrecognised file type",JOptionPane.ERROR_MESSAGE);
      return;
    }
    String line=null;
    boolean withinCustom=false;
    m_customPeriodics.clear();
    List<String> predefined=new ArrayList<String>();
    ArrayList<CustomPeriodicTest> testList=null;
    String currentCustomName=null;
    while ((line=br.readLine()) != null) {
      if (line.startsWith("*pre-defined*:")) {
        if (withinCustom) {
          m_customPeriodics.put(currentCustomName,testList);
        }
        withinCustom=false;
        line=line.substring(line.indexOf(":") + 1,line.length()).trim();
        predefined.add(line);
      }
 else       if (line.startsWith("*custom*:")) {
        if (withinCustom) {
          m_customPeriodics.put(currentCustomName,testList);
        }
        testList=new ArrayList<CustomPeriodicTest>();
        currentCustomName=line.substring(line.indexOf(":") + 1,line.length()).trim();
        withinCustom=true;
      }
 else       if (withinCustom) {
        try {
          CustomPeriodicTest t=new CustomPeriodicTest(line);
          testList.add(t);
        }
 catch (        IllegalArgumentException ex) {
          ex.printStackTrace();
          JOptionPane.showConfirmDialog(this,"A problem occurred while parsing\n" + "the following custom periodic test:\n" + line,"Error parsing custom test",JOptionPane.ERROR_MESSAGE);
          return;
        }
      }
    }
    br.close();
    if (testList != null && testList.size() > 0) {
      m_customPeriodics.put(currentCustomName,testList);
    }
    m_dateDerivedPeriodicSelector.clearTableModel();
    Instances insts=createDateDerivedPeriodicList();
    m_dateDerivedPeriodicSelector.setInstances(insts);
    m_dateDerivedPeriodicsHeader=insts;
    boolean[] selected=new boolean[insts.numAttributes()];
    for (int i=0; i < insts.numAttributes(); i++) {
      if (i < NUM_PREDEFINED_PERIODICS) {
switch (i) {
case 0:
          if (predefined.contains("AM")) {
            selected[i]=true;
          }
        break;
case 1:
      if (predefined.contains("DayOfWeek")) {
        selected[i]=true;
      }
    break;
case 2:
  if (predefined.contains("DayOfMonth")) {
    selected[i]=true;
  }
break;
case 3:
if (predefined.contains("NumDaysInMonth")) {
selected[i]=true;
}
break;
case 4:
if (predefined.contains("Weekend")) {
selected[i]=true;
}
break;
case 5:
if (predefined.contains("Month")) {
selected[i]=true;
}
break;
case 6:
if (predefined.contains("Quarter")) {
selected[i]=true;
}
break;
}
}
 else {
selected[i]=true;
}
}
try {
m_dateDerivedPeriodicSelector.setSelectedAttributes(selected);
}
 catch (Exception ex) {
ex.printStackTrace();
}
}
}
