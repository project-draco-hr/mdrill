{
  LOG.info("####mergerRam start####");
  DirectoryInfo m1=expire;
  if (m1 == null) {
    m1=RamDirector.remove(RAM_KEY);
  }
  if (m1 == null) {
    return;
  }
  try {
    ArrayList<Pair> pairlist=new ArrayList<Pair>();
    ArrayList<DirectoryInfo> dinfolist=new ArrayList<DirectoryInfo>();
    if (this.diskDirector.size() > UniqConfig.RealTimeMaxIndexCount()) {
      ArrayList<Pair> list=this.getSortList();
      for (int i=0; i < list.size() && i < UniqConfig.RealTimeMergeFactor(); i++) {
        Pair p=list.get(i);
        pairlist.add(p);
        dinfolist.add(p.value);
      }
    }
    DirectoryInfo d=new DirectoryInfo();
    String path=this.mallocPath();
    d.d=LinkFSDirectory.open(new File(path),true);
    d.tp=DirectoryInfo.DirTpe.file;
    dinfolist.add(m1);
    this.merger(dinfolist,d);
    StringBuffer lastkey=new StringBuffer();
    if (pairlist.size() > 0) {
      for (      Pair lastPair : pairlist) {
        this.maybeDelayClear(lastPair.value);
        diskDirector.remove(lastPair.key);
        lastkey.append(String.valueOf(lastPair.key)).append(",");
      }
    }
    diskDirector.put(path,d);
    LOG.info("####mergerRam####put =>" + String.valueOf(path) + ",remove:"+ lastkey.toString());
  }
 catch (  Throwable e) {
    LOG.error("####mergerRam_error####",e);
    this.RamDirector.put(RAM_KEY,m1);
  }
 finally {
    this.status.needRemakeLinks.set(true);
  }
}
