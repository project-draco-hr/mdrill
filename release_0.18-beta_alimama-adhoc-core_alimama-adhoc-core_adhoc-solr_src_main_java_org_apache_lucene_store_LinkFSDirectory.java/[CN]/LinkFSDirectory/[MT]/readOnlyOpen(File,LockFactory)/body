{
  Object lock=new Object();
synchronized (maplock) {
    String key=path.getAbsolutePath();
    lock=localLock.get(key);
    if (lock == null) {
      lock=new Object();
      localLock.put(key,lock);
    }
  }
  Configuration conf=getConf();
synchronized (lock) {
    if (isRealTime.get()) {
      String key=HigoRealTime.normalize_path(path.getAbsolutePath());
      RAMDirectory ram=HigoRealTime.ramDirectory.get(key);
      if (ram == null) {
        ram=new RAMDirectory();
        IndexWriter writer=new IndexWriter(ram,null,new KeepOnlyLastCommitDeletionPolicy(),MaxFieldLength.UNLIMITED);
        writer.setMergeFactor(10);
        writer.setUseCompoundFile(false);
        writer.close();
        HigoRealTime.ramDirectory.put(key,ram);
      }
      return ram;
    }
    File links=new File(path,"indexLinks");
    List<Directory> dirlist=new ArrayList<Directory>();
    System.out.println("links file is" + links.getAbsolutePath());
    if (links.exists()) {
      FileReader freader=new FileReader(links);
      BufferedReader br=new BufferedReader(freader);
      String s1=null;
      while ((s1=br.readLine()) != null) {
        if (s1.trim().length() > 0) {
          if (s1.indexOf("@hdfs@") < 0) {
            FSDirectory d=LinkFSDirectory.open(new File(s1));
            dirlist.add(d);
          }
 else {
            dirlist.add(new FileSystemDirectory(FileSystem.get(conf),new Path(s1.replaceAll("@hdfs@","")),false,conf));
          }
          SolrCore.log.info(">>>>>LinkFSDirectory readOnlyOpen add links " + s1);
        }
      }
      br.close();
      freader.close();
    }
    if (dirlist.size() == 1) {
      return dirlist.get(0);
    }
    File workerspace=new File(path,getWorkDir(path.getAbsolutePath()));
    deleteDirectory(workerspace);
    workerspace.mkdirs();
    FSDirectory dir=open(workerspace,lockFactory);
    IndexWriter writer=new IndexWriter(dir,null,new KeepOnlyLastCommitDeletionPolicy(),MaxFieldLength.UNLIMITED);
    writer.setMergeFactor(512);
    writer.setUseCompoundFile(false);
    if (dirlist.size() > 0) {
      Directory[] dirs=new Directory[dirlist.size()];
      writer.addIndexesNoOptimize(dirlist.toArray(dirs));
    }
    writer.close();
    return dir;
  }
}
