{
  StringBuffer temp=new StringBuffer();
  temp.append("PMML version " + getPMMLVersion());
  if (!getCreatorApplication().equals("?")) {
    temp.append("\nApplication: " + getCreatorApplication());
  }
  temp.append("\nPMML Model: " + m_modelType);
  temp.append("\n\n");
  temp.append(m_miningSchema);
  if (m_factorList.size() > 0) {
    temp.append("Factors:\n");
    for (    Predictor p : m_factorList) {
      temp.append("\t" + p + "\n");
    }
  }
  temp.append("\n");
  if (m_covariateList.size() > 0) {
    temp.append("Covariates:\n");
    for (    Predictor p : m_covariateList) {
      temp.append("\t" + p + "\n");
    }
  }
  temp.append("\n");
  printPPMatrix(temp);
  temp.append("\n");
  printParameterMatrix(temp);
  temp.append("\n");
  if (m_linkFunction != LinkFunction.NONE) {
    temp.append("Link function: " + m_linkFunction);
    if (m_offsetVariable != null) {
      temp.append("\n\tOffset variable " + m_offsetVariable);
    }
 else     if (!Double.isNaN(m_offsetValue)) {
      temp.append("\n\tOffset value " + m_offsetValue);
    }
    if (m_trialsVariable != null) {
      temp.append("\n\tTrials variable " + m_trialsVariable);
    }
 else     if (!Double.isNaN(m_trialsValue)) {
      temp.append("\n\tTrials value " + m_trialsValue);
    }
    if (m_distribution != Distribution.NONE) {
      temp.append("\nDistribution: " + m_distribution);
    }
    if (m_linkFunction == LinkFunction.NEGBIN && m_distribution == Distribution.NEGBINOMIAL && !Double.isNaN(m_distParameter)) {
      temp.append("\n\tDistribution parameter " + m_distParameter);
    }
    if (m_linkFunction == LinkFunction.POWER || m_linkFunction == LinkFunction.ODDSPOWER) {
      if (!Double.isNaN(m_linkParameter)) {
        temp.append("\n\nLink parameter " + m_linkParameter);
      }
    }
  }
  if (m_cumulativeLinkFunction != CumulativeLinkFunction.NONE) {
    temp.append("Cumulative link function: " + m_cumulativeLinkFunction);
    if (m_offsetVariable != null) {
      temp.append("\n\tOffset variable " + m_offsetVariable);
    }
 else     if (!Double.isNaN(m_offsetValue)) {
      temp.append("\n\tOffset value " + m_offsetValue);
    }
  }
  temp.append("\n");
  return temp.toString();
}
