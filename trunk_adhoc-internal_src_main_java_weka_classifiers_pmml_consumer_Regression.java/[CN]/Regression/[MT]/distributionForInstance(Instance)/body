{
  if (!m_initialized) {
    mapToMiningSchema(inst.dataset());
  }
  double[] preds=null;
  if (m_miningSchema.getFieldsAsInstances().classAttribute().isNumeric()) {
    preds=new double[1];
  }
 else {
    preds=new double[m_miningSchema.getFieldsAsInstances().classAttribute().numValues()];
  }
  double[] incoming=m_fieldsMap.instanceToSchema(inst,m_miningSchema);
  boolean hasMissing=false;
  for (int i=0; i < incoming.length; i++) {
    if (i != m_miningSchema.getFieldsAsInstances().classIndex() && Utils.isMissingValue(incoming[i])) {
      hasMissing=true;
      break;
    }
  }
  if (hasMissing) {
    if (!m_miningSchema.hasTargetMetaData()) {
      String message="[Regression] WARNING: Instance to predict has missing value(s) but " + "there is no missing value handling meta data and no " + "prior probabilities/default value to fall back to. No "+ "prediction will be made ("+ ((m_miningSchema.getFieldsAsInstances().classAttribute().isNominal() || m_miningSchema.getFieldsAsInstances().classAttribute().isString()) ? "zero probabilities output)." : "NaN output).");
      if (m_log == null) {
        System.err.println(message);
      }
 else {
        m_log.logMessage(message);
      }
      if (m_miningSchema.getFieldsAsInstances().classAttribute().isNumeric()) {
        preds[0]=Utils.missingValue();
      }
      return preds;
    }
 else {
      TargetMetaInfo targetData=m_miningSchema.getTargetMetaData();
      if (m_miningSchema.getFieldsAsInstances().classAttribute().isNumeric()) {
        preds[0]=targetData.getDefaultValue();
      }
 else {
        Instances miningSchemaI=m_miningSchema.getFieldsAsInstances();
        for (int i=0; i < miningSchemaI.classAttribute().numValues(); i++) {
          preds[i]=targetData.getPriorProbability(miningSchemaI.classAttribute().value(i));
        }
      }
      return preds;
    }
  }
 else {
    for (int i=0; i < m_regressionTables.length; i++) {
      m_regressionTables[i].predict(preds,incoming);
    }
switch (m_normalizationMethod) {
case NONE:
      break;
case SIMPLEMAX:
    Utils.normalize(preds);
  break;
case SOFTMAX:
for (int i=0; i < preds.length; i++) {
  preds[i]=Math.exp(preds[i]);
}
if (preds.length == 1) {
preds[0]=preds[0] / (preds[0] + 1.0);
}
 else {
Utils.normalize(preds);
}
break;
case LOGIT:
for (int i=0; i < preds.length; i++) {
preds[i]=1.0 / (1.0 + Math.exp(-preds[i]));
}
Utils.normalize(preds);
break;
case PROBIT:
for (int i=0; i < preds.length; i++) {
preds[i]=weka.core.matrix.Maths.pnorm(preds[i]);
}
Utils.normalize(preds);
break;
case CLOGLOG:
for (int i=0; i < preds.length; i++) {
preds[i]=1.0 - Math.exp(-Math.exp(-preds[i]));
}
Utils.normalize(preds);
break;
case EXP:
for (int i=0; i < preds.length; i++) {
preds[i]=Math.exp(preds[i]);
}
Utils.normalize(preds);
break;
case LOGLOG:
for (int i=0; i < preds.length; i++) {
preds[i]=Math.exp(-Math.exp(-preds[i]));
}
Utils.normalize(preds);
break;
case CAUCHIT:
for (int i=0; i < preds.length; i++) {
preds[i]=0.5 + (1.0 / Math.PI) * Math.atan(preds[i]);
}
Utils.normalize(preds);
break;
default :
throw new Exception("[Regression] unknown normalization method");
}
if (m_miningSchema.getFieldsAsInstances().classAttribute().isNumeric() && m_miningSchema.hasTargetMetaData()) {
TargetMetaInfo targetData=m_miningSchema.getTargetMetaData();
preds[0]=targetData.applyMinMaxRescaleCast(preds[0]);
}
}
return preds;
}
