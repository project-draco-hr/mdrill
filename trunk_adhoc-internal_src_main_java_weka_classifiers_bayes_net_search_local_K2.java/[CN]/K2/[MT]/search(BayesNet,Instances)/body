{
  int nOrder[]=new int[instances.numAttributes()];
  nOrder[0]=instances.classIndex();
  int nAttribute=0;
  for (int iOrder=1; iOrder < instances.numAttributes(); iOrder++) {
    if (nAttribute == instances.classIndex()) {
      nAttribute++;
    }
    nOrder[iOrder]=nAttribute++;
  }
  if (m_bRandomOrder) {
    Random random=new Random();
    int iClass;
    if (getInitAsNaiveBayes()) {
      iClass=0;
    }
 else {
      iClass=-1;
    }
    for (int iOrder=0; iOrder < instances.numAttributes(); iOrder++) {
      int iOrder2=Math.abs(random.nextInt()) % instances.numAttributes();
      if (iOrder != iClass && iOrder2 != iClass) {
        int nTmp=nOrder[iOrder];
        nOrder[iOrder]=nOrder[iOrder2];
        nOrder[iOrder2]=nTmp;
      }
    }
  }
  double[] fBaseScores=new double[instances.numAttributes()];
  for (int iOrder=0; iOrder < instances.numAttributes(); iOrder++) {
    int iAttribute=nOrder[iOrder];
    fBaseScores[iAttribute]=calcNodeScore(iAttribute);
  }
  for (int iOrder=1; iOrder < instances.numAttributes(); iOrder++) {
    int iAttribute=nOrder[iOrder];
    double fBestScore=fBaseScores[iAttribute];
    boolean bProgress=(bayesNet.getParentSet(iAttribute).getNrOfParents() < getMaxNrOfParents());
    while (bProgress) {
      int nBestAttribute=-1;
      for (int iOrder2=0; iOrder2 < iOrder; iOrder2++) {
        int iAttribute2=nOrder[iOrder2];
        double fScore=calcScoreWithExtraParent(iAttribute,iAttribute2);
        if (fScore > fBestScore) {
          fBestScore=fScore;
          nBestAttribute=iAttribute2;
        }
      }
      if (nBestAttribute != -1) {
        bayesNet.getParentSet(iAttribute).addParent(nBestAttribute,instances);
        fBaseScores[iAttribute]=fBestScore;
        bProgress=(bayesNet.getParentSet(iAttribute).getNrOfParents() < getMaxNrOfParents());
      }
 else {
        bProgress=false;
      }
    }
  }
}
