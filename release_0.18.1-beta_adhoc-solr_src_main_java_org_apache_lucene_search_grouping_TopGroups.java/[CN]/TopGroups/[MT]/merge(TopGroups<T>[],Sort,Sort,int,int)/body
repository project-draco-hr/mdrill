{
  if (shardGroups.length == 0) {
    return null;
  }
  HashMap<T,Integer> map=new HashMap<T,Integer>();
  int totalHitCount=0;
  int totalGroupedHitCount=0;
  Integer totalGroupCount=null;
  final int numGroups=shardGroups[0].groups.length;
  for (  TopGroups<T> shard : shardGroups) {
    if (numGroups != shard.groups.length) {
      throw new IllegalArgumentException("number of groups differs across shards; you must pass same top groups to all shards' second-pass collector");
    }
    totalHitCount+=shard.totalHitCount;
    totalGroupedHitCount+=shard.totalGroupedHitCount;
    if (shard.totalGroupCount != null) {
      if (totalGroupCount == null) {
        totalGroupCount=0;
      }
      totalGroupCount+=shard.totalGroupCount;
    }
  }
  @SuppressWarnings("unchecked") final GroupDocs<T>[] mergedGroupDocs=new GroupDocs[numGroups];
  final TopDocs[] shardTopDocs=new TopDocs[shardGroups.length];
  for (int groupIDX=0; groupIDX < numGroups; groupIDX++) {
    final T groupValue=shardGroups[0].groups[groupIDX].groupValue;
    float maxScore=Float.MIN_VALUE;
    double sum=0.0f;
    double max=Double.NEGATIVE_INFINITY;
    double min=Double.POSITIVE_INFINITY;
    int totalHits=0;
    for (int shardIDX=0; shardIDX < shardGroups.length; shardIDX++) {
      final TopGroups<T> shard=shardGroups[shardIDX];
      final GroupDocs shardGroupDocs=shard.groups[groupIDX];
      if (groupValue == null) {
        if (shardGroupDocs.groupValue != null) {
          throw new IllegalArgumentException("group values differ across shards; you must pass same top groups to all shards' second-pass collector");
        }
      }
 else       if (!groupValue.equals(shardGroupDocs.groupValue)) {
        throw new IllegalArgumentException("group values differ across shards; you must pass same top groups to all shards' second-pass collector");
      }
      if (!map.containsKey(shardGroupDocs.groupValue))       map.put(shard.groups[groupIDX].groupValue,new Integer(shardGroupDocs.totalHits));
 else {
        Integer v=map.get(shard.groups[groupIDX].groupValue);
        v=Integer.valueOf(v.intValue() + shardGroupDocs.totalHits);
      }
      shardTopDocs[shardIDX]=new TopDocs(shardGroupDocs.totalHits,shardGroupDocs.scoreDocs,shardGroupDocs.maxScore,shardGroupDocs.sum,shardGroupDocs.max,shardGroupDocs.min);
      maxScore=Math.max(maxScore,shardGroupDocs.maxScore);
      sum+=shardGroupDocs.sum;
      max=Math.max(max,shardGroupDocs.max);
      min=Math.min(min,shardGroupDocs.min);
      totalHits+=shardGroupDocs.totalHits;
    }
    final TopDocs mergedTopDocs=TopDocs.merge(docSort,docOffset + docTopN,shardTopDocs);
    final ScoreDoc[] mergedScoreDocs;
    if (docOffset == 0) {
      mergedScoreDocs=mergedTopDocs.scoreDocs;
    }
 else     if (docOffset >= mergedTopDocs.scoreDocs.length) {
      mergedScoreDocs=new ScoreDoc[0];
    }
 else {
      mergedScoreDocs=new ScoreDoc[mergedTopDocs.scoreDocs.length - docOffset];
      System.arraycopy(mergedTopDocs.scoreDocs,docOffset,mergedScoreDocs,0,mergedTopDocs.scoreDocs.length - docOffset);
    }
    mergedGroupDocs[groupIDX]=new GroupDocs<T>(maxScore,totalHits,mergedScoreDocs,groupValue,shardGroups[0].groups[groupIDX].groupSortValues,sum,max,min);
  }
  totalGroupCount=map.keySet().size();
  if (totalGroupCount != null) {
    TopGroups<T> result=new TopGroups<T>(groupSort.getSort(),docSort == null ? null : docSort.getSort(),totalHitCount,totalGroupedHitCount,mergedGroupDocs);
    return new TopGroups<T>(result,totalGroupCount);
  }
 else {
    return new TopGroups<T>(groupSort.getSort(),docSort == null ? null : docSort.getSort(),totalHitCount,totalGroupedHitCount,mergedGroupDocs);
  }
}
