{
  long t1=System.currentTimeMillis();
  boolean isPartionByPt=false;
  if (projectName.equals("rpt_hitfake_auctionall_d")) {
    projectName="rpt_p4padhoc_auction";
  }
  if (projectName.equals("rpt_b2bad_hoc_memb_sum_d")) {
    isPartionByPt=true;
  }
  queryStr=WebServiceParams.query(queryStr);
  String sqlSort=WebServiceParams.sortHive(sort,order);
  TablePartion part=GetPartions.partion(projectName);
  String[] cores=GetShards.get(part.name,false,10000);
  String[] ms=GetShards.get(part.name,true,10000);
  String[] partionsAll=GetPartions.get(queryStr,part.parttype);
  GetPartions.Shards shard=GetPartions.getshard(part,partionsAll,cores,ms,10000,0);
  HashMap<String,String> filetypeMap=MdrillService.readFieldsFromSchemaXml(part.name);
  ArrayList<String> fqList=WebServiceParams.fqListHive(queryStr,shard,isPartionByPt,filetypeMap);
  StringBuffer sqlWhere=new StringBuffer();
  String join=" where ";
  for (  String fq : fqList) {
    sqlWhere.append(join);
    sqlWhere.append(fq);
    join=" and ";
  }
  ArrayList<String> groupFields=WebServiceParams.groupFields(groupby);
  StringBuffer sqlGroup=new StringBuffer();
  String daycols="";
  join=" group by ";
  for (  String field : groupFields) {
    sqlGroup.append(join);
    sqlGroup.append(field);
    if (field.equals("thedate")) {
      daycols="????????????,";
    }
    join=",";
  }
  ArrayList<String> showFields=WebServiceParams.showHiveFields(fl);
  StringBuffer cols=new StringBuffer();
  join="";
  for (  String field : groupFields) {
    cols.append(join);
    cols.append(field);
    join=",";
  }
  for (  String field : showFields) {
    if (field.equals("thedate")) {
      daycols="????????????,";
    }
    if (!groupFields.contains(field)) {
      cols.append(join);
      cols.append(field);
      join=",";
    }
  }
  String hql="select " + cols.toString() + " from "+ projectName+ " "+ sqlWhere.toString()+ " "+ sqlGroup.toString()+ " "+ sqlSort+ "";
  String md5=MD5.getMD5(hql);
  SimpleDateFormat fmt=new SimpleDateFormat("yyyyMMdd");
  String day=fmt.format(new Date());
  Map stormconf=Utils.readStormConfig();
  String hdpConf=(String)stormconf.get("hadoop.conf.dir");
  String connstr=(String)stormconf.get("higo.download.offline.conn");
  String uname=(String)stormconf.get("higo.download.offline.username");
  String passwd=(String)stormconf.get("higo.download.offline.passwd");
  String store=(String)stormconf.get("higo.download.offline.store") + "/" + day+ "/"+ java.util.UUID.randomUUID().toString();
  MySqlConn conn=new MySqlConn(connstr,uname,passwd);
  MysqlInfo info=new MysqlInfo(conn);
  if (username == null || username.length() <= 0) {
    username="default";
  }
  StringBuffer sqlbuff=new StringBuffer();
  sqlbuff.append(";");
  int size=info.getUser(username,true,sqlbuff).size();
  JSONObject jsonObj=new JSONObject();
  jsonObj.put("sqlbuff",sqlbuff.toString());
  jsonObj.put("size",size);
  if (size < 5) {
    MysqlCallback callback=new MysqlCallback(conn);
    String[] pcols=params == null ? new String[0] : new String(daycols + params.replaceAll("????????????????","").replaceAll("??????.*$","")).split(",");
    StringBuffer liststat=new StringBuffer();
    StringBuffer listgroup=new StringBuffer();
    for (    String s : pcols) {
      if (AdhocOfflineService.isStatFields(s)) {
        liststat.append(s);
        liststat.append(",");
      }
 else {
        listgroup.append(s);
        listgroup.append(",");
      }
    }
    callback.setCols((params == null || params.isEmpty()) ? cols.toString() : listgroup.toString() + liststat.toString());
    OfflineDownload download=new OfflineDownload();
    download.setOffline(callback);
    if (mailto == null || mailto.length() <= 0) {
      mailto="yannian.mu@alipay.com";
    }
    download.setMailto(mailto);
    download.setHql("INSERT OVERWRITE DIRECTORY '" + store + "' "+ hql);
    download.setUseName(username);
    if (jobname == null || jobname.length() <= 0) {
      jobname=day + "_" + md5;
    }
    download.setJobName(jobname);
    download.setDisplayParams((params == null || params.isEmpty()) ? hql : params);
    download.setStoreDir(store);
    download.setConfdir(hdpConf);
    download.setSqlMd5(md5);
    download.run();
    long t2=System.currentTimeMillis();
    jsonObj.put("code","1");
    jsonObj.put("message","???????????????????????????...???????????????????????<b style=\"color:red\">????????????</b>??????<b style=\"color:red\">????????</b>????");
    jsonObj.put("uuid",callback.getUuid());
    jsonObj.put("debug",callback.toString());
    jsonObj.put("timedebug",String.valueOf(t2 - t1));
  }
 else {
    jsonObj.put("code","0");
    jsonObj.put("message","????????????" + size + "??????????????????????????????????????????????????????????????????????????????");
  }
  if (jsoncallback != null && jsoncallback.length() > 0) {
    return jsoncallback + "(" + jsonObj.toString()+ ")";
  }
 else {
    return jsonObj.toString();
  }
}
