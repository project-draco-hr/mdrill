{
  int firstMiss;
  int next=1;
  int last=0;
  int index=0;
  int splitIndex=-1;
  double currentInfoGain;
  double defaultEnt;
  double minSplit;
  Instance instance;
  int i;
  m_distribution=new Distribution(2,trainInstances.numClasses());
  Enumeration enu=trainInstances.enumerateInstances();
  i=0;
  while (enu.hasMoreElements()) {
    instance=(Instance)enu.nextElement();
    if (instance.isMissing(m_attIndex))     break;
    m_distribution.add(1,instance);
    i++;
  }
  firstMiss=i;
  minSplit=0.1 * (m_distribution.total()) / ((double)trainInstances.numClasses());
  if (Utils.smOrEq(minSplit,m_minNoObj))   minSplit=m_minNoObj;
 else   if (Utils.gr(minSplit,25))   minSplit=25;
  if (Utils.sm((double)firstMiss,2 * minSplit))   return;
  defaultEnt=m_infoGainCrit.oldEnt(m_distribution);
  while (next < firstMiss) {
    if (trainInstances.instance(next - 1).value(m_attIndex) + 1e-5 < trainInstances.instance(next).value(m_attIndex)) {
      m_distribution.shiftRange(1,0,trainInstances,last,next);
      if (Utils.grOrEq(m_distribution.perBag(0),minSplit) && Utils.grOrEq(m_distribution.perBag(1),minSplit)) {
        currentInfoGain=m_infoGainCrit.splitCritValue(m_distribution,m_sumOfWeights,defaultEnt);
        if (Utils.gr(currentInfoGain,m_infoGain)) {
          m_infoGain=currentInfoGain;
          splitIndex=next - 1;
        }
        index++;
      }
      last=next;
    }
    next++;
  }
  if (index == 0)   return;
  if (m_useMDLcorrection) {
    m_infoGain=m_infoGain - (Utils.log2(index) / m_sumOfWeights);
  }
  if (Utils.smOrEq(m_infoGain,0))   return;
  m_numSubsets=2;
  m_splitPoint=(trainInstances.instance(splitIndex + 1).value(m_attIndex) + trainInstances.instance(splitIndex).value(m_attIndex)) / 2;
  if (m_splitPoint == trainInstances.instance(splitIndex + 1).value(m_attIndex)) {
    m_splitPoint=trainInstances.instance(splitIndex).value(m_attIndex);
  }
  m_distribution=new Distribution(2,trainInstances.numClasses());
  m_distribution.addRange(0,trainInstances,0,splitIndex + 1);
  m_distribution.addRange(1,trainInstances,splitIndex + 1,firstMiss);
  m_gainRatio=m_gainRatioCrit.splitCritValue(m_distribution,m_sumOfWeights,m_infoGain);
}
