{
  Instances currentFormat;
  if (m_ntob != null) {
    currentFormat=m_ntob.getOutputFormat();
  }
 else   currentFormat=getInputFormat();
  if (m_percent > 0) {
    m_k=(int)((getInputFormat().numAttributes() - 1) * m_percent);
  }
  Instances newFormat;
  int newClassIndex=-1;
  FastVector attributes=new FastVector();
  for (int i=0; i < m_k; i++) {
    attributes.addElement(new Attribute("K" + (i + 1)));
  }
  if (currentFormat.classIndex() != -1) {
    attributes.addElement(currentFormat.attribute(currentFormat.classIndex()));
    newClassIndex=attributes.size() - 1;
  }
  newFormat=new Instances(currentFormat.relationName(),attributes,0);
  if (newClassIndex != -1)   newFormat.setClassIndex(newClassIndex);
  m_OutputFormatDefined=true;
  m_random=new Random();
  m_random.setSeed(m_rndmSeed);
  m_rmatrix=new double[m_k][currentFormat.numAttributes()];
  if (m_distribution == GAUSSIAN) {
    for (int i=0; i < m_rmatrix.length; i++)     for (int j=0; j < m_rmatrix[i].length; j++)     m_rmatrix[i][j]=m_random.nextGaussian();
  }
 else {
    boolean useDstrWithZero=(m_distribution == SPARSE1);
    for (int i=0; i < m_rmatrix.length; i++)     for (int j=0; j < m_rmatrix[i].length; j++)     m_rmatrix[i][j]=rndmNum(useDstrWithZero);
  }
  setOutputFormat(newFormat);
}
