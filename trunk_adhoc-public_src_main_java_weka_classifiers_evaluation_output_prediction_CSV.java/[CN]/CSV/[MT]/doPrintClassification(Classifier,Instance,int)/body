{
  int prec=m_NumDecimals;
  Instance withMissing=(Instance)inst.copy();
  withMissing.setDataset(inst.dataset());
  inst=preProcessInstance(inst,withMissing,classifier);
  double predValue=classifier.classifyInstance(withMissing);
  append("" + (index + 1));
  if (inst.dataset().classAttribute().isNumeric()) {
    if (inst.classIsMissing())     append(m_Delimiter + "?");
 else     append(m_Delimiter + Utils.doubleToString(inst.classValue(),prec));
    if (Utils.isMissingValue(predValue))     append(m_Delimiter + "?");
 else     append(m_Delimiter + Utils.doubleToString(predValue,prec));
    if (Utils.isMissingValue(predValue) || inst.classIsMissing())     append(m_Delimiter + "?");
 else     append(m_Delimiter + Utils.doubleToString(predValue - inst.classValue(),prec));
  }
 else {
    append(m_Delimiter + ((int)inst.classValue() + 1) + ":"+ inst.toString(inst.classIndex()));
    if (Utils.isMissingValue(predValue))     append(m_Delimiter + "?");
 else     append(m_Delimiter + ((int)predValue + 1) + ":"+ inst.dataset().classAttribute().value((int)predValue));
    if (!Utils.isMissingValue(predValue) && !inst.classIsMissing() && ((int)predValue + 1 != (int)inst.classValue() + 1))     append(m_Delimiter + "+");
 else     append(m_Delimiter + "");
    if (m_OutputDistribution) {
      if (Utils.isMissingValue(predValue)) {
        append(m_Delimiter + "?");
      }
 else {
        append(m_Delimiter);
        double[] dist=classifier.distributionForInstance(withMissing);
        for (int n=0; n < dist.length; n++) {
          if (n > 0)           append(m_Delimiter);
          if (n == (int)predValue)           append("*");
          append(Utils.doubleToString(dist[n],prec));
        }
      }
    }
 else {
      if (Utils.isMissingValue(predValue))       append(m_Delimiter + "?");
 else       append(m_Delimiter + Utils.doubleToString(classifier.distributionForInstance(withMissing)[(int)predValue],prec));
    }
  }
  if (m_Attributes != null)   append(m_Delimiter + attributeValuesString(withMissing));
  append("\n");
}
