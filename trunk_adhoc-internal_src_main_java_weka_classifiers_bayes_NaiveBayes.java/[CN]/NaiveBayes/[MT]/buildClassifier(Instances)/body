{
  getCapabilities().testWithFail(instances);
  instances=new Instances(instances);
  instances.deleteWithMissingClass();
  m_NumClasses=instances.numClasses();
  m_Instances=new Instances(instances);
  if (m_UseDiscretization) {
    m_Disc=new weka.filters.supervised.attribute.Discretize();
    m_Disc.setInputFormat(m_Instances);
    m_Instances=weka.filters.Filter.useFilter(m_Instances,m_Disc);
  }
 else {
    m_Disc=null;
  }
  m_Distributions=new Estimator[m_Instances.numAttributes() - 1][m_Instances.numClasses()];
  m_ClassDistribution=new DiscreteEstimator(m_Instances.numClasses(),true);
  int attIndex=0;
  Enumeration enu=m_Instances.enumerateAttributes();
  while (enu.hasMoreElements()) {
    Attribute attribute=(Attribute)enu.nextElement();
    double numPrecision=DEFAULT_NUM_PRECISION;
    if (attribute.type() == Attribute.NUMERIC) {
      m_Instances.sort(attribute);
      if ((m_Instances.numInstances() > 0) && !m_Instances.instance(0).isMissing(attribute)) {
        double lastVal=m_Instances.instance(0).value(attribute);
        double currentVal, deltaSum=0;
        int distinct=0;
        for (int i=1; i < m_Instances.numInstances(); i++) {
          Instance currentInst=m_Instances.instance(i);
          if (currentInst.isMissing(attribute)) {
            break;
          }
          currentVal=currentInst.value(attribute);
          if (currentVal != lastVal) {
            deltaSum+=currentVal - lastVal;
            lastVal=currentVal;
            distinct++;
          }
        }
        if (distinct > 0) {
          numPrecision=deltaSum / distinct;
        }
      }
    }
    for (int j=0; j < m_Instances.numClasses(); j++) {
switch (attribute.type()) {
case Attribute.NUMERIC:
        if (m_UseKernelEstimator) {
          m_Distributions[attIndex][j]=new KernelEstimator(numPrecision);
        }
 else {
          m_Distributions[attIndex][j]=new NormalEstimator(numPrecision);
        }
      break;
case Attribute.NOMINAL:
    m_Distributions[attIndex][j]=new DiscreteEstimator(attribute.numValues(),true);
  break;
default :
throw new Exception("Attribute type unknown to NaiveBayes");
}
}
attIndex++;
}
Enumeration enumInsts=m_Instances.enumerateInstances();
while (enumInsts.hasMoreElements()) {
Instance instance=(Instance)enumInsts.nextElement();
updateClassifier(instance);
}
m_Instances=new Instances(m_Instances,0);
}
