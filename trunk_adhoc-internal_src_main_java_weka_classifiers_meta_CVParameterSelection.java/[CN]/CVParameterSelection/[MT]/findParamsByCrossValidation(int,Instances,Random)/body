{
  if (depth < m_CVParams.size()) {
    CVParameter cvParam=(CVParameter)m_CVParams.elementAt(depth);
    double upper;
switch ((int)(cvParam.m_Lower - cvParam.m_Upper + 0.5)) {
case 1:
      upper=m_NumAttributes;
    break;
case 2:
  upper=m_TrainFoldSize;
break;
default :
upper=cvParam.m_Upper;
break;
}
double increment=(upper - cvParam.m_Lower) / (cvParam.m_Steps - 1);
for (cvParam.m_ParamValue=cvParam.m_Lower; cvParam.m_ParamValue <= upper; cvParam.m_ParamValue+=increment) {
findParamsByCrossValidation(depth + 1,trainData,random);
}
}
 else {
Evaluation evaluation=new Evaluation(trainData);
String[] options=createOptions();
if (m_Debug) {
System.err.print("Setting options for " + m_Classifier.getClass().getName() + ":");
for (int i=0; i < options.length; i++) {
System.err.print(" " + options[i]);
}
System.err.println("");
}
((OptionHandler)m_Classifier).setOptions(options);
for (int j=0; j < m_NumFolds; j++) {
Instances train=trainData.trainCV(m_NumFolds,j,new Random(1));
Instances test=trainData.testCV(m_NumFolds,j);
m_Classifier.buildClassifier(train);
evaluation.setPriors(train);
evaluation.evaluateModel(m_Classifier,test);
}
double error=evaluation.errorRate();
if (m_Debug) {
System.err.println("Cross-validated error rate: " + Utils.doubleToString(error,6,4));
}
if ((m_BestPerformance == -99) || (error < m_BestPerformance)) {
m_BestPerformance=error;
m_BestClassifierOptions=createOptions();
}
}
}
