{
  Vector result=new Vector();
  Enumeration enm=super.listOptions();
  while (enm.hasMoreElements())   result.addElement(enm.nextElement());
  result.addElement(new Option("\tTurns off all checks - use with caution!\n" + "\tTurning them off assumes that data is purely numeric, doesn't\n" + "\tcontain any missing values, and has a nominal class. Turning them\n"+ "\toff also means that no header information will be stored if the\n"+ "\tmachine is linear. Finally, it also assumes that no instance has\n"+ "\ta weight equal to 0.\n"+ "\t(default: checks on)","no-checks",0,"-no-checks"));
  result.addElement(new Option("\tThe complexity constant C. (default 1)","C",1,"-C <double>"));
  result.addElement(new Option("\tWhether to 0=normalize/1=standardize/2=neither. " + "(default 0=normalize)","N",1,"-N"));
  result.addElement(new Option("\tThe tolerance parameter. " + "(default 1.0e-3)","L",1,"-L <double>"));
  result.addElement(new Option("\tThe epsilon for round-off error. " + "(default 1.0e-12)","P",1,"-P <double>"));
  result.addElement(new Option("\tFit logistic models to SVM outputs. ","M",0,"-M"));
  result.addElement(new Option("\tThe number of folds for the internal\n" + "\tcross-validation. " + "(default -1, use training data)","V",1,"-V <double>"));
  result.addElement(new Option("\tThe random number seed. " + "(default 1)","W",1,"-W <double>"));
  result.addElement(new Option("\tThe Kernel to use.\n" + "\t(default: weka.classifiers.functions.supportVector.PolyKernel)","K",1,"-K <classname and parameters>"));
  result.addElement(new Option("","",0,"\nOptions specific to kernel " + getKernel().getClass().getName() + ":"));
  enm=((OptionHandler)getKernel()).listOptions();
  while (enm.hasMoreElements())   result.addElement(enm.nextElement());
  return result.elements();
}
