{
  if (!m_checksTurnedOff) {
    getCapabilities().testWithFail(insts);
    insts=new Instances(insts);
    insts.deleteWithMissingClass();
    Instances data=new Instances(insts,insts.numInstances());
    for (int i=0; i < insts.numInstances(); i++) {
      if (insts.instance(i).weight() > 0)       data.add(insts.instance(i));
    }
    if (data.numInstances() == 0) {
      throw new Exception("No training instances left after removing " + "instances with weight 0!");
    }
    insts=data;
  }
  if (!m_checksTurnedOff) {
    m_Missing=new ReplaceMissingValues();
    m_Missing.setInputFormat(insts);
    insts=Filter.useFilter(insts,m_Missing);
  }
 else {
    m_Missing=null;
  }
  if (getCapabilities().handles(Capability.NUMERIC_ATTRIBUTES)) {
    boolean onlyNumeric=true;
    if (!m_checksTurnedOff) {
      for (int i=0; i < insts.numAttributes(); i++) {
        if (i != insts.classIndex()) {
          if (!insts.attribute(i).isNumeric()) {
            onlyNumeric=false;
            break;
          }
        }
      }
    }
    if (!onlyNumeric) {
      m_NominalToBinary=new NominalToBinary();
      m_NominalToBinary.setInputFormat(insts);
      insts=Filter.useFilter(insts,m_NominalToBinary);
    }
 else {
      m_NominalToBinary=null;
    }
  }
 else {
    m_NominalToBinary=null;
  }
  if (m_filterType == FILTER_STANDARDIZE) {
    m_Filter=new Standardize();
    m_Filter.setInputFormat(insts);
    insts=Filter.useFilter(insts,m_Filter);
  }
 else   if (m_filterType == FILTER_NORMALIZE) {
    m_Filter=new Normalize();
    m_Filter.setInputFormat(insts);
    insts=Filter.useFilter(insts,m_Filter);
  }
 else {
    m_Filter=null;
  }
  m_classIndex=insts.classIndex();
  m_classAttribute=insts.classAttribute();
  m_KernelIsLinear=(m_kernel instanceof PolyKernel) && (((PolyKernel)m_kernel).getExponent() == 1.0);
  Instances[] subsets=new Instances[insts.numClasses()];
  for (int i=0; i < insts.numClasses(); i++) {
    subsets[i]=new Instances(insts,insts.numInstances());
  }
  for (int j=0; j < insts.numInstances(); j++) {
    Instance inst=insts.instance(j);
    subsets[(int)inst.classValue()].add(inst);
  }
  for (int i=0; i < insts.numClasses(); i++) {
    subsets[i].compactify();
  }
  Random rand=new Random(m_randomSeed);
  m_classifiers=new BinarySMO[insts.numClasses()][insts.numClasses()];
  for (int i=0; i < insts.numClasses(); i++) {
    for (int j=i + 1; j < insts.numClasses(); j++) {
      m_classifiers[i][j]=new BinarySMO();
      m_classifiers[i][j].setKernel(Kernel.makeCopy(getKernel()));
      Instances data=new Instances(insts,insts.numInstances());
      for (int k=0; k < subsets[i].numInstances(); k++) {
        data.add(subsets[i].instance(k));
      }
      for (int k=0; k < subsets[j].numInstances(); k++) {
        data.add(subsets[j].instance(k));
      }
      data.compactify();
      data.randomize(rand);
      m_classifiers[i][j].buildClassifier(data,i,j,m_fitLogisticModels,m_numFolds,m_randomSeed);
    }
  }
}
