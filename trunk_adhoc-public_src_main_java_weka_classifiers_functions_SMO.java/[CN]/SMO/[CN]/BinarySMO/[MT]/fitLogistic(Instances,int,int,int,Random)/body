{
  FastVector atts=new FastVector(2);
  atts.addElement(new Attribute("pred"));
  FastVector attVals=new FastVector(2);
  attVals.addElement(insts.classAttribute().value(cl1));
  attVals.addElement(insts.classAttribute().value(cl2));
  atts.addElement(new Attribute("class",attVals));
  Instances data=new Instances("data",atts,insts.numInstances());
  data.setClassIndex(1);
  if (numFolds <= 0) {
    for (int j=0; j < insts.numInstances(); j++) {
      Instance inst=insts.instance(j);
      double[] vals=new double[2];
      vals[0]=SVMOutput(-1,inst);
      if (inst.classValue() == cl2) {
        vals[1]=1;
      }
      data.add(new DenseInstance(inst.weight(),vals));
    }
  }
 else {
    if (numFolds > insts.numInstances()) {
      numFolds=insts.numInstances();
    }
    insts=new Instances(insts);
    insts.randomize(random);
    insts.stratify(numFolds);
    for (int i=0; i < numFolds; i++) {
      Instances train=insts.trainCV(numFolds,i,random);
      BinarySMO smo=new BinarySMO();
      smo.setKernel(Kernel.makeCopy(SMO.this.m_kernel));
      smo.buildClassifier(train,cl1,cl2,false,-1,-1);
      Instances test=insts.testCV(numFolds,i);
      for (int j=0; j < test.numInstances(); j++) {
        double[] vals=new double[2];
        vals[0]=smo.SVMOutput(-1,test.instance(j));
        if (test.instance(j).classValue() == cl2) {
          vals[1]=1;
        }
        data.add(new DenseInstance(test.instance(j).weight(),vals));
      }
    }
  }
  m_logistic=new Logistic();
  m_logistic.buildClassifier(data);
}
