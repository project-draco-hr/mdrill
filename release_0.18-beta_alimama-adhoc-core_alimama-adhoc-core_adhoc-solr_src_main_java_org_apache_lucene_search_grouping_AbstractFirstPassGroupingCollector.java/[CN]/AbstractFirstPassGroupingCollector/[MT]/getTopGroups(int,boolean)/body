{
  if (groupOffset < 0) {
    throw new IllegalArgumentException("groupOffset must be >= 0 (got " + groupOffset + ")");
  }
  if (groupMap.size() <= groupOffset) {
    return null;
  }
  if (orderedGroups == null) {
    buildSortedSet();
  }
  final Collection<SearchGroup<GROUP_VALUE_TYPE>> result=new ArrayList<SearchGroup<GROUP_VALUE_TYPE>>();
  int upto=0;
  final int sortFieldCount=groupSort.getSort().length;
  for (  CollectedSearchGroup<GROUP_VALUE_TYPE> group : orderedGroups) {
    if (upto++ < groupOffset) {
      continue;
    }
    SearchGroup<GROUP_VALUE_TYPE> searchGroup=new SearchGroup<GROUP_VALUE_TYPE>();
    searchGroup.groupValue=group.groupValue;
    if (fillFields) {
      searchGroup.sortValues=new Object[sortFieldCount];
      for (int sortFieldIDX=0; sortFieldIDX < sortFieldCount; sortFieldIDX++) {
        searchGroup.sortValues[sortFieldIDX]=comparators[sortFieldIDX].value(group.comparatorSlot);
      }
    }
    result.add(searchGroup);
  }
  return result;
}
