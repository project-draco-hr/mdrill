{
  this.container=this.parse.createContainer(fields,baseDocs,this.reader,this.searcher,this.req);
  DocIterator iter=baseDocs.iterator();
  int doc=-1;
  if (this.container.isUseJoinSort()) {
    int cmpValue=0;
    while (iter.hasNext()) {
      doc=iter.nextDoc();
      if (!this.container.containsInJoins(doc)) {
        continue;
      }
      cmpValue=this.container.getJoinCompareValue(doc);
      SelectDetailRow row=SelectDetailRow.INSTANCE(doc,cmpValue);
      QueuePutUtils.put2QueueDetail(row,this.container.res,this.parse.limit_offset,this.container.cmpTermNum);
      this.recordCount.inc(1);
    }
  }
 else   if (this.container.isColumnSort()) {
    int cmpValue=0;
    while (iter.hasNext()) {
      doc=iter.nextDoc();
      if (!this.container.containsInJoins(doc)) {
        continue;
      }
      cmpValue=this.container.getColumnCompareValue(doc);
      SelectDetailRow row=SelectDetailRow.INSTANCE(doc,cmpValue);
      QueuePutUtils.put2QueueDetail(row,this.container.res,this.parse.limit_offset,this.container.cmpTermNum);
      this.recordCount.inc(1);
    }
  }
 else {
    while (iter.hasNext()) {
      doc=iter.nextDoc();
      if (!this.container.containsInJoins(doc)) {
        continue;
      }
      SelectDetailRow row=SelectDetailRow.INSTANCE(doc,doc);
      QueuePutUtils.put2QueueDetail(row,this.container.res,this.parse.limit_offset,this.container.cmpTermNum);
      this.recordCount.inc(1);
      if (this.container.res.size() >= this.parse.limit_offset) {
        break;
      }
    }
    while (iter.hasNext()) {
      doc=iter.nextDoc();
      if (!this.container.containsInJoins(doc)) {
        continue;
      }
      this.recordCount.inc(1);
    }
  }
  PriorityQueue<SelectDetailRow> topItems=this.transGroupValue(this.container.ufs,this.container.res,this.container.sortufs);
  this.container.free();
  return this.toNameList(topItems);
}
