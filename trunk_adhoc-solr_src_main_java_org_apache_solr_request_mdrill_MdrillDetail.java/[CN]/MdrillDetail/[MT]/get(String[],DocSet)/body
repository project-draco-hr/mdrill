{
  if (this.crcget == null) {
    this.container=this.parse.createContainer(fields,baseDocs,this.reader,this.searcher,this.req);
    DocIterator iter=baseDocs.iterator();
    int doc=-1;
    if (this.container.isUseJoinSort()) {
      int cmpValue=0;
      while (iter.hasNext()) {
        doc=iter.nextDoc();
        if (!this.container.containsInJoins(doc)) {
          continue;
        }
        cmpValue=this.container.getJoinCompareValue(doc);
        SelectDetailRow row=SelectDetailRow.INSTANCE(doc,cmpValue);
        QueuePutUtils.put2QueueDetail(row,this.container.res,this.parse.limit_offset,this.container.cmpTermNum);
        this.recordCount.inc(1);
      }
    }
 else     if (this.container.isColumnSort()) {
      int cmpValue=0;
      while (iter.hasNext()) {
        doc=iter.nextDoc();
        if (!this.container.containsInJoins(doc)) {
          continue;
        }
        cmpValue=this.container.getColumnCompareValue(doc);
        SelectDetailRow row=SelectDetailRow.INSTANCE(doc,cmpValue);
        QueuePutUtils.put2QueueDetail(row,this.container.res,this.parse.limit_offset,this.container.cmpTermNum);
        this.recordCount.inc(1);
      }
    }
 else {
      while (iter.hasNext()) {
        doc=iter.nextDoc();
        if (!this.container.containsInJoins(doc)) {
          continue;
        }
        SelectDetailRow row=SelectDetailRow.INSTANCE(doc,doc);
        QueuePutUtils.put2QueueDetail(row,this.container.res,this.parse.limit_offset,this.container.cmpTermNum);
        this.recordCount.inc(1);
        if (this.container.res.size() >= this.parse.limit_offset) {
          break;
        }
      }
      while (iter.hasNext()) {
        doc=iter.nextDoc();
        if (!this.container.containsInJoins(doc)) {
          continue;
        }
        this.recordCount.inc(1);
      }
    }
    PriorityQueue<SelectDetailRow> topItems=this.transGroupValue(this.container.res,this.container.sortufs);
    this.container.free();
    return this.toNameList(topItems);
  }
  String hostkey=String.valueOf(this.getkeyCrc());
  ConcurrentHashMap<Long,String> cache=MdrillUtils.CRC_CACHE_SIZE.remove(crcget + "@" + hostkey);
  NamedList rtn=new NamedList();
  Map<Long,String> crcvalue=new HashMap<Long,String>();
  rtn.add("fdtcre",crcvalue);
  if (cache != null) {
    String crcliststr=params.get("mdrill.crc.key.get.crclist");
    if (crcliststr != null) {
      FieldValueGet fvget=new FieldValueGet(fields,reader,searcher);
      String[] crclist=crcliststr.split(",");
      for (      String s : crclist) {
        Long crc=Long.parseLong(s);
        String v=cache.get(crc);
        if (v != null) {
          String cols[]=v.split(UniqConfig.GroupJoinString(),-1);
          if (cols.length >= 2) {
            int doc=Integer.parseInt(cols[0]);
            String[] fieldValue=fvget.doc(doc);
            SortGroupVal buff=new SortGroupVal();
            buff.groupbuff.append("-");
            buff.groupbuff.append(UniqConfig.GroupJoinString());
            buff.groupbuff.append("-");
            for (int j=0; j < fields.length; j++) {
              buff.groupbuff.append(UniqConfig.GroupJoinString());
              buff.groupbuff.append(EncodeUtils.encode(fieldValue[j]));
            }
            for (int j=(fields.length + 2); j < cols.length; j++) {
              buff.groupbuff.append(UniqConfig.GroupJoinString());
              buff.groupbuff.append(cols[j]);
            }
            crcvalue.put(crc,buff.groupbuff.toString());
          }
        }
      }
      fvget.free();
    }
  }
  return rtn;
}
