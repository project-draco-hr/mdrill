{
  ArrayList<SortGroupVal> tmp=new ArrayList<SortGroupVal>(1);
  ArrayList<SortGroupVal> newgroup=new ArrayList<SortGroupVal>(1);
  newgroup.add(buff);
  for (  HigoJoinInvert inv : joinInvert) {
    int fc=inv.fieldCount();
    LinkedBlockingQueue<GroupList> groupListCache=inv.getGroupListCache();
    GroupList base=GroupList.INSTANCE(groupListCache,fc);
    base.reset();
    GroupList[] groups=inv.fieldNum(doc,base);
    groupListCache.add(base);
    for (    SortGroupVal gbuff : newgroup) {
      for (      GroupList group : groups) {
        SortGroupVal tmpb=new SortGroupVal();
        tmpb.sortString=gbuff.sortString;
        tmpb.groupbuff.append(gbuff.groupbuff);
        for (int i=0; i < fc; i++) {
          tmpb.groupbuff.append(UniqConfig.GroupJoinString());
          tmpb.groupbuff.append(EncodeUtils.encode(inv.getTermNumValue(group.list[i],i)));
          if (this.SelectDetailSort != null && (offset + i) == this.SelectDetailSort.offset) {
            tmpb.sortString=inv.getTermNumValue(group.list[this.SelectDetailSort.offset],i);
          }
        }
        tmp.add(tmpb);
      }
    }
    for (    GroupList group : groups) {
      groupListCache.add(group);
    }
    newgroup=tmp;
    tmp=new ArrayList<SortGroupVal>();
    offset+=fc;
  }
  return newgroup;
}
