{
  DocIterator iter=baseDocs.iterator();
  this.recordCount.inc(baseDocs.size());
  int doc=-1;
  boolean isNumberVal=false;
  if (this.SelectDetailSort != null) {
    double cmpValue=0;
    HigoJoinInvert inv=this.joinInvert[this.SelectDetailSort.sortIndex];
    while (iter.hasNext()) {
      doc=iter.nextDoc();
      cmpValue=inv.fieldNumTop(doc,this.SelectDetailSort.selfOffset,this.isdesc);
      SelectDetailRow row=SelectDetailRow.INSTANCE(doc,cmpValue);
      MdrillPorcessUtils.put2QueueDetail(row,res,this.limit_offset,this.cmpTermNum);
    }
  }
 else   if (this.isNeedSort && sortufs.listIndex.length > 0) {
    double cmpValue=0;
    UnvertFile uf=sortufs.cols[0];
    UnInvertedField cif=uf.uif;
    boolean isnum=cif.dataType.equals(UnInvertedFieldUtils.Datatype.d_double) || cif.dataType.equals(UnInvertedFieldUtils.Datatype.d_long);
    isNumberVal=!cif.isMultiValued && isnum;
    if (isNumberVal) {
      while (iter.hasNext()) {
        doc=iter.nextDoc();
        cmpValue=cif.quickToDouble(doc,uf.filetype,uf.ti);
        SelectDetailRow row=SelectDetailRow.INSTANCE(doc,cmpValue);
        MdrillPorcessUtils.put2QueueDetail(row,res,this.limit_offset,this.cmpTermNum);
      }
    }
 else {
      while (iter.hasNext()) {
        doc=iter.nextDoc();
        cmpValue=cif.termNum(doc);
        SelectDetailRow row=SelectDetailRow.INSTANCE(doc,cmpValue);
        MdrillPorcessUtils.put2QueueDetail(row,res,this.limit_offset,this.cmpTermNum);
      }
    }
  }
 else {
    while (iter.hasNext()) {
      doc=iter.nextDoc();
      SelectDetailRow row=SelectDetailRow.INSTANCE(doc,doc);
      MdrillPorcessUtils.put2QueueDetail(row,res,this.limit_offset,this.cmpTermNum);
      if (res.size() >= this.limit_offset) {
        break;
      }
    }
  }
  return this.transGroupValue(ufs,res,sortufs,isNumberVal);
}
