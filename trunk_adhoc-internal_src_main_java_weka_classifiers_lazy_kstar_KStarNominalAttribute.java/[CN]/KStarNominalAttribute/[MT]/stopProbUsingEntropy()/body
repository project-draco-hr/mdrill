{
  String debug="(KStarNominalAttribute.stopProbUsingEntropy)";
  if (m_ClassType != Attribute.NOMINAL) {
    System.err.println("Error: " + debug + " attribute class must be nominal!");
    System.exit(1);
  }
  int itcount=0;
  double stopProb;
  double lower, upper, pstop;
  double bestminprob=0.0, bestpsum=0.0;
  double bestdiff=0.0, bestpstop=0.0;
  double currentdiff, lastdiff, stepsize, delta;
  KStarWrapper botvals=new KStarWrapper();
  KStarWrapper upvals=new KStarWrapper();
  KStarWrapper vals=new KStarWrapper();
  lower=0.0 + ROOT_FINDER_ACCURACY / 2.0;
  upper=1.0 - ROOT_FINDER_ACCURACY / 2.0;
  calculateEntropy(upper,upvals);
  calculateEntropy(lower,botvals);
  if (upvals.avgProb == 0) {
    calculateEntropy(lower,vals);
  }
 else {
    if ((upvals.randEntropy - upvals.actEntropy < botvals.randEntropy - botvals.actEntropy) && (botvals.randEntropy - botvals.actEntropy > FLOOR)) {
      bestpstop=pstop=lower;
      stepsize=INITIAL_STEP;
      bestminprob=botvals.minProb;
      bestpsum=botvals.avgProb;
    }
 else {
      bestpstop=pstop=upper;
      stepsize=-INITIAL_STEP;
      bestminprob=upvals.minProb;
      bestpsum=upvals.avgProb;
    }
    bestdiff=currentdiff=FLOOR;
    itcount=0;
    while (true) {
      itcount++;
      lastdiff=currentdiff;
      pstop+=stepsize;
      if (pstop <= lower) {
        pstop=lower;
        currentdiff=0.0;
        delta=-1.0;
      }
 else       if (pstop >= upper) {
        pstop=upper;
        currentdiff=0.0;
        delta=-1.0;
      }
 else {
        calculateEntropy(pstop,vals);
        currentdiff=vals.randEntropy - vals.actEntropy;
        if (currentdiff < FLOOR) {
          currentdiff=FLOOR;
          if ((Math.abs(stepsize) < INITIAL_STEP) && (bestdiff == FLOOR)) {
            bestpstop=lower;
            bestminprob=botvals.minProb;
            bestpsum=botvals.avgProb;
            break;
          }
        }
        delta=currentdiff - lastdiff;
      }
      if (currentdiff > bestdiff) {
        bestdiff=currentdiff;
        bestpstop=pstop;
        bestminprob=vals.minProb;
        bestpsum=vals.avgProb;
      }
      if (delta < 0) {
        if (Math.abs(stepsize) < ROOT_FINDER_ACCURACY) {
          break;
        }
 else {
          stepsize/=-2.0;
        }
      }
      if (itcount > ROOT_FINDER_MAX_ITER) {
        break;
      }
    }
  }
  m_SmallestProb=bestminprob;
  m_AverageProb=bestpsum;
switch (m_MissingMode) {
case M_DELETE:
    m_MissingProb=0.0;
  break;
case M_NORMAL:
m_MissingProb=1.0;
break;
case M_MAXDIFF:
m_MissingProb=m_SmallestProb;
break;
case M_AVERAGE:
m_MissingProb=m_AverageProb;
break;
}
if (Math.abs(bestpsum - (double)m_TotalCount) < EPSILON) {
stopProb=1.0;
}
 else {
stopProb=bestpstop;
}
return stopProb;
}
