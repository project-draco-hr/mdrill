{
  double minRadius=Double.POSITIVE_INFINITY, tmpRadius;
  Instance pivot, minPivot=null;
  int min1=-1, min2=-1;
  int[] minInstList=null;
  int merge=1;
  TempNode parent;
  while (list.size() > 1) {
    System.err.print("merge step: " + merge++ + "               \r");
    minRadius=Double.POSITIVE_INFINITY;
    min1=-1;
    min2=-1;
    for (int i=0; i < list.size(); i++) {
      TempNode first=(TempNode)list.get(i);
      for (int j=i + 1; j < list.size(); j++) {
        TempNode second=(TempNode)list.get(j);
        pivot=calcPivot(first,second,m_Instances);
        tmpRadius=calcRadius(first,second);
        if (tmpRadius < minRadius) {
          minRadius=tmpRadius;
          min1=i;
          min2=j;
          minPivot=pivot;
        }
      }
    }
    parent=new TempNode();
    parent.left=(TempNode)list.get(min1);
    parent.right=(TempNode)list.get(min2);
    minInstList=new int[parent.left.points.length + parent.right.points.length];
    System.arraycopy(parent.left.points,0,minInstList,0,parent.left.points.length);
    System.arraycopy(parent.right.points,0,minInstList,parent.left.points.length,parent.right.points.length);
    parent.points=minInstList;
    parent.anchor=minPivot;
    parent.radius=BallNode.calcRadius(parent.points,m_Instances,minPivot,m_DistanceFunction);
    list.remove(min1);
    list.remove(min2 - 1);
    list.add(parent);
  }
  System.err.println("");
  TempNode tmpRoot=(TempNode)list.get(0);
  if (m_InstList.length != tmpRoot.points.length)   throw new Exception("Root nodes instance list is of irregular length. " + "Please check code.");
  System.arraycopy(tmpRoot.points,0,m_InstList,0,tmpRoot.points.length);
  m_NumNodes=m_MaxDepth=m_NumLeaves=0;
  tmpRadius=BallNode.calcRadius(instList,m_Instances,tmpRoot.anchor,m_DistanceFunction);
  BallNode node=makeBallTree(tmpRoot,startIdx,endIdx,instList,0,tmpRadius);
  return node;
}
