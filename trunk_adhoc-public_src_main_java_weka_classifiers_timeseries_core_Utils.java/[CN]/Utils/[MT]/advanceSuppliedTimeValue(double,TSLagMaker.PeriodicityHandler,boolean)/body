{
  double result=valueToAdvance;
  int sign=(decrement) ? -1 : 1;
  result=valueToAdvance + dateBasedPeriodicity.deltaTime();
  if (dateBasedPeriodicity.getPeriodicity() != Periodicity.UNKNOWN) {
    Date d=new Date((long)valueToAdvance);
    Calendar c=new GregorianCalendar();
    c.setTime(d);
    do {
      if (dateBasedPeriodicity.getPeriodicity() == Periodicity.YEARLY) {
        c.add(Calendar.YEAR,1 * sign);
      }
 else       if (dateBasedPeriodicity.getPeriodicity() == Periodicity.QUARTERLY) {
        c.add(Calendar.MONTH,3 * sign);
      }
 else       if (dateBasedPeriodicity.getPeriodicity() == Periodicity.MONTHLY) {
        c.add(Calendar.MONTH,1 * sign);
      }
 else       if (dateBasedPeriodicity.getPeriodicity() == Periodicity.WEEKLY) {
        c.add(Calendar.WEEK_OF_YEAR,1 * sign);
      }
 else       if (dateBasedPeriodicity.getPeriodicity() == Periodicity.DAILY) {
        c.add(Calendar.DAY_OF_YEAR,1 * sign);
      }
 else       if (dateBasedPeriodicity.getPeriodicity() == Periodicity.HOURLY) {
        c.add(Calendar.HOUR_OF_DAY,1 * sign);
      }
      result=c.getTimeInMillis();
    }
 while (dateBasedPeriodicity.dateInSkipList(c.getTime()));
  }
 else {
    do {
      result+=(dateBasedPeriodicity.deltaTime() * sign);
    }
 while (dateBasedPeriodicity.dateInSkipList(new Date((long)result)));
  }
  return result;
}
