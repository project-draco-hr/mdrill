{
  Instances result=toReplace;
  Attribute timeStampAtt=null;
  TSLagMaker.PeriodicityHandler detected=null;
  List<Integer> missingTargetList=null;
  List<Integer> missingTimeStampList=null;
  List<String> missingTimeStampRows=null;
  if (missingReport.length > 0) {
    missingTargetList=(List<Integer>)missingReport[0];
    if (missingReport.length == 2) {
      missingTimeStampList=(List<Integer>)missingReport[1];
    }
    if (missingReport.length == 3) {
      missingTimeStampRows=(List<String>)missingReport[2];
    }
  }
  if (timeStampName != null && timeStampName.length() > 0) {
    timeStampAtt=toReplace.attribute(timeStampName);
    if (timeStampAtt != null) {
      detected=weka.classifiers.timeseries.core.TSLagMaker.determinePeriodicity(result,timeStampName,userHint);
      if (detected.getPeriodicity() != Periodicity.UNKNOWN) {
        insertMissing(toReplace,timeStampAtt,detected,skipEntries,missingTimeStampRows);
      }
    }
  }
  boolean ok=true;
  for (int i=0; i < toReplace.numInstances(); i++) {
    if (toReplace.instance(i).hasMissingValue()) {
      if (!dateOnly) {
        for (        String target : targets) {
          int attIndex=toReplace.attribute(target).index();
          if (toReplace.instance(i).isMissing(attIndex)) {
            ok=false;
            break;
          }
        }
        if (!ok) {
          break;
        }
      }
      if (timeStampAtt != null) {
        if (toReplace.instance(i).isMissing(timeStampAtt)) {
          ok=false;
          break;
        }
      }
    }
  }
  if (ok) {
    return result;
  }
  if (!dateOnly) {
    for (    String target : targets) {
      if (result.attribute(target) != null) {
        int attIndex=result.attribute(target).index();
        double lastNonMissing=weka.core.Utils.missingValue();
        for (int i=0; i < result.numInstances(); i++) {
          Instance current=result.instance(i);
          if (current.isMissing(attIndex)) {
            if (!weka.core.Utils.isMissingValue(lastNonMissing)) {
              double futureNonMissing=weka.core.Utils.missingValue();
              double x2=2;
              for (int j=i + 1; j < result.numInstances(); j++) {
                if (!result.instance(j).isMissing(attIndex)) {
                  futureNonMissing=result.instance(j).value(attIndex);
                  break;
                }
                x2++;
              }
              if (!weka.core.Utils.isMissingValue(futureNonMissing)) {
                double offset=lastNonMissing;
                double slope=(futureNonMissing - lastNonMissing) / x2;
                for (int j=i; j < i + x2; j++) {
                  if (result.instance(j).isMissing(attIndex)) {
                    double interpolated=(((j - i) + 1) * slope) + offset;
                    result.instance(j).setValue(attIndex,interpolated);
                    if (missingTargetList != null) {
                      missingTargetList.add(new Integer(j + 1));
                    }
                  }
                }
              }
            }
 else {
            }
          }
 else {
            lastNonMissing=current.value(attIndex);
          }
        }
      }
    }
  }
  if (timeStampAtt != null) {
    int attIndex=timeStampAtt.index();
    double firstNonMissing=result.instance(0).value(attIndex);
    double previousNonMissing=firstNonMissing;
    int firstNonMissingIndex=-1;
    boolean leadingMissingDates=weka.core.Utils.isMissingValue(firstNonMissing);
    for (int i=0; i < result.numInstances(); i++) {
      Instance current=result.instance(i);
      if (current.isMissing(attIndex)) {
        if (!weka.core.Utils.isMissingValue(previousNonMissing)) {
          double newV=advanceSuppliedTimeValue(previousNonMissing,detected);
          current.setValue(attIndex,newV);
          if (missingTimeStampList != null) {
            missingTimeStampList.add(new Integer(i + 1));
          }
        }
      }
 else       if (firstNonMissingIndex == -1) {
        firstNonMissingIndex=i;
        firstNonMissing=current.value(attIndex);
      }
      previousNonMissing=current.value(attIndex);
    }
    if (leadingMissingDates) {
      if (firstNonMissingIndex > 0) {
        for (int i=firstNonMissingIndex - 1; i >= 0; i--) {
          Instance current=result.instance(i);
          double newV=decrementSuppliedTimeValue(firstNonMissing,detected);
          current.setValue(attIndex,newV);
          if (missingTimeStampList != null) {
            missingTimeStampList.add(new Integer(i + 1));
          }
          firstNonMissing=newV;
        }
      }
    }
  }
  return result;
}
