{
  print("scheme uses instance weights");
  printAttributeSummary(nominalPredictor,numericPredictor,stringPredictor,datePredictor,relationalPredictor,multiInstance,classType);
  print("...");
  int numTrain=2 * getNumInstances(), numClasses=2, missingLevel=0;
  boolean predictorMissing=false, classMissing=false;
  boolean[] result=new boolean[2];
  Instances train=null;
  ASSearch[] search=null;
  ASEvaluation evaluationB=null;
  ASEvaluation evaluationI=null;
  AttributeSelection attselB=null;
  AttributeSelection attselI=null;
  boolean evalFail=false;
  try {
    train=makeTestDataset(42,numTrain,nominalPredictor ? getNumNominal() + 1 : 0,numericPredictor ? getNumNumeric() + 1 : 0,stringPredictor ? getNumString() : 0,datePredictor ? getNumDate() : 0,relationalPredictor ? getNumRelational() : 0,numClasses,classType,multiInstance);
    if (missingLevel > 0)     addMissing(train,missingLevel,predictorMissing,classMissing);
    search=ASSearch.makeCopies(getSearch(),2);
    evaluationB=ASEvaluation.makeCopies(getEvaluator(),1)[0];
    evaluationI=ASEvaluation.makeCopies(getEvaluator(),1)[0];
    attselB=search(search[0],evaluationB,train);
  }
 catch (  Exception ex) {
    throw new Error("Error setting up for tests: " + ex.getMessage());
  }
  try {
    for (int i=0; i < train.numInstances(); i++) {
      train.instance(i).setWeight(0);
    }
    Random random=new Random(1);
    for (int i=0; i < train.numInstances() / 2; i++) {
      int inst=Math.abs(random.nextInt()) % train.numInstances();
      int weight=Math.abs(random.nextInt()) % 10 + 1;
      train.instance(inst).setWeight(weight);
    }
    attselI=search(search[1],evaluationI,train);
    if (attselB.toResultsString().equals(attselI.toResultsString())) {
      evalFail=true;
      throw new Exception("evalFail");
    }
    println("yes");
    result[0]=true;
  }
 catch (  Exception ex) {
    println("no");
    result[0]=false;
    if (m_Debug) {
      println("\n=== Full Report ===");
      if (evalFail) {
        println("Results don't differ between non-weighted and " + "weighted instance models.");
        println("Here are the results:\n");
        println("\nboth methods\n");
        println(evaluationB.toString());
      }
 else {
        print("Problem during training");
        println(": " + ex.getMessage() + "\n");
      }
      println("Here is the dataset:\n");
      println("=== Train Dataset ===\n" + train.toString() + "\n");
      println("=== Train Weights ===\n");
      for (int i=0; i < train.numInstances(); i++) {
        println(" " + (i + 1) + "    "+ train.instance(i).weight());
      }
    }
  }
  return result;
}
