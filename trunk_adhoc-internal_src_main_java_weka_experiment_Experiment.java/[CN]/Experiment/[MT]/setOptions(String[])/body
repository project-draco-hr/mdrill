{
  String lowerString=Utils.getOption('L',options);
  if (lowerString.length() != 0) {
    setRunLower(Integer.parseInt(lowerString));
  }
 else {
    setRunLower(1);
  }
  String upperString=Utils.getOption('U',options);
  if (upperString.length() != 0) {
    setRunUpper(Integer.parseInt(upperString));
  }
 else {
    setRunUpper(10);
  }
  if (getRunLower() > getRunUpper()) {
    throw new Exception("Lower (" + getRunLower() + ") is greater than upper ("+ getRunUpper()+ ")");
  }
  setNotes(Utils.getOption('N',options));
  getDatasets().removeAllElements();
  String dataName;
  do {
    dataName=Utils.getOption('T',options);
    if (dataName.length() != 0) {
      File dataset=new File(dataName);
      getDatasets().addElement(dataset);
    }
  }
 while (dataName.length() != 0);
  if (getDatasets().size() == 0) {
    throw new Exception("Required: -T <arff file name>");
  }
  String rlName=Utils.getOption('D',options);
  if (rlName.length() == 0) {
    throw new Exception("Required: -D <ResultListener class name>");
  }
  rlName=rlName.trim();
  int breakLoc=rlName.indexOf(' ');
  String clName=rlName;
  String rlOptionsString="";
  String[] rlOptions=null;
  if (breakLoc != -1) {
    clName=rlName.substring(0,breakLoc);
    rlOptionsString=rlName.substring(breakLoc).trim();
    rlOptions=Utils.splitOptions(rlOptionsString);
  }
  setResultListener((ResultListener)Utils.forName(ResultListener.class,clName,rlOptions));
  String rpName=Utils.getOption('P',options);
  if (rpName.length() == 0) {
    throw new Exception("Required: -P <ResultProducer class name>");
  }
  setResultProducer((ResultProducer)Utils.forName(ResultProducer.class,rpName,Utils.partitionOptions(options)));
}
