{
  String ft="string";
  if (filetypeMap != null && filetypeMap.containsKey(key)) {
    ft=filetypeMap.get(key);
  }
  key=parseFqAlias(key,colMap,colMap2,tblname);
  boolean isdate=false;
  if (ft.equals("tdate") || ft.equals("date")) {
    isdate=true;
  }
  boolean isNumber=false;
  if (ft.equals("tlong") || ft.equals("tdouble") || ft.equals("tint")|| ft.equals("tfloat")) {
    isNumber=true;
  }
  if (key.equals("thedate")) {
    String add="";
    if (isPartionByPt) {
      part="pt";
      add="000000";
    }
switch (operate) {
case 1:
{
        return "(" + part + "='"+ value2+ add+ "' )";
      }
case 2:
{
      return "(" + part + "<>'"+ value2+ add+ "' )";
    }
case 3:
{
    return "(" + part + ">="+ value2+ add+ " )";
  }
case 4:
{
  return "(" + part + "<="+ value2+ add+ " )";
}
case 13:
{
return "(" + part + ">"+ value2+ add+ " )";
}
case 14:
{
return "(" + part + "<"+ value2+ add+ " )";
}
case 30:
{
return "(" + part + ">"+ value2+ add+ " )";
}
case 31:
{
return "(" + part + "<"+ value2+ add+ " )";
}
case 5:
case 6:
case 7:
case 8:
{
boolean isNotIn=(operate == 7 || operate == 8);
String[] listStrs=value2.split(",");
StringBuffer sb=new StringBuffer();
sb.append("(");
String joinchar="";
for (String v : listStrs) {
sb.append(joinchar);
if (isNotIn) {
sb.append(part + "<>" + "'"+ v+ add+ "'");
}
 else {
sb.append(part + "=" + "'"+ v+ add+ "'");
}
joinchar=" or ";
}
sb.append(")");
return sb.toString();
}
case 9:
{
String[] listStrs=value2.split(",");
if (listStrs.length == 2 && listStrs[0] != null && listStrs[1] != null) {
if (listStrs[0].equals(listStrs[1])) {
return "(" + part + "="+ listStrs[0]+ add+ " )";
}
 else {
return "(" + "(" + part + ">="+ listStrs[0]+ add+ " and "+ part+ "<="+ listStrs[1]+ add+ " )"+ ")";
}
}
}
}
}
String usequot="";
if (isdate) {
usequot="'";
}
switch (operate) {
case 1:
{
if (value2.indexOf("*") >= 0) {
return "transhigo_udf(" + key + ",'"+ ft+ "')"+ " like '"+ value2.replaceAll("\\*","%")+ "'";
}
if (isdate) {
return "transhigo_udf(" + key + ",'"+ ft+ "')"+ "='"+ TdateFormat.ensureTdateForSearch(value2)+ "'";
}
if (isNumber) {
return "" + key + ""+ "="+ value2+ "";
}
return "transhigo_udf(" + key + ",'"+ ft+ "')"+ "='"+ value2+ "'";
}
case 32:
{
return "transhigo_udf(" + key + ",'"+ ft+ "')"+ " like '%"+ value2.replaceAll("\\*","%")+ "%'";
}
case 33:
{
return "transhigo_udf(" + key + ",'"+ ft+ "')"+ " not like '%"+ value2.replaceAll("\\*","%")+ "%'";
}
case 2:
{
if (isdate) {
return "transhigo_udf(" + key + ",'"+ ft+ "')"+ "<>'"+ TdateFormat.ensureTdateForSearch(value2)+ "'";
}
if (isNumber) {
return "" + key + ""+ "<>"+ value2+ "";
}
return "transhigo_udf(" + key + ",'"+ ft+ "')"+ "<>'"+ value2+ "'";
}
case 3:
{
if (isdate) {
return "transhigo_udf(" + key + ",'"+ ft+ "')"+ ">='"+ TdateFormat.ensureTdateForSearch(value2)+ "' and transhigo_udf("+ key+ ",'"+ ft+ "')"+ "<'2098-09-09T00:00:00Z'";
}
return "transhigo_udf(" + key + ",'"+ ft+ "')"+ ">="+ value2;
}
case 4:
{
if (isdate) {
return "transhigo_udf(" + key + ",'"+ ft+ "')"+ "<='"+ TdateFormat.ensureTdateForSearch(value2)+ "' and transhigo_udf("+ key+ ",'"+ ft+ "')"+ "<'2098-09-09T00:00:00Z'";
}
return "transhigo_udf(" + key + ",'"+ ft+ "')"+ "<="+ value2;
}
case 13:
{
if (isdate) {
return "transhigo_udf(" + key + ",'"+ ft+ "')"+ ">'"+ TdateFormat.ensureTdateForSearch(value2)+ "' and transhigo_udf("+ key+ ",'"+ ft+ "')"+ "<'2098-09-09T00:00:00Z'";
}
return "transhigo_udf(" + key + ",'"+ ft+ "')"+ ">"+ value2;
}
case 14:
{
if (isdate) {
return "transhigo_udf(" + key + ",'"+ ft+ "')"+ "<'"+ TdateFormat.ensureTdateForSearch(value2)+ "' and transhigo_udf("+ key+ ",'"+ ft+ "')"+ "<'2098-09-09T00:00:00Z'";
}
return "transhigo_udf(" + key + ",'"+ ft+ "')"+ "<"+ value2;
}
case 30:
{
if (isdate) {
return "transhigo_udf(" + key + ",'"+ ft+ "')"+ ">'"+ TdateFormat.ensureTdateForSearch(value2)+ "' and transhigo_udf("+ key+ ",'"+ ft+ "')"+ "<'2098-09-09T00:00:00Z'";
}
return "transhigo_udf(" + key + ",'"+ ft+ "')"+ ">"+ value2;
}
case 31:
{
if (isdate) {
return "transhigo_udf(" + key + ",'"+ ft+ "')"+ "<'"+ TdateFormat.ensureTdateForSearch(value2)+ "' and transhigo_udf("+ key+ ",'"+ ft+ "')"+ "<'2098-09-09T00:00:00Z'";
}
return "transhigo_udf(" + key + ",'"+ ft+ "')"+ "<"+ value2;
}
case 5:
case 6:
case 7:
case 8:
{
boolean isNotIn=(operate == 7 || operate == 8);
String[] listStrs=value2.split(",");
if (listStrs.length > 10 && !isNotIn) {
return uploadInHdfsForHive(listStrs,key,shard);
}
 else {
StringBuffer sb=new StringBuffer();
sb.append("(");
String joinchar="";
for (String v : listStrs) {
sb.append(joinchar);
if (isNotIn) {
sb.append("transhigo_udf(" + key + ",'"+ ft+ "')"+ "<>"+ "'"+ v+ "'");
}
 else {
sb.append("transhigo_udf(" + key + ",'"+ ft+ "')"+ "="+ "'"+ v+ "'");
}
joinchar=" or ";
}
sb.append(")");
return sb.toString();
}
}
case 9:
{
String[] listStrs=value2.split(",");
if (listStrs.length == 2 && listStrs[0] != null && listStrs[1] != null) {
if (listStrs[0].equals(listStrs[1])) {
if (isdate) {
return "transhigo_udf(" + key + ",'"+ ft+ "')"+ "="+ usequot+ ""+ TdateFormat.ensureTdateForSearch(listStrs[0])+ usequot;
}
if (isNumber) {
return "" + key + ""+ "="+ listStrs[0]+ "";
}
return "transhigo_udf(" + key + ",'"+ ft+ "')"+ "="+ usequot+ ""+ listStrs[0]+ usequot;
}
 else {
if (isdate) {
return "(" + "transhigo_udf(" + key + ",'"+ ft+ "')"+ ">="+ usequot+ TdateFormat.ensureTdateForSearch(listStrs[0])+ usequot+ " and "+ "transhigo_udf("+ key+ ",'"+ ft+ "')"+ "<="+ usequot+ TdateFormat.ensureTdateForSearch(listStrs[1])+ usequot+ " )";
}
return "(" + "transhigo_udf(" + key + ",'"+ ft+ "')"+ ">="+ usequot+ listStrs[0]+ usequot+ " and "+ "transhigo_udf("+ key+ ",'"+ ft+ "')"+ "<="+ usequot+ listStrs[1]+ usequot+ " )";
}
}
break;
}
}
return null;
}
