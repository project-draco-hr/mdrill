{
  print("classifier ignores test instance class vals");
  printAttributeSummary(nominalPredictor,numericPredictor,stringPredictor,datePredictor,relationalPredictor,multiInstance,classType);
  print("...");
  int numTrain=2 * getNumInstances(), numTest=getNumInstances(), numClasses=2, missingLevel=0;
  boolean predictorMissing=false, classMissing=false;
  boolean[] result=new boolean[2];
  Instances train=null;
  Instances test=null;
  Classifier[] classifiers=null;
  boolean evalFail=false;
  try {
    train=makeTestDataset(42,numTrain,nominalPredictor ? getNumNominal() + 1 : 0,numericPredictor ? getNumNumeric() + 1 : 0,stringPredictor ? getNumString() : 0,datePredictor ? getNumDate() : 0,relationalPredictor ? getNumRelational() : 0,numClasses,classType,multiInstance);
    test=makeTestDataset(24,numTest,nominalPredictor ? getNumNominal() + 1 : 0,numericPredictor ? getNumNumeric() + 1 : 0,stringPredictor ? getNumString() : 0,datePredictor ? getNumDate() : 0,relationalPredictor ? getNumRelational() : 0,numClasses,classType,multiInstance);
    if (missingLevel > 0) {
      addMissing(train,missingLevel,predictorMissing,classMissing);
      addMissing(test,Math.min(missingLevel,50),predictorMissing,classMissing);
    }
    classifiers=AbstractClassifier.makeCopies(getClassifier(),2);
    classifiers[0].buildClassifier(train);
    classifiers[1].buildClassifier(train);
  }
 catch (  Exception ex) {
    throw new Error("Error setting up for tests: " + ex.getMessage());
  }
  try {
    for (int i=0; i < test.numInstances(); i++) {
      Instance testInst=test.instance(i);
      Instance classMissingInst=(Instance)testInst.copy();
      classMissingInst.setDataset(test);
      classMissingInst.setClassMissing();
      double[] dist0=classifiers[0].distributionForInstance(testInst);
      double[] dist1=classifiers[1].distributionForInstance(classMissingInst);
      for (int j=0; j < dist0.length; j++) {
        if (Double.isNaN(dist0[j]) && Double.isNaN(dist1[j])) {
          if (getDebug())           System.out.println("Both predictions are NaN!");
          continue;
        }
        if (dist0[j] != dist1[j]) {
          throw new Exception("Prediction different for instance " + (i + 1));
        }
      }
    }
    println("yes");
    result[0]=true;
  }
 catch (  Exception ex) {
    println("no");
    result[0]=false;
    if (m_Debug) {
      println("\n=== Full Report ===");
      if (evalFail) {
        println("Results differ between non-missing and " + "missing test class values.");
      }
 else {
        print("Problem during testing");
        println(": " + ex.getMessage() + "\n");
      }
      println("Here are the datasets:\n");
      println("=== Train Dataset ===\n" + train.toString() + "\n");
      println("=== Train Weights ===\n");
      for (int i=0; i < train.numInstances(); i++) {
        println(" " + (i + 1) + "    "+ train.instance(i).weight());
      }
      println("=== Test Dataset ===\n" + test.toString() + "\n\n");
      println("(test weights all 1.0\n");
    }
  }
  return result;
}
