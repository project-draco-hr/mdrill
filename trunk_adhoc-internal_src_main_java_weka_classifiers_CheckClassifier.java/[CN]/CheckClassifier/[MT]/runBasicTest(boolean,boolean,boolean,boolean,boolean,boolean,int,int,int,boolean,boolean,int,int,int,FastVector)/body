{
  boolean[] result=new boolean[2];
  Instances train=null;
  Instances test=null;
  Classifier classifier=null;
  Evaluation evaluation=null;
  boolean built=false;
  try {
    train=makeTestDataset(42,numTrain,nominalPredictor ? getNumNominal() : 0,numericPredictor ? getNumNumeric() : 0,stringPredictor ? getNumString() : 0,datePredictor ? getNumDate() : 0,relationalPredictor ? getNumRelational() : 0,numClasses,classType,classIndex,multiInstance);
    test=makeTestDataset(24,numTest,nominalPredictor ? getNumNominal() : 0,numericPredictor ? getNumNumeric() : 0,stringPredictor ? getNumString() : 0,datePredictor ? getNumDate() : 0,relationalPredictor ? getNumRelational() : 0,numClasses,classType,classIndex,multiInstance);
    if (missingLevel > 0) {
      addMissing(train,missingLevel,predictorMissing,classMissing);
      addMissing(test,Math.min(missingLevel,50),predictorMissing,classMissing);
    }
    classifier=AbstractClassifier.makeCopies(getClassifier(),1)[0];
    evaluation=new Evaluation(train);
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    throw new Error("Error setting up for tests: " + ex.getMessage());
  }
  try {
    classifier.buildClassifier(train);
    built=true;
    if (!testWRTZeroR(classifier,evaluation,train,test)[0]) {
      result[0]=true;
      result[1]=true;
      throw new Exception("Scheme performs worse than ZeroR");
    }
    println("yes");
    result[0]=true;
  }
 catch (  Exception ex) {
    boolean acceptable=false;
    String msg;
    if (ex.getMessage() == null)     msg="";
 else     msg=ex.getMessage().toLowerCase();
    if (msg.indexOf("not in classpath") > -1)     m_ClasspathProblems=true;
    if (msg.indexOf("worse than zeror") >= 0) {
      println("warning: performs worse than ZeroR");
      result[0]=true;
      result[1]=true;
    }
 else {
      for (int i=0; i < accepts.size(); i++) {
        if (msg.indexOf((String)accepts.elementAt(i)) >= 0) {
          acceptable=true;
        }
      }
      println("no" + (acceptable ? " (OK error message)" : ""));
      result[1]=acceptable;
    }
    if (m_Debug) {
      println("\n=== Full Report ===");
      print("Problem during");
      if (built) {
        print(" testing");
      }
 else {
        print(" training");
      }
      println(": " + ex.getMessage() + "\n");
      if (!acceptable) {
        if (accepts.size() > 0) {
          print("Error message doesn't mention ");
          for (int i=0; i < accepts.size(); i++) {
            if (i != 0) {
              print(" or ");
            }
            print('"' + (String)accepts.elementAt(i) + '"');
          }
        }
        println("here are the datasets:\n");
        println("=== Train Dataset ===\n" + train.toString() + "\n");
        println("=== Test Dataset ===\n" + test.toString() + "\n\n");
      }
    }
  }
  return result;
}
