{
  print("incremental training produces the same results" + " as batch training");
  printAttributeSummary(nominalPredictor,numericPredictor,stringPredictor,datePredictor,relationalPredictor,multiInstance,classType);
  print("...");
  int numTrain=getNumInstances(), numTest=getNumInstances(), numClasses=2, missingLevel=0;
  boolean predictorMissing=false, classMissing=false;
  boolean[] result=new boolean[2];
  Instances train=null;
  Instances test=null;
  Classifier[] classifiers=null;
  Evaluation evaluationB=null;
  Evaluation evaluationI=null;
  boolean built=false;
  try {
    train=makeTestDataset(42,numTrain,nominalPredictor ? getNumNominal() : 0,numericPredictor ? getNumNumeric() : 0,stringPredictor ? getNumString() : 0,datePredictor ? getNumDate() : 0,relationalPredictor ? getNumRelational() : 0,numClasses,classType,multiInstance);
    test=makeTestDataset(24,numTest,nominalPredictor ? getNumNominal() : 0,numericPredictor ? getNumNumeric() : 0,stringPredictor ? getNumString() : 0,datePredictor ? getNumDate() : 0,relationalPredictor ? getNumRelational() : 0,numClasses,classType,multiInstance);
    if (missingLevel > 0) {
      addMissing(train,missingLevel,predictorMissing,classMissing);
      addMissing(test,Math.min(missingLevel,50),predictorMissing,classMissing);
    }
    classifiers=AbstractClassifier.makeCopies(getClassifier(),2);
    evaluationB=new Evaluation(train);
    evaluationI=new Evaluation(train);
    classifiers[0].buildClassifier(train);
    testWRTZeroR(classifiers[0],evaluationB,train,test);
  }
 catch (  Exception ex) {
    throw new Error("Error setting up for tests: " + ex.getMessage());
  }
  try {
    classifiers[1].buildClassifier(new Instances(train,0));
    for (int i=0; i < train.numInstances(); i++) {
      ((UpdateableClassifier)classifiers[1]).updateClassifier(train.instance(i));
    }
    built=true;
    testWRTZeroR(classifiers[1],evaluationI,train,test);
    if (!evaluationB.equals(evaluationI)) {
      println("no");
      result[0]=false;
      if (m_Debug) {
        println("\n=== Full Report ===");
        println("Results differ between batch and " + "incrementally built models.\n" + "Depending on the classifier, this may be OK");
        println("Here are the results:\n");
        println(evaluationB.toSummaryString("\nbatch built results\n",true));
        println(evaluationI.toSummaryString("\nincrementally built results\n",true));
        println("Here are the datasets:\n");
        println("=== Train Dataset ===\n" + train.toString() + "\n");
        println("=== Test Dataset ===\n" + test.toString() + "\n\n");
      }
    }
 else {
      println("yes");
      result[0]=true;
    }
  }
 catch (  Exception ex) {
    result[0]=false;
    print("Problem during");
    if (built)     print(" testing");
 else     print(" training");
    println(": " + ex.getMessage() + "\n");
  }
  return result;
}
