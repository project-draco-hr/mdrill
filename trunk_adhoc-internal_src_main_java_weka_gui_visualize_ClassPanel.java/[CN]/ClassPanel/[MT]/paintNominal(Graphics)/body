{
  setFonts(gx);
  int numClasses;
  numClasses=m_Instances.attribute(m_cIndex).numValues();
  int maxLabelLen=0;
  int idx=0;
  int legendHeight;
  int w=this.getWidth();
  int hf=m_labelMetrics.getAscent();
  for (int i=0; i < numClasses; i++) {
    if (m_Instances.attribute(m_cIndex).value(i).length() > maxLabelLen) {
      maxLabelLen=m_Instances.attribute(m_cIndex).value(i).length();
      idx=i;
    }
  }
  maxLabelLen=m_labelMetrics.stringWidth(m_Instances.attribute(m_cIndex).value(idx));
  if (((w - (2 * m_HorizontalPad)) / (maxLabelLen + 5)) >= numClasses) {
    legendHeight=1;
  }
 else {
    legendHeight=2;
  }
  int x=m_HorizontalPad;
  int y=1 + hf;
  int ci, mp;
  Color pc;
  int numToDo=((legendHeight == 1) ? numClasses : (numClasses / 2));
  for (int i=0; i < numToDo; i++) {
    gx.setColor((Color)m_colorList.elementAt(i));
    if ((numToDo * maxLabelLen) > (w - (m_HorizontalPad * 2))) {
      String val;
      val=m_Instances.attribute(m_cIndex).value(i);
      int sw=m_labelMetrics.stringWidth(val);
      int rm=0;
      if (sw > ((w - (m_HorizontalPad * 2)) / (numToDo))) {
        int incr=(sw / val.length());
        rm=(sw - ((w - (m_HorizontalPad * 2)) / numToDo)) / incr;
        if (rm <= 0) {
          rm=0;
        }
        if (rm >= val.length()) {
          rm=val.length() - 1;
        }
        val=val.substring(0,val.length() - rm);
        sw=m_labelMetrics.stringWidth(val);
      }
      NomLabel jj=new NomLabel(val,i);
      jj.setFont(gx.getFont());
      jj.setSize(m_labelMetrics.stringWidth(jj.getText()),m_labelMetrics.getAscent() + 4);
      this.add(jj);
      jj.setLocation(x,y);
      jj.setForeground((Color)m_colorList.elementAt(i % m_colorList.size()));
      x+=sw + 2;
    }
 else {
      NomLabel jj;
      jj=new NomLabel(m_Instances.attribute(m_cIndex).value(i),i);
      jj.setFont(gx.getFont());
      jj.setSize(m_labelMetrics.stringWidth(jj.getText()),m_labelMetrics.getAscent() + 4);
      this.add(jj);
      jj.setLocation(x,y);
      jj.setForeground((Color)m_colorList.elementAt(i % m_colorList.size()));
      x+=((w - (m_HorizontalPad * 2)) / numToDo);
    }
  }
  x=m_HorizontalPad;
  y=1 + hf + 5+ hf;
  for (int i=numToDo; i < numClasses; i++) {
    gx.setColor((Color)m_colorList.elementAt(i));
    if (((numClasses - numToDo + 1) * maxLabelLen) > (w - (m_HorizontalPad * 2))) {
      String val;
      val=m_Instances.attribute(m_cIndex).value(i);
      int sw=m_labelMetrics.stringWidth(val);
      int rm=0;
      if (sw > ((w - (m_HorizontalPad * 2)) / (numClasses - numToDo + 1))) {
        int incr=(sw / val.length());
        rm=(sw - ((w - (m_HorizontalPad * 2)) / (numClasses - numToDo))) / incr;
        if (rm <= 0) {
          rm=0;
        }
        if (rm >= val.length()) {
          rm=val.length() - 1;
        }
        val=val.substring(0,val.length() - rm);
        sw=m_labelMetrics.stringWidth(val);
      }
      NomLabel jj=new NomLabel(val,i);
      jj.setFont(gx.getFont());
      jj.setSize(m_labelMetrics.stringWidth(jj.getText()),m_labelMetrics.getAscent() + 4);
      this.add(jj);
      jj.setLocation(x,y);
      jj.setForeground((Color)m_colorList.elementAt(i % m_colorList.size()));
      x+=sw + 2;
    }
 else {
      NomLabel jj;
      jj=new NomLabel(m_Instances.attribute(m_cIndex).value(i),i);
      jj.setFont(gx.getFont());
      jj.setSize(m_labelMetrics.stringWidth(jj.getText()),m_labelMetrics.getAscent() + 4);
      this.add(jj);
      jj.setLocation(x,y);
      jj.setForeground((Color)m_colorList.elementAt(i % m_colorList.size()));
      x+=((w - (m_HorizontalPad * 2)) / (numClasses - numToDo));
    }
  }
}
