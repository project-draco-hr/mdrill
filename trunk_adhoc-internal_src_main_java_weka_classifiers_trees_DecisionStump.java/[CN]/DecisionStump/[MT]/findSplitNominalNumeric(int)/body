{
  double bestVal=Double.MAX_VALUE, currVal;
  double[] sumsSquaresPerValue=new double[m_Instances.attribute(index).numValues()], sumsPerValue=new double[m_Instances.attribute(index).numValues()], weightsPerValue=new double[m_Instances.attribute(index).numValues()];
  double totalSumSquaresW=0, totalSumW=0, totalSumOfWeightsW=0, totalSumOfWeights=0, totalSum=0;
  double[] sumsSquares=new double[3], sumOfWeights=new double[3];
  double[][] bestDist=new double[3][1];
  for (int i=0; i < m_Instances.numInstances(); i++) {
    Instance inst=m_Instances.instance(i);
    if (inst.isMissing(index)) {
      m_Distribution[2][0]+=inst.classValue() * inst.weight();
      sumsSquares[2]+=inst.classValue() * inst.classValue() * inst.weight();
      sumOfWeights[2]+=inst.weight();
    }
 else {
      weightsPerValue[(int)inst.value(index)]+=inst.weight();
      sumsPerValue[(int)inst.value(index)]+=inst.classValue() * inst.weight();
      sumsSquaresPerValue[(int)inst.value(index)]+=inst.classValue() * inst.classValue() * inst.weight();
    }
    totalSumOfWeights+=inst.weight();
    totalSum+=inst.classValue() * inst.weight();
  }
  if (totalSumOfWeights <= 0) {
    return bestVal;
  }
  for (int i=0; i < m_Instances.attribute(index).numValues(); i++) {
    totalSumOfWeightsW+=weightsPerValue[i];
    totalSumSquaresW+=sumsSquaresPerValue[i];
    totalSumW+=sumsPerValue[i];
  }
  for (int i=0; i < m_Instances.attribute(index).numValues(); i++) {
    m_Distribution[0][0]=sumsPerValue[i];
    sumsSquares[0]=sumsSquaresPerValue[i];
    sumOfWeights[0]=weightsPerValue[i];
    m_Distribution[1][0]=totalSumW - sumsPerValue[i];
    sumsSquares[1]=totalSumSquaresW - sumsSquaresPerValue[i];
    sumOfWeights[1]=totalSumOfWeightsW - weightsPerValue[i];
    currVal=variance(m_Distribution,sumsSquares,sumOfWeights);
    if (currVal < bestVal) {
      bestVal=currVal;
      m_SplitPoint=(double)i;
      for (int j=0; j < 3; j++) {
        if (sumOfWeights[j] > 0) {
          bestDist[j][0]=m_Distribution[j][0] / sumOfWeights[j];
        }
 else {
          bestDist[j][0]=totalSum / totalSumOfWeights;
        }
      }
    }
  }
  m_Distribution=bestDist;
  return bestVal;
}
