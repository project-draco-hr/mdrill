{
  if (m_ZeroR != null) {
    StringBuffer buf=new StringBuffer();
    buf.append(this.getClass().getName().replaceAll(".*\\.","") + "\n");
    buf.append(this.getClass().getName().replaceAll(".*\\.","").replaceAll(".","=") + "\n\n");
    buf.append("Warning: No model could be built, hence ZeroR model is used:\n\n");
    buf.append(m_ZeroR.toString());
    return buf.toString();
  }
  if (m_Instances == null) {
    return "Decision Stump: No model built yet.";
  }
  try {
    StringBuffer text=new StringBuffer();
    text.append("Decision Stump\n\n");
    text.append("Classifications\n\n");
    Attribute att=m_Instances.attribute(m_AttIndex);
    if (att.isNominal()) {
      text.append(att.name() + " = " + att.value((int)m_SplitPoint)+ " : ");
      text.append(printClass(m_Distribution[0]));
      text.append(att.name() + " != " + att.value((int)m_SplitPoint)+ " : ");
      text.append(printClass(m_Distribution[1]));
    }
 else {
      text.append(att.name() + " <= " + m_SplitPoint+ " : ");
      text.append(printClass(m_Distribution[0]));
      text.append(att.name() + " > " + m_SplitPoint+ " : ");
      text.append(printClass(m_Distribution[1]));
    }
    text.append(att.name() + " is missing : ");
    text.append(printClass(m_Distribution[2]));
    if (m_Instances.classAttribute().isNominal()) {
      text.append("\nClass distributions\n\n");
      if (att.isNominal()) {
        text.append(att.name() + " = " + att.value((int)m_SplitPoint)+ "\n");
        text.append(printDist(m_Distribution[0]));
        text.append(att.name() + " != " + att.value((int)m_SplitPoint)+ "\n");
        text.append(printDist(m_Distribution[1]));
      }
 else {
        text.append(att.name() + " <= " + m_SplitPoint+ "\n");
        text.append(printDist(m_Distribution[0]));
        text.append(att.name() + " > " + m_SplitPoint+ "\n");
        text.append(printDist(m_Distribution[1]));
      }
      text.append(att.name() + " is missing\n");
      text.append(printDist(m_Distribution[2]));
    }
    return text.toString();
  }
 catch (  Exception e) {
    return "Can't print decision stump classifier!";
  }
}
