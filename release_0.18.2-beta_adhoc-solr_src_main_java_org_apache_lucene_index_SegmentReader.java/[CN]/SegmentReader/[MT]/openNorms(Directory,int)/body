{
  long nextNormSeek=SegmentNorms.NORMS_HEADER.length;
  int maxDoc=maxDoc();
  for (int i=0; i < core.fieldInfos.size(); i++) {
    FieldInfo fi=core.fieldInfos.fieldInfo(i);
    if (norms.containsKey(fi.name)) {
      continue;
    }
    if (fi.isIndexed && !fi.omitNorms) {
      Directory d=directory();
      String fileName=si.getNormFileName(fi.number);
      if (!si.hasSeparateNorms(fi.number)) {
        d=cfsDir;
      }
      boolean singleNormFile=IndexFileNames.matchesExtension(fileName,IndexFileNames.NORMS_EXTENSION);
      IndexInput normInput=null;
      long normSeek;
      if (singleNormFile) {
        normSeek=nextNormSeek;
        if (singleNormStream == null) {
          singleNormStream=d.openInput(fileName,readBufferSize);
          singleNormRef=new AtomicInteger(1);
        }
 else {
          singleNormRef.incrementAndGet();
        }
        normInput=singleNormStream;
      }
 else {
        normInput=d.openInput(fileName);
        String version=si.getVersion();
        final boolean isUnversioned=(version == null || StringHelper.getVersionComparator().compare(version,"3.2") < 0) && normInput.length() == maxDoc();
        if (isUnversioned) {
          normSeek=0;
        }
 else {
          normSeek=SegmentNorms.NORMS_HEADER.length;
        }
      }
      norms.put(fi.name,new SegmentNorms(normInput,fi.number,normSeek,this));
      nextNormSeek+=maxDoc;
    }
  }
}
