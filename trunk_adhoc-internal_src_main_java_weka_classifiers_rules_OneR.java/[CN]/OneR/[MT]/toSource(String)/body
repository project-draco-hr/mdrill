{
  StringBuffer result;
  int i;
  result=new StringBuffer();
  if (m_ZeroR != null) {
    result.append(((ZeroR)m_ZeroR).toSource(className));
  }
 else {
    result.append("class " + className + " {\n");
    result.append("  public static double classify(Object[] i) {\n");
    result.append("    // chosen attribute: " + m_rule.m_attr.name() + " ("+ m_rule.m_attr.index()+ ")\n");
    result.append("\n");
    result.append("    // missing value?\n");
    result.append("    if (i[" + m_rule.m_attr.index() + "] == null)\n");
    if (m_rule.m_missingValueClass != -1)     result.append("      return Double.NaN;\n");
 else     result.append("      return 0;\n");
    result.append("\n");
    result.append("    // prediction\n");
    result.append("    double v = 0;\n");
    result.append("    double[] classifications = new double[]{" + Utils.arrayToString(m_rule.m_classifications) + "};");
    result.append(" // ");
    for (i=0; i < m_rule.m_classifications.length; i++) {
      if (i > 0)       result.append(", ");
      result.append(m_rule.m_class.value(m_rule.m_classifications[i]));
    }
    result.append("\n");
    if (m_rule.m_attr.isNominal()) {
      for (i=0; i < m_rule.m_attr.numValues(); i++) {
        result.append("    ");
        if (i > 0)         result.append("else ");
        result.append("if (((String) i[" + m_rule.m_attr.index() + "]).equals(\""+ m_rule.m_attr.value(i)+ "\"))\n");
        result.append("      v = " + i + "; // "+ m_rule.m_class.value(m_rule.m_classifications[i])+ "\n");
      }
    }
 else {
      result.append("    double[] breakpoints = new double[]{" + Utils.arrayToString(m_rule.m_breakpoints) + "};\n");
      result.append("    while (v < breakpoints.length && \n");
      result.append("           ((Double) i[" + m_rule.m_attr.index() + "]) >= breakpoints[(int) v]) {\n");
      result.append("      v++;\n");
      result.append("    }\n");
    }
    result.append("    return classifications[(int) v];\n");
    result.append("  }\n");
    result.append("}\n");
  }
  return result.toString();
}
