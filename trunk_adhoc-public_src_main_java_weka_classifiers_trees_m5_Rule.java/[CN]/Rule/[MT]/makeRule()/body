{
  RuleNode[] best_leaf=new RuleNode[1];
  double[] best_cov=new double[1];
  RuleNode temp;
  m_notCovered=new Instances(m_instances,0);
  m_covered=new Instances(m_instances,0);
  best_cov[0]=-1;
  best_leaf[0]=null;
  m_topOfTree.findBestLeaf(best_cov,best_leaf);
  temp=best_leaf[0];
  if (temp == null) {
    throw new Exception("Unable to generate rule!");
  }
  m_ruleModel=temp;
  int count=0;
  while (temp.parentNode() != null) {
    count++;
    temp=temp.parentNode();
  }
  temp=best_leaf[0];
  m_relOps=new int[count];
  m_splitAtts=new int[count];
  m_splitVals=new double[count];
  if (m_smoothPredictions) {
    m_internalNodes=new RuleNode[count];
  }
  int i=0;
  while (temp.parentNode() != null) {
    m_splitAtts[i]=temp.parentNode().splitAtt();
    m_splitVals[i]=temp.parentNode().splitVal();
    if (temp.parentNode().leftNode() == temp) {
      m_relOps[i]=LEFT;
      temp.parentNode().m_right=null;
    }
 else {
      m_relOps[i]=RIGHT;
      temp.parentNode().m_left=null;
    }
    if (m_smoothPredictions) {
      m_internalNodes[i]=temp.parentNode();
    }
    temp=temp.parentNode();
    i++;
  }
  boolean ok;
  for (i=0; i < m_numInstances; i++) {
    ok=true;
    for (int j=0; j < m_relOps.length; j++) {
      if (m_relOps[j] == LEFT) {
        if (m_instances.instance(i).value(m_splitAtts[j]) > m_splitVals[j]) {
          m_notCovered.add(m_instances.instance(i));
          ok=false;
          break;
        }
      }
 else {
        if (m_instances.instance(i).value(m_splitAtts[j]) <= m_splitVals[j]) {
          m_notCovered.add(m_instances.instance(i));
          ok=false;
          break;
        }
      }
    }
    if (ok) {
      m_numCovered++;
    }
  }
}
