{
  String[] thedates=thedates_a;
  if (thedates.length == 1) {
    thedates=new String[]{thedates_a[0],thedates_a[0]};
  }
  if (sqlwhere.trim().isEmpty()) {
    sqlwhere="1=1";
  }
  sqlwhere=sqlwhere.replaceAll("^[ |\t]+where"," ");
  HashMap<String,String> alias_name=new HashMap<String,String>();
  HashSet<String> groupbyrepeat=new HashSet<String>();
  int index=0;
  StringBuffer sqlselectbuff=new StringBuffer();
  StringBuffer groupBybuf=new StringBuffer();
  StringBuffer sqlBaseFilterbuff=new StringBuffer();
  alias_name.put(idcols,"k_" + ajustName(idcols) + "_"+ index++);
  sqlselectbuff.append(" ").append(idcols).append(" as ").append(alias_name.get(idcols));
  groupBybuf.append(" ").append(idcols);
  sqlBaseFilterbuff.append("" + idcols + "<>'' and "+ idcols+ " is not null");
  for (  String s : colls_important) {
    if (s.equals(idcols)) {
      continue;
    }
    alias_name.put(s,"hs_" + ajustName(s) + "_"+ index++);
    sqlselectbuff.append(" ,").append(s).append(" as ").append(alias_name.get(s));
    if (!groupbyrepeat.contains(s)) {
      groupbyrepeat.add(s);
      groupBybuf.append(",").append(s);
    }
    sqlBaseFilterbuff.append(" and " + s + " is not null");
  }
  for (  String s : number_important) {
    alias_name.put(s,"hn_" + ajustName(s) + "_"+ index++);
    boolean isaddavg=true;
    if (s.trim().toLowerCase().startsWith("sum") || s.trim().toLowerCase().startsWith("max") || s.trim().toLowerCase().startsWith("min")|| s.trim().toLowerCase().startsWith("avg")|| s.trim().toLowerCase().startsWith("average")|| s.trim().toLowerCase().startsWith("skip")) {
      isaddavg=false;
    }
    if (isaddavg) {
      sqlselectbuff.append(" ,").append("avg(" + s + ")").append(" as ").append(alias_name.get(s));
    }
 else {
      sqlselectbuff.append(" ,").append(s.replaceAll("average\\(","avg(").replaceAll("skip\\(","(")).append(" as ").append(alias_name.get(s));
    }
  }
  for (  String s : colls) {
    if (s.equals(idcols)) {
      continue;
    }
    alias_name.put(s,"ls_" + ajustName(s) + "_"+ index++);
    sqlselectbuff.append(" ,").append(s).append(" as ").append(alias_name.get(s));
    if (!groupbyrepeat.contains(s)) {
      groupbyrepeat.add(s);
      groupBybuf.append(",").append(s);
    }
    sqlBaseFilterbuff.append(" and " + s + " is not null");
  }
  for (  String s : numbers) {
    alias_name.put(s,"ln_" + ajustName(s) + "_"+ index++);
    boolean isaddavg=true;
    if (s.trim().toLowerCase().startsWith("sum") || s.trim().toLowerCase().startsWith("max") || s.trim().toLowerCase().startsWith("min")|| s.trim().toLowerCase().startsWith("avg")|| s.trim().toLowerCase().startsWith("average")|| s.trim().toLowerCase().startsWith("skip")) {
      isaddavg=false;
    }
    if (isaddavg) {
      sqlselectbuff.append(" ,").append("avg(" + s + ")").append(" as ").append(alias_name.get(s));
    }
 else {
      sqlselectbuff.append(" ,").append(s.replaceAll("average\\(","avg(").replaceAll("skip\\(","(")).append(" as ").append(alias_name.get(s));
    }
  }
  String sqlselect=sqlselectbuff.toString();
  String groupBy=groupBybuf.toString();
  String sqlBaseFilter="(" + sqlBaseFilterbuff.toString() + ") ";
  StringBuffer buff=new StringBuffer();
  index=0;
  buff.append("select tbl_0." + alias_name.get(idcols) + " as col_"+ index+ " ");
  index++;
  StringBuffer[] bufferIndex={new StringBuffer(),new StringBuffer(),new StringBuffer(),new StringBuffer()};
  for (int i=0; i < 1; i++) {
    for (    String s : colls_important) {
      if (s.equals(idcols)) {
        continue;
      }
      buff.append(",tbl_" + i + "."+ alias_name.get(s)+ " as col_"+ index);
      bufferIndex[0].append(index).append(",");
      index++;
    }
  }
  for (int i=0; i < 1; i++) {
    for (    String s : number_important) {
      buff.append(",tbl_" + i + "."+ alias_name.get(s)+ " as col_"+ index);
      bufferIndex[1].append(index).append(",");
      index++;
    }
  }
  for (int i=0; i < 1; i++) {
    for (    String s : colls) {
      if (s.equals(idcols)) {
        continue;
      }
      buff.append(",tbl_" + i + "."+ alias_name.get(s)+ " as col_"+ index);
      bufferIndex[2].append(index).append(",");
      index++;
    }
  }
  for (int i=1; i < thedates.length; i++) {
    for (    String s : number_important) {
      buff.append(",tbl_" + i + "."+ alias_name.get(s)+ " as col_"+ index);
      bufferIndex[3].append(index).append(",");
      index++;
    }
  }
  for (int i=0; i < thedates.length; i++) {
    for (    String s : numbers) {
      buff.append(",tbl_" + i + "."+ alias_name.get(s)+ " as col_"+ index);
      bufferIndex[3].append(index).append(",");
      index++;
    }
  }
  buff.append(" from (select " + sqlselect + " from "+ tablename+ " where dt='"+ thedates[0]+ "' and "+ sqlBaseFilter+ " and ("+ sqlwhere+ ") group by "+ groupBy+ ") tbl_0 ");
  for (int i=1; i < thedates.length; i++) {
    buff.append(" left outer join (select " + sqlselect + " from "+ tablename+ " where dt='"+ thedates[i]+ "' and "+ sqlBaseFilter+ " and ("+ sqlwhere+ ")  group by "+ groupBy+ ") tbl_"+ i+ " on (tbl_"+ i+ "."+ alias_name.get(idcols)+ "=tbl_0."+ alias_name.get(idcols)+ ")");
  }
  System.out.println(buff.toString());
  StringBuffer kmeansarams=new StringBuffer();
  kmeansarams.append(bufferIndex[0].toString().replaceAll(",$","")).append(";");
  kmeansarams.append(bufferIndex[1].toString().replaceAll(",$","")).append(";");
  kmeansarams.append(bufferIndex[2].toString().replaceAll(",$","")).append(";");
  kmeansarams.append(bufferIndex[3].toString().replaceAll(",$",""));
  System.out.println(kmeansarams.toString());
  return new String[]{buff.toString(),kmeansarams.toString()};
}
