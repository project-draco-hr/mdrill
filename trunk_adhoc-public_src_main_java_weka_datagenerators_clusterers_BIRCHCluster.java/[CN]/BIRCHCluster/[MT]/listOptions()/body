{
  Vector result=enumToVector(super.listOptions());
  result.addElement(new Option("\tThe number of clusters (default " + defaultNumClusters() + ")","k",1,"-k <num>"));
  result.addElement(new Option("\tSet pattern to grid (default is random).\n" + "\tThis flag cannot be used at the same time as flag I.\n" + "\tThe pattern is random, if neither flag G nor flag I is set.","G",0,"-G"));
  result.addElement(new Option("\tSet pattern to sine (default is random).\n" + "\tThis flag cannot be used at the same time as flag I.\n" + "\tThe pattern is random, if neither flag G nor flag I is set.","I",0,"-I"));
  result.addElement(new Option("\tThe range of number of instances per cluster (default " + defaultMinInstNum() + ".."+ defaultMaxInstNum()+ ").\n"+ "\tLower number must be between 0 and 2500,\n"+ "\tupper number must be between 50 and 2500.","N",1,"-N <num>..<num>"));
  result.addElement(new Option("\tThe range of radius per cluster (default " + defaultMinRadius() + ".."+ defaultMaxRadius()+ ").\n"+ "\tLower number must be between 0 and SQRT(2), \n"+ "\tupper number must be between SQRT(2) and SQRT(32).","R",1,"-R <num>..<num>"));
  result.addElement(new Option("\tThe distance multiplier (default " + defaultDistMult() + ").","M",1,"-M <num>"));
  result.addElement(new Option("\tThe number of cycles (default " + defaultNumCycles() + ").","C",1,"-C <num>"));
  result.addElement(new Option("\tFlag for input order is ORDERED. If flag is not set then \n" + "\tinput order is RANDOMIZED. RANDOMIZED is currently not \n" + "\timplemented, therefore is the input order always ORDERED.","O",0,"-O"));
  result.addElement(new Option("\tThe noise rate in percent (default " + defaultNoiseRate() + ").\n"+ "\tCan be between 0% and 30%. (Remark: The original \n"+ "\talgorithm only allows noise up to 10%.)","P",1,"-P <num>"));
  return result.elements();
}
