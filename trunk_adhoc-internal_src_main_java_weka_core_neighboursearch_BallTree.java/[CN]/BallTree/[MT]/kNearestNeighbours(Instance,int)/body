{
  MyHeap heap=new MyHeap(k);
  if (m_Stats != null)   m_Stats.searchStart();
  nearestNeighbours(heap,m_Root,target,k);
  if (m_Stats != null)   m_Stats.searchFinish();
  Instances neighbours=new Instances(m_Instances,heap.totalSize());
  m_Distances=new double[heap.totalSize()];
  int[] indices=new int[heap.totalSize()];
  int i=1;
  MyHeapElement h;
  while (heap.noOfKthNearest() > 0) {
    h=heap.getKthNearest();
    indices[indices.length - i]=h.index;
    m_Distances[indices.length - i]=h.distance;
    i++;
  }
  while (heap.size() > 0) {
    h=heap.get();
    indices[indices.length - i]=h.index;
    m_Distances[indices.length - i]=h.distance;
    i++;
  }
  m_DistanceFunction.postProcessDistances(m_Distances);
  for (i=0; i < indices.length; i++)   neighbours.add(m_Instances.instance(indices[i]));
  return neighbours;
}
