{
  m_OutText.setEditable(false);
  m_OutText.setFont(new Font("Monospaced",Font.PLAIN,12));
  m_OutText.setBorder(BorderFactory.createEmptyBorder(5,5,5,5));
  m_OutText.addMouseListener(new MouseAdapter(){
    public void mouseClicked(    MouseEvent e){
      if ((e.getModifiers() & InputEvent.BUTTON1_MASK) != InputEvent.BUTTON1_MASK) {
        m_OutText.selectAll();
      }
    }
  }
);
  m_History.setBorder(BorderFactory.createTitledBorder("Result list (right-click for options)"));
  m_ClustererEditor.setClassType(Clusterer.class);
  m_ClustererEditor.setValue(ExplorerDefaults.getClusterer());
  m_ClustererEditor.addPropertyChangeListener(new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent e){
      m_StartBut.setEnabled(true);
      Capabilities currentFilter=m_ClustererEditor.getCapabilitiesFilter();
      Clusterer clusterer=(Clusterer)m_ClustererEditor.getValue();
      Capabilities currentSchemeCapabilities=null;
      if (clusterer != null && currentFilter != null && (clusterer instanceof CapabilitiesHandler)) {
        currentSchemeCapabilities=((CapabilitiesHandler)clusterer).getCapabilities();
        if (!currentSchemeCapabilities.supportsMaybe(currentFilter) && !currentSchemeCapabilities.supports(currentFilter)) {
          m_StartBut.setEnabled(false);
        }
      }
      repaint();
    }
  }
);
  m_TrainBut.setToolTipText("Cluster the same set that the clusterer" + " is trained on");
  m_PercentBut.setToolTipText("Train on a percentage of the data and" + " cluster the remainder");
  m_TestSplitBut.setToolTipText("Cluster a user-specified dataset");
  m_ClassesToClustersBut.setToolTipText("Evaluate clusters with respect to a" + " class");
  m_ClassCombo.setToolTipText("Select the class attribute for class based" + " evaluation");
  m_StartBut.setToolTipText("Starts the clustering");
  m_StopBut.setToolTipText("Stops a running clusterer");
  m_StorePredictionsBut.setToolTipText("Store predictions in the result list for later " + "visualization");
  m_ignoreBut.setToolTipText("Ignore attributes during clustering");
  m_FileChooser.setFileFilter(m_ModelFilter);
  m_FileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
  m_ClassCombo.setPreferredSize(COMBO_SIZE);
  m_ClassCombo.setMaximumSize(COMBO_SIZE);
  m_ClassCombo.setMinimumSize(COMBO_SIZE);
  m_ClassCombo.setEnabled(false);
  m_PercentBut.setSelected(ExplorerDefaults.getClustererTestMode() == 2);
  m_TrainBut.setSelected(ExplorerDefaults.getClustererTestMode() == 3);
  m_TestSplitBut.setSelected(ExplorerDefaults.getClustererTestMode() == 4);
  m_ClassesToClustersBut.setSelected(ExplorerDefaults.getClustererTestMode() == 5);
  m_StorePredictionsBut.setSelected(ExplorerDefaults.getClustererStoreClustersForVis());
  updateRadioLinks();
  ButtonGroup bg=new ButtonGroup();
  bg.add(m_TrainBut);
  bg.add(m_PercentBut);
  bg.add(m_TestSplitBut);
  bg.add(m_ClassesToClustersBut);
  m_TrainBut.addActionListener(m_RadioListener);
  m_PercentBut.addActionListener(m_RadioListener);
  m_TestSplitBut.addActionListener(m_RadioListener);
  m_ClassesToClustersBut.addActionListener(m_RadioListener);
  m_SetTestBut.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      setTestSet();
    }
  }
);
  m_StartBut.setEnabled(false);
  m_StopBut.setEnabled(false);
  m_ignoreBut.setEnabled(false);
  m_StartBut.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      startClusterer();
    }
  }
);
  m_StopBut.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      stopClusterer();
    }
  }
);
  m_ignoreBut.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      setIgnoreColumns();
    }
  }
);
  m_History.setHandleRightClicks(false);
  m_History.getList().addMouseListener(new MouseAdapter(){
    public void mouseClicked(    MouseEvent e){
      if (((e.getModifiers() & InputEvent.BUTTON1_MASK) != InputEvent.BUTTON1_MASK) || e.isAltDown()) {
        int index=m_History.getList().locationToIndex(e.getPoint());
        if (index != -1) {
          String name=m_History.getNameAtIndex(index);
          visualizeClusterer(name,e.getX(),e.getY());
        }
 else {
          visualizeClusterer(null,e.getX(),e.getY());
        }
      }
    }
  }
);
  m_ClassCombo.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      updateCapabilitiesFilter(m_ClustererEditor.getCapabilitiesFilter());
    }
  }
);
  JPanel p1=new JPanel();
  p1.setBorder(BorderFactory.createCompoundBorder(BorderFactory.createTitledBorder("Clusterer"),BorderFactory.createEmptyBorder(0,5,5,5)));
  p1.setLayout(new BorderLayout());
  p1.add(m_CLPanel,BorderLayout.NORTH);
  JPanel p2=new JPanel();
  GridBagLayout gbL=new GridBagLayout();
  p2.setLayout(gbL);
  p2.setBorder(BorderFactory.createCompoundBorder(BorderFactory.createTitledBorder("Cluster mode"),BorderFactory.createEmptyBorder(0,5,5,5)));
  GridBagConstraints gbC=new GridBagConstraints();
  gbC.anchor=GridBagConstraints.WEST;
  gbC.gridy=0;
  gbC.gridx=0;
  gbL.setConstraints(m_TrainBut,gbC);
  p2.add(m_TrainBut);
  gbC=new GridBagConstraints();
  gbC.anchor=GridBagConstraints.WEST;
  gbC.gridy=1;
  gbC.gridx=0;
  gbL.setConstraints(m_TestSplitBut,gbC);
  p2.add(m_TestSplitBut);
  gbC=new GridBagConstraints();
  gbC.anchor=GridBagConstraints.EAST;
  gbC.fill=GridBagConstraints.HORIZONTAL;
  gbC.gridy=1;
  gbC.gridx=1;
  gbC.gridwidth=2;
  gbC.insets=new Insets(2,10,2,0);
  gbL.setConstraints(m_SetTestBut,gbC);
  p2.add(m_SetTestBut);
  gbC=new GridBagConstraints();
  gbC.anchor=GridBagConstraints.WEST;
  gbC.gridy=2;
  gbC.gridx=0;
  gbL.setConstraints(m_PercentBut,gbC);
  p2.add(m_PercentBut);
  gbC=new GridBagConstraints();
  gbC.anchor=GridBagConstraints.EAST;
  gbC.fill=GridBagConstraints.HORIZONTAL;
  gbC.gridy=2;
  gbC.gridx=1;
  gbC.insets=new Insets(2,10,2,10);
  gbL.setConstraints(m_PercentLab,gbC);
  p2.add(m_PercentLab);
  gbC=new GridBagConstraints();
  gbC.anchor=GridBagConstraints.EAST;
  gbC.fill=GridBagConstraints.HORIZONTAL;
  gbC.gridy=2;
  gbC.gridx=2;
  gbC.weightx=100;
  gbC.ipadx=20;
  gbL.setConstraints(m_PercentText,gbC);
  p2.add(m_PercentText);
  gbC=new GridBagConstraints();
  gbC.anchor=GridBagConstraints.WEST;
  gbC.gridy=3;
  gbC.gridx=0;
  gbC.gridwidth=2;
  gbL.setConstraints(m_ClassesToClustersBut,gbC);
  p2.add(m_ClassesToClustersBut);
  m_ClassCombo.setBorder(BorderFactory.createEmptyBorder(0,20,0,0));
  gbC=new GridBagConstraints();
  gbC.anchor=GridBagConstraints.WEST;
  gbC.gridy=4;
  gbC.gridx=0;
  gbC.gridwidth=2;
  gbL.setConstraints(m_ClassCombo,gbC);
  p2.add(m_ClassCombo);
  gbC=new GridBagConstraints();
  gbC.anchor=GridBagConstraints.WEST;
  gbC.gridy=5;
  gbC.gridx=0;
  gbC.gridwidth=2;
  gbL.setConstraints(m_StorePredictionsBut,gbC);
  p2.add(m_StorePredictionsBut);
  Vector pluginsVector=GenericObjectEditor.getClassnames(ClustererPanelLaunchHandlerPlugin.class.getName());
  JButton pluginBut=null;
  if (pluginsVector.size() == 1) {
    try {
      String className=(String)pluginsVector.elementAt(0);
      final ClustererPanelLaunchHandlerPlugin plugin=(ClustererPanelLaunchHandlerPlugin)Class.forName(className).newInstance();
      if (plugin != null) {
        plugin.setClustererPanel(this);
        pluginBut=new JButton(plugin.getLaunchCommand());
        pluginBut.addActionListener(new ActionListener(){
          public void actionPerformed(          ActionEvent e){
            plugin.launch();
          }
        }
);
      }
    }
 catch (    Exception ex) {
      ex.printStackTrace();
    }
  }
 else   if (pluginsVector.size() > 1) {
    int okPluginCount=0;
    final java.awt.PopupMenu pluginPopup=new java.awt.PopupMenu();
    for (int i=0; i < pluginsVector.size(); i++) {
      String className=(String)(pluginsVector.elementAt(i));
      try {
        final ClustererPanelLaunchHandlerPlugin plugin=(ClustererPanelLaunchHandlerPlugin)Class.forName(className).newInstance();
        if (plugin == null) {
          continue;
        }
        okPluginCount++;
        plugin.setClustererPanel(this);
        java.awt.MenuItem popI=new java.awt.MenuItem(plugin.getLaunchCommand());
        popI.addActionListener(new ActionListener(){
          public void actionPerformed(          ActionEvent e){
            plugin.launch();
          }
        }
);
        pluginPopup.add(popI);
      }
 catch (      Exception ex) {
        ex.printStackTrace();
      }
    }
    if (okPluginCount > 0) {
      pluginBut=new JButton("Launchers...");
      final JButton copyB=pluginBut;
      copyB.add(pluginPopup);
      pluginBut.addActionListener(new ActionListener(){
        public void actionPerformed(        ActionEvent e){
          pluginPopup.show(copyB,0,0);
        }
      }
);
    }
 else {
      pluginBut=null;
    }
  }
  JPanel buttons=new JPanel();
  buttons.setLayout(new GridLayout(2,1));
  JPanel ssButs=new JPanel();
  ssButs.setBorder(BorderFactory.createEmptyBorder(5,5,5,5));
  if (pluginBut == null) {
    ssButs.setLayout(new GridLayout(1,2,5,5));
  }
 else {
    ssButs.setLayout(new FlowLayout(FlowLayout.LEFT));
  }
  ssButs.add(m_StartBut);
  ssButs.add(m_StopBut);
  if (pluginBut != null) {
    ssButs.add(pluginBut);
  }
  JPanel ib=new JPanel();
  ib.setBorder(BorderFactory.createEmptyBorder(5,5,5,5));
  ib.setLayout(new GridLayout(1,1,5,5));
  ib.add(m_ignoreBut);
  buttons.add(ib);
  buttons.add(ssButs);
  JPanel p3=new JPanel();
  p3.setBorder(BorderFactory.createTitledBorder("Clusterer output"));
  p3.setLayout(new BorderLayout());
  final JScrollPane js=new JScrollPane(m_OutText);
  p3.add(js,BorderLayout.CENTER);
  js.getViewport().addChangeListener(new ChangeListener(){
    private int lastHeight;
    public void stateChanged(    ChangeEvent e){
      JViewport vp=(JViewport)e.getSource();
      int h=vp.getViewSize().height;
      if (h != lastHeight) {
        lastHeight=h;
        int x=h - vp.getExtentSize().height;
        vp.setViewPosition(new Point(0,x));
      }
    }
  }
);
  JPanel mondo=new JPanel();
  gbL=new GridBagLayout();
  mondo.setLayout(gbL);
  gbC=new GridBagConstraints();
  gbC.fill=GridBagConstraints.HORIZONTAL;
  gbC.gridy=0;
  gbC.gridx=0;
  gbL.setConstraints(p2,gbC);
  mondo.add(p2);
  gbC=new GridBagConstraints();
  gbC.anchor=GridBagConstraints.NORTH;
  gbC.fill=GridBagConstraints.HORIZONTAL;
  gbC.gridy=1;
  gbC.gridx=0;
  gbL.setConstraints(buttons,gbC);
  mondo.add(buttons);
  gbC=new GridBagConstraints();
  gbC.fill=GridBagConstraints.BOTH;
  gbC.gridy=2;
  gbC.gridx=0;
  gbC.weightx=0;
  gbL.setConstraints(m_History,gbC);
  mondo.add(m_History);
  gbC=new GridBagConstraints();
  gbC.fill=GridBagConstraints.BOTH;
  gbC.gridy=0;
  gbC.gridx=1;
  gbC.gridheight=3;
  gbC.weightx=100;
  gbC.weighty=100;
  gbL.setConstraints(p3,gbC);
  mondo.add(p3);
  setLayout(new BorderLayout());
  add(p1,BorderLayout.NORTH);
  add(mondo,BorderLayout.CENTER);
}
