{
  ShardRequest sreq=new ShardRequest();
  sreq.purpose=ShardRequest.PURPOSE_GET_TOP_IDS;
  sreq.params=new ModifiableSolrParams(rb.req.getParams());
  Grouping.Format responseFormat=rb.getGroupingSpec().getResponseFormat();
  if (responseFormat == Grouping.Format.simple || rb.getGroupingSpec().isMain()) {
    sreq.params.remove(GroupParams.GROUP_OFFSET);
  }
  sreq.params.remove(ShardParams.SHARDS);
  if (rb.shards_start > -1) {
    sreq.params.set(CommonParams.START,rb.shards_start);
  }
 else {
    sreq.params.set(CommonParams.START,"0");
  }
  if (rb.shards_rows > -1) {
    sreq.params.set(CommonParams.ROWS,rb.shards_rows);
  }
 else {
    sreq.params.set(CommonParams.ROWS,rb.getSortSpec().getOffset() + rb.getSortSpec().getCount());
  }
  sreq.params.set("group.distibuted.second","true");
  for (  Map.Entry<String,Collection<SearchGroup<String>>> entry : rb.mergedSearchGroups.entrySet()) {
    for (    SearchGroup<String> searchGroup : entry.getValue()) {
      String groupValue;
      if (searchGroup.groupValue != null) {
        String rawGroupValue=searchGroup.groupValue;
        FieldType fieldType=rb.req.getSearcher().getSchema().getField(entry.getKey()).getType();
        groupValue=fieldType.indexedToReadable(rawGroupValue);
      }
 else {
        groupValue=GROUP_NULL_VALUE;
      }
      sreq.params.add("group.topgroups." + entry.getKey(),groupValue);
    }
  }
  if ((rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0 || rb.getSortSpec().includesScore()) {
    sreq.params.set(CommonParams.FL,rb.req.getSchema().getUniqueKeyField().getName() + ",score");
  }
 else {
    sreq.params.set(CommonParams.FL,rb.req.getSchema().getUniqueKeyField().getName());
  }
  return new ShardRequest[]{sreq};
}
