{
  Hyphenation hyphens=hyphenator.hyphenate(termAtt.buffer(),0,termAtt.length(),1,1);
  if (hyphens == null) {
    return;
  }
  final int[] hyp=hyphens.getHyphenationPoints();
  for (int i=0; i < hyp.length; ++i) {
    int remaining=hyp.length - i;
    int start=hyp[i];
    CompoundToken longestMatchToken=null;
    for (int j=1; j < remaining; j++) {
      int partLength=hyp[i + j] - start;
      if (partLength > this.maxSubwordSize) {
        break;
      }
      if (partLength < this.minSubwordSize) {
        continue;
      }
      if (dictionary == null || dictionary.contains(termAtt.buffer(),start,partLength)) {
        if (this.onlyLongestMatch) {
          if (longestMatchToken != null) {
            if (longestMatchToken.txt.length() < partLength) {
              longestMatchToken=new CompoundToken(start,partLength);
            }
          }
 else {
            longestMatchToken=new CompoundToken(start,partLength);
          }
        }
 else {
          tokens.add(new CompoundToken(start,partLength));
        }
      }
 else       if (dictionary.contains(termAtt.buffer(),start,partLength - 1)) {
        if (this.onlyLongestMatch) {
          if (longestMatchToken != null) {
            if (longestMatchToken.txt.length() < partLength - 1) {
              longestMatchToken=new CompoundToken(start,partLength - 1);
            }
          }
 else {
            longestMatchToken=new CompoundToken(start,partLength - 1);
          }
        }
 else {
          tokens.add(new CompoundToken(start,partLength - 1));
        }
      }
    }
    if (this.onlyLongestMatch && longestMatchToken != null) {
      tokens.add(longestMatchToken);
    }
  }
}
