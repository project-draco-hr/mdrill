{
  List<AssociationRule> rules=new ArrayList<AssociationRule>();
  largeItemSets.sort();
  Map<Collection<BinaryItem>,Integer> frequencyLookup=new HashMap<Collection<BinaryItem>,Integer>();
  Iterator<FrequentBinaryItemSet> setI=largeItemSets.iterator();
  while (setI.hasNext()) {
    FrequentBinaryItemSet fis=setI.next();
    frequencyLookup.put(fis.getItems(),fis.getSupport());
    if (fis.getItems().size() > 1) {
      boolean[] subset=new boolean[fis.getItems().size()];
      Collection<Item> premise=null;
      Collection<Item> consequence=null;
      while ((premise=getPremise(fis,subset)) != null) {
        if (premise.size() > 0 && premise.size() < fis.getItems().size()) {
          consequence=getConsequence(fis,subset);
          int totalSupport=fis.getSupport();
          int supportPremise=frequencyLookup.get(premise).intValue();
          int supportConsequence=frequencyLookup.get(consequence).intValue();
          DefaultAssociationRule candidate=new DefaultAssociationRule(premise,consequence,metricToUse,supportPremise,supportConsequence,totalSupport,totalTransactions);
          if (candidate.getPrimaryMetricValue() > metricThreshold && candidate.getTotalSupport() >= lowerBoundMinSuppAsInstances && candidate.getTotalSupport() <= upperBoundMinSuppAsInstances) {
            rules.add(candidate);
          }
        }
        nextSubset(subset);
      }
    }
  }
  return rules;
}
