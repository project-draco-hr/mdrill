{
  resetOptions();
  String positiveIndexString=Utils.getOption('P',options);
  String maxItemsString=Utils.getOption('I',options);
  String numRulesString=Utils.getOption('N',options);
  String minMetricString=Utils.getOption('C',options);
  String metricTypeString=Utils.getOption("T",options);
  String lowerBoundSupportString=Utils.getOption("M",options);
  String upperBoundSupportString=Utils.getOption("U",options);
  String deltaString=Utils.getOption("D",options);
  String transactionsString=Utils.getOption("transactions",options);
  String rulesString=Utils.getOption("rules",options);
  if (positiveIndexString.length() != 0) {
    setPositiveIndex(Integer.parseInt(positiveIndexString));
  }
  if (maxItemsString.length() != 0) {
    setMaxNumberOfItems(Integer.parseInt(maxItemsString));
  }
  if (metricTypeString.length() != 0) {
    setMetricType(new SelectedTag(Integer.parseInt(metricTypeString),DefaultAssociationRule.TAGS_SELECTION));
  }
  if (numRulesString.length() != 0) {
    setNumRulesToFind(Integer.parseInt(numRulesString));
  }
  if (minMetricString.length() != 0) {
    setMinMetric(Double.parseDouble(minMetricString));
  }
  if (deltaString.length() != 0) {
    setDelta(Double.parseDouble(deltaString));
  }
  if (lowerBoundSupportString.length() != 0) {
    setLowerBoundMinSupport(Double.parseDouble(lowerBoundSupportString));
  }
  if (upperBoundSupportString.length() != 0) {
    setUpperBoundMinSupport(Double.parseDouble(upperBoundSupportString));
  }
  if (transactionsString.length() != 0) {
    setTransactionsMustContain(transactionsString);
  }
  if (rulesString.length() > 0) {
    setRulesMustContain(rulesString);
  }
  setUseORForMustContainList(Utils.getFlag("use-or",options));
  setFindAllRulesForSupportLevel(Utils.getFlag('S',options));
}
