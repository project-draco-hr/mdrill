{
  int i;
  int n;
  setSize(matrix.getColCount(),matrix.getRowCount());
  TIE_STRING=matrix.TIE_STRING;
  WIN_STRING=matrix.WIN_STRING;
  LOSS_STRING=matrix.LOSS_STRING;
  LEFT_PARENTHESES=matrix.LEFT_PARENTHESES;
  RIGHT_PARENTHESES=matrix.RIGHT_PARENTHESES;
  m_MeanPrec=matrix.m_MeanPrec;
  m_StdDevPrec=matrix.m_StdDevPrec;
  m_ShowStdDev=matrix.m_ShowStdDev;
  m_ShowAverage=matrix.m_ShowAverage;
  m_PrintColNames=matrix.m_PrintColNames;
  m_PrintRowNames=matrix.m_PrintRowNames;
  m_EnumerateColNames=matrix.m_EnumerateColNames;
  m_EnumerateRowNames=matrix.m_EnumerateRowNames;
  m_RowNameWidth=matrix.m_RowNameWidth;
  m_MeanWidth=matrix.m_MeanWidth;
  m_StdDevWidth=matrix.m_StdDevWidth;
  m_SignificanceWidth=matrix.m_SignificanceWidth;
  m_CountWidth=matrix.m_CountWidth;
  m_RemoveFilterName=matrix.m_RemoveFilterName;
  m_HeaderKeys=(Vector)matrix.m_HeaderKeys.clone();
  m_HeaderValues=(Vector)matrix.m_HeaderValues.clone();
  for (i=0; i < matrix.m_Mean.length; i++) {
    for (n=0; n < matrix.m_Mean[i].length; n++) {
      m_Mean[i][n]=matrix.m_Mean[i][n];
      m_StdDev[i][n]=matrix.m_StdDev[i][n];
      m_Significance[i][n]=matrix.m_Significance[i][n];
    }
  }
  for (i=0; i < matrix.m_ColNames.length; i++) {
    m_ColNames[i]=matrix.m_ColNames[i];
    m_ColHidden[i]=matrix.m_ColHidden[i];
  }
  for (i=0; i < matrix.m_RowNames.length; i++) {
    m_RowNames[i]=matrix.m_RowNames[i];
    m_RowHidden[i]=matrix.m_RowHidden[i];
  }
  for (i=0; i < matrix.m_Counts.length; i++)   m_Counts[i]=matrix.m_Counts[i];
  if (matrix.m_NonSigWins != null) {
    m_NonSigWins=new int[matrix.m_NonSigWins.length][];
    m_Wins=new int[matrix.m_NonSigWins.length][];
    for (i=0; i < matrix.m_NonSigWins.length; i++) {
      m_NonSigWins[i]=new int[matrix.m_NonSigWins[i].length];
      m_Wins[i]=new int[matrix.m_NonSigWins[i].length];
      for (n=0; n < matrix.m_NonSigWins[i].length; n++) {
        m_NonSigWins[i][n]=matrix.m_NonSigWins[i][n];
        m_Wins[i][n]=matrix.m_Wins[i][n];
      }
    }
  }
  if (matrix.m_RankingWins != null) {
    m_RankingWins=new int[matrix.m_RankingWins.length];
    m_RankingLosses=new int[matrix.m_RankingWins.length];
    m_RankingDiff=new int[matrix.m_RankingWins.length];
    for (i=0; i < matrix.m_RankingWins.length; i++) {
      m_RankingWins[i]=matrix.m_RankingWins[i];
      m_RankingLosses[i]=matrix.m_RankingLosses[i];
      m_RankingDiff[i]=matrix.m_RankingDiff[i];
    }
  }
}
