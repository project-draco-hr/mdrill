{
  Vector result;
  Enumeration en;
  String desc;
  String param;
  int i;
  SelectedTag tag;
  result=new Vector();
  en=super.listOptions();
  while (en.hasMoreElements())   result.addElement(en.nextElement());
  desc="";
  param="";
  for (i=0; i < TAGS_PRUNING.length; i++) {
    if (i > 0)     param+="|";
    tag=new SelectedTag(TAGS_PRUNING[i].getID(),TAGS_PRUNING);
    param+="" + tag.getSelectedTag().getID();
    desc+="\t" + tag.getSelectedTag().getID() + " = "+ tag.getSelectedTag().getReadable()+ "\n";
  }
  result.addElement(new Option("\tThe pruning method to use:\n" + desc + "\t(default: "+ PRUNING_NONE+ ")","P",1,"-P <" + param + ">"));
  result.addElement(new Option("\tThe size of the cache (a prime number).\n" + "\t(default: 250007)","C",1,"-C <num>"));
  result.addElement(new Option("\tThe size of the internal cache (a prime number).\n" + "\t(default: 200003)","IC",1,"-IC <num>"));
  result.addElement(new Option("\tThe lambda constant. Penalizes non-continuous subsequence\n" + "\tmatches. Must be in (0,1).\n" + "\t(default: 0.5)","L",1,"-L <num>"));
  result.addElement(new Option("\tThe length of the subsequence.\n" + "\t(default: 3)","ssl",1,"-ssl <num>"));
  result.addElement(new Option("\tThe maximum length of the subsequence.\n" + "\t(default: 9)","ssl-max",1,"-ssl-max <num>"));
  result.addElement(new Option("\tUse normalization.\n" + "\t(default: no)","N",0,"-N"));
  return result.elements();
}
