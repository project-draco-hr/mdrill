{
  String tmpStr;
  tmpStr=Utils.getOption('P',options);
  if (tmpStr.length() != 0)   setPruningMethod(new SelectedTag(Integer.parseInt(tmpStr),TAGS_PRUNING));
 else   setPruningMethod(new SelectedTag(PRUNING_NONE,TAGS_PRUNING));
  tmpStr=Utils.getOption('C',options);
  if (tmpStr.length() != 0)   setCacheSize(Integer.parseInt(tmpStr));
 else   setCacheSize(250007);
  tmpStr=Utils.getOption("IC",options);
  if (tmpStr.length() != 0)   setInternalCacheSize(Integer.parseInt(tmpStr));
 else   setInternalCacheSize(200003);
  tmpStr=Utils.getOption('L',options);
  if (tmpStr.length() != 0)   setLambda(Double.parseDouble(tmpStr));
 else   setLambda(0.5);
  tmpStr=Utils.getOption("ssl",options);
  if (tmpStr.length() != 0)   setSubsequenceLength(Integer.parseInt(tmpStr));
 else   setSubsequenceLength(3);
  tmpStr=Utils.getOption("ssl-max",options);
  if (tmpStr.length() != 0)   setMaxSubsequenceLength(Integer.parseInt(tmpStr));
 else   setMaxSubsequenceLength(9);
  setUseNormalization(Utils.getFlag('N',options));
  if (getMaxSubsequenceLength() < 2 * getSubsequenceLength()) {
    throw new IllegalArgumentException("Lambda Pruning forbids even contiguous substring matches! " + "Use a bigger value for ssl-max (at least 2*ssl).");
  }
  super.setOptions(options);
}
