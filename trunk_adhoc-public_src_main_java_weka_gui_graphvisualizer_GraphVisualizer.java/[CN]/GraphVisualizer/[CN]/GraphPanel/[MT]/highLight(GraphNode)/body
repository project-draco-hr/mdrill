{
  Graphics2D g=(Graphics2D)this.getGraphics();
  RenderingHints rh=new RenderingHints(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
  rh.put(RenderingHints.KEY_RENDERING,RenderingHints.VALUE_RENDER_SPEED);
  g.setRenderingHints(rh);
  g.setPaintMode();
  g.scale(scale,scale);
  int x=0, y=0;
  Dimension d=this.getPreferredSize();
  if (d.width < this.getWidth())   x=(int)((x + this.getWidth() / 2 - d.width / 2) / scale);
  if (d.height < this.getHeight())   y=(int)((y + this.getHeight() / 2 - d.height / 2) / scale);
  if (n.nodeType == NORMAL) {
    g.setXORMode(Color.green);
    g.fillOval(x + n.x + paddedNodeWidth - nodeWidth - (paddedNodeWidth - nodeWidth) / 2,y + n.y,nodeWidth,nodeHeight);
    g.setXORMode(Color.red);
    if (fm.stringWidth(n.lbl) <= nodeWidth)     g.drawString(n.lbl,x + n.x + paddedNodeWidth / 2 - fm.stringWidth(n.lbl) / 2,y + n.y + nodeHeight / 2 + fm.getHeight() / 2 - 2);
 else     if (fm.stringWidth(n.ID) <= nodeWidth)     g.drawString(n.ID,x + n.x + paddedNodeWidth / 2 - fm.stringWidth(n.ID) / 2,y + n.y + nodeHeight / 2 + fm.getHeight() / 2 - 2);
 else     if (fm.stringWidth(Integer.toString(m_nodes.indexOf(n))) <= nodeWidth)     g.drawString(Integer.toString(m_nodes.indexOf(n)),x + n.x + paddedNodeWidth / 2 - fm.stringWidth(Integer.toString(m_nodes.indexOf(n))) / 2,y + n.y + nodeHeight / 2 + fm.getHeight() / 2 - 2);
    g.setXORMode(Color.green);
    GraphNode n2;
    int x1, y1, x2, y2;
    if (n.edges != null)     for (int k=0; k < n.edges.length; k++) {
      if (n.edges[k][1] == DIRECTED || n.edges[k][1] == DOUBLE) {
        n2=(GraphNode)m_nodes.elementAt(n.edges[k][0]);
        x1=n.x + paddedNodeWidth / 2;
        y1=n.y + nodeHeight;
        x2=n2.x + paddedNodeWidth / 2;
        y2=n2.y;
        g.drawLine(x + x1,y + y1,x + x2,y + y2);
        if (n.edges[k][1] == DIRECTED) {
          if (n2.nodeType == n2.NORMAL)           drawArrow(g,x + x1,y + y1,x + x2,y + y2);
        }
 else         if (n.edges[k][1] == DOUBLE) {
          if (n.nodeType == NORMAL)           drawArrow(g,x + x2,y + y2,x + x1,y + y1);
          if (n2.nodeType == NORMAL)           drawArrow(g,x + x1,y + y1,x + x2,y + y2);
        }
        if (n2.nodeType == NORMAL)         g.fillOval(x + n2.x + paddedNodeWidth - nodeWidth - (paddedNodeWidth - nodeWidth) / 2,y + n2.y,nodeWidth,nodeHeight);
        java.util.Vector t=new java.util.Vector();
        while (n2.nodeType != NORMAL || t.size() > 0) {
          if (t.size() > 0) {
            n2=(GraphNode)t.elementAt(0);
            t.removeElementAt(0);
          }
          if (n2.nodeType != NORMAL) {
            g.drawLine(x + n2.x + paddedNodeWidth / 2,y + n2.y,x + n2.x + paddedNodeWidth / 2,y + n2.y + nodeHeight);
            x1=n2.x + paddedNodeWidth / 2;
            y1=n2.y + nodeHeight;
            for (int m=0; m < n2.edges.length; m++) {
              if (n2.edges[m][1] > 0) {
                GraphNode n3=(GraphNode)m_nodes.elementAt(n2.edges[m][0]);
                g.drawLine(x + x1,y + y1,x + n3.x + paddedNodeWidth / 2,y + n3.y);
                if (n3.nodeType == NORMAL) {
                  g.fillOval(x + n3.x + paddedNodeWidth - nodeWidth - (paddedNodeWidth - nodeWidth) / 2,y + n3.y,nodeWidth,nodeHeight);
                  drawArrow(g,x + x1,y + y1,x + n3.x + paddedNodeWidth / 2,y + n3.y);
                }
                t.addElement(n3);
              }
            }
          }
        }
      }
 else       if (n.edges[k][1] == -REVERSED || n.edges[k][1] == -DOUBLE) {
        n2=(GraphNode)m_nodes.elementAt(n.edges[k][0]);
        x1=n.x + paddedNodeWidth / 2;
        y1=n.y;
        x2=n2.x + paddedNodeWidth / 2;
        y2=n2.y + nodeHeight;
        g.drawLine(x + x1,y + y1,x + x2,y + y2);
        if (n.edges[k][1] == -DOUBLE) {
          drawArrow(g,x + x2,y + y2,x + x1,y + y1);
          if (n2.nodeType != SINGULAR_DUMMY)           drawArrow(g,x + x1,y + y1,x + x2,y + y2);
        }
        int tmpIndex=k;
        while (n2.nodeType != NORMAL) {
          g.drawLine(x + n2.x + paddedNodeWidth / 2,y + n2.y + nodeHeight,x + n2.x + paddedNodeWidth / 2,y + n2.y);
          x1=n2.x + paddedNodeWidth / 2;
          y1=n2.y;
          for (int m=0; m < n2.edges.length; m++) {
            if (n2.edges[m][1] < 0) {
              n2=(GraphNode)m_nodes.elementAt(n2.edges[m][0]);
              g.drawLine(x + x1,y + y1,x + n2.x + paddedNodeWidth / 2,y + n2.y + nodeHeight);
              tmpIndex=m;
              if (n2.nodeType != SINGULAR_DUMMY)               drawArrow(g,x + x1,y + y1,x + n2.x + paddedNodeWidth / 2,y + n2.y + nodeHeight);
              break;
            }
          }
        }
      }
    }
  }
}
