{
  NamedList<Object> sugg=(NamedList<Object>)spellInfo.get("suggestions");
  if (sugg == null) {
    correctlySpelled=true;
    return;
  }
  for (int i=0; i < sugg.size(); i++) {
    String n=sugg.getName(i);
    if ("correctlySpelled".equals(n)) {
      correctlySpelled=(Boolean)sugg.getVal(i);
    }
 else     if ("collationInternalRank".equals(n)) {
    }
 else     if ("collation".equals(n)) {
      List<Object> collationInfo=sugg.getAll(n);
      collations=new ArrayList<Collation>(collationInfo.size());
      for (      Object o : collationInfo) {
        if (o instanceof String) {
          collations.add(new Collation().setCollationQueryString((String)o));
        }
 else         if (o instanceof NamedList) {
          NamedList expandedCollation=(NamedList)o;
          String collationQuery=(String)expandedCollation.get("collationQuery");
          int hits=(Integer)expandedCollation.get("hits");
          NamedList<String> misspellingsAndCorrections=(NamedList<String>)expandedCollation.get("misspellingsAndCorrections");
          Collation collation=new Collation();
          collation.setCollationQueryString(collationQuery);
          collation.setNumberOfHits(hits);
          for (int ii=0; ii < misspellingsAndCorrections.size(); ii++) {
            String misspelling=misspellingsAndCorrections.getName(ii);
            String correction=misspellingsAndCorrections.getVal(ii);
            collation.addMisspellingsAndCorrection(new Correction(misspelling,correction));
          }
          collations.add(collation);
        }
 else {
          throw new AssertionError("Should get Lists of Strings or List of NamedLists here.");
        }
      }
    }
 else {
      Suggestion s=new Suggestion(n,(NamedList<Object>)sugg.getVal(i));
      suggestionMap.put(n,s);
      suggestions.add(s);
    }
  }
}
