{
  boolean result;
  Class cls;
  Class clsCurrent;
  Vector list;
  int i;
  result=true;
  if (m_Excludes.containsKey(key)) {
    try {
      clsCurrent=Class.forName(classname);
    }
 catch (    Exception e) {
      clsCurrent=null;
    }
    if ((clsCurrent != null) && result) {
      list=(Vector)((Hashtable)m_Excludes.get(key)).get(EXCLUDE_INTERFACE);
      for (i=0; i < list.size(); i++) {
        try {
          cls=Class.forName(list.get(i).toString());
          if (ClassDiscovery.hasInterface(cls,clsCurrent)) {
            result=false;
            break;
          }
        }
 catch (        Exception e) {
        }
      }
    }
    if ((clsCurrent != null) && result) {
      list=(Vector)((Hashtable)m_Excludes.get(key)).get(EXCLUDE_SUPERCLASS);
      for (i=0; i < list.size(); i++) {
        try {
          cls=Class.forName(list.get(i).toString());
          if (ClassDiscovery.isSubclass(cls,clsCurrent)) {
            result=false;
            break;
          }
        }
 catch (        Exception e) {
        }
      }
    }
    if ((clsCurrent != null) && result) {
      list=(Vector)((Hashtable)m_Excludes.get(key)).get(EXCLUDE_CLASS);
      for (i=0; i < list.size(); i++) {
        try {
          cls=Class.forName(list.get(i).toString());
          if (cls.getName().equals(clsCurrent.getName()))           result=false;
        }
 catch (        Exception e) {
        }
      }
    }
  }
  return result;
}
