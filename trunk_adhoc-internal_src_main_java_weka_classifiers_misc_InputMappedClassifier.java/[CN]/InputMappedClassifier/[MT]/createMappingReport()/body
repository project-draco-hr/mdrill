{
  StringBuffer result=new StringBuffer();
  result.append("Attribute mappings:\n\n");
  int maxLength=0;
  for (int i=0; i < m_modelHeader.numAttributes(); i++) {
    if (m_modelHeader.attribute(i).name().length() > maxLength) {
      maxLength=m_modelHeader.attribute(i).name().length();
    }
  }
  maxLength+=12;
  int minLength=16;
  String headerS="Model attributes";
  String sep="----------------";
  if (maxLength < minLength) {
    maxLength=minLength;
  }
  headerS=getFixedLengthString(headerS,' ',maxLength);
  sep=getFixedLengthString(sep,'-',maxLength);
  sep+="\t    ----------------\n";
  headerS+="\t    Incoming attributes\n";
  result.append(headerS);
  result.append(sep);
  for (int i=0; i < m_modelHeader.numAttributes(); i++) {
    Attribute temp=m_modelHeader.attribute(i);
    String attName="(" + ((temp.isNumeric()) ? "numeric)" : "nominal)") + " "+ temp.name();
    attName=getFixedLengthString(attName,' ',maxLength);
    attName+="\t--> ";
    result.append(attName);
    String inAttNum="";
    if (m_attributeStatus[i] == NO_MATCH) {
      inAttNum+="- ";
      result.append(inAttNum + "missing (no match)\n");
    }
 else     if (m_attributeStatus[i] == TYPE_MISMATCH) {
      inAttNum+=(m_attributeMap[i] + 1) + " ";
      result.append(inAttNum + "missing (type mis-match)\n");
    }
 else {
      Attribute inAtt=m_inputHeader.attribute(m_attributeMap[i]);
      String inName="" + (m_attributeMap[i] + 1) + " ("+ ((inAtt.isNumeric()) ? "numeric)" : "nominal)")+ " "+ inAtt.name();
      result.append(inName + "\n");
    }
  }
  return result;
}
