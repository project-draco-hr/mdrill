{
  loadModel(m_modelPath);
  if (m_modelHeader == null) {
    return false;
  }
  m_attributeMap=new int[m_modelHeader.numAttributes()];
  m_attributeStatus=new int[m_modelHeader.numAttributes()];
  m_nominalValueMap=new int[m_modelHeader.numAttributes()][];
  for (int i=0; i < m_modelHeader.numAttributes(); i++) {
    String modelAttName=m_modelHeader.attribute(i).name();
    m_attributeStatus[i]=NO_MATCH;
    for (int j=0; j < m_inputHeader.numAttributes(); j++) {
      String incomingAttName=m_inputHeader.attribute(j).name();
      if (stringMatch(modelAttName,incomingAttName)) {
        m_attributeMap[i]=j;
        m_attributeStatus[i]=OK;
        Attribute modelAtt=m_modelHeader.attribute(i);
        Attribute incomingAtt=m_inputHeader.attribute(j);
        if (modelAtt.type() != incomingAtt.type()) {
          m_attributeStatus[i]=TYPE_MISMATCH;
          break;
        }
        if (modelAtt.numValues() != incomingAtt.numValues()) {
          System.out.println("[InputMappedClassifier] Warning: incoming nominal " + "attribute " + incomingAttName + " does not have the same "+ "number of values as model attribute "+ modelAttName);
        }
        if (modelAtt.isNominal() && incomingAtt.isNominal()) {
          int[] valuesMap=new int[incomingAtt.numValues()];
          for (int k=0; k < incomingAtt.numValues(); k++) {
            String incomingNomValue=incomingAtt.value(k);
            int indexInModel=modelAtt.indexOfValue(incomingNomValue);
            if (indexInModel < 0) {
              valuesMap[k]=NO_MATCH;
            }
 else {
              valuesMap[k]=indexInModel;
            }
          }
          m_nominalValueMap[i]=valuesMap;
        }
      }
    }
  }
  return true;
}
