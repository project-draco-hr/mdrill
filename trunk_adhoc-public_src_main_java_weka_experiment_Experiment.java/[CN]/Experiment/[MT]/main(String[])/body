{
  try {
    Experiment exp=null;
    String xmlOption=Utils.getOption("xml",args);
    if (!xmlOption.equals(""))     args=new XMLOptions(xmlOption).toArray();
    String expFile=Utils.getOption('l',args);
    String saveFile=Utils.getOption('s',args);
    boolean runExp=Utils.getFlag('r',args);
    boolean verbose=Utils.getFlag("verbose",args);
    if (expFile.length() == 0) {
      exp=new Experiment();
      try {
        exp.setOptions(args);
        Utils.checkForRemainingOptions(args);
      }
 catch (      Exception ex) {
        ex.printStackTrace();
        String result="Usage:\n\n" + "-l <exp|xml file>\n" + "\tLoad experiment from file (default use cli options).\n"+ "\tThe type is determined, based on the extension (" + FILE_EXTENSION + " or .xml)\n"+ "-s <exp|xml file>\n"+ "\tSave experiment to file after setting other options.\n"+ "\tThe type is determined, based on the extension ("+ FILE_EXTENSION+ " or .xml)\n"+ "\t(default don't save)\n"+ "-r\n"+ "\tRun experiment (default don't run)\n"+ "-xml <filename | xml-string>\n"+ "\tget options from XML-Data instead from parameters.\n"+ "-verbose\n"+ "\toutput progress information to std out."+ "\n";
        Enumeration enm=((OptionHandler)exp).listOptions();
        while (enm.hasMoreElements()) {
          Option option=(Option)enm.nextElement();
          result+=option.synopsis() + "\n";
          result+=option.description() + "\n";
        }
        throw new Exception(result + "\n" + ex.getMessage());
      }
    }
 else {
      exp=read(expFile);
      String dataName;
      do {
        dataName=Utils.getOption('T',args);
        if (dataName.length() != 0) {
          File dataset=new File(dataName);
          exp.getDatasets().addElement(dataset);
        }
      }
 while (dataName.length() != 0);
    }
    System.err.println("Experiment:\n" + exp.toString());
    if (saveFile.length() != 0)     write(saveFile,exp);
    if (runExp) {
      System.err.println("Initializing...");
      exp.initialize();
      System.err.println("Iterating...");
      exp.runExperiment(verbose);
      System.err.println("Postprocessing...");
      exp.postProcess();
    }
  }
 catch (  Exception ex) {
    System.err.println(ex.getMessage());
  }
}
