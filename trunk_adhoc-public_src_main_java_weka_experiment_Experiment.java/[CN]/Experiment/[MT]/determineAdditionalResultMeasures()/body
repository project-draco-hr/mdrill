{
  m_AdditionalMeasures=null;
  FastVector measureNames=new FastVector();
  if (m_ResultProducer instanceof AdditionalMeasureProducer) {
    Enumeration am=((AdditionalMeasureProducer)m_ResultProducer).enumerateMeasures();
    while (am.hasMoreElements()) {
      String mname=(String)am.nextElement();
      if (mname.startsWith("measure")) {
        if (measureNames.indexOf(mname) == -1) {
          measureNames.addElement(mname);
        }
      }
 else {
        throw new Exception("Additional measures in " + m_ResultProducer.getClass().getName() + " must obey the naming convention"+ " of starting with \"measure\"");
      }
    }
  }
  if (m_UsePropertyIterator && (m_PropertyArray != null)) {
    for (int i=0; i < Array.getLength(m_PropertyArray); i++) {
      Object current=Array.get(m_PropertyArray,i);
      if (current instanceof AdditionalMeasureProducer) {
        Enumeration am=((AdditionalMeasureProducer)current).enumerateMeasures();
        while (am.hasMoreElements()) {
          String mname=(String)am.nextElement();
          if (mname.startsWith("measure")) {
            if (measureNames.indexOf(mname) == -1) {
              measureNames.addElement(mname);
            }
          }
 else {
            throw new Exception("Additional measures in " + current.getClass().getName() + " must obey the naming convention"+ " of starting with \"measure\"");
          }
        }
      }
    }
  }
  if (measureNames.size() > 0) {
    m_AdditionalMeasures=new String[measureNames.size()];
    for (int i=0; i < measureNames.size(); i++) {
      m_AdditionalMeasures[i]=(String)measureNames.elementAt(i);
    }
  }
}
