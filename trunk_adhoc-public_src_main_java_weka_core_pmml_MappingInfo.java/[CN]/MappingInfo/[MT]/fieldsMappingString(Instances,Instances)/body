{
  StringBuffer result=new StringBuffer();
  int maxLength=0;
  for (int i=0; i < miningSchemaI.numAttributes(); i++) {
    if (miningSchemaI.attribute(i).name().length() > maxLength) {
      maxLength=miningSchemaI.attribute(i).name().length();
    }
  }
  maxLength+=12;
  int minLength=13;
  String headerS="Mining schema";
  String sep="-------------";
  if (maxLength < minLength) {
    maxLength=minLength;
  }
  headerS=PMMLUtils.pad(headerS," ",maxLength,false);
  sep=PMMLUtils.pad(sep,"-",maxLength,false);
  sep+="\t    ----------------\n";
  headerS+="\t    Incoming fields\n";
  result.append(headerS);
  result.append(sep);
  for (int i=0; i < miningSchemaI.numAttributes(); i++) {
    Attribute temp=miningSchemaI.attribute(i);
    String attName="(" + ((temp.isNumeric()) ? "numeric)" : "nominal)") + " "+ temp.name();
    attName=PMMLUtils.pad(attName," ",maxLength,false);
    attName+="\t--> ";
    result.append(attName);
    Attribute incoming=incomingI.attribute(m_fieldsMap[i]);
    String fieldName="" + (m_fieldsMap[i] + 1) + " ("+ ((incoming.isNumeric()) ? "numeric)" : "nominal)");
    fieldName+=" " + incoming.name();
    result.append(fieldName + "\n");
  }
  m_fieldsMappingText=result.toString();
}
