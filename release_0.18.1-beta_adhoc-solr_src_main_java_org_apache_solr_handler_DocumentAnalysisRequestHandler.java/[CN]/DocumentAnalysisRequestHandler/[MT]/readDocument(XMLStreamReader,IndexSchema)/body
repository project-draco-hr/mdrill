{
  SolrInputDocument doc=new SolrInputDocument();
  String uniqueKeyField=schema.getUniqueKeyField().getName();
  StringBuilder text=new StringBuilder();
  String fieldName=null;
  boolean hasId=false;
  while (true) {
    int event=reader.next();
switch (event) {
case XMLStreamConstants.SPACE:
case XMLStreamConstants.CDATA:
case XMLStreamConstants.CHARACTERS:
      text.append(reader.getText());
    break;
case XMLStreamConstants.END_ELEMENT:
  if ("doc".equals(reader.getLocalName())) {
    if (!hasId) {
      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"All documents must contain a unique key value: '" + doc.toString() + "'");
    }
    return doc;
  }
 else   if ("field".equals(reader.getLocalName())) {
    doc.addField(fieldName,text.toString(),DEFAULT_BOOST);
    if (uniqueKeyField.equals(fieldName)) {
      hasId=true;
    }
  }
break;
case XMLStreamConstants.START_ELEMENT:
text.setLength(0);
String localName=reader.getLocalName();
if (!"field".equals(localName)) {
log.warn("unexpected XML tag doc/" + localName);
throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"unexpected XML tag doc/" + localName);
}
for (int i=0; i < reader.getAttributeCount(); i++) {
String attrName=reader.getAttributeLocalName(i);
if ("name".equals(attrName)) {
fieldName=reader.getAttributeValue(i);
}
}
break;
}
}
}
