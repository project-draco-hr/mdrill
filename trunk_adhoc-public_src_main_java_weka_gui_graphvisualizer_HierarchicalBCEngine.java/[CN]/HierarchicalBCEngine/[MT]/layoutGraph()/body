{
  if (m_nodes == null || m_edges == null)   return;
  Thread th=new Thread(){
    public void run(){
      m_progress.setBorderPainted(true);
      if (nodeLevels == null) {
        makeProperHierarchy();
      }
 else       if (m_completeReLayout == true) {
        clearTemps_and_EdgesFromNodes();
        makeProperHierarchy();
        m_completeReLayout=false;
      }
      if (m_jRbTopdown.isSelected()) {
        int crossbefore=crossings(nodeLevels), crossafter=0, i=0;
        do {
          m_progress.setValue(i + 4);
          m_progress.setString("Minimizing Crossings: Pass" + (i + 1));
          if (i != 0)           crossbefore=crossafter;
          nodeLevels=minimizeCrossings(false,nodeLevels);
          crossafter=crossings(nodeLevels);
          i++;
        }
 while (crossafter < crossbefore && i < 6);
      }
 else {
        int crossbefore=crossings(nodeLevels), crossafter=0, i=0;
        do {
          m_progress.setValue(i + 4);
          m_progress.setString("Minimizing Crossings: Pass" + (i + 1));
          if (i != 0)           crossbefore=crossafter;
          nodeLevels=minimizeCrossings(true,nodeLevels);
          crossafter=crossings(nodeLevels);
          i++;
        }
 while (crossafter < crossbefore && i < 6);
      }
      m_progress.setValue(10);
      m_progress.setString("Laying out vertices");
      if (m_jRbNaiveLayout.isSelected())       naiveLayout();
 else       priorityLayout1();
      m_progress.setValue(11);
      m_progress.setString("Layout Complete");
      m_progress.repaint();
      fireLayoutCompleteEvent(new LayoutCompleteEvent(this));
      m_progress.setValue(0);
      m_progress.setString("");
      m_progress.setBorderPainted(false);
    }
  }
;
  th.start();
}
