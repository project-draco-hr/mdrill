{
  if (!m_checksTurnedOff) {
    getCapabilities().testWithFail(data);
    data=new Instances(data);
    data.deleteWithMissingClass();
  }
  if (!m_checksTurnedOff) {
    m_TransformFilter=new NominalToBinary();
    m_TransformFilter.setInputFormat(data);
    data=Filter.useFilter(data,m_TransformFilter);
    m_MissingFilter=new ReplaceMissingValues();
    m_MissingFilter.setInputFormat(data);
    data=Filter.useFilter(data,m_MissingFilter);
    data.deleteWithMissingClass();
  }
 else {
    m_TransformFilter=null;
    m_MissingFilter=null;
  }
  m_ClassIndex=data.classIndex();
  m_TransformedData=data;
  m_SelectedAttributes=new boolean[data.numAttributes()];
  for (int i=0; i < data.numAttributes(); i++) {
    if (i != m_ClassIndex) {
      m_SelectedAttributes[i]=true;
    }
  }
  m_Coefficients=null;
  m_Means=new double[data.numAttributes()];
  m_StdDevs=new double[data.numAttributes()];
  for (int j=0; j < data.numAttributes(); j++) {
    if (j != data.classIndex()) {
      m_Means[j]=data.meanOrMode(j);
      m_StdDevs[j]=Math.sqrt(data.variance(j));
      if (m_StdDevs[j] == 0) {
        m_SelectedAttributes[j]=false;
      }
    }
  }
  m_ClassStdDev=Math.sqrt(data.variance(m_TransformedData.classIndex()));
  m_ClassMean=data.meanOrMode(m_TransformedData.classIndex());
  findBestModel();
  m_TransformedData=new Instances(data,0);
}
