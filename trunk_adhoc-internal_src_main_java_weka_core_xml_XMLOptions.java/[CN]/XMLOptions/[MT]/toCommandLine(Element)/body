{
  Vector<String> result;
  Vector list;
  Vector subList;
  NodeList subNodeList;
  String[] params;
  int i;
  int n;
  String tmpStr;
  result=new Vector<String>();
  if (parent.getNodeName().equals(TAG_OPTIONS)) {
    list=XMLDocument.getChildTags(parent);
    if (parent.getAttribute(ATT_TYPE).equals(VAL_TYPE_CLASSIFIER)) {
      System.err.println("Type '" + VAL_TYPE_CLASSIFIER + "' is deprecated, "+ "use '"+ VAL_TYPE_OPTIONHANDLER+ "' instead!");
      parent.setAttribute(ATT_TYPE,VAL_TYPE_OPTIONHANDLER);
    }
    if (parent.getAttribute(ATT_TYPE).equals(VAL_TYPE_OPTIONHANDLER)) {
      result.add(parent.getAttribute(ATT_VALUE));
      if ((list.size() > 0) && (parent.getParentNode() != null) && (parent.getParentNode() instanceof Element)&& (((Element)parent.getParentNode()).getNodeName().equals(TAG_OPTION))&& (((Element)parent.getParentNode()).getAttribute(ATT_TYPE).equals(VAL_TYPE_HYPHENS)))       result.add("--");
    }
    for (i=0; i < list.size(); i++) {
      tmpStr=toCommandLine((Element)list.get(i));
      try {
        params=Utils.splitOptions(tmpStr);
        for (n=0; n < params.length; n++)         result.add(params[n]);
      }
 catch (      Exception e) {
        System.err.println("Error splitting: " + tmpStr);
        e.printStackTrace();
      }
    }
  }
 else   if (parent.getNodeName().equals(TAG_OPTION)) {
    subList=XMLDocument.getChildTags(parent);
    subNodeList=parent.getChildNodes();
    result.add("-" + parent.getAttribute(ATT_NAME));
    if (parent.getAttribute(ATT_TYPE).equals(VAL_TYPE_SINGLE)) {
      if ((subNodeList.getLength() > 0) && (subNodeList.item(0).getNodeValue().trim().length() > 0))       result.add(subNodeList.item(0).getNodeValue());
    }
 else     if (parent.getAttribute(ATT_TYPE).equals(VAL_TYPE_QUOTES)) {
      result.add(toCommandLine((Element)subList.get(0)));
    }
 else     if (parent.getAttribute(ATT_TYPE).equals(VAL_TYPE_HYPHENS)) {
      tmpStr=toCommandLine((Element)subList.get(0));
      try {
        params=Utils.splitOptions(tmpStr);
        for (n=0; n < params.length; n++)         result.add(params[n]);
      }
 catch (      Exception e) {
        System.err.println("Error splitting: " + tmpStr);
        e.printStackTrace();
      }
    }
  }
 else {
    System.err.println("Unsupported tag '" + parent.getNodeName() + "' - skipped!");
  }
  return Utils.joinOptions(result.toArray(new String[result.size()]));
}
