{
  double bestVal=Double.MAX_VALUE, currVal, currCutPoint;
  int numMissing=0;
  double[] sumsSquares=new double[3], sumOfWeights=new double[3];
  double[][] bestDist=new double[3][1];
  double totalSum=0, totalSumOfWeights=0;
  for (int i=0; i < m_Instances.numInstances(); i++) {
    Instance inst=m_Instances.instance(i);
    if (!inst.isMissing(index)) {
      m_Distribution[1][0]+=inst.classValue() * inst.weight();
      sumsSquares[1]+=inst.classValue() * inst.classValue() * inst.weight();
      sumOfWeights[1]+=inst.weight();
    }
 else {
      m_Distribution[2][0]+=inst.classValue() * inst.weight();
      sumsSquares[2]+=inst.classValue() * inst.classValue() * inst.weight();
      sumOfWeights[2]+=inst.weight();
      numMissing++;
    }
    totalSumOfWeights+=inst.weight();
    totalSum+=inst.classValue() * inst.weight();
  }
  if (totalSumOfWeights <= 0) {
    return bestVal;
  }
  m_Instances.sort(index);
  for (int i=0; i < m_Instances.numInstances() - (numMissing + 1); i++) {
    Instance inst=m_Instances.instance(i);
    Instance instPlusOne=m_Instances.instance(i + 1);
    m_Distribution[0][0]+=inst.classValue() * inst.weight();
    sumsSquares[0]+=inst.classValue() * inst.classValue() * inst.weight();
    sumOfWeights[0]+=inst.weight();
    m_Distribution[1][0]-=inst.classValue() * inst.weight();
    sumsSquares[1]-=inst.classValue() * inst.classValue() * inst.weight();
    sumOfWeights[1]-=inst.weight();
    if (inst.value(index) < instPlusOne.value(index)) {
      currCutPoint=(inst.value(index) + instPlusOne.value(index)) / 2.0;
      currVal=variance(m_Distribution,sumsSquares,sumOfWeights);
      if (currVal < bestVal) {
        m_SplitPoint=currCutPoint;
        bestVal=currVal;
        for (int j=0; j < 3; j++) {
          if (sumOfWeights[j] > 0) {
            bestDist[j][0]=m_Distribution[j][0] / sumOfWeights[j];
          }
 else {
            bestDist[j][0]=totalSum / totalSumOfWeights;
          }
        }
      }
    }
  }
  m_Distribution=bestDist;
  return bestVal;
}
