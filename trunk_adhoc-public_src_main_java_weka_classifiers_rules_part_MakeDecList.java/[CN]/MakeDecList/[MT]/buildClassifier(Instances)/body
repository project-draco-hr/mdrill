{
  getCapabilities().testWithFail(data);
  data=new Instances(data);
  data.deleteWithMissingClass();
  ClassifierDecList currentRule;
  double currentWeight;
  Instances oldGrowData, newGrowData, oldPruneData, newPruneData;
  int numRules=0;
  theRules=new Vector();
  if ((reducedErrorPruning) && !(unpruned)) {
    Random random=new Random(m_seed);
    data.randomize(random);
    data.stratify(numSetS);
    oldGrowData=data.trainCV(numSetS,numSetS - 1,random);
    oldPruneData=data.testCV(numSetS,numSetS - 1);
  }
 else {
    oldGrowData=data;
    oldPruneData=null;
  }
  while (Utils.gr(oldGrowData.numInstances(),0)) {
    if (unpruned) {
      currentRule=new ClassifierDecList(toSelectModeL,minNumObj);
      ((ClassifierDecList)currentRule).buildRule(oldGrowData);
    }
 else     if (reducedErrorPruning) {
      currentRule=new PruneableDecList(toSelectModeL,minNumObj);
      ((PruneableDecList)currentRule).buildRule(oldGrowData,oldPruneData);
    }
 else {
      currentRule=new C45PruneableDecList(toSelectModeL,CF,minNumObj);
      ((C45PruneableDecList)currentRule).buildRule(oldGrowData);
    }
    numRules++;
    newGrowData=new Instances(oldGrowData,oldGrowData.numInstances());
    Enumeration enu=oldGrowData.enumerateInstances();
    while (enu.hasMoreElements()) {
      Instance instance=(Instance)enu.nextElement();
      currentWeight=currentRule.weight(instance);
      if (Utils.sm(currentWeight,1)) {
        instance.setWeight(instance.weight() * (1 - currentWeight));
        newGrowData.add(instance);
      }
    }
    newGrowData.compactify();
    oldGrowData=newGrowData;
    if ((reducedErrorPruning) && !(unpruned)) {
      newPruneData=new Instances(oldPruneData,oldPruneData.numInstances());
      enu=oldPruneData.enumerateInstances();
      while (enu.hasMoreElements()) {
        Instance instance=(Instance)enu.nextElement();
        currentWeight=currentRule.weight(instance);
        if (Utils.sm(currentWeight,1)) {
          instance.setWeight(instance.weight() * (1 - currentWeight));
          newPruneData.add(instance);
        }
      }
      newPruneData.compactify();
      oldPruneData=newPruneData;
    }
    theRules.addElement(currentRule);
  }
}
