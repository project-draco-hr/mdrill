{
  Sort groupSort=rb.getGroupingSpec().getGroupSort();
  String[] fields=rb.getGroupingSpec().getFields();
  String[] queries=rb.getGroupingSpec().getQueries();
  Sort sortWithinGroup=rb.getGroupingSpec().getSortWithinGroup();
  int groupOffsetDefault;
  if (rb.getGroupingSpec().getResponseFormat() == Grouping.Format.simple || rb.getGroupingSpec().isMain()) {
    groupOffsetDefault=0;
  }
 else {
    groupOffsetDefault=rb.getGroupingSpec().getGroupOffset();
  }
  int docsPerGroupDefault=rb.getGroupingSpec().getGroupLimit();
  Map<String,List<TopGroups<String>>> commandTopGroups=new HashMap<String,List<TopGroups<String>>>();
  for (  String field : fields) {
    commandTopGroups.put(field,new ArrayList<TopGroups<String>>());
  }
  Map<String,List<QueryCommandResult>> commandTopDocs=new HashMap<String,List<QueryCommandResult>>();
  for (  String query : queries) {
    commandTopDocs.put(query,new ArrayList<QueryCommandResult>());
  }
  TopGroupsResultTransformer serializer=new TopGroupsResultTransformer(rb);
  for (  ShardResponse srsp : shardRequest.responses) {
    NamedList<NamedList> secondPhaseResult=(NamedList<NamedList>)srsp.getSolrResponse().getResponse().get("secondPhase");
    Map<String,?> result=serializer.transformToNative(secondPhaseResult,groupSort,sortWithinGroup,srsp.getShard());
    for (    String field : commandTopGroups.keySet()) {
      TopGroups<String> topGroups=(TopGroups<String>)result.get(field);
      if (topGroups == null) {
        continue;
      }
      commandTopGroups.get(field).add(topGroups);
    }
    for (    String query : queries) {
      commandTopDocs.get(query).add((QueryCommandResult)result.get(query));
    }
  }
  try {
    for (    String groupField : commandTopGroups.keySet()) {
      List<TopGroups<String>> topGroups=commandTopGroups.get(groupField);
      if (topGroups.isEmpty()) {
        continue;
      }
      TopGroups<String>[] topGroupsArr=new TopGroups[topGroups.size()];
      rb.mergedTopGroups.put(groupField,TopGroups.merge(topGroups.toArray(topGroupsArr),groupSort,sortWithinGroup,groupOffsetDefault,docsPerGroupDefault));
    }
    for (    String query : commandTopDocs.keySet()) {
      List<QueryCommandResult> queryCommandResults=commandTopDocs.get(query);
      List<TopDocs> topDocs=new ArrayList<TopDocs>(queryCommandResults.size());
      int mergedMatches=0;
      for (      QueryCommandResult queryCommandResult : queryCommandResults) {
        topDocs.add(queryCommandResult.getTopDocs());
        mergedMatches+=queryCommandResult.getMatches();
      }
      int topN=rb.getGroupingSpec().getOffset() + rb.getGroupingSpec().getLimit();
      TopDocs mergedTopDocs=TopDocs.merge(sortWithinGroup,topN,topDocs.toArray(new TopDocs[topDocs.size()]));
      rb.mergedQueryCommandResults.put(query,new QueryCommandResult(mergedTopDocs,mergedMatches));
    }
    Map<Object,ShardDoc> resultIds=new HashMap<Object,ShardDoc>();
    int i=0;
    for (    TopGroups<String> topGroups : rb.mergedTopGroups.values()) {
      for (      GroupDocs<String> group : topGroups.groups) {
        for (        ScoreDoc scoreDoc : group.scoreDocs) {
          ShardDoc solrDoc=(ShardDoc)scoreDoc;
          solrDoc.positionInResponse=i++;
          resultIds.put(solrDoc.id,solrDoc);
        }
      }
    }
    for (    QueryCommandResult queryCommandResult : rb.mergedQueryCommandResults.values()) {
      for (      ScoreDoc scoreDoc : queryCommandResult.getTopDocs().scoreDocs) {
        ShardDoc solrDoc=(ShardDoc)scoreDoc;
        solrDoc.positionInResponse=i++;
        resultIds.put(solrDoc.id,solrDoc);
      }
    }
    rb.resultIds=resultIds;
  }
 catch (  IOException e) {
    throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,e);
  }
}
