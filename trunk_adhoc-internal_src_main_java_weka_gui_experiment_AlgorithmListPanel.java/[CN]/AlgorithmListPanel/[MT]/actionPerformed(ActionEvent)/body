{
  if (e.getSource() == m_AddBut) {
    m_Editing=false;
    if (m_PD == null) {
      int x=getLocationOnScreen().x;
      int y=getLocationOnScreen().y;
      if (PropertyDialog.getParentDialog(this) != null)       m_PD=new PropertyDialog(PropertyDialog.getParentDialog(this),m_ClassifierEditor,x,y);
 else       m_PD=new PropertyDialog(PropertyDialog.getParentFrame(this),m_ClassifierEditor,x,y);
      m_PD.setVisible(true);
    }
 else {
      m_PD.setVisible(true);
    }
  }
 else   if (e.getSource() == m_EditBut) {
    if (m_List.getSelectedValue() != null) {
      m_ClassifierEditor.setClassType(weka.classifiers.Classifier.class);
      m_ClassifierEditor.setValue(m_List.getSelectedValue());
      m_Editing=true;
      if (m_PD == null) {
        int x=getLocationOnScreen().x;
        int y=getLocationOnScreen().y;
        if (PropertyDialog.getParentDialog(this) != null)         m_PD=new PropertyDialog(PropertyDialog.getParentDialog(this),m_ClassifierEditor,x,y);
 else         m_PD=new PropertyDialog(PropertyDialog.getParentFrame(this),m_ClassifierEditor,x,y);
        m_PD.setVisible(true);
      }
 else {
        m_PD.setVisible(true);
      }
    }
  }
 else   if (e.getSource() == m_DeleteBut) {
    int[] selected=m_List.getSelectedIndices();
    if (selected != null) {
      for (int i=selected.length - 1; i >= 0; i--) {
        int current=selected[i];
        m_AlgorithmListModel.removeElementAt(current);
        if (m_Exp.getDatasets().size() > current) {
          m_List.setSelectedIndex(current);
        }
 else {
          m_List.setSelectedIndex(current - 1);
        }
      }
    }
    if (m_List.getSelectedIndex() == -1) {
      m_EditBut.setEnabled(false);
      m_DeleteBut.setEnabled(false);
      m_LoadOptionsBut.setEnabled(false);
      m_SaveOptionsBut.setEnabled(false);
      m_UpBut.setEnabled(false);
      m_DownBut.setEnabled(false);
    }
    updateExperiment();
  }
 else   if (e.getSource() == m_LoadOptionsBut) {
    if (m_List.getSelectedValue() != null) {
      int returnVal=m_FileChooser.showOpenDialog(this);
      if (returnVal == JFileChooser.APPROVE_OPTION) {
        try {
          File file=m_FileChooser.getSelectedFile();
          if (!file.getAbsolutePath().toLowerCase().endsWith(".xml"))           file=new File(file.getAbsolutePath() + ".xml");
          XMLClassifier xmlcls=new XMLClassifier();
          Classifier c=(Classifier)xmlcls.read(file);
          m_AlgorithmListModel.setElementAt(c,m_List.getSelectedIndex());
          updateExperiment();
        }
 catch (        Exception ex) {
          ex.printStackTrace();
        }
      }
    }
  }
 else   if (e.getSource() == m_SaveOptionsBut) {
    if (m_List.getSelectedValue() != null) {
      int returnVal=m_FileChooser.showSaveDialog(this);
      if (returnVal == JFileChooser.APPROVE_OPTION) {
        try {
          File file=m_FileChooser.getSelectedFile();
          if (!file.getAbsolutePath().toLowerCase().endsWith(".xml"))           file=new File(file.getAbsolutePath() + ".xml");
          XMLClassifier xmlcls=new XMLClassifier();
          xmlcls.write(file,m_List.getSelectedValue());
        }
 catch (        Exception ex) {
          ex.printStackTrace();
        }
      }
    }
  }
 else   if (e.getSource() == m_UpBut) {
    JListHelper.moveUp(m_List);
    updateExperiment();
  }
 else   if (e.getSource() == m_DownBut) {
    JListHelper.moveDown(m_List);
    updateExperiment();
  }
}
