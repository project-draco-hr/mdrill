{
  if (m_useDefaultModel) {
    StringBuffer buf=new StringBuffer();
    buf.append(this.getClass().getName().replaceAll(".*\\.","") + "\n");
    buf.append(this.getClass().getName().replaceAll(".*\\.","").replaceAll(".","=") + "\n\n");
    buf.append("Warning: No model could be built, hence ZeroR model is used:\n\n");
    buf.append(m_ZeroR.toString());
    return buf.toString();
  }
  StringBuffer model=new StringBuffer(m_neuralNodes.length * 100);
  NeuralNode con;
  double[] weights;
  NeuralConnection[] inputs;
  for (int noa=0; noa < m_neuralNodes.length; noa++) {
    con=(NeuralNode)m_neuralNodes[noa];
    weights=con.getWeights();
    inputs=con.getInputs();
    if (con.getMethod() instanceof SigmoidUnit) {
      model.append("Sigmoid ");
    }
 else     if (con.getMethod() instanceof LinearUnit) {
      model.append("Linear ");
    }
    model.append("Node " + con.getId() + "\n    Inputs    Weights\n");
    model.append("    Threshold    " + weights[0] + "\n");
    for (int nob=1; nob < con.getNumInputs() + 1; nob++) {
      if ((inputs[nob - 1].getType() & NeuralConnection.PURE_INPUT) == NeuralConnection.PURE_INPUT) {
        model.append("    Attrib " + m_instances.attribute(((NeuralEnd)inputs[nob - 1]).getLink()).name() + "    "+ weights[nob]+ "\n");
      }
 else {
        model.append("    Node " + inputs[nob - 1].getId() + "    "+ weights[nob]+ "\n");
      }
    }
  }
  for (int noa=0; noa < m_outputs.length; noa++) {
    inputs=m_outputs[noa].getInputs();
    model.append("Class " + m_instances.classAttribute().value(m_outputs[noa].getLink()) + "\n    Input\n");
    for (int nob=0; nob < m_outputs[noa].getNumInputs(); nob++) {
      if ((inputs[nob].getType() & NeuralConnection.PURE_INPUT) == NeuralConnection.PURE_INPUT) {
        model.append("    Attrib " + m_instances.attribute(((NeuralEnd)inputs[nob]).getLink()).name() + "\n");
      }
 else {
        model.append("    Node " + inputs[nob].getId() + "\n");
      }
    }
  }
  return model.toString();
}
