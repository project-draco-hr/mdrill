{
  double[] values=new double[m_TM.size()];
  double[] weights=new double[m_TM.size()];
  Iterator<Map.Entry<Double,Double>> itr=m_TM.entrySet().iterator();
  int j=0;
  while (itr.hasNext()) {
    Map.Entry<Double,Double> entry=itr.next();
    values[j]=entry.getKey();
    weights[j]=entry.getValue();
    j++;
  }
  double freq=m_SumOfWeights / m_NumBins;
  double[] cutPoints=new double[m_NumBins - 1];
  double[] binWeights=new double[m_NumBins];
  double sumOfWeights=m_SumOfWeights;
  double weightSumSoFar=0, lastWeightSum=0;
  int cpindex=0, lastIndex=-1;
  for (int i=0; i < values.length - 1; i++) {
    weightSumSoFar+=weights[i];
    sumOfWeights-=weights[i];
    if (weightSumSoFar >= freq) {
      if (((freq - lastWeightSum) < (weightSumSoFar - freq)) && (lastIndex != -1)) {
        cutPoints[cpindex]=(values[lastIndex] + values[lastIndex + 1]) / 2;
        weightSumSoFar-=lastWeightSum;
        binWeights[cpindex]=lastWeightSum;
        lastWeightSum=weightSumSoFar;
        lastIndex=i;
      }
 else {
        cutPoints[cpindex]=(values[i] + values[i + 1]) / 2;
        binWeights[cpindex]=weightSumSoFar;
        weightSumSoFar=0;
        lastWeightSum=0;
        lastIndex=-1;
      }
      cpindex++;
      freq=(sumOfWeights + weightSumSoFar) / ((cutPoints.length + 1) - cpindex);
    }
 else {
      lastIndex=i;
      lastWeightSum=weightSumSoFar;
    }
  }
  if ((cpindex < cutPoints.length) && (lastIndex != -1)) {
    cutPoints[cpindex]=(values[lastIndex] + values[lastIndex + 1]) / 2;
    binWeights[cpindex]=lastWeightSum;
    cpindex++;
    binWeights[cpindex]=weightSumSoFar - lastWeightSum;
  }
 else {
    binWeights[cpindex]=weightSumSoFar;
  }
  if (cpindex == 0) {
    m_Boundaries=null;
    m_Weights=null;
  }
 else {
    binWeights[cpindex]+=weights[values.length - 1];
    m_Boundaries=new double[cpindex + 2];
    m_Boundaries[0]=m_TM.firstKey();
    m_Boundaries[cpindex + 1]=m_TM.lastKey();
    System.arraycopy(cutPoints,0,m_Boundaries,1,cpindex);
    m_Weights=new double[cpindex + 1];
    System.arraycopy(binWeights,0,m_Weights,0,cpindex + 1);
  }
}
