{
  RE r=new RE("(a*)b");
  say("Serialized/deserialized (a*)b");
  ByteArrayOutputStream out=new ByteArrayOutputStream(128);
  new ObjectOutputStream(out).writeObject(r);
  ByteArrayInputStream in=new ByteArrayInputStream(out.toByteArray());
  r=(RE)new ObjectInputStream(in).readObject();
  if (!r.match("aaab")) {
    fail("Did not match 'aaab' with deserialized RE.");
  }
 else {
    say("aaaab = true");
    showParens(r);
  }
  out.reset();
  say("Deserialized (a*)b");
  new ObjectOutputStream(out).writeObject(r);
  in=new ByteArrayInputStream(out.toByteArray());
  r=(RE)new ObjectInputStream(in).readObject();
  if (r.getParenCount() != 0) {
    fail("Has parens after deserialization.");
  }
  if (!r.match("aaab")) {
    fail("Did not match 'aaab' with deserialized RE.");
  }
 else {
    say("aaaab = true");
    showParens(r);
  }
  r=new RE("abc(\\w*)");
  say("MATCH_CASEINDEPENDENT abc(\\w*)");
  r.setMatchFlags(RE.MATCH_CASEINDEPENDENT);
  say("abc(d*)");
  if (!r.match("abcddd")) {
    fail("Did not match 'abcddd'.");
  }
 else {
    say("abcddd = true");
    showParens(r);
  }
  if (!r.match("aBcDDdd")) {
    fail("Did not match 'aBcDDdd'.");
  }
 else {
    say("aBcDDdd = true");
    showParens(r);
  }
  if (!r.match("ABCDDDDD")) {
    fail("Did not match 'ABCDDDDD'.");
  }
 else {
    say("ABCDDDDD = true");
    showParens(r);
  }
  r=new RE("(A*)b\\1");
  r.setMatchFlags(RE.MATCH_CASEINDEPENDENT);
  if (!r.match("AaAaaaBAAAAAA")) {
    fail("Did not match 'AaAaaaBAAAAAA'.");
  }
 else {
    say("AaAaaaBAAAAAA = true");
    showParens(r);
  }
  r=new RE("[A-Z]*");
  r.setMatchFlags(RE.MATCH_CASEINDEPENDENT);
  if (!r.match("CaBgDe12")) {
    fail("Did not match 'CaBgDe12'.");
  }
 else {
    say("CaBgDe12 = true");
    showParens(r);
  }
  r=new RE("^abc$");
  if (r.match("\nabc")) {
    fail("\"\\nabc\" matches \"^abc$\"");
  }
  r=new RE("^abc$",RE.MATCH_MULTILINE);
  if (!r.match("\nabc")) {
    fail("\"\\nabc\" doesn't match \"^abc$\"");
  }
  if (!r.match("\rabc")) {
    fail("\"\\rabc\" doesn't match \"^abc$\"");
  }
  if (!r.match("\r\nabc")) {
    fail("\"\\r\\nabc\" doesn't match \"^abc$\"");
  }
  if (!r.match("\u0085abc")) {
    fail("\"\\u0085abc\" doesn't match \"^abc$\"");
  }
  if (!r.match("\u2028abc")) {
    fail("\"\\u2028abc\" doesn't match \"^abc$\"");
  }
  if (!r.match("\u2029abc")) {
    fail("\"\\u2029abc\" doesn't match \"^abc$\"");
  }
  r=new RE("^a.*b$",RE.MATCH_MULTILINE);
  if (r.match("a\nb")) {
    fail("\"a\\nb\" matches \"^a.*b$\"");
  }
  if (r.match("a\rb")) {
    fail("\"a\\rb\" matches \"^a.*b$\"");
  }
  if (r.match("a\r\nb")) {
    fail("\"a\\r\\nb\" matches \"^a.*b$\"");
  }
  if (r.match("a\u0085b")) {
    fail("\"a\\u0085b\" matches \"^a.*b$\"");
  }
  if (r.match("a\u2028b")) {
    fail("\"a\\u2028b\" matches \"^a.*b$\"");
  }
  if (r.match("a\u2029b")) {
    fail("\"a\\u2029b\" matches \"^a.*b$\"");
  }
}
