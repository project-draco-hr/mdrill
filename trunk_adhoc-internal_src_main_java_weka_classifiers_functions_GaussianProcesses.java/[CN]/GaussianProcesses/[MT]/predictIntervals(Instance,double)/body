{
  inst=filterInstance(inst);
  Matrix k=new Matrix(m_NumTrain,1);
  for (int i=0; i < m_NumTrain; i++) {
    k.set(i,0,m_kernel.eval(-1,i,inst));
  }
  double estimate=k.transpose().times(m_t).get(0,0) + m_avg_target;
  double sigma=computeStdDev(inst,k);
  confidenceLevel=1.0 - ((1.0 - confidenceLevel) / 2.0);
  double z=Statistics.normalInverse(confidenceLevel);
  double[][] interval=new double[1][2];
  interval[0][0]=estimate - z * sigma;
  interval[0][1]=estimate + z * sigma;
  interval[0][0]=(interval[0][0] - m_Blin) / m_Alin;
  interval[0][1]=(interval[0][1] - m_Blin) / m_Alin;
  return interval;
}
