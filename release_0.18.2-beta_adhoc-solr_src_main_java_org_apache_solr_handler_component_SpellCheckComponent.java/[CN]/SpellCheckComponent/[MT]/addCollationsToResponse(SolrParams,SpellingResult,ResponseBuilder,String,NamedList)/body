{
  int maxCollations=params.getInt(SPELLCHECK_MAX_COLLATIONS,1);
  int maxCollationTries=params.getInt(SPELLCHECK_MAX_COLLATION_TRIES,0);
  int maxCollationEvaluations=params.getInt(SPELLCHECK_MAX_COLLATION_EVALUATIONS,10000);
  boolean collationExtendedResults=params.getBool(SPELLCHECK_COLLATE_EXTENDED_RESULTS,false);
  boolean shard=params.getBool(ShardParams.IS_SHARD,false);
  SpellCheckCollator collator=new SpellCheckCollator();
  List<SpellCheckCollation> collations=collator.collate(spellingResult,q,rb,maxCollations,maxCollationTries,maxCollationEvaluations);
  Collections.sort(collations);
  for (  SpellCheckCollation collation : collations) {
    if (collationExtendedResults) {
      NamedList extendedResult=new NamedList();
      extendedResult.add("collationQuery",collation.getCollationQuery());
      extendedResult.add("hits",collation.getHits());
      extendedResult.add("misspellingsAndCorrections",collation.getMisspellingsAndCorrections());
      if (maxCollationTries > 0 && shard) {
        extendedResult.add("collationInternalRank",collation.getInternalRank());
      }
      response.add("collation",extendedResult);
    }
 else {
      response.add("collation",collation.getCollationQuery());
      if (maxCollationTries > 0 && shard) {
        response.add("collationInternalRank",collation.getInternalRank());
      }
    }
  }
}
