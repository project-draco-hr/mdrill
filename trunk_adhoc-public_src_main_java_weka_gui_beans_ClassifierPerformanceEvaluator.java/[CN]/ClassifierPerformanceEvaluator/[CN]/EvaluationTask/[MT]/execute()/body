{
  if (m_stopped) {
    return;
  }
  if (m_logger != null) {
    m_logger.statusMessage(statusMessagePrefix() + "Evaluating (" + m_setNum+ ")...");
    m_visual.setAnimated();
  }
  try {
    ClassifierErrorsPlotInstances plotInstances=ExplorerDefaults.getClassifierErrorsPlotInstances();
    Evaluation eval=null;
    if (m_trainData == null || m_trainData.numInstances() == 0) {
      eval=new Evaluation(m_testData);
      plotInstances.setInstances(m_testData);
      plotInstances.setClassifier(m_classifier);
      plotInstances.setClassIndex(m_testData.classIndex());
      plotInstances.setEvaluation(eval);
      eval=adjustForInputMappedClassifier(eval,m_classifier,m_testData,plotInstances);
      eval.useNoPriors();
    }
 else {
      eval=new Evaluation(m_trainData);
      plotInstances.setInstances(m_trainData);
      plotInstances.setClassifier(m_classifier);
      plotInstances.setClassIndex(m_trainData.classIndex());
      plotInstances.setEvaluation(eval);
      eval=adjustForInputMappedClassifier(eval,m_classifier,m_trainData,plotInstances);
    }
    plotInstances.setUp();
    for (int i=0; i < m_testData.numInstances(); i++) {
      if (m_stopped) {
        break;
      }
      Instance temp=m_testData.instance(i);
      plotInstances.process(temp,m_classifier,eval);
    }
    if (m_stopped) {
      return;
    }
    aggregateEvalTask(eval,m_classifier,m_testData,plotInstances,m_setNum,m_maxSetNum);
  }
 catch (  Exception ex) {
    ClassifierPerformanceEvaluator.this.stop();
    if (m_logger != null) {
      m_logger.logMessage("[ClassifierPerformanceEvaluator] " + statusMessagePrefix() + " problem evaluating classifier. "+ ex.getMessage());
    }
    ex.printStackTrace();
  }
}
