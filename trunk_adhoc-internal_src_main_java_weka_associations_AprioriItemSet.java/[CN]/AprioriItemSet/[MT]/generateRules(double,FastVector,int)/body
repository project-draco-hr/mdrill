{
  FastVector premises=new FastVector(), consequences=new FastVector(), conf=new FastVector();
  FastVector lift=new FastVector(), lev=new FastVector(), conv=new FastVector();
  FastVector[] rules=new FastVector[6], moreResults;
  AprioriItemSet premise, consequence;
  Hashtable hashtable=(Hashtable)hashtables.elementAt(numItemsInSet - 2);
  for (int i=0; i < m_items.length; i++)   if (m_items[i] != -1) {
    premise=new AprioriItemSet(m_totalTransactions);
    consequence=new AprioriItemSet(m_totalTransactions);
    premise.m_items=new int[m_items.length];
    consequence.m_items=new int[m_items.length];
    consequence.m_counter=m_counter;
    for (int j=0; j < m_items.length; j++)     consequence.m_items[j]=-1;
    System.arraycopy(m_items,0,premise.m_items,0,m_items.length);
    premise.m_items[i]=-1;
    consequence.m_items[i]=m_items[i];
    premise.m_counter=((Integer)hashtable.get(premise)).intValue();
    Hashtable hashtableForConsequence=(Hashtable)hashtables.elementAt(0);
    int consequenceUnconditionedCounter=((Integer)hashtableForConsequence.get(consequence)).intValue();
    premises.addElement(premise);
    consequences.addElement(consequence);
    conf.addElement(new Double(confidenceForRule(premise,consequence)));
    double tempLift=liftForRule(premise,consequence,consequenceUnconditionedCounter);
    double tempLev=leverageForRule(premise,consequence,premise.m_counter,consequenceUnconditionedCounter);
    double tempConv=convictionForRule(premise,consequence,premise.m_counter,consequenceUnconditionedCounter);
    lift.addElement(new Double(tempLift));
    lev.addElement(new Double(tempLev));
    conv.addElement(new Double(tempConv));
  }
  rules[0]=premises;
  rules[1]=consequences;
  rules[2]=conf;
  rules[3]=lift;
  rules[4]=lev;
  rules[5]=conv;
  pruneRules(rules,minConfidence);
  moreResults=moreComplexRules(rules,numItemsInSet,1,minConfidence,hashtables);
  if (moreResults != null)   for (int i=0; i < moreResults[0].size(); i++) {
    rules[0].addElement(moreResults[0].elementAt(i));
    rules[1].addElement(moreResults[1].elementAt(i));
    rules[2].addElement(moreResults[2].elementAt(i));
    rules[3].addElement(moreResults[3].elementAt(i));
    rules[4].addElement(moreResults[4].elementAt(i));
    rules[5].addElement(moreResults[5].elementAt(i));
  }
  return rules;
}
