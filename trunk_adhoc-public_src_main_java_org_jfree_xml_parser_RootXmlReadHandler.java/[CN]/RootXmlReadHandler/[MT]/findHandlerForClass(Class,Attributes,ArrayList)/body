{
  final ObjectFactory genericFactory=getFactoryLoader();
  if (history.contains(classToRead)) {
    throw new IllegalStateException("Circular reference detected: " + history);
  }
  history.add(classToRead);
  ManualMappingDefinition manualDefinition=this.classToHandlerMapping.getManualMappingDefinition(classToRead);
  if (manualDefinition == null) {
    manualDefinition=genericFactory.getManualMappingDefinition(classToRead);
  }
  if (manualDefinition != null) {
    return loadHandlerClass(manualDefinition.getReadHandler());
  }
  MultiplexMappingDefinition mplex=getFactoryLoader().getMultiplexDefinition(classToRead);
  if (mplex == null) {
    mplex=this.classToHandlerMapping.getMultiplexDefinition(classToRead);
  }
  if (mplex != null) {
    final String attributeValue=atts.getValue(mplex.getAttributeName());
    if (attributeValue == null) {
      throw new XmlReaderException("Multiplexer type attribute is not defined: " + mplex.getAttributeName() + " for "+ classToRead);
    }
    final MultiplexMappingEntry entry=mplex.getEntryForType(attributeValue);
    if (entry == null) {
      throw new XmlReaderException("Invalid type attribute value: " + mplex.getAttributeName() + " = "+ attributeValue);
    }
    final Class c=loadClass(entry.getTargetClass());
    if (!c.equals(mplex.getBaseClass())) {
      return findHandlerForClass(c,atts,history);
    }
  }
  if (this.classToHandlerMapping.isGenericHandler(classToRead)) {
    return new GenericReadHandler(this.classToHandlerMapping.getFactoryForClass(classToRead));
  }
  if (getFactoryLoader().isGenericHandler(classToRead)) {
    return new GenericReadHandler(getFactoryLoader().getFactoryForClass(classToRead));
  }
  return null;
}
