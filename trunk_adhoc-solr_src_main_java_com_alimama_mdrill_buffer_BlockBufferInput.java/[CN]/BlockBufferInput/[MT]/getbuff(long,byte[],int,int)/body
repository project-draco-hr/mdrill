{
  long blockIndex=position >> BLOCK_SIZE_OFFSET;
  long blocktart=blockIndex << BLOCK_SIZE_OFFSET;
  blockData blockdata=null;
  if (blockIndex == this.lastBlockIndex) {
    blockdata=this.lastbuff;
  }
  if (blockdata == null) {
    block blk=new block(this.key,blockIndex);
    blockdata=(blockData)GrobalCache.fieldValueCache.get(blk);
    if (blockdata == null) {
synchronized (lock) {
        blockdata=(blockData)GrobalCache.fieldValueCache.get(blk);
        if (blockdata == null) {
          long end=this.length();
          int size=BLOCK_SIZE;
          if (blocktart + size >= end) {
            size=(int)(end - blocktart);
          }
          blockdata=BlockBufferMalloc.malloc(size);
synchronized (this.descriptor.in) {
            this.descriptor.in.seek(blocktart);
            this.descriptor.in.readBytes(blockdata.buff,0,size);
          }
          blockdata.allowFree.incrementAndGet();
          GrobalCache.fieldValueCache.put(blk,blockdata);
          createcount++;
        }
 else {
          blockdata.allowFree.incrementAndGet();
        }
      }
    }
 else {
      blockdata.allowFree.incrementAndGet();
    }
    this.lastbuff.allowFree.decrementAndGet();
    this.lastbuff=blockdata;
    this.lastBlockIndex=blockIndex;
  }
  int blockoffset=(int)(position - blocktart);
  int leftsize=blockdata.size - blockoffset;
  int returnsize=leftsize;
  if (len < returnsize) {
    returnsize=len;
  }
  System.arraycopy(blockdata.buff,blockoffset,b,offset,returnsize);
  return returnsize;
}
