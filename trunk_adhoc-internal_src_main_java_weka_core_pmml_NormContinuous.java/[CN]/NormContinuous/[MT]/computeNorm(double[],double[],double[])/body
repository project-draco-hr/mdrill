{
  double result=0.0;
  if (Utils.isMissingValue(incoming[m_fieldIndex])) {
    if (m_mapMissingDefined) {
      result=m_mapMissingTo;
    }
 else {
      result=incoming[m_fieldIndex];
    }
  }
 else {
    double x=incoming[m_fieldIndex];
    if (x < a[0]) {
      if (m_outlierTreatmentMethod == MiningFieldMetaInfo.Outlier.ASIS) {
        double slope=(b[1] - b[0]) / (a[1] - a[0]);
        double offset=b[0] - (slope * a[0]);
        result=slope * x + offset;
      }
 else       if (m_outlierTreatmentMethod == MiningFieldMetaInfo.Outlier.ASEXTREMEVALUES) {
        result=b[0];
      }
 else {
        result=m_mapMissingTo;
      }
    }
 else     if (x > a[a.length - 1]) {
      int length=a.length;
      if (m_outlierTreatmentMethod == MiningFieldMetaInfo.Outlier.ASIS) {
        double slope=(b[length - 1] - b[length - 2]) / (a[length - 1] - a[length - 2]);
        double offset=b[length - 1] - (slope * a[length - 1]);
        result=slope * x + offset;
      }
 else       if (m_outlierTreatmentMethod == MiningFieldMetaInfo.Outlier.ASEXTREMEVALUES) {
        result=b[length - 1];
      }
 else {
        result=m_mapMissingTo;
      }
    }
 else {
      for (int i=1; i < a.length; i++) {
        if (x <= a[i]) {
          result=b[i - 1];
          result+=((x - a[i - 1]) / (a[i] - a[i - 1]) * (b[i] - b[i - 1]));
          break;
        }
      }
    }
  }
  return result;
}
