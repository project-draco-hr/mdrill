{
  Ease a;
  Edge e;
  Node r, nf=null, ns=null, mark;
  int l=0, times=0;
  int f, s, tf=0, ts=0, pf, ps;
  while ((a=overlap(l)) != null) {
    times++;
    f=a.m_place;
    s=a.m_place + 1;
    while (f != s) {
      a.m_lev--;
      tf=f;
      ts=s;
      f=m_groups[f].m_pg;
      s=m_groups[s].m_pg;
    }
    l=a.m_lev;
    pf=0;
    ps=0;
    r=m_groups[f].m_p;
    mark=m_groups[tf].m_p;
    nf=null;
    ns=null;
    for (int noa=0; nf != mark; noa++) {
      pf++;
      nf=r.getChild(noa).getTarget();
    }
    mark=m_groups[ts].m_p;
    for (int noa=pf; ns != mark; noa++) {
      ps++;
      ns=r.getChild(noa).getTarget();
    }
    Vector o_pos=new Vector(20,10);
    for (int noa=0; (e=r.getChild(noa)) != null; noa++) {
      if (e.getTarget().getParent(0) == e) {
        Double tem=new Double(e.getTarget().getCenter());
        o_pos.addElement(tem);
      }
    }
    pf--;
    double inc=a.m_amount / (double)ps;
    for (int noa=0; (e=r.getChild(noa)) != null; noa++) {
      ns=e.getTarget();
      if (ns.getParent(0) == e) {
        if (noa > pf + ps) {
          ns.adjustCenter(a.m_amount);
        }
 else         if (noa > pf) {
          ns.adjustCenter(inc * (double)(noa - pf));
        }
      }
    }
    nf=r.getChild(0).getTarget();
    inc=ns.getCenter() - nf.getCenter();
    m_groups[f].m_size=inc;
    m_groups[f].m_left=r.getCenter() - inc / 2;
    m_groups[f].m_right=m_groups[f].m_left + inc;
    inc=m_groups[f].m_left - nf.getCenter();
    double shift;
    int g_num=0;
    for (int noa=0; (e=r.getChild(noa)) != null; noa++) {
      ns=e.getTarget();
      if (ns.getParent(0) == e) {
        ns.adjustCenter(inc);
        shift=ns.getCenter() - ((Double)o_pos.elementAt(noa)).doubleValue();
        if (ns.getChild(0) != null) {
          moveSubtree(m_groups[f].m_start + g_num,shift);
          g_num++;
        }
      }
    }
  }
}
