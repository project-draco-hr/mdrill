{
  Vector result=new Vector();
  Enumeration enm=super.listOptions();
  while (enm.hasMoreElements())   result.add(enm.nextElement());
  result.addElement(new Option("\tSpecifies the (maximum) number of bins to divide numeric" + " attributes into.\n" + "\t(default = 10)","B",1,"-B <num>"));
  result.addElement(new Option("\tSpecifies the desired weight of instances per bin for\n" + "\tequal-frequency binning. If this is set to a positive\n" + "\tnumber then the -B option will be ignored.\n"+ "\t(default = -1)","M",1,"-M <num>"));
  result.addElement(new Option("\tUse equal-frequency instead of equal-width discretization.","F",0,"-F"));
  result.addElement(new Option("\tOptimize number of bins using leave-one-out estimate\n" + "\tof estimated entropy (for equal-width discretization).\n" + "\tIf this is set then the -B option will be ignored.","O",0,"-O"));
  result.addElement(new Option("\tSpecifies list of columns to Discretize. First" + " and last are valid indexes.\n" + "\t(default: first-last)","R",1,"-R <col1,col2-col4,...>"));
  result.addElement(new Option("\tInvert matching sense of column indexes.","V",0,"-V"));
  result.addElement(new Option("\tOutput binary attributes for discretized attributes.","D",0,"-D"));
  return result.elements();
}
