{
  super(dataDictionary,miningSchema);
  String mType=model.getAttribute("modelType");
  boolean found=false;
  for (  ModelType m : ModelType.values()) {
    if (m.toString().equals(mType)) {
      m_modelType=m;
      found=true;
      break;
    }
  }
  if (!found) {
    throw new Exception("[GeneralRegression] unknown model type: " + mType);
  }
  if (m_modelType == ModelType.ORDINALMULTINOMIAL) {
    String cLink=model.getAttribute("cumulativeLink");
    found=false;
    for (    CumulativeLinkFunction c : CumulativeLinkFunction.values()) {
      if (c.toString().equals(cLink)) {
        m_cumulativeLinkFunction=c;
        found=true;
        break;
      }
    }
    if (!found) {
      throw new Exception("[GeneralRegression] cumulative link function " + cLink);
    }
  }
 else   if (m_modelType == ModelType.GENERALIZEDLINEAR || m_modelType == ModelType.GENERALLINEAR) {
    String link=model.getAttribute("linkFunction");
    found=false;
    for (    LinkFunction l : LinkFunction.values()) {
      if (l.toString().equals(link)) {
        m_linkFunction=l;
        found=true;
        break;
      }
    }
    if (!found) {
      throw new Exception("[GeneralRegression] unknown link function " + link);
    }
    String linkP=model.getAttribute("linkParameter");
    if (linkP != null && linkP.length() > 0) {
      try {
        m_linkParameter=Double.parseDouble(linkP);
      }
 catch (      IllegalArgumentException ex) {
        throw new Exception("[GeneralRegression] unable to parse the link parameter");
      }
    }
    String trials=model.getAttribute("trialsVariable");
    if (trials != null && trials.length() > 0) {
      m_trialsVariable=trials;
    }
    String trialsV=model.getAttribute("trialsValue");
    if (trialsV != null && trialsV.length() > 0) {
      try {
        m_trialsValue=Double.parseDouble(trialsV);
      }
 catch (      IllegalArgumentException ex) {
        throw new Exception("[GeneralRegression] unable to parse the trials value");
      }
    }
  }
  String mName=model.getAttribute("modelName");
  if (mName != null && mName.length() > 0) {
    m_modelName=mName;
  }
  String fName=model.getAttribute("functionName");
  if (fName.equals("classification")) {
    m_functionType=Regression.RegressionTable.CLASSIFICATION;
  }
  String algName=model.getAttribute("algorithmName");
  if (algName != null && algName.length() > 0) {
    m_algorithmName=algName;
  }
  String distribution=model.getAttribute("distribution");
  if (distribution != null && distribution.length() > 0) {
    found=false;
    for (    Distribution d : Distribution.values()) {
      if (d.toString().equals(distribution)) {
        m_distribution=d;
        found=true;
        break;
      }
    }
    if (!found) {
      throw new Exception("[GeneralRegression] unknown distribution type " + distribution);
    }
  }
  String distP=model.getAttribute("distParameter");
  if (distP != null && distP.length() > 0) {
    try {
      m_distParameter=Double.parseDouble(distP);
    }
 catch (    IllegalArgumentException ex) {
      throw new Exception("[GeneralRegression] unable to parse the distribution parameter");
    }
  }
  String offsetV=model.getAttribute("offsetVariable");
  if (offsetV != null && offsetV.length() > 0) {
    m_offsetVariable=offsetV;
  }
  String offsetVal=model.getAttribute("offsetValue");
  if (offsetVal != null && offsetVal.length() > 0) {
    try {
      m_offsetValue=Double.parseDouble(offsetVal);
    }
 catch (    IllegalArgumentException ex) {
      throw new Exception("[GeneralRegression] unable to parse the offset value");
    }
  }
  readParameterList(model);
  readFactorsAndCovariates(model,"FactorList");
  readFactorsAndCovariates(model,"CovariateList");
  readPPMatrix(model);
  readParamMatrix(model);
}
