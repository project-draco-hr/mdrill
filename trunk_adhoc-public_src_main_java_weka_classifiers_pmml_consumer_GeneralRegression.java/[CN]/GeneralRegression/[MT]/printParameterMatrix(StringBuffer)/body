{
  Instances miningSchemaI=m_miningSchema.getFieldsAsInstances();
  int maxClassWidth=miningSchemaI.classAttribute().name().length();
  if (miningSchemaI.classAttribute().isNominal() || miningSchemaI.classAttribute().isString()) {
    for (int i=0; i < miningSchemaI.classAttribute().numValues(); i++) {
      if (miningSchemaI.classAttribute().value(i).length() > maxClassWidth) {
        maxClassWidth=miningSchemaI.classAttribute().value(i).length();
      }
    }
  }
  int maxParamWidth=0;
  for (int i=0; i < m_parameterList.size(); i++) {
    Parameter p=m_parameterList.get(i);
    String val=(p.m_label != null) ? p.m_label + " " : p.m_name + " ";
    if (val.length() > maxParamWidth) {
      maxParamWidth=val.length();
    }
  }
  int maxBetaWidth="Coeff.".length();
  for (int i=0; i < m_paramMatrix.length; i++) {
    for (int j=0; j < m_parameterList.size(); j++) {
      PCell p=m_paramMatrix[i][j];
      if (p != null) {
        double width=Math.log(Math.abs(p.m_beta)) / Math.log(10);
        if (width < 0) {
          width=1;
        }
        width+=7.0;
        if ((int)width > maxBetaWidth) {
          maxBetaWidth=(int)width;
        }
      }
    }
  }
  buff.append("Parameter estimates:\n");
  buff.append(PMMLUtils.pad(miningSchemaI.classAttribute().name()," ",maxClassWidth + maxParamWidth + 2 - miningSchemaI.classAttribute().name().length(),false));
  buff.append(PMMLUtils.pad("Coeff."," ",maxBetaWidth + 1 - "Coeff.".length(),true));
  buff.append(PMMLUtils.pad("df"," ",maxBetaWidth - "df".length(),true));
  buff.append("\n");
  for (int i=0; i < m_paramMatrix.length; i++) {
    boolean ok=false;
    for (int j=0; j < m_parameterList.size(); j++) {
      if (m_paramMatrix[i][j] != null) {
        ok=true;
      }
    }
    if (!ok) {
      continue;
    }
    String cVal=(miningSchemaI.classAttribute().isNominal() || miningSchemaI.classAttribute().isString()) ? miningSchemaI.classAttribute().value(i) : " ";
    buff.append(PMMLUtils.pad(cVal," ",maxClassWidth - cVal.length(),false));
    buff.append("\n");
    for (int j=0; j < m_parameterList.size(); j++) {
      PCell p=m_paramMatrix[i][j];
      if (p != null) {
        String label=p.m_parameterName;
        buff.append(PMMLUtils.pad(label," ",maxClassWidth + maxParamWidth + 2 - label.length(),true));
        String betaS=Utils.doubleToString(p.m_beta,maxBetaWidth,4).trim();
        buff.append(PMMLUtils.pad(betaS," ",maxBetaWidth + 1 - betaS.length(),true));
        String dfS=Utils.doubleToString(p.m_df,maxBetaWidth,4).trim();
        buff.append(PMMLUtils.pad(dfS," ",maxBetaWidth - dfS.length(),true));
        buff.append("\n");
      }
    }
  }
}
