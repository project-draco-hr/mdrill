{
  double[] r=responses.clone();
  double offset=0;
  if (m_offsetVariable != null) {
    Attribute offsetAtt=m_miningSchema.getFieldsAsInstances().attribute(m_offsetVariable);
    if (offsetAtt == null) {
      throw new Exception("[GeneralRegression] unable to find offset variable " + m_offsetVariable + " in the mining schema!");
    }
    offset=incomingInst[offsetAtt.index()];
  }
 else   if (!Double.isNaN(m_offsetValue)) {
    offset=m_offsetValue;
  }
  double trials=1;
  if (m_trialsVariable != null) {
    Attribute trialsAtt=m_miningSchema.getFieldsAsInstances().attribute(m_trialsVariable);
    if (trialsAtt == null) {
      throw new Exception("[GeneralRegression] unable to find trials variable " + m_trialsVariable + " in the mining schema!");
    }
    trials=incomingInst[trialsAtt.index()];
  }
 else   if (!Double.isNaN(m_trialsValue)) {
    trials=m_trialsValue;
  }
  double distParam=0;
  if (m_linkFunction == LinkFunction.NEGBIN && m_distribution == Distribution.NEGBINOMIAL) {
    if (Double.isNaN(m_distParameter)) {
      throw new Exception("[GeneralRegression] no distribution parameter defined!");
    }
    distParam=m_distParameter;
  }
  double linkParam=0;
  if (m_linkFunction == LinkFunction.POWER || m_linkFunction == LinkFunction.ODDSPOWER) {
    if (Double.isNaN(m_linkParameter)) {
      throw new Exception("[GeneralRegression] no link parameter defined!");
    }
    linkParam=m_linkParameter;
  }
  for (int i=0; i < r.length; i++) {
    responses[i]=m_linkFunction.eval(r[i],offset,trials,distParam,linkParam);
  }
}
