{
  state=State.CREATED;
  this.regenerator=regenerator;
  name=(String)args.get("name");
  String str=(String)args.get("size");
  int limit=str == null ? 1024 : Integer.parseInt(str);
  int minLimit;
  str=(String)args.get("minSize");
  if (str == null) {
    minLimit=(int)(limit * 0.9);
  }
 else {
    minLimit=Integer.parseInt(str);
  }
  if (minLimit == 0)   minLimit=1;
  if (limit <= minLimit)   limit=minLimit + 1;
  int acceptableLimit;
  str=(String)args.get("acceptableSize");
  if (str == null) {
    acceptableLimit=(int)(limit * 0.95);
  }
 else {
    acceptableLimit=Integer.parseInt(str);
  }
  acceptableLimit=Math.max(minLimit,acceptableLimit);
  str=(String)args.get("initialSize");
  final int initialSize=str == null ? limit : Integer.parseInt(str);
  str=(String)args.get("autowarmCount");
  autowarmCount=str == null ? 0 : Integer.parseInt(str);
  str=(String)args.get("cleanupThread");
  boolean newThread=str == null ? false : Boolean.parseBoolean(str);
  str=(String)args.get("showItems");
  showItems=str == null ? 0 : Integer.parseInt(str);
  description="Concurrent LRU Cache(maxSize=" + limit + ", initialSize="+ initialSize+ ", minSize="+ minLimit+ ", acceptableSize="+ acceptableLimit+ ", cleanupThread="+ newThread;
  if (autowarmCount > 0) {
    description+=", autowarmCount=" + autowarmCount + ", regenerator="+ regenerator;
  }
  description+=')';
  cache=new ConcurrentLRUCache<K,V>(limit,minLimit,acceptableLimit,initialSize,newThread,false,null);
  cache.setAlive(false);
  statsList=(List<ConcurrentLRUCache.Stats>)persistence;
  if (statsList == null) {
    statsList=new CopyOnWriteArrayList<ConcurrentLRUCache.Stats>();
    statsList.add(new ConcurrentLRUCache.Stats());
  }
  statsList.add(cache.getStats());
  return statsList;
}
