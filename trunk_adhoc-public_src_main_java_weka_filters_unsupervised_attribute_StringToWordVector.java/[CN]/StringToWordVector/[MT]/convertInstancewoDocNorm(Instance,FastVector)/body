{
  TreeMap contained=new TreeMap();
  int firstCopy=0;
  for (int i=0; i < getInputFormat().numAttributes(); i++) {
    if (!m_SelectedRange.isInRange(i)) {
      if (getInputFormat().attribute(i).type() != Attribute.STRING) {
        if (instance.value(i) != 0.0) {
          contained.put(new Integer(firstCopy),new Double(instance.value(i)));
        }
      }
 else {
        if (instance.isMissing(i)) {
          contained.put(new Integer(firstCopy),new Double(Utils.missingValue()));
        }
 else {
          if (outputFormatPeek().attribute(firstCopy).numValues() == 0) {
            outputFormatPeek().attribute(firstCopy).addStringValue("Hack to defeat SparseInstance bug");
          }
          int newIndex=outputFormatPeek().attribute(firstCopy).addStringValue(instance.stringValue(i));
          contained.put(new Integer(firstCopy),new Double(newIndex));
        }
      }
      firstCopy++;
    }
  }
  for (int j=0; j < instance.numAttributes(); j++) {
    if (m_SelectedRange.isInRange(j) && (instance.isMissing(j) == false)) {
      m_Tokenizer.tokenize(instance.stringValue(j));
      while (m_Tokenizer.hasMoreElements()) {
        String word=(String)m_Tokenizer.nextElement();
        if (this.m_lowerCaseTokens == true)         word=word.toLowerCase();
        word=m_Stemmer.stem(word);
        Integer index=(Integer)m_Dictionary.get(word);
        if (index != null) {
          if (m_OutputCounts) {
            Double count=(Double)contained.get(index);
            if (count != null) {
              contained.put(index,new Double(count.doubleValue() + 1.0));
            }
 else {
              contained.put(index,new Double(1));
            }
          }
 else {
            contained.put(index,new Double(1));
          }
        }
      }
    }
  }
  if (m_TFTransform == true) {
    Iterator it=contained.keySet().iterator();
    for (int i=0; it.hasNext(); i++) {
      Integer index=(Integer)it.next();
      if (index.intValue() >= firstCopy) {
        double val=((Double)contained.get(index)).doubleValue();
        val=Math.log(val + 1);
        contained.put(index,new Double(val));
      }
    }
  }
  if (m_IDFTransform == true) {
    Iterator it=contained.keySet().iterator();
    for (int i=0; it.hasNext(); i++) {
      Integer index=(Integer)it.next();
      if (index.intValue() >= firstCopy) {
        double val=((Double)contained.get(index)).doubleValue();
        val=val * Math.log(m_NumInstances / (double)m_DocsCounts[index.intValue()]);
        contained.put(index,new Double(val));
      }
    }
  }
  double[] values=new double[contained.size()];
  int[] indices=new int[contained.size()];
  Iterator it=contained.keySet().iterator();
  for (int i=0; it.hasNext(); i++) {
    Integer index=(Integer)it.next();
    Double value=(Double)contained.get(index);
    values[i]=value.doubleValue();
    indices[i]=index.intValue();
  }
  Instance inst=new SparseInstance(instance.weight(),values,indices,outputFormatPeek().numAttributes());
  inst.setDataset(outputFormatPeek());
  v.addElement(inst);
  return firstCopy;
}
