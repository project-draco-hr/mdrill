{
  Instances instances=bayesNet.m_Instances;
  int nNumClasses=instances.numClasses();
  double[] fProbs=new double[nNumClasses];
  for (int iClass=0; iClass < nNumClasses; iClass++) {
    fProbs[iClass]=1.0;
  }
  for (int iClass=0; iClass < nNumClasses; iClass++) {
    double logfP=0;
    for (int iAttribute=0; iAttribute < instances.numAttributes(); iAttribute++) {
      double iCPT=0;
      for (int iParent=0; iParent < bayesNet.getParentSet(iAttribute).getNrOfParents(); iParent++) {
        int nParent=bayesNet.getParentSet(iAttribute).getParent(iParent);
        if (nParent == instances.classIndex()) {
          iCPT=iCPT * nNumClasses + iClass;
        }
 else {
          iCPT=iCPT * instances.attribute(nParent).numValues() + instance.value(nParent);
        }
      }
      if (iAttribute == instances.classIndex()) {
        logfP+=Math.log(bayesNet.m_Distributions[iAttribute][(int)iCPT].getProbability(iClass));
      }
 else {
        logfP+=Math.log(bayesNet.m_Distributions[iAttribute][(int)iCPT].getProbability(instance.value(iAttribute)));
      }
    }
    fProbs[iClass]+=logfP;
  }
  double fMax=fProbs[0];
  for (int iClass=0; iClass < nNumClasses; iClass++) {
    if (fProbs[iClass] > fMax) {
      fMax=fProbs[iClass];
    }
  }
  for (int iClass=0; iClass < nNumClasses; iClass++) {
    fProbs[iClass]=Math.exp(fProbs[iClass] - fMax);
  }
  Utils.normalize(fProbs);
  return fProbs;
}
