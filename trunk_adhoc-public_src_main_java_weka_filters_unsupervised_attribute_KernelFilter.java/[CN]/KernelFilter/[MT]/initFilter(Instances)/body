{
  HashMap symbols;
  symbols=new HashMap();
  symbols.put("A",new Double(instances.numAttributes()));
  symbols.put("N",new Double(instances.numInstances()));
  m_KernelFactor=MathematicalExpression.evaluate(getKernelFactorExpression(),symbols);
  if (!m_checksTurnedOff) {
    m_Missing=new ReplaceMissingValues();
    m_Missing.setInputFormat(instances);
    instances=Filter.useFilter(instances,m_Missing);
  }
 else {
    m_Missing=null;
  }
  if (getKernel().getCapabilities().handles(Capability.NUMERIC_ATTRIBUTES)) {
    boolean onlyNumeric=true;
    if (!m_checksTurnedOff) {
      for (int i=0; i < instances.numAttributes(); i++) {
        if (i != instances.classIndex()) {
          if (!instances.attribute(i).isNumeric()) {
            onlyNumeric=false;
            break;
          }
        }
      }
    }
    if (!onlyNumeric) {
      m_NominalToBinary=new NominalToBinary();
      m_NominalToBinary.setInputFormat(instances);
      instances=Filter.useFilter(instances,m_NominalToBinary);
    }
 else {
      m_NominalToBinary=null;
    }
  }
 else {
    m_NominalToBinary=null;
  }
  if ((m_Filter != null) && (m_Filter.getClass() != AllFilter.class)) {
    m_ActualFilter=Filter.makeCopy(m_Filter);
    m_ActualFilter.setInputFormat(instances);
    instances=Filter.useFilter(instances,m_ActualFilter);
  }
 else {
    m_ActualFilter=null;
  }
  m_NumTrainInstances=instances.numInstances();
  m_ActualKernel=Kernel.makeCopy(m_Kernel);
  if (m_ActualKernel instanceof RBFKernel)   ((RBFKernel)m_ActualKernel).setGamma(m_KernelFactor * ((RBFKernel)m_ActualKernel).getGamma());
  m_ActualKernel.buildKernel(instances);
  m_Initialized=true;
}
