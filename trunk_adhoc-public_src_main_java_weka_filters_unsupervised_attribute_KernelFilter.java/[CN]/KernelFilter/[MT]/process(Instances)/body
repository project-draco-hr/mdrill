{
  if (!m_Initialized) {
    if ((getInitFile() != null) && getInitFile().isFile()) {
      DataSource source=new DataSource(getInitFile().getAbsolutePath());
      Instances data=source.getDataSet();
      m_InitFileClassIndex.setUpper(data.numAttributes() - 1);
      data.setClassIndex(m_InitFileClassIndex.getIndex());
      initFilter(data);
    }
 else {
      initFilter(instances);
    }
  }
  if (m_Missing != null)   instances=Filter.useFilter(instances,m_Missing);
  if (m_NominalToBinary != null)   instances=Filter.useFilter(instances,m_NominalToBinary);
  if (m_ActualFilter != null)   instances=Filter.useFilter(instances,m_ActualFilter);
  double[] classes=instances.attributeToDoubleArray(instances.classIndex());
  int classIndex=instances.classIndex();
  instances.setClassIndex(-1);
  instances.deleteAttributeAt(classIndex);
  FastVector atts=new FastVector();
  for (int j=0; j < m_NumTrainInstances; j++)   atts.addElement(new Attribute("Kernel " + j));
  atts.addElement(new Attribute("Class"));
  Instances result=new Instances("Kernel",atts,0);
  result.setClassIndex(result.numAttributes() - 1);
  for (int i=0; i < instances.numInstances(); i++) {
    double[] k=new double[m_NumTrainInstances + 1];
    for (int j=0; j < m_NumTrainInstances; j++) {
      double v=m_ActualKernel.eval(-1,j,instances.instance(i));
      k[j]=v;
    }
    k[k.length - 1]=classes[i];
    Instance in=new DenseInstance(1.0,k);
    result.add(in);
  }
  if (!isFirstBatchDone())   setOutputFormat(result);
  return result;
}
