{
  if (prefix == null)   prefix=defaultsName;
  if (def == null)   def=defaultDefaults;
  luceneVersion=solrConfig.luceneMatchVersion;
  defaultMergePolicyClassName=luceneVersion.onOrAfter(Version.LUCENE_33) ? TieredMergePolicy.class.getName() : LogByteSizeMergePolicy.class.getName();
  useCompoundFile=solrConfig.getBool(prefix + "/useCompoundFile",def.useCompoundFile);
  maxBufferedDocs=solrConfig.getInt(prefix + "/maxBufferedDocs",def.maxBufferedDocs);
  maxMergeDocs=solrConfig.getInt(prefix + "/maxMergeDocs",def.maxMergeDocs);
  mergeFactor=solrConfig.getInt(prefix + "/mergeFactor",def.mergeFactor);
  ramBufferSizeMB=solrConfig.getDouble(prefix + "/ramBufferSizeMB",def.ramBufferSizeMB);
  maxFieldLength=solrConfig.getInt(prefix + "/maxFieldLength",def.maxFieldLength);
  writeLockTimeout=solrConfig.getInt(prefix + "/writeLockTimeout",def.writeLockTimeout);
  lockType=solrConfig.get(prefix + "/lockType",def.lockType);
  String str=solrConfig.get(prefix + "/mergeScheduler/text()",null);
  if (str != null && str.trim().length() > 0) {
    log.warn("deprecated syntax : <mergeScheduler>[classname]</mergeScheduler>");
    Map<String,String> atrs=new HashMap<String,String>();
    atrs.put("class",str.trim());
    mergeSchedulerInfo=new PluginInfo("mergeScheduler",atrs,null,null);
  }
 else {
    mergeSchedulerInfo=getPluginInfo(prefix + "/mergeScheduler",solrConfig,def.mergeSchedulerInfo);
  }
  str=solrConfig.get(prefix + "/mergePolicy/text()",null);
  if (str != null && str.trim().length() > 0) {
    log.warn("deprecated syntax : <mergePolicy>[classname]</mergePolicy>");
    Map<String,String> atrs=new HashMap<String,String>();
    atrs.put("class",str.trim());
    mergePolicyInfo=new PluginInfo("mergePolicy",atrs,null,null);
  }
 else {
    mergePolicyInfo=getPluginInfo(prefix + "/mergePolicy",solrConfig,def.mergePolicyInfo);
  }
  Object luceneAutoCommit=solrConfig.get(prefix + "/luceneAutoCommit",null);
  if (luceneAutoCommit != null) {
    log.warn("found deprecated option : luceneAutoCommit no longer has any affect - it is always false");
  }
  termIndexInterval=solrConfig.getInt(prefix + "/termIndexInterval",def.termIndexInterval);
  boolean infoStreamEnabled=solrConfig.getBool(prefix + "/infoStream",false);
  if (infoStreamEnabled) {
    infoStreamFile=solrConfig.get(prefix + "/infoStream/@file",null);
    log.info("IndexWriter infoStream debug log is enabled: " + infoStreamFile);
  }
}
