{
  if (this.lastquickfieldNumber != fieldNumber) {
    fieldCount.put(this.lastquickfieldNumber,this.termNum);
    fieldPos.put(fieldNumber,this.outputQuickTis.getFilePointer());
    fieldPosVal.put(fieldNumber,this.outputQuickTisVal.getFilePointer());
    this.ft=this.schemainfo.getField(term.field).getType();
    this.dataType=UnInvertedFieldUtils.getDataType(ft);
    this.lastquickfieldNumber=fieldNumber;
    this.termNum=0;
    this.lastfreqPointer=0;
    this.lasttxtPointer=0;
  }
  if (dataType == Datatype.d_long) {
    long val=Long.parseLong(ft.indexedToReadable(term.text()));
    this.outputQuickTisVal.writeVVVLong(val);
  }
 else   if (dataType == Datatype.d_double) {
    Double val=MdrillUtils.ParseDouble(ft.indexedToReadable(term.text()));
    this.outputQuickTisVal.writeVVVLong(Double.doubleToLongBits(val));
  }
 else {
    CRC32 crc32=new CRC32();
    crc32.update(new String(ft.indexedToReadable(term.text())).getBytes());
    this.outputQuickTisVal.writeVVVLong(crc32.getValue());
  }
  if ((this.termNum & TermIndex.intervalMask) == 0) {
    long pos=this.outputQuickTisTxt.getFilePointer();
    this.outputQuickTis.writeVLong(pos - lasttxtPointer);
    lasttxtPointer=pos;
    this.outputQuickTisTxt.writeString(term.text());
  }
  long posquick=ti.freqPointer - lastfreqPointer;
  if (ti.docFreq == 1) {
    posquick=(posquick << 1) | 1;
    this.outputQuickTis.writeVLong(posquick);
  }
 else {
    posquick=posquick << 1;
    this.outputQuickTis.writeVLong(posquick);
    this.outputQuickTis.writeVInt(ti.docFreq);
  }
  lastfreqPointer=ti.freqPointer;
  this.termNum++;
}
