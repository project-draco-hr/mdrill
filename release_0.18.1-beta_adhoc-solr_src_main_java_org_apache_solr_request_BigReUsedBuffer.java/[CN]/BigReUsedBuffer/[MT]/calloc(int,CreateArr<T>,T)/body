{
  int block=size / interval + 1;
  BlockInterface<T>[] data=c.createBlocks(block);
  int index=0;
  while (true) {
    if (index >= block) {
      break;
    }
    BlockInterface<T> d=this.free.poll();
    if (d == null) {
      break;
    }
    reusedTimes.incrementAndGet();
    data[index]=d;
    index++;
  }
  for (int i=index; i < block; i++) {
    data[i]=c.create(interval);
    mallocTimes.incrementAndGet();
  }
  for (int i=0; i < data.length; i++) {
    for (int j=0; j < interval; j++) {
      data[i].set(j,init);
    }
  }
  log.info("####BigByteBuffer### calloc free:" + free.size() + ",mallocTimes:"+ mallocTimes.get()+ ",reusedTimes:"+ reusedTimes.get());
  return new BlockArray<T>(data,size);
}
