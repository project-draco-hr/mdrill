{
  StormClusterState stormClusterState=data.getStormClusterState();
  Map<String,Set<Integer>> assigned=NimbusUtils.assigned_Slots(stormClusterState);
  Map<String,SupervisorInfo> supervisorInfos=NimbusUtils.allSupervisorInfo(stormClusterState,null);
  List<SupervisorSummary> supervisorSummaries=new ArrayList<SupervisorSummary>();
  if (supervisorInfos == null) {
    supervisorInfos=new HashMap<String,SupervisorInfo>();
  }
  Set<Entry<String,SupervisorInfo>> sinfoEntry=supervisorInfos.entrySet();
  for (Iterator<Entry<String,SupervisorInfo>> it=sinfoEntry.iterator(); it.hasNext(); ) {
    Entry<String,SupervisorInfo> entry=it.next();
    String supervisorId=entry.getKey();
    SupervisorInfo info=entry.getValue();
    List<Integer> ports=info.getWorkPorts();
    int num_used_workers=0;
    int num_workers=0;
    if (assigned != null && assigned.get(supervisorId) != null) {
      num_used_workers=assigned.get(supervisorId).size();
    }
    if (ports != null) {
      num_workers=ports.size();
    }
    supervisorSummaries.add(new SupervisorSummary(info.getHostName(),info.getUptimeSecs(),num_workers,num_used_workers));
  }
  int uptime=data.uptime();
  Map<String,StormBase> bases=Common.topology_bases(stormClusterState);
  if (bases == null) {
    bases=new HashMap<String,StormBase>();
  }
  List<TopologySummary> topologySummaries=new ArrayList<TopologySummary>();
  Set<Entry<String,StormBase>> basesEntry=bases.entrySet();
  for (Iterator<Entry<String,StormBase>> it=basesEntry.iterator(); it.hasNext(); ) {
    Entry<String,StormBase> entry=it.next();
    String stormId=entry.getKey();
    StormBase base=entry.getValue();
    Assignment assignment=stormClusterState.assignment_info(stormId,null);
    if (assignment != null) {
      HashSet<NodePort> workers=new HashSet<NodePort>();
      Collection<NodePort> entryColl=assignment.getTaskToNodeport().values();
      workers.addAll(entryColl);
      topologySummaries.add(new TopologySummary(stormId,base.getStormName(),assignment.getTaskToNodeport().size(),workers.size(),TimeUtils.time_delta(base.getLanchTimeSecs()),extractStatusStr(base)));
    }
  }
  return new ClusterSummary(supervisorSummaries,uptime,topologySummaries);
}
