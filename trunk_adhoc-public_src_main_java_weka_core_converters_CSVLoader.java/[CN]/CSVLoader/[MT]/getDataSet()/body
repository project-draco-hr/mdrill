{
  if ((m_sourceFile == null) && (m_sourceReader == null)) {
    throw new IOException("No source has been specified");
  }
  if (m_structure == null) {
    getStructure();
  }
  if (m_st == null) {
    m_st=new StreamTokenizer(m_sourceReader);
    initTokenizer(m_st);
  }
  m_st.ordinaryChar(m_FieldSeparator.charAt(0));
  m_cumulativeStructure=new ArrayList<Hashtable<Object,Integer>>(m_structure.numAttributes());
  for (int i=0; i < m_structure.numAttributes(); i++) {
    m_cumulativeStructure.add(new Hashtable<Object,Integer>());
  }
  m_cumulativeInstances=new ArrayList<ArrayList<Object>>();
  if (m_noHeaderRow && m_firstRow != null) {
    m_cumulativeInstances.add(m_firstRow);
  }
  ArrayList<Object> current;
  while ((current=getInstance(m_st)) != null) {
    m_cumulativeInstances.add(current);
  }
  ArrayList<Attribute> atts=new ArrayList<Attribute>(m_structure.numAttributes());
  for (int i=0; i < m_structure.numAttributes(); i++) {
    String attname=m_structure.attribute(i).name();
    Hashtable<Object,Integer> tempHash=m_cumulativeStructure.get(i);
    if (tempHash.size() == 0) {
      if (m_dateAttributes.isInRange(i)) {
        atts.add(new Attribute(attname,m_dateFormat));
      }
 else {
        atts.add(new Attribute(attname));
      }
    }
 else {
      if (m_StringAttributes.isInRange(i)) {
        atts.add(new Attribute(attname,(ArrayList<String>)null));
      }
 else {
        ArrayList<String> values=new ArrayList<String>(tempHash.size());
        for (int z=0; z < tempHash.size(); z++) {
          values.add("dummy");
        }
        Enumeration e=tempHash.keys();
        while (e.hasMoreElements()) {
          Object ob=e.nextElement();
          int index=((Integer)tempHash.get(ob)).intValue();
          String s=ob.toString();
          if (s.startsWith("'") || s.startsWith("\""))           s=s.substring(1,s.length() - 1);
          values.set(index,new String(s));
        }
        atts.add(new Attribute(attname,values));
      }
    }
  }
  String relationName;
  if (m_sourceFile != null)   relationName=(m_sourceFile.getName()).replaceAll("\\.[cC][sS][vV]$","");
 else   relationName="stream";
  Instances dataSet=new Instances(relationName,atts,m_cumulativeInstances.size());
  for (int i=0; i < m_cumulativeInstances.size(); i++) {
    current=m_cumulativeInstances.get(i);
    double[] vals=new double[dataSet.numAttributes()];
    for (int j=0; j < current.size(); j++) {
      Object cval=current.get(j);
      if (cval instanceof String) {
        if (((String)cval).compareTo(m_MissingValue) == 0) {
          vals[j]=Utils.missingValue();
        }
 else {
          if (dataSet.attribute(j).isString()) {
            vals[j]=dataSet.attribute(j).addStringValue((String)cval);
          }
 else           if (dataSet.attribute(j).isNominal()) {
            Hashtable<Object,Integer> lookup=m_cumulativeStructure.get(j);
            int index=((Integer)lookup.get(cval)).intValue();
            vals[j]=index;
          }
 else {
            throw new IllegalStateException("Wrong attribute type at position " + (i + 1) + "!!!");
          }
        }
      }
 else       if (dataSet.attribute(j).isNominal()) {
        Hashtable<Object,Integer> lookup=m_cumulativeStructure.get(j);
        int index=((Integer)lookup.get(cval)).intValue();
        vals[j]=index;
      }
 else       if (dataSet.attribute(j).isString()) {
        vals[j]=dataSet.attribute(j).addStringValue("" + cval);
      }
 else {
        vals[j]=((Double)cval).doubleValue();
      }
    }
    dataSet.add(new DenseInstance(1.0,vals));
  }
  m_structure=new Instances(dataSet,0);
  setRetrieval(BATCH);
  m_cumulativeStructure=null;
  m_sourceReader.close();
  return dataSet;
}
