{
  String tmpStr;
  String[] spec;
  String classname;
  tmpStr=Utils.getOption('W',options);
  if (tmpStr.length() > 0) {
    spec=Utils.splitOptions(tmpStr);
    if (spec.length == 0)     throw new IllegalArgumentException("Invalid classifier specification string");
    classname=spec[0];
    spec[0]="";
    setClassifier((Classifier)Utils.forName(Classifier.class,classname,spec));
  }
 else {
    throw new Exception("No classifier (classname + options) provided!");
  }
  tmpStr=Utils.getOption('S',options);
  if (tmpStr.length() > 0) {
    spec=Utils.splitOptions(tmpStr);
    if (spec.length != 1)     throw new IllegalArgumentException("Invalid source code specification string");
    classname=spec[0];
    spec[0]="";
    setSourceCode((Classifier)Utils.forName(Classifier.class,classname,spec));
  }
 else {
    throw new Exception("No source code (classname) provided!");
  }
  tmpStr=Utils.getOption('t',options);
  if (tmpStr.length() != 0)   setDataset(new File(tmpStr));
 else   throw new Exception("No dataset provided!");
  tmpStr=Utils.getOption('c',options);
  if (tmpStr.length() != 0) {
    if (tmpStr.equals("first"))     setClassIndex(0);
 else     if (tmpStr.equals("last"))     setClassIndex(-1);
 else     setClassIndex(Integer.parseInt(tmpStr) - 1);
  }
 else {
    setClassIndex(-1);
  }
}
