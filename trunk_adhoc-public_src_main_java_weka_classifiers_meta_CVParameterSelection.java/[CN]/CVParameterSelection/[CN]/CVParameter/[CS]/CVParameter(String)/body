{
  StreamTokenizer st=new StreamTokenizer(new StringReader(param));
  if (st.nextToken() != StreamTokenizer.TT_WORD) {
    throw new Exception("CVParameter " + param + ": Character parameter identifier expected");
  }
  m_ParamChar=st.sval.charAt(0);
  if (st.nextToken() != StreamTokenizer.TT_NUMBER) {
    throw new Exception("CVParameter " + param + ": Numeric lower bound expected");
  }
  m_Lower=st.nval;
  if (st.nextToken() == StreamTokenizer.TT_NUMBER) {
    m_Upper=st.nval;
    if (m_Upper < m_Lower) {
      throw new Exception("CVParameter " + param + ": Upper bound is less than lower bound");
    }
  }
 else   if (st.ttype == StreamTokenizer.TT_WORD) {
    if (st.sval.toUpperCase().charAt(0) == 'A') {
      m_Upper=m_Lower - 1;
    }
 else     if (st.sval.toUpperCase().charAt(0) == 'I') {
      m_Upper=m_Lower - 2;
    }
 else {
      throw new Exception("CVParameter " + param + ": Upper bound must be numeric, or 'A' or 'N'");
    }
  }
 else {
    throw new Exception("CVParameter " + param + ": Upper bound must be numeric, or 'A' or 'N'");
  }
  if (st.nextToken() != StreamTokenizer.TT_NUMBER) {
    throw new Exception("CVParameter " + param + ": Numeric number of steps expected");
  }
  m_Steps=st.nval;
  if (st.nextToken() == StreamTokenizer.TT_WORD) {
    if (st.sval.toUpperCase().charAt(0) == 'R') {
      m_RoundParam=true;
    }
  }
}
