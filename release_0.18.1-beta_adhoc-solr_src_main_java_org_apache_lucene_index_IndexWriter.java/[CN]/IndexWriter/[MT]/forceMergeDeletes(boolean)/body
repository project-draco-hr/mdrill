{
  ensureOpen();
  flush(true,true);
  if (infoStream != null)   message("forceMergeDeletes: index now " + segString());
  MergePolicy.MergeSpecification spec;
synchronized (this) {
    spec=mergePolicy.findForcedDeletesMerges(segmentInfos);
    if (spec != null) {
      final int numMerges=spec.merges.size();
      for (int i=0; i < numMerges; i++)       registerMerge(spec.merges.get(i));
    }
  }
  mergeScheduler.merge(this);
  if (spec != null && doWait) {
    final int numMerges=spec.merges.size();
synchronized (this) {
      boolean running=true;
      while (running) {
        if (hitOOM) {
          throw new IllegalStateException("this writer hit an OutOfMemoryError; cannot complete forceMergeDeletes");
        }
        running=false;
        for (int i=0; i < numMerges; i++) {
          final MergePolicy.OneMerge merge=spec.merges.get(i);
          if (pendingMerges.contains(merge) || runningMerges.contains(merge))           running=true;
          Throwable t=merge.getException();
          if (t != null) {
            IOException ioe=new IOException("background merge hit exception: " + merge.segString(directory));
            ioe.initCause(t);
            throw ioe;
          }
        }
        if (running)         doWait();
      }
    }
  }
}
