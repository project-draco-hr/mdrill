{
  ensureOpen();
  if (maxNumSegments < 1)   throw new IllegalArgumentException("maxNumSegments must be >= 1; got " + maxNumSegments);
  if (infoStream != null) {
    message("forceMerge: index now " + segString());
    message("now flush at forceMerge");
  }
  flush(true,true);
synchronized (this) {
    resetMergeExceptions();
    segmentsToMerge.clear();
    for (    SegmentInfo info : segmentInfos) {
      segmentsToMerge.put(info,Boolean.TRUE);
    }
    mergeMaxNumSegments=maxNumSegments;
    for (    final MergePolicy.OneMerge merge : pendingMerges) {
      merge.maxNumSegments=maxNumSegments;
      segmentsToMerge.put(merge.info,Boolean.TRUE);
    }
    for (    final MergePolicy.OneMerge merge : runningMerges) {
      merge.maxNumSegments=maxNumSegments;
      segmentsToMerge.put(merge.info,Boolean.TRUE);
    }
  }
  maybeMerge(maxNumSegments);
  if (doWait) {
synchronized (this) {
      while (true) {
        if (hitOOM) {
          throw new IllegalStateException("this writer hit an OutOfMemoryError; cannot complete forceMerge");
        }
        if (mergeExceptions.size() > 0) {
          final int size=mergeExceptions.size();
          for (int i=0; i < size; i++) {
            final MergePolicy.OneMerge merge=mergeExceptions.get(i);
            if (merge.maxNumSegments != -1) {
              IOException err=new IOException("background merge hit exception: " + merge.segString(directory));
              final Throwable t=merge.getException();
              if (t != null)               err.initCause(t);
              throw err;
            }
          }
        }
        if (maxNumSegmentsMergesPending())         doWait();
 else         break;
      }
    }
    ensureOpen();
  }
}
