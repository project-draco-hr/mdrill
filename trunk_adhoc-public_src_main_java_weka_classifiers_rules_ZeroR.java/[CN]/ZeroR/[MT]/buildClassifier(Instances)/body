{
  getCapabilities().testWithFail(instances);
  instances=new Instances(instances);
  instances.deleteWithMissingClass();
  double sumOfWeights=0;
  m_Class=instances.classAttribute();
  m_ClassValue=0;
switch (instances.classAttribute().type()) {
case Attribute.NUMERIC:
    m_Counts=null;
  break;
case Attribute.NOMINAL:
m_Counts=new double[instances.numClasses()];
for (int i=0; i < m_Counts.length; i++) {
m_Counts[i]=1;
}
sumOfWeights=instances.numClasses();
break;
}
Enumeration enu=instances.enumerateInstances();
while (enu.hasMoreElements()) {
Instance instance=(Instance)enu.nextElement();
if (!instance.classIsMissing()) {
if (instances.classAttribute().isNominal()) {
m_Counts[(int)instance.classValue()]+=instance.weight();
}
 else {
m_ClassValue+=instance.weight() * instance.classValue();
}
sumOfWeights+=instance.weight();
}
}
if (instances.classAttribute().isNumeric()) {
if (Utils.gr(sumOfWeights,0)) {
m_ClassValue/=sumOfWeights;
}
}
 else {
m_ClassValue=Utils.maxIndex(m_Counts);
Utils.normalize(m_Counts,sumOfWeights);
}
}
