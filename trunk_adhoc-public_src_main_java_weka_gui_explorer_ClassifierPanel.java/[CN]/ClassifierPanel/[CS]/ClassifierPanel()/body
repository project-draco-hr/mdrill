{
  m_OutText.setEditable(false);
  m_OutText.setFont(new Font("Monospaced",Font.PLAIN,12));
  m_OutText.setBorder(BorderFactory.createEmptyBorder(5,5,5,5));
  m_OutText.addMouseListener(new MouseAdapter(){
    public void mouseClicked(    MouseEvent e){
      if ((e.getModifiers() & InputEvent.BUTTON1_MASK) != InputEvent.BUTTON1_MASK) {
        m_OutText.selectAll();
      }
    }
  }
);
  m_History.setBorder(BorderFactory.createTitledBorder("Result list (right-click for options)"));
  m_ClassifierEditor.setClassType(Classifier.class);
  m_ClassifierEditor.setValue(ExplorerDefaults.getClassifier());
  m_ClassifierEditor.addPropertyChangeListener(new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent e){
      m_StartBut.setEnabled(true);
      Capabilities currentFilter=m_ClassifierEditor.getCapabilitiesFilter();
      Classifier classifier=(Classifier)m_ClassifierEditor.getValue();
      Capabilities currentSchemeCapabilities=null;
      if (classifier != null && currentFilter != null && (classifier instanceof CapabilitiesHandler)) {
        currentSchemeCapabilities=((CapabilitiesHandler)classifier).getCapabilities();
        if (!currentSchemeCapabilities.supportsMaybe(currentFilter) && !currentSchemeCapabilities.supports(currentFilter)) {
          m_StartBut.setEnabled(false);
        }
      }
      repaint();
    }
  }
);
  m_ClassCombo.setToolTipText("Select the attribute to use as the class");
  m_TrainBut.setToolTipText("Test on the same set that the classifier" + " is trained on");
  m_CVBut.setToolTipText("Perform a n-fold cross-validation");
  m_PercentBut.setToolTipText("Train on a percentage of the data and" + " test on the remainder");
  m_TestSplitBut.setToolTipText("Test on a user-specified dataset");
  m_StartBut.setToolTipText("Starts the classification");
  m_StopBut.setToolTipText("Stops a running classification");
  m_StorePredictionsBut.setToolTipText("Store predictions in the result list for later " + "visualization");
  m_OutputModelBut.setToolTipText("Output the model obtained from the full training set");
  m_OutputPerClassBut.setToolTipText("Output precision/recall & true/false" + " positives for each class");
  m_OutputConfusionBut.setToolTipText("Output the matrix displaying class confusions");
  m_OutputEntropyBut.setToolTipText("Output entropy-based evaluation measures");
  m_EvalWRTCostsBut.setToolTipText("Evaluate errors with respect to a cost matrix");
  m_RandomLab.setToolTipText("The seed value for randomization");
  m_RandomSeedText.setToolTipText(m_RandomLab.getToolTipText());
  m_PreserveOrderBut.setToolTipText("Preserves the order in a percentage split");
  m_OutputSourceCode.setToolTipText("Whether to output the built classifier as Java source code");
  m_SourceCodeClass.setToolTipText("The classname of the built classifier");
  m_FileChooser.addChoosableFileFilter(m_PMMLModelFilter);
  m_FileChooser.setFileFilter(m_ModelFilter);
  m_FileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
  m_ClassificationOutputEditor.setClassType(AbstractOutput.class);
  m_ClassificationOutputEditor.setValue(new Null());
  m_StorePredictionsBut.setSelected(ExplorerDefaults.getClassifierStorePredictionsForVis());
  m_OutputModelBut.setSelected(ExplorerDefaults.getClassifierOutputModel());
  m_OutputPerClassBut.setSelected(ExplorerDefaults.getClassifierOutputPerClassStats());
  m_OutputConfusionBut.setSelected(ExplorerDefaults.getClassifierOutputConfusionMatrix());
  m_EvalWRTCostsBut.setSelected(ExplorerDefaults.getClassifierCostSensitiveEval());
  m_OutputEntropyBut.setSelected(ExplorerDefaults.getClassifierOutputEntropyEvalMeasures());
  m_RandomSeedText.setText("" + ExplorerDefaults.getClassifierRandomSeed());
  m_PreserveOrderBut.setSelected(ExplorerDefaults.getClassifierPreserveOrder());
  m_OutputSourceCode.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      m_SourceCodeClass.setEnabled(m_OutputSourceCode.isSelected());
    }
  }
);
  m_OutputSourceCode.setSelected(ExplorerDefaults.getClassifierOutputSourceCode());
  m_SourceCodeClass.setText(ExplorerDefaults.getClassifierSourceCodeClass());
  m_SourceCodeClass.setEnabled(m_OutputSourceCode.isSelected());
  m_ClassCombo.setEnabled(false);
  m_ClassCombo.setPreferredSize(COMBO_SIZE);
  m_ClassCombo.setMaximumSize(COMBO_SIZE);
  m_ClassCombo.setMinimumSize(COMBO_SIZE);
  m_CVBut.setSelected(true);
  m_CVBut.setSelected(ExplorerDefaults.getClassifierTestMode() == 1);
  m_PercentBut.setSelected(ExplorerDefaults.getClassifierTestMode() == 2);
  m_TrainBut.setSelected(ExplorerDefaults.getClassifierTestMode() == 3);
  m_TestSplitBut.setSelected(ExplorerDefaults.getClassifierTestMode() == 4);
  m_PercentText.setText("" + ExplorerDefaults.getClassifierPercentageSplit());
  m_CVText.setText("" + ExplorerDefaults.getClassifierCrossvalidationFolds());
  updateRadioLinks();
  ButtonGroup bg=new ButtonGroup();
  bg.add(m_TrainBut);
  bg.add(m_CVBut);
  bg.add(m_PercentBut);
  bg.add(m_TestSplitBut);
  m_TrainBut.addActionListener(m_RadioListener);
  m_CVBut.addActionListener(m_RadioListener);
  m_PercentBut.addActionListener(m_RadioListener);
  m_TestSplitBut.addActionListener(m_RadioListener);
  m_SetTestBut.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      setTestSet();
    }
  }
);
  m_EvalWRTCostsBut.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      m_SetCostsBut.setEnabled(m_EvalWRTCostsBut.isSelected());
      if ((m_SetCostsFrame != null) && (!m_EvalWRTCostsBut.isSelected())) {
        m_SetCostsFrame.setVisible(false);
      }
    }
  }
);
  m_CostMatrixEditor.setValue(new CostMatrix(1));
  m_SetCostsBut.setEnabled(m_EvalWRTCostsBut.isSelected());
  m_SetCostsBut.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      m_SetCostsBut.setEnabled(false);
      if (m_SetCostsFrame == null) {
        if (PropertyDialog.getParentDialog(ClassifierPanel.this) != null)         m_SetCostsFrame=new PropertyDialog(PropertyDialog.getParentDialog(ClassifierPanel.this),m_CostMatrixEditor,100,100);
 else         m_SetCostsFrame=new PropertyDialog(PropertyDialog.getParentFrame(ClassifierPanel.this),m_CostMatrixEditor,100,100);
        m_SetCostsFrame.setTitle("Cost Matrix Editor");
        m_SetCostsFrame.addWindowListener(new java.awt.event.WindowAdapter(){
          public void windowClosing(          java.awt.event.WindowEvent p){
            m_SetCostsBut.setEnabled(m_EvalWRTCostsBut.isSelected());
            if ((m_SetCostsFrame != null) && (!m_EvalWRTCostsBut.isSelected())) {
              m_SetCostsFrame.setVisible(false);
            }
          }
        }
);
        m_SetCostsFrame.setVisible(true);
      }
      int classIndex=m_ClassCombo.getSelectedIndex();
      int numClasses=m_Instances.attribute(classIndex).numValues();
      if (numClasses != ((CostMatrix)m_CostMatrixEditor.getValue()).numColumns())       m_CostMatrixEditor.setValue(new CostMatrix(numClasses));
      m_SetCostsFrame.setVisible(true);
    }
  }
);
  m_StartBut.setEnabled(false);
  m_StopBut.setEnabled(false);
  m_StartBut.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      startClassifier();
    }
  }
);
  m_StopBut.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      stopClassifier();
    }
  }
);
  m_ClassCombo.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      int selected=m_ClassCombo.getSelectedIndex();
      if (selected != -1) {
        boolean isNominal=m_Instances.attribute(selected).isNominal();
        m_OutputPerClassBut.setEnabled(isNominal);
        m_OutputConfusionBut.setEnabled(isNominal);
      }
      updateCapabilitiesFilter(m_ClassifierEditor.getCapabilitiesFilter());
    }
  }
);
  m_History.setHandleRightClicks(false);
  m_History.getList().addMouseListener(new MouseAdapter(){
    public void mouseClicked(    MouseEvent e){
      if (((e.getModifiers() & InputEvent.BUTTON1_MASK) != InputEvent.BUTTON1_MASK) || e.isAltDown()) {
        int index=m_History.getList().locationToIndex(e.getPoint());
        if (index != -1) {
          String name=m_History.getNameAtIndex(index);
          visualize(name,e.getX(),e.getY());
        }
 else {
          visualize(null,e.getX(),e.getY());
        }
      }
    }
  }
);
  m_MoreOptions.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      m_MoreOptions.setEnabled(false);
      JPanel moreOptionsPanel=new JPanel();
      moreOptionsPanel.setBorder(BorderFactory.createEmptyBorder(0,5,5,5));
      moreOptionsPanel.setLayout(new GridLayout(10,1));
      moreOptionsPanel.add(m_OutputModelBut);
      moreOptionsPanel.add(m_OutputPerClassBut);
      moreOptionsPanel.add(m_OutputEntropyBut);
      moreOptionsPanel.add(m_OutputConfusionBut);
      moreOptionsPanel.add(m_StorePredictionsBut);
      JPanel classOutPanel=new JPanel(new FlowLayout(FlowLayout.LEFT));
      classOutPanel.add(new JLabel("Output predictions"));
      classOutPanel.add(m_ClassificationOutputPanel);
      moreOptionsPanel.add(classOutPanel);
      JPanel costMatrixOption=new JPanel(new FlowLayout(FlowLayout.LEFT));
      costMatrixOption.add(m_EvalWRTCostsBut);
      costMatrixOption.add(m_SetCostsBut);
      moreOptionsPanel.add(costMatrixOption);
      JPanel seedPanel=new JPanel(new FlowLayout(FlowLayout.LEFT));
      seedPanel.add(m_RandomLab);
      seedPanel.add(m_RandomSeedText);
      moreOptionsPanel.add(seedPanel);
      moreOptionsPanel.add(m_PreserveOrderBut);
      JPanel sourcePanel=new JPanel(new FlowLayout(FlowLayout.LEFT));
      m_OutputSourceCode.setEnabled(m_ClassifierEditor.getValue() instanceof Sourcable);
      m_SourceCodeClass.setEnabled(m_OutputSourceCode.isEnabled() && m_OutputSourceCode.isSelected());
      sourcePanel.add(m_OutputSourceCode);
      sourcePanel.add(m_SourceCodeClass);
      moreOptionsPanel.add(sourcePanel);
      JPanel all=new JPanel();
      all.setLayout(new BorderLayout());
      JButton oK=new JButton("OK");
      JPanel okP=new JPanel();
      okP.setBorder(BorderFactory.createEmptyBorder(5,5,5,5));
      okP.setLayout(new GridLayout(1,1,5,5));
      okP.add(oK);
      all.add(moreOptionsPanel,BorderLayout.CENTER);
      all.add(okP,BorderLayout.SOUTH);
      final JDialog jd=new JDialog(PropertyDialog.getParentFrame(ClassifierPanel.this),"Classifier evaluation options");
      jd.getContentPane().setLayout(new BorderLayout());
      jd.getContentPane().add(all,BorderLayout.CENTER);
      jd.addWindowListener(new java.awt.event.WindowAdapter(){
        public void windowClosing(        java.awt.event.WindowEvent w){
          jd.dispose();
          m_MoreOptions.setEnabled(true);
        }
      }
);
      oK.addActionListener(new ActionListener(){
        public void actionPerformed(        ActionEvent a){
          m_MoreOptions.setEnabled(true);
          jd.dispose();
        }
      }
);
      jd.pack();
      m_ClassificationOutputPanel.setPreferredSize(new Dimension(300,m_ClassificationOutputPanel.getHeight()));
      jd.pack();
      jd.setLocation(m_MoreOptions.getLocationOnScreen());
      jd.setVisible(true);
    }
  }
);
  JPanel p1=new JPanel();
  p1.setBorder(BorderFactory.createCompoundBorder(BorderFactory.createTitledBorder("Classifier"),BorderFactory.createEmptyBorder(0,5,5,5)));
  p1.setLayout(new BorderLayout());
  p1.add(m_CEPanel,BorderLayout.NORTH);
  JPanel p2=new JPanel();
  GridBagLayout gbL=new GridBagLayout();
  p2.setLayout(gbL);
  p2.setBorder(BorderFactory.createCompoundBorder(BorderFactory.createTitledBorder("Test options"),BorderFactory.createEmptyBorder(0,5,5,5)));
  GridBagConstraints gbC=new GridBagConstraints();
  gbC.anchor=GridBagConstraints.WEST;
  gbC.gridy=0;
  gbC.gridx=0;
  gbL.setConstraints(m_TrainBut,gbC);
  p2.add(m_TrainBut);
  gbC=new GridBagConstraints();
  gbC.anchor=GridBagConstraints.WEST;
  gbC.gridy=1;
  gbC.gridx=0;
  gbL.setConstraints(m_TestSplitBut,gbC);
  p2.add(m_TestSplitBut);
  gbC=new GridBagConstraints();
  gbC.anchor=GridBagConstraints.EAST;
  gbC.fill=GridBagConstraints.HORIZONTAL;
  gbC.gridy=1;
  gbC.gridx=1;
  gbC.gridwidth=2;
  gbC.insets=new Insets(2,10,2,0);
  gbL.setConstraints(m_SetTestBut,gbC);
  p2.add(m_SetTestBut);
  gbC=new GridBagConstraints();
  gbC.anchor=GridBagConstraints.WEST;
  gbC.gridy=2;
  gbC.gridx=0;
  gbL.setConstraints(m_CVBut,gbC);
  p2.add(m_CVBut);
  gbC=new GridBagConstraints();
  gbC.anchor=GridBagConstraints.EAST;
  gbC.fill=GridBagConstraints.HORIZONTAL;
  gbC.gridy=2;
  gbC.gridx=1;
  gbC.insets=new Insets(2,10,2,10);
  gbL.setConstraints(m_CVLab,gbC);
  p2.add(m_CVLab);
  gbC=new GridBagConstraints();
  gbC.anchor=GridBagConstraints.EAST;
  gbC.fill=GridBagConstraints.HORIZONTAL;
  gbC.gridy=2;
  gbC.gridx=2;
  gbC.weightx=100;
  gbC.ipadx=20;
  gbL.setConstraints(m_CVText,gbC);
  p2.add(m_CVText);
  gbC=new GridBagConstraints();
  gbC.anchor=GridBagConstraints.WEST;
  gbC.gridy=3;
  gbC.gridx=0;
  gbL.setConstraints(m_PercentBut,gbC);
  p2.add(m_PercentBut);
  gbC=new GridBagConstraints();
  gbC.anchor=GridBagConstraints.EAST;
  gbC.fill=GridBagConstraints.HORIZONTAL;
  gbC.gridy=3;
  gbC.gridx=1;
  gbC.insets=new Insets(2,10,2,10);
  gbL.setConstraints(m_PercentLab,gbC);
  p2.add(m_PercentLab);
  gbC=new GridBagConstraints();
  gbC.anchor=GridBagConstraints.EAST;
  gbC.fill=GridBagConstraints.HORIZONTAL;
  gbC.gridy=3;
  gbC.gridx=2;
  gbC.weightx=100;
  gbC.ipadx=20;
  gbL.setConstraints(m_PercentText,gbC);
  p2.add(m_PercentText);
  gbC=new GridBagConstraints();
  gbC.anchor=GridBagConstraints.WEST;
  gbC.fill=GridBagConstraints.HORIZONTAL;
  gbC.gridy=4;
  gbC.gridx=0;
  gbC.weightx=100;
  gbC.gridwidth=3;
  gbC.insets=new Insets(3,0,1,0);
  gbL.setConstraints(m_MoreOptions,gbC);
  p2.add(m_MoreOptions);
  Vector pluginsVector=GenericObjectEditor.getClassnames(ClassifierPanelLaunchHandlerPlugin.class.getName());
  JButton pluginBut=null;
  if (pluginsVector.size() == 1) {
    try {
      String className=(String)pluginsVector.elementAt(0);
      final ClassifierPanelLaunchHandlerPlugin plugin=(ClassifierPanelLaunchHandlerPlugin)Class.forName(className).newInstance();
      if (plugin != null) {
        plugin.setClassifierPanel(this);
        pluginBut=new JButton(plugin.getLaunchCommand());
        pluginBut.addActionListener(new ActionListener(){
          public void actionPerformed(          ActionEvent e){
            plugin.launch();
          }
        }
);
      }
    }
 catch (    Exception ex) {
      ex.printStackTrace();
    }
  }
 else   if (pluginsVector.size() > 1) {
    int okPluginCount=0;
    final java.awt.PopupMenu pluginPopup=new java.awt.PopupMenu();
    for (int i=0; i < pluginsVector.size(); i++) {
      String className=(String)(pluginsVector.elementAt(i));
      try {
        final ClassifierPanelLaunchHandlerPlugin plugin=(ClassifierPanelLaunchHandlerPlugin)Class.forName(className).newInstance();
        if (plugin == null) {
          continue;
        }
        okPluginCount++;
        plugin.setClassifierPanel(this);
        java.awt.MenuItem popI=new java.awt.MenuItem(plugin.getLaunchCommand());
        popI.addActionListener(new ActionListener(){
          public void actionPerformed(          ActionEvent e){
            plugin.launch();
          }
        }
);
        pluginPopup.add(popI);
      }
 catch (      Exception ex) {
        ex.printStackTrace();
      }
    }
    if (okPluginCount > 0) {
      pluginBut=new JButton("Launchers...");
      final JButton copyB=pluginBut;
      copyB.add(pluginPopup);
      pluginBut.addActionListener(new ActionListener(){
        public void actionPerformed(        ActionEvent e){
          pluginPopup.show(copyB,0,0);
        }
      }
);
    }
 else {
      pluginBut=null;
    }
  }
  JPanel buttons=new JPanel();
  buttons.setLayout(new GridLayout(2,2));
  buttons.add(m_ClassCombo);
  m_ClassCombo.setBorder(BorderFactory.createEmptyBorder(5,5,5,5));
  JPanel ssButs=new JPanel();
  ssButs.setBorder(BorderFactory.createEmptyBorder(5,5,5,5));
  if (pluginBut == null) {
    ssButs.setLayout(new GridLayout(1,2,5,5));
  }
 else {
    ssButs.setLayout(new FlowLayout(FlowLayout.LEFT));
  }
  ssButs.add(m_StartBut);
  ssButs.add(m_StopBut);
  if (pluginBut != null) {
    ssButs.add(pluginBut);
  }
  buttons.add(ssButs);
  JPanel p3=new JPanel();
  p3.setBorder(BorderFactory.createTitledBorder("Classifier output"));
  p3.setLayout(new BorderLayout());
  final JScrollPane js=new JScrollPane(m_OutText);
  p3.add(js,BorderLayout.CENTER);
  js.getViewport().addChangeListener(new ChangeListener(){
    private int lastHeight;
    public void stateChanged(    ChangeEvent e){
      JViewport vp=(JViewport)e.getSource();
      int h=vp.getViewSize().height;
      if (h != lastHeight) {
        lastHeight=h;
        int x=h - vp.getExtentSize().height;
        vp.setViewPosition(new Point(0,x));
      }
    }
  }
);
  JPanel mondo=new JPanel();
  gbL=new GridBagLayout();
  mondo.setLayout(gbL);
  gbC=new GridBagConstraints();
  gbC.fill=GridBagConstraints.HORIZONTAL;
  gbC.gridy=0;
  gbC.gridx=0;
  gbL.setConstraints(p2,gbC);
  mondo.add(p2);
  gbC=new GridBagConstraints();
  gbC.anchor=GridBagConstraints.NORTH;
  gbC.fill=GridBagConstraints.HORIZONTAL;
  gbC.gridy=1;
  gbC.gridx=0;
  gbL.setConstraints(buttons,gbC);
  mondo.add(buttons);
  gbC=new GridBagConstraints();
  gbC.fill=GridBagConstraints.BOTH;
  gbC.gridy=2;
  gbC.gridx=0;
  gbC.weightx=0;
  gbL.setConstraints(m_History,gbC);
  mondo.add(m_History);
  gbC=new GridBagConstraints();
  gbC.fill=GridBagConstraints.BOTH;
  gbC.gridy=0;
  gbC.gridx=1;
  gbC.gridheight=3;
  gbC.weightx=100;
  gbC.weighty=100;
  gbL.setConstraints(p3,gbC);
  mondo.add(p3);
  setLayout(new BorderLayout());
  add(p1,BorderLayout.NORTH);
  add(mondo,BorderLayout.CENTER);
}
