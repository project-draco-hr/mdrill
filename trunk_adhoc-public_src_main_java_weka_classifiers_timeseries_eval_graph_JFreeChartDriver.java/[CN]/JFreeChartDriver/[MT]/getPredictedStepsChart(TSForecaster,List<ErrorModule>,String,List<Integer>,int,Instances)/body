{
  if (forecaster instanceof TSLagUser && data != null) {
    TSLagMaker lagMaker=((TSLagUser)forecaster).getTSLagMaker();
    if (lagMaker.getAdjustForTrends() && !lagMaker.isUsingAnArtificialTimeIndex()) {
      data=new Instances(data);
      data=weka.classifiers.timeseries.core.Utils.replaceMissing(data,null,lagMaker.getTimeStampField(),true,lagMaker.getPeriodicity(),lagMaker.getSkipEntries());
    }
  }
  XYIntervalSeriesCollection xyDataset=new XYIntervalSeriesCollection();
  XYIntervalSeries targetSeries=new XYIntervalSeries(targetName,false,false);
  xyDataset.addSeries(targetSeries);
  for (int z=0; z < stepsToPlot.size(); z++) {
    int i=stepsToPlot.get(z);
    i--;
    if (i < 0 || i >= preds.size()) {
      continue;
    }
    String step="-steps";
    if (i == 0) {
      step="-step";
    }
    targetSeries=new XYIntervalSeries(targetName + "_" + (i + 1)+ step+ "-ahead",false,false);
    xyDataset.addSeries(targetSeries);
  }
  ValueAxis timeAxis=null;
  NumberAxis valueAxis=new NumberAxis("");
  valueAxis.setAutoRangeIncludesZero(false);
  int timeIndex=-1;
  boolean timeAxisIsDate=false;
  if (forecaster instanceof TSLagUser && data != null) {
    TSLagMaker lagMaker=((TSLagUser)forecaster).getTSLagMaker();
    if (!lagMaker.isUsingAnArtificialTimeIndex() && lagMaker.getAdjustForTrends()) {
      String timeName=lagMaker.getTimeStampField();
      if (data.attribute(timeName).isDate()) {
        timeAxis=new DateAxis("");
        timeAxisIsDate=true;
        timeIndex=data.attribute(timeName).index();
      }
    }
  }
  if (timeAxis == null) {
    timeAxis=new NumberAxis("");
    ((NumberAxis)timeAxis).setAutoRangeIncludesZero(false);
  }
  boolean doneActual=false;
  boolean hasConfidenceIntervals=false;
  for (int z=0; z < stepsToPlot.size(); z++) {
    int i=stepsToPlot.get(z);
    i--;
    if (i < 0 || i >= preds.size()) {
      continue;
    }
    ErrorModule predsForStepI=preds.get(i);
    List<NumericPrediction> predsForTargetAtI=predsForStepI.getPredictionsForTarget(targetName);
    String step="-steps";
    if (i == 0) {
      step="-step";
    }
    int predIndex=xyDataset.indexOf(targetName + "_" + (i + 1)+ step+ "-ahead");
    XYIntervalSeries predSeries=xyDataset.getSeries(predIndex);
    XYIntervalSeries actualSeries=null;
    if (!doneActual) {
      int actualIndex=xyDataset.indexOf(targetName);
      actualSeries=xyDataset.getSeries(actualIndex);
    }
    for (int j=0; j < predsForTargetAtI.size(); j++) {
      double x=Utils.missingValue();
      if (timeAxisIsDate) {
        if (instanceNumOffset + j + i < data.numInstances()) {
          x=data.instance(instanceNumOffset + j + i).value(timeIndex);
        }
      }
 else {
        x=instanceNumOffset + j + i;
      }
      double yPredicted=predsForTargetAtI.get(j).predicted();
      double yHigh=yPredicted;
      double yLow=yPredicted;
      double[][] conf=predsForTargetAtI.get(j).predictionIntervals();
      if (conf.length > 0) {
        yLow=conf[0][0];
        yHigh=conf[0][1];
        hasConfidenceIntervals=true;
      }
      if (!Utils.isMissingValue(x) && !Utils.isMissingValue(yPredicted)) {
        if (predSeries != null) {
          predSeries.add(x,x,x,yPredicted,yLow,yHigh);
        }
      }
      if (!doneActual && actualSeries != null) {
        double yActual=predsForTargetAtI.get(j).actual();
        if (!Utils.isMissingValue(x) && !Utils.isMissingValue(yActual)) {
          actualSeries.add(x,x,x,yActual,yActual,yActual);
        }
      }
    }
    if (actualSeries != null) {
      doneActual=true;
    }
  }
  String title="";
  for (  int i : stepsToPlot) {
    title+=i + ",";
  }
  title=title.substring(0,title.lastIndexOf(","));
  title+=" step-ahead predictions for " + targetName;
  if (forecaster instanceof WekaForecaster && hasConfidenceIntervals) {
    double confPerc=((WekaForecaster)forecaster).getConfidenceLevel() * 100.0;
    title+=" [" + Utils.doubleToString(confPerc,0) + "% conf. intervals]";
  }
  XYErrorRenderer renderer=new XYErrorRenderer();
  renderer.setBaseLinesVisible(true);
  XYPlot plot=new XYPlot(xyDataset,timeAxis,valueAxis,renderer);
  JFreeChart chart=new JFreeChart(title,JFreeChart.DEFAULT_TITLE_FONT,plot,true);
  chart.setBackgroundPaint(java.awt.Color.white);
  TextTitle chartTitle=chart.getTitle();
  String fontName=chartTitle.getFont().getFontName();
  java.awt.Font newFont=new java.awt.Font(fontName,java.awt.Font.PLAIN,12);
  chartTitle.setFont(newFont);
  return chart;
}
