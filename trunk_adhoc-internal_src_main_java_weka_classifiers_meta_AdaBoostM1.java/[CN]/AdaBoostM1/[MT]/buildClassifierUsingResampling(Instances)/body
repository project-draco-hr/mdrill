{
  Instances trainData, sample, training;
  double epsilon, reweight, sumProbs;
  Evaluation evaluation;
  int numInstances=data.numInstances();
  Random randomInstance=new Random(m_Seed);
  int resamplingIterations=0;
  m_Betas=new double[m_Classifiers.length];
  m_NumIterationsPerformed=0;
  training=new Instances(data,0,numInstances);
  sumProbs=training.sumOfWeights();
  for (int i=0; i < training.numInstances(); i++) {
    training.instance(i).setWeight(training.instance(i).weight() / sumProbs);
  }
  for (m_NumIterationsPerformed=0; m_NumIterationsPerformed < m_Classifiers.length; m_NumIterationsPerformed++) {
    if (m_Debug) {
      System.err.println("Training classifier " + (m_NumIterationsPerformed + 1));
    }
    if (m_WeightThreshold < 100) {
      trainData=selectWeightQuantile(training,(double)m_WeightThreshold / 100);
    }
 else {
      trainData=new Instances(training);
    }
    resamplingIterations=0;
    double[] weights=new double[trainData.numInstances()];
    for (int i=0; i < weights.length; i++) {
      weights[i]=trainData.instance(i).weight();
    }
    do {
      sample=trainData.resampleWithWeights(randomInstance,weights);
      m_Classifiers[m_NumIterationsPerformed].buildClassifier(sample);
      evaluation=new Evaluation(data);
      evaluation.evaluateModel(m_Classifiers[m_NumIterationsPerformed],training);
      epsilon=evaluation.errorRate();
      resamplingIterations++;
    }
 while (Utils.eq(epsilon,0) && (resamplingIterations < MAX_NUM_RESAMPLING_ITERATIONS));
    if (Utils.grOrEq(epsilon,0.5) || Utils.eq(epsilon,0)) {
      if (m_NumIterationsPerformed == 0) {
        m_NumIterationsPerformed=1;
      }
      break;
    }
    m_Betas[m_NumIterationsPerformed]=Math.log((1 - epsilon) / epsilon);
    reweight=(1 - epsilon) / epsilon;
    if (m_Debug) {
      System.err.println("\terror rate = " + epsilon + "  beta = "+ m_Betas[m_NumIterationsPerformed]);
    }
    setWeights(training,reweight);
  }
}
