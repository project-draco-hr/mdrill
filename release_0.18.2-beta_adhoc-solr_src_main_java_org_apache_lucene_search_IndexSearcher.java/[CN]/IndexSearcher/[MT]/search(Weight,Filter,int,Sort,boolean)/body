{
  if (sort == null)   throw new NullPointerException();
  if (executor == null) {
    int limit=reader.maxDoc();
    if (limit == 0) {
      limit=1;
    }
    nDocs=Math.min(nDocs,limit);
    TopFieldCollector collector=TopFieldCollector.create(sort,nDocs,fillFields,fieldSortDoTrackScores,fieldSortDoMaxScore,!weight.scoresDocsOutOfOrder());
    search(weight,filter,collector);
    return (TopFieldDocs)collector.topDocs();
  }
 else {
    final TopFieldCollector topCollector=TopFieldCollector.create(sort,nDocs,fillFields,fieldSortDoTrackScores,fieldSortDoMaxScore,false);
    final Lock lock=new ReentrantLock();
    final ExecutionHelper<TopFieldDocs> runner=new ExecutionHelper<TopFieldDocs>(executor);
    for (int i=0; i < subReaders.length; i++) {
      runner.submit(new MultiSearcherCallableWithSort(lock,subSearchers[i],weight,filter,nDocs,topCollector,sort));
    }
    int totalHits=0;
    float maxScore=Float.NEGATIVE_INFINITY;
    double sum=0.0f;
    double max=Double.NEGATIVE_INFINITY;
    double min=Double.POSITIVE_INFINITY;
    for (    final TopFieldDocs topFieldDocs : runner) {
      if (topFieldDocs.totalHits != 0) {
        totalHits+=topFieldDocs.totalHits;
        maxScore=Math.max(maxScore,topFieldDocs.getMaxScore());
        sum+=topFieldDocs.getSum();
        max=Math.max(max,topFieldDocs.getMax());
        min=Math.min(min,topFieldDocs.getMin());
      }
    }
    final TopFieldDocs topDocs=(TopFieldDocs)topCollector.topDocs();
    return new TopFieldDocs(totalHits,topDocs.scoreDocs,topDocs.fields,maxScore,sum,max,min);
  }
}
