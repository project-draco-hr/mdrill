{
  boolean shardRequest=false;
  SolrParams params=options.customParams;
  if (params != null) {
    shardRequest="true".equals(params.get(ShardParams.IS_SHARD));
  }
  SpellingResult result=new SpellingResult(options.tokens);
  IndexReader reader=determineReader(options.reader);
  Term term=field != null ? new Term(field,"") : null;
  float theAccuracy=(options.accuracy == Float.MIN_VALUE) ? spellChecker.getAccuracy() : options.accuracy;
  int count=Math.max(options.count,AbstractLuceneSpellChecker.DEFAULT_SUGGESTION_COUNT);
  SuggestMode mode=options.onlyMorePopular ? SuggestMode.SUGGEST_MORE_POPULAR : SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX;
  for (  Token token : options.tokens) {
    String tokenText=new String(token.buffer(),0,token.length());
    String[] suggestions=spellChecker.suggestSimilar(tokenText,count,field != null ? reader : null,field,mode,theAccuracy);
    if (suggestions.length == 1 && suggestions[0].equals(tokenText)) {
      continue;
    }
    if (options.extendedResults == true && reader != null && field != null) {
      term=term.createTerm(tokenText);
      result.addFrequency(token,reader.docFreq(term));
      int countLimit=Math.min(options.count,suggestions.length);
      if (countLimit > 0) {
        for (int i=0; i < countLimit; i++) {
          term=term.createTerm(suggestions[i]);
          result.add(token,suggestions[i],reader.docFreq(term));
        }
      }
 else       if (shardRequest) {
        List<String> suggList=Collections.emptyList();
        result.add(token,suggList);
      }
    }
 else {
      if (suggestions.length > 0) {
        List<String> suggList=Arrays.asList(suggestions);
        if (suggestions.length > options.count) {
          suggList=suggList.subList(0,options.count);
        }
        result.add(token,suggList);
      }
 else       if (shardRequest) {
        List<String> suggList=Collections.emptyList();
        result.add(token,suggList);
      }
    }
  }
  return result;
}
