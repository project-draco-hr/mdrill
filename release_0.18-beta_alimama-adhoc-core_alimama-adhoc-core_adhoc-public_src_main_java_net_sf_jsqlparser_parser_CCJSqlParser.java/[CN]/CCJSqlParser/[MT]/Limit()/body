{
  Limit limit=new Limit();
  Token token=null;
  if (jj_2_8(3)) {
    jj_consume_token(K_LIMIT);
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case S_INTEGER:
      token=jj_consume_token(S_INTEGER);
    limit.setOffset(Long.parseLong(token.image));
  break;
case 83:
jj_consume_token(83);
limit.setOffsetJdbcParameter(true);
break;
default :
jj_la1[71]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
jj_consume_token(78);
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case S_INTEGER:
token=jj_consume_token(S_INTEGER);
limit.setRowCount(Long.parseLong(token.image));
break;
case 83:
jj_consume_token(83);
limit.setRowCountJdbcParameter(true);
break;
default :
jj_la1[72]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
}
 else {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case K_OFFSET:
jj_consume_token(K_OFFSET);
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case S_INTEGER:
token=jj_consume_token(S_INTEGER);
limit.setOffset(Long.parseLong(token.image));
break;
case 83:
jj_consume_token(83);
limit.setOffsetJdbcParameter(true);
break;
default :
jj_la1[73]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
break;
case K_LIMIT:
jj_consume_token(K_LIMIT);
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case S_INTEGER:
token=jj_consume_token(S_INTEGER);
limit.setRowCount(Long.parseLong(token.image));
break;
case 83:
jj_consume_token(83);
limit.setRowCountJdbcParameter(true);
break;
case K_ALL:
jj_consume_token(K_ALL);
limit.setLimitAll(true);
break;
default :
jj_la1[74]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case K_OFFSET:
jj_consume_token(K_OFFSET);
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case S_INTEGER:
token=jj_consume_token(S_INTEGER);
limit.setOffset(Long.parseLong(token.image));
break;
case 83:
jj_consume_token(83);
limit.setOffsetJdbcParameter(true);
break;
default :
jj_la1[75]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
break;
default :
jj_la1[76]=jj_gen;
;
}
break;
default :
jj_la1[77]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
}
{
if (true) return limit;
}
throw new Error("Missing return statement in function");
}
