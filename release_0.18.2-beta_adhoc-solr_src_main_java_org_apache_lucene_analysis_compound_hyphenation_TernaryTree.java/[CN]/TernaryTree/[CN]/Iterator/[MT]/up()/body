{
  Item i=new Item();
  int res=0;
  if (ns.empty()) {
    return -1;
  }
  if (cur != 0 && sc[cur] == 0) {
    return lo[cur];
  }
  boolean climb=true;
  while (climb) {
    i=ns.pop();
    i.child++;
switch (i.child) {
case 1:
      if (sc[i.parent] != 0) {
        res=eq[i.parent];
        ns.push((Item)i.clone());
        ks.append(sc[i.parent]);
      }
 else {
        i.child++;
        ns.push((Item)i.clone());
        res=hi[i.parent];
      }
    climb=false;
  break;
case 2:
res=hi[i.parent];
ns.push((Item)i.clone());
if (ks.length() > 0) {
ks.setLength(ks.length() - 1);
}
climb=false;
break;
default :
if (ns.empty()) {
return -1;
}
climb=true;
break;
}
}
return res;
}
