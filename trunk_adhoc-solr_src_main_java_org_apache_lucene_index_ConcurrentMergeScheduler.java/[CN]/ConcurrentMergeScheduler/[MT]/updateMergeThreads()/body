{
  final List<MergeThread> activeMerges=new ArrayList<MergeThread>();
  int threadIdx=0;
  while (threadIdx < mergeThreads.size()) {
    final MergeThread mergeThread=mergeThreads.get(threadIdx);
    if (!mergeThread.isAlive()) {
      mergeThreads.remove(threadIdx);
      continue;
    }
    if (mergeThread.getCurrentMerge() != null) {
      activeMerges.add(mergeThread);
    }
    threadIdx++;
  }
  CollectionUtil.mergeSort(activeMerges,compareByMergeDocCount);
  int pri=mergeThreadPriority;
  final int activeMergeCount=activeMerges.size();
  for (threadIdx=0; threadIdx < activeMergeCount; threadIdx++) {
    final MergeThread mergeThread=activeMerges.get(threadIdx);
    final MergePolicy.OneMerge merge=mergeThread.getCurrentMerge();
    if (merge == null) {
      continue;
    }
    final boolean doPause=threadIdx < activeMergeCount - maxThreadCount;
    if (verbose()) {
      if (doPause != merge.getPause()) {
        if (doPause) {
          message("pause thread " + mergeThread.getName());
        }
 else {
          message("unpause thread " + mergeThread.getName());
        }
      }
    }
    if (doPause != merge.getPause()) {
      merge.setPause(doPause);
    }
    if (!doPause) {
      if (verbose()) {
        message("set priority of merge thread " + mergeThread.getName() + " to "+ pri);
      }
      mergeThread.setThreadPriority(pri);
      pri=Math.min(Thread.MAX_PRIORITY,1 + pri);
    }
  }
}
