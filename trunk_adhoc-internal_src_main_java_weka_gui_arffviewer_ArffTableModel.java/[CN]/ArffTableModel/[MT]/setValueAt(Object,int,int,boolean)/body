{
  int type;
  int index;
  String tmp;
  Instance inst;
  Attribute att;
  Object oldValue;
  if (!m_IgnoreChanges)   addUndoPoint();
  oldValue=getValueAt(rowIndex,columnIndex);
  type=getType(rowIndex,columnIndex);
  index=columnIndex - 1;
  inst=m_Data.instance(rowIndex);
  att=inst.attribute(index);
  if (aValue == null) {
    inst.setValue(index,Utils.missingValue());
  }
 else {
    tmp=aValue.toString();
switch (type) {
case Attribute.DATE:
      try {
        att.parseDate(tmp);
        inst.setValue(index,att.parseDate(tmp));
      }
 catch (      Exception e) {
      }
    break;
case Attribute.NOMINAL:
  if (att.indexOfValue(tmp) > -1)   inst.setValue(index,att.indexOfValue(tmp));
break;
case Attribute.STRING:
inst.setValue(index,tmp);
break;
case Attribute.NUMERIC:
try {
Double.parseDouble(tmp);
inst.setValue(index,Double.parseDouble(tmp));
}
 catch (Exception e) {
}
break;
case Attribute.RELATIONAL:
try {
inst.setValue(index,inst.attribute(index).addRelation((Instances)aValue));
}
 catch (Exception e) {
}
break;
default :
throw new IllegalArgumentException("Unsupported Attribute type: " + type + "!");
}
}
if (notify && (!("" + oldValue).equals("" + aValue))) notifyListener(new TableModelEvent(this,rowIndex,columnIndex));
}
