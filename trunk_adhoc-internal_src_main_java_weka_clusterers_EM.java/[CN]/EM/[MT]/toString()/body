{
  if (m_displayModelInOldFormat) {
    return toStringOriginal();
  }
  if (m_priors == null) {
    return "No clusterer built yet!";
  }
  StringBuffer temp=new StringBuffer();
  temp.append("\nEM\n==\n");
  if (m_initialNumClusters == -1) {
    temp.append("\nNumber of clusters selected by cross validation: " + m_num_clusters + "\n");
  }
 else {
    temp.append("\nNumber of clusters: " + m_num_clusters + "\n");
  }
  int maxWidth=0;
  int maxAttWidth=0;
  boolean containsKernel=false;
  for (int i=0; i < m_num_attribs; i++) {
    Attribute a=m_theInstances.attribute(i);
    if (a.name().length() > maxAttWidth) {
      maxAttWidth=m_theInstances.attribute(i).name().length();
    }
    if (a.isNominal()) {
      for (int j=0; j < a.numValues(); j++) {
        String val=a.value(j) + "  ";
        if (val.length() > maxAttWidth) {
          maxAttWidth=val.length();
        }
      }
    }
  }
  for (int i=0; i < m_num_clusters; i++) {
    for (int j=0; j < m_num_attribs; j++) {
      if (m_theInstances.attribute(j).isNumeric()) {
        double mean=Math.log(Math.abs(m_modelNormal[i][j][0])) / Math.log(10.0);
        double stdD=Math.log(Math.abs(m_modelNormal[i][j][1])) / Math.log(10.0);
        double width=(mean > stdD) ? mean : stdD;
        if (width < 0) {
          width=1;
        }
        width+=6.0;
        if ((int)width > maxWidth) {
          maxWidth=(int)width;
        }
      }
 else {
        DiscreteEstimator d=(DiscreteEstimator)m_model[i][j];
        for (int k=0; k < d.getNumSymbols(); k++) {
          String size=Utils.doubleToString(d.getCount(k),maxWidth,4).trim();
          if (size.length() > maxWidth) {
            maxWidth=size.length();
          }
        }
        int sum=Utils.doubleToString(d.getSumOfCounts(),maxWidth,4).trim().length();
        if (sum > maxWidth) {
          maxWidth=sum;
        }
      }
    }
  }
  if (maxAttWidth < "Attribute".length()) {
    maxAttWidth="Attribute".length();
  }
  maxAttWidth+=2;
  temp.append("\n\n");
  temp.append(pad("Cluster"," ",(maxAttWidth + maxWidth + 1) - "Cluster".length(),true));
  temp.append("\n");
  temp.append(pad("Attribute"," ",maxAttWidth - "Attribute".length(),false));
  for (int i=0; i < m_num_clusters; i++) {
    String classL="" + i;
    temp.append(pad(classL," ",maxWidth + 1 - classL.length(),true));
  }
  temp.append("\n");
  temp.append(pad(""," ",maxAttWidth,true));
  for (int i=0; i < m_num_clusters; i++) {
    String priorP=Utils.doubleToString(m_priors[i],maxWidth,2).trim();
    priorP="(" + priorP + ")";
    temp.append(pad(priorP," ",maxWidth + 1 - priorP.length(),true));
  }
  temp.append("\n");
  temp.append(pad("","=",maxAttWidth + (maxWidth * m_num_clusters) + m_num_clusters+ 1,true));
  temp.append("\n");
  for (int i=0; i < m_num_attribs; i++) {
    String attName=m_theInstances.attribute(i).name();
    temp.append(attName + "\n");
    if (m_theInstances.attribute(i).isNumeric()) {
      String meanL="  mean";
      temp.append(pad(meanL," ",maxAttWidth + 1 - meanL.length(),false));
      for (int j=0; j < m_num_clusters; j++) {
        String mean=Utils.doubleToString(m_modelNormal[j][i][0],maxWidth,4).trim();
        temp.append(pad(mean," ",maxWidth + 1 - mean.length(),true));
      }
      temp.append("\n");
      String stdDevL="  std. dev.";
      temp.append(pad(stdDevL," ",maxAttWidth + 1 - stdDevL.length(),false));
      for (int j=0; j < m_num_clusters; j++) {
        String stdDev=Utils.doubleToString(m_modelNormal[j][i][1],maxWidth,4).trim();
        temp.append(pad(stdDev," ",maxWidth + 1 - stdDev.length(),true));
      }
      temp.append("\n\n");
    }
 else {
      Attribute a=m_theInstances.attribute(i);
      for (int j=0; j < a.numValues(); j++) {
        String val="  " + a.value(j);
        temp.append(pad(val," ",maxAttWidth + 1 - val.length(),false));
        for (int k=0; k < m_num_clusters; k++) {
          DiscreteEstimator d=(DiscreteEstimator)m_model[k][i];
          String count=Utils.doubleToString(d.getCount(j),maxWidth,4).trim();
          temp.append(pad(count," ",maxWidth + 1 - count.length(),true));
        }
        temp.append("\n");
      }
      String total="  [total]";
      temp.append(pad(total," ",maxAttWidth + 1 - total.length(),false));
      for (int k=0; k < m_num_clusters; k++) {
        DiscreteEstimator d=(DiscreteEstimator)m_model[k][i];
        String count=Utils.doubleToString(d.getSumOfCounts(),maxWidth,4).trim();
        temp.append(pad(count," ",maxWidth + 1 - count.length(),true));
      }
      temp.append("\n");
    }
  }
  return temp.toString();
}
