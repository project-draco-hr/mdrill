{
  Instances[] instances=new Instances[m_numSubsets];
  double[] weights;
  double newWeight;
  Instance instance;
  int subset, i, j;
  for (j=0; j < m_numSubsets; j++)   instances[j]=new Instances((Instances)data,data.numInstances());
  for (i=0; i < data.numInstances(); i++) {
    instance=((Instances)data).instance(i);
    weights=weights(instance);
    subset=whichSubset(instance);
    if (subset > -1)     instances[subset].add(instance);
 else     for (j=0; j < m_numSubsets; j++)     if (Utils.gr(weights[j],0)) {
      newWeight=weights[j] * instance.weight();
      instances[j].add(instance);
      instances[j].lastInstance().setWeight(newWeight);
    }
  }
  for (j=0; j < m_numSubsets; j++)   instances[j].compactify();
  return instances;
}
