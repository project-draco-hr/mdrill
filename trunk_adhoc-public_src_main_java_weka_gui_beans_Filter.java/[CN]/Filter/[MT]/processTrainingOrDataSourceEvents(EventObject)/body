{
  boolean structureOnly=false;
  if (e instanceof DataSetEvent) {
    structureOnly=((DataSetEvent)e).isStructureOnly();
    if (structureOnly) {
      notifyDataOrTrainingListeners(e);
    }
  }
  if (e instanceof TrainingSetEvent) {
    structureOnly=((TrainingSetEvent)e).isStructureOnly();
    if (structureOnly) {
      notifyDataOrTrainingListeners(e);
    }
  }
  if (structureOnly && !(m_Filter instanceof StreamableFilter)) {
    return;
  }
  if (m_filterThread == null) {
    try {
      if (m_state == IDLE) {
synchronized (this) {
          m_state=FILTERING_TRAINING;
        }
        m_trainingSet=(e instanceof TrainingSetEvent) ? ((TrainingSetEvent)e).getTrainingSet() : ((DataSetEvent)e).getDataSet();
        m_filterThread=new Thread(){
          public void run(){
            try {
              if (m_trainingSet != null) {
                m_visual.setAnimated();
                if (m_log != null) {
                  m_log.statusMessage(statusMessagePrefix() + "Filtering training data (" + m_trainingSet.relationName()+ ")");
                }
                m_Filter.setInputFormat(m_trainingSet);
                Instances filteredData=weka.filters.Filter.useFilter(m_trainingSet,m_Filter);
                m_visual.setStatic();
                EventObject ne;
                if (e instanceof TrainingSetEvent) {
                  ne=new TrainingSetEvent(weka.gui.beans.Filter.this,filteredData);
                  ((TrainingSetEvent)ne).m_setNumber=((TrainingSetEvent)e).m_setNumber;
                  ((TrainingSetEvent)ne).m_maxSetNumber=((TrainingSetEvent)e).m_maxSetNumber;
                }
 else {
                  ne=new DataSetEvent(weka.gui.beans.Filter.this,filteredData);
                }
                notifyDataOrTrainingListeners(ne);
              }
            }
 catch (            Exception ex) {
              ex.printStackTrace();
              if (m_log != null) {
                m_log.logMessage("[Filter] " + statusMessagePrefix() + ex.getMessage());
                m_log.statusMessage(statusMessagePrefix() + "ERROR (See log for details).");
              }
              Filter.this.stop();
            }
 finally {
              m_visual.setStatic();
              m_state=IDLE;
              if (isInterrupted()) {
                m_trainingSet=null;
                if (m_log != null) {
                  m_log.logMessage("[Filter] " + statusMessagePrefix() + " training set interrupted!");
                  m_log.statusMessage(statusMessagePrefix() + "INTERRUPTED");
                }
              }
 else {
                if (m_log != null) {
                  m_log.statusMessage(statusMessagePrefix() + "Finished.");
                }
              }
              block(false);
            }
          }
        }
;
        m_filterThread.setPriority(Thread.MIN_PRIORITY);
        m_filterThread.start();
        block(true);
        m_filterThread=null;
        m_state=IDLE;
      }
    }
 catch (    Exception ex) {
      ex.printStackTrace();
    }
  }
}
