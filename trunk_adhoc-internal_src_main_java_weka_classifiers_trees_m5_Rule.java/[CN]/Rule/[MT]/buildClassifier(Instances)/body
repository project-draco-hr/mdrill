{
  m_instances=null;
  m_topOfTree=null;
  m_covered=null;
  m_notCovered=null;
  m_ruleModel=null;
  m_splitAtts=null;
  m_splitVals=null;
  m_relOps=null;
  m_internalNodes=null;
  m_instances=data;
  m_classIndex=m_instances.classIndex();
  m_numAttributes=m_instances.numAttributes();
  m_numInstances=m_instances.numInstances();
  m_globalStdDev=Rule.stdDev(m_classIndex,m_instances);
  m_globalAbsDev=Rule.absDev(m_classIndex,m_instances);
  m_topOfTree=new RuleNode(m_globalStdDev,m_globalAbsDev,null);
  m_topOfTree.setSaveInstances(m_saveInstances);
  m_topOfTree.setRegressionTree(m_regressionTree);
  m_topOfTree.setMinNumInstances(m_minNumInstances);
  m_topOfTree.buildClassifier(m_instances);
  if (!m_useUnpruned) {
    m_topOfTree.prune();
  }
 else {
    m_topOfTree.installLinearModels();
  }
  if (m_smoothPredictions) {
    m_topOfTree.installSmoothedModels();
  }
  m_topOfTree.numLeaves(0);
  if (!m_useTree) {
    makeRule();
  }
  m_instances=new Instances(m_instances,0);
}
