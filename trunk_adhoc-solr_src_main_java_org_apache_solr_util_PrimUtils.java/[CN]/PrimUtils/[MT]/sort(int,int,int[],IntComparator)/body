{
  int temp;
  int length=end - start;
  if (length < 7) {
    for (int i=start + 1; i < end; i++) {
      for (int j=i; j > start && comparator.lessThan(array[j],array[j - 1]); j--) {
        temp=array[j];
        array[j]=array[j - 1];
        array[j - 1]=temp;
      }
    }
    return;
  }
  int middle=(start + end) >>> 1;
  if (length > 7) {
    int bottom=start;
    int top=end - 1;
    if (length > 40) {
      length>>=3;
      bottom=med3(array,bottom,bottom + length,bottom + (length << 1),comparator);
      middle=med3(array,middle - length,middle,middle + length,comparator);
      top=med3(array,top - (length << 1),top - length,top,comparator);
    }
    middle=med3(array,bottom,middle,top,comparator);
  }
  int partionValue=array[middle];
  int a, b, c, d;
  a=b=start;
  c=d=end - 1;
  while (true) {
    while (b <= c && !comparator.lessThan(partionValue,array[b])) {
      if (comparator.equals(array[b],partionValue)) {
        temp=array[a];
        array[a++]=array[b];
        array[b]=temp;
      }
      b++;
    }
    while (c >= b && !comparator.lessThan(array[c],partionValue)) {
      if (comparator.equals(array[c],partionValue)) {
        temp=array[c];
        array[c]=array[d];
        array[d--]=temp;
      }
      c--;
    }
    if (b > c) {
      break;
    }
    temp=array[b];
    array[b++]=array[c];
    array[c--]=temp;
  }
  length=a - start < b - a ? a - start : b - a;
  int l=start;
  int h=b - length;
  while (length-- > 0) {
    temp=array[l];
    array[l++]=array[h];
    array[h++]=temp;
  }
  length=d - c < end - 1 - d ? d - c : end - 1 - d;
  l=b;
  h=end - length;
  while (length-- > 0) {
    temp=array[l];
    array[l++]=array[h];
    array[h++]=temp;
  }
  if ((length=b - a) > 0) {
    sort(start,start + length,array,comparator);
  }
  if ((length=d - c) > 0) {
    sort(end - length,end,array,comparator);
  }
}
