{
  if (m_Debug && id1 > -1 && id2 > -1) {
    System.err.println("\nEvaluation of string kernel for");
    System.err.println(m_data.instance(id1).stringValue(m_strAttr));
    System.err.println("and");
    System.err.println(m_data.instance(id2).stringValue(m_strAttr));
  }
  if (id1 == id2 && m_normalize)   return 1.0;
  double result=0;
  long key=-1;
  int location=-1;
  if ((id1 >= 0) && (m_keys != null)) {
    if (id1 > id2) {
      key=(long)id1 * m_numInsts + id2;
    }
 else {
      key=(long)id2 * m_numInsts + id1;
    }
    if (key < 0) {
      throw new Exception("Cache overflow detected!");
    }
    location=(int)(key % m_keys.length);
    if (m_keys[location] == (key + 1)) {
      if (m_Debug)       System.err.println("result (cached): " + m_storage[location]);
      return m_storage[location];
    }
  }
  m_kernelEvals++;
  long start=System.currentTimeMillis();
  Instance inst2=m_data.instance(id2);
  char[] s1=inst1.stringValue(m_strAttr).toCharArray();
  char[] s2=inst2.stringValue(m_strAttr).toCharArray();
  if (s1.length == 0 || s2.length == 0)   return 0;
  if (m_normalize) {
    result=normalizedKernel(s1,s2);
  }
 else {
    result=unnormalizedKernel(s1,s2);
  }
  if (m_Debug) {
    long duration=System.currentTimeMillis() - start;
    System.err.println("result: " + result);
    System.err.println("evaluation time:" + duration + "\n");
  }
  if (key != -1) {
    m_storage[location]=result;
    m_keys[location]=(key + 1);
  }
  return result;
}
