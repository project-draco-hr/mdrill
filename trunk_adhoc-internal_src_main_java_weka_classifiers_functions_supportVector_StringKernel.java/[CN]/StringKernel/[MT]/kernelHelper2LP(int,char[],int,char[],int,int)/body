{
  if (remainingMatchLength < 2 * n)   return getReturnValue(n);
  if (endIndexS < 0 || endIndexT < 0)   return getReturnValue(n);
  int adr=0;
  if (m_useRecursionCache) {
    adr=m_multX * n + m_multY * endIndexS + m_multZ * endIndexT + m_multZZ * remainingMatchLength;
    if (cachekh2K[adr % maxCache] == adr + 1) {
      return cachekh2[adr % maxCache];
    }
  }
  char x=s[endIndexS];
  if (x == t[endIndexT]) {
    double ret=m_lambda * (kernelHelper2LP(n,s,endIndexS,t,endIndexT - 1,remainingMatchLength - 1) + m_lambda * kernelHelperLP(n - 1,s,endIndexS - 1,t,endIndexT - 1,remainingMatchLength - 2));
    if (m_useRecursionCache && endIndexS >= 0 && endIndexT >= 0 && n >= 0) {
      cachekh2K[adr % maxCache]=adr + 1;
      cachekh2[adr % maxCache]=ret;
    }
    return ret;
  }
  int i;
  int minIndex=endIndexT - remainingMatchLength;
  if (minIndex < 0)   minIndex=0;
  for (i=endIndexT; i >= minIndex; i--) {
    if (x == t[i]) {
      int skipLength=endIndexT - i;
      double ret=getPowerOfLambda(skipLength) * kernelHelper2LP(n,s,endIndexS,t,i,remainingMatchLength - skipLength);
      if (m_useRecursionCache && endIndexS >= 0 && endIndexT >= 0 && n >= 0) {
        cachekh2K[adr % maxCache]=adr + 1;
        cachekh2[adr % maxCache]=ret;
      }
      return ret;
    }
  }
  double ret=getReturnValue(n);
  if (m_useRecursionCache && endIndexS >= 0 && endIndexT >= 0 && n >= 0) {
    cachekh2K[adr % maxCache]=adr + 1;
    cachekh2[adr % maxCache]=ret;
  }
  return ret;
}
