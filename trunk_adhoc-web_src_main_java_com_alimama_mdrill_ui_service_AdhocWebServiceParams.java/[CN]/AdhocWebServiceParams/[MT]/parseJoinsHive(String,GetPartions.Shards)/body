{
  if (leftjoin == null || leftjoin.trim().isEmpty()) {
    return new HigoAdhocJoinParams[0];
  }
  JSONArray jsonStr=new JSONArray(leftjoin.trim());
  HigoAdhocJoinParams[] rtn=new HigoAdhocJoinParams[jsonStr.length()];
  for (int i=0; i < jsonStr.length(); i++) {
    JSONObject obj=jsonStr.getJSONObject(i);
    HigoAdhocJoinParams p=new HigoAdhocJoinParams();
    p.tablename=obj.getString("tablename");
    HashMap<String,String> map=TableJoin.getTableInfo(p.tablename);
    if (map != null) {
      p.txtPath=map.get("txtStorePath");
    }
    p.hdfsPath=obj.getString("path") + "/part-00000";
    p.fq=WebServiceParams.fqListHive("dt",obj.getString("fq"),shard,false,null,null,null,null);
    p.fl=obj.getString("fl").split(",");
    p.leftkey=obj.getString("leftkey");
    p.rightkey=obj.getString("rightkey");
    p.returnPrefix=obj.getString("prefix");
    p.sort=obj.has("sort") ? obj.getString("sort") : "";
    String tmptblname=("tmp_" + p.tablename + "_"+ System.currentTimeMillis()).replaceAll("-","_");
    p.createSql=AdhocHiveTmpTable.createTmpTable(tmptblname,map.get("colsName").split(","),map.get("splitString"));
    p.DropSql=AdhocHiveTmpTable.dropTable(tmptblname);
    p.addData=AdhocHiveTmpTable.addData(tmptblname,map.get("txtStorePath"));
    StringBuffer sqlWhere=new StringBuffer();
    String join=" where ";
    for (    String fq : p.fq) {
      sqlWhere.append(join);
      sqlWhere.append(fq);
      join=" and ";
    }
    HashSet<String> allfl=new HashSet<String>();
    for (    String s : obj.getString("fl").split(",")) {
      allfl.add(s.trim());
    }
    allfl.add(p.rightkey);
    StringBuffer buff=new StringBuffer();
    String joinchar="";
    for (    String fl : allfl) {
      buff.append(joinchar);
      buff.append(fl);
      joinchar=",";
    }
    p.frQuer="select " + buff.toString() + " from "+ tmptblname+ " "+ sqlWhere.toString();
    rtn[i]=p;
  }
  return rtn;
}
