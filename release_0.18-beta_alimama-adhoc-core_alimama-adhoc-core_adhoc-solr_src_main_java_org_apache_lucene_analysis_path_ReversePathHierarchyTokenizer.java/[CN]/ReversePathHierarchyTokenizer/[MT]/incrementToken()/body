{
  clearAttributes();
  if (delimitersCount == -1) {
    int length=0;
    delimiterPositions.add(0);
    while (true) {
      int c=input.read();
      if (c < 0) {
        break;
      }
      length++;
      if (c == delimiter) {
        delimiterPositions.add(length);
        resultToken.append(replacement);
      }
 else {
        resultToken.append((char)c);
      }
    }
    delimitersCount=delimiterPositions.size();
    if (delimiterPositions.get(delimitersCount - 1) < length) {
      delimiterPositions.add(length);
      delimitersCount++;
    }
    if (resultTokenBuffer.length < resultToken.length()) {
      resultTokenBuffer=new char[resultToken.length()];
    }
    resultToken.getChars(0,resultToken.length(),resultTokenBuffer,0);
    resultToken.setLength(0);
    endPosition=delimiterPositions.get(delimitersCount - 1 - skip);
    finalOffset=correctOffset(length);
    posAtt.setPositionIncrement(1);
  }
 else {
    posAtt.setPositionIncrement(0);
  }
  while (skipped < delimitersCount - skip - 1) {
    int start=delimiterPositions.get(skipped);
    termAtt.copyBuffer(resultTokenBuffer,start,endPosition - start);
    offsetAtt.setOffset(correctOffset(start),correctOffset(endPosition));
    skipped++;
    return true;
  }
  return false;
}
