{
  double result=Double.NaN;
switch (data.attribute(index).type()) {
case Attribute.NUMERIC:
    result=classVal * 4 + m_Random.nextFloat() * 1 - 0.5;
  break;
case Attribute.NOMINAL:
if (m_Random.nextFloat() < 0.2) {
  result=Math.abs(m_Random.nextInt()) % data.attribute(index).numValues();
}
 else {
  result=((int)classVal) % data.attribute(index).numValues();
}
break;
case Attribute.STRING:
String str="";
for (int n=0; n < m_Words.length; n++) {
if ((n > 0) && (m_WordSeparators.length() != 0)) str+=m_WordSeparators.charAt(m_Random.nextInt(m_WordSeparators.length()));
str+=m_Words[m_Random.nextInt(m_Words.length)];
}
result=data.attribute(index).addStringValue(str);
break;
case Attribute.DATE:
result=data.attribute(index).parseDate((2000 + m_Random.nextInt(100)) + "-01-01");
break;
case Attribute.RELATIONAL:
Instances rel=new Instances(data.attribute(index).relation(),0);
for (int n=0; n < getNumInstancesRelational(); n++) {
Instance inst=new DenseInstance(rel.numAttributes());
inst.setDataset(data);
for (int i=0; i < rel.numAttributes(); i++) {
inst.setValue(i,generateAttributeValue(rel,i,0));
}
rel.add(inst);
}
result=data.attribute(index).addRelation(rel);
break;
}
return result;
}
