{
  StringBuffer text=new StringBuffer();
  text.append("SMOreg\n\n");
  if (m_weights != null) {
    text.append("weights (not support vectors):\n");
    for (int i=0; i < m_data.numAttributes(); i++) {
      if (i != m_classIndex) {
        text.append((m_weights[i] >= 0 ? " + " : " - ") + Utils.doubleToString(Math.abs(m_weights[i]),12,4) + " * ");
        if (m_SVM.getFilterType().getSelectedTag().getID() == SMOreg.FILTER_STANDARDIZE) {
          text.append("(standardized) ");
        }
 else         if (m_SVM.getFilterType().getSelectedTag().getID() == SMOreg.FILTER_NORMALIZE) {
          text.append("(normalized) ");
        }
        text.append(m_data.attribute(i).name() + "\n");
      }
    }
  }
 else {
    text.append("Support vectors:\n");
    for (int i=0; i < m_nInstances; i++) {
      if (m_alpha[i] > 0) {
        text.append("+" + m_alpha[i] + " * k["+ i+ "]\n");
      }
      if (m_alphaStar[i] > 0) {
        text.append("-" + m_alphaStar[i] + " * k["+ i+ "]\n");
      }
    }
  }
  text.append((m_b <= 0 ? " + " : " - ") + Utils.doubleToString(Math.abs(m_b),12,4) + "\n\n");
  text.append("\n\nNumber of kernel evaluations: " + m_nEvals);
  if (m_nCacheHits >= 0 && m_nEvals > 0) {
    double hitRatio=1 - m_nEvals * 1.0 / (m_nCacheHits + m_nEvals);
    text.append(" (" + Utils.doubleToString(hitRatio * 100,7,3).trim() + "% cached)");
  }
  return text.toString();
}
