{
  if (m_dataSourceListeners.size() > 0 || m_trainingSetListeners.size() > 0 || m_testSetListeners.size() > 0) {
    if (e.getTestSet().isStructureOnly()) {
      return;
    }
    Instances testSet=e.getTestSet().getDataSet();
    weka.clusterers.Clusterer clusterer=e.getClusterer();
    String test;
    if (e.getTestOrTrain() == 0) {
      test="test";
    }
 else {
      test="training";
    }
    String relationNameModifier="_" + test + "_"+ e.getSetNumber()+ "_of_"+ e.getMaxSetNumber();
    if (!m_appendProbabilities || !(clusterer instanceof DensityBasedClusterer)) {
      if (m_appendProbabilities && !(clusterer instanceof DensityBasedClusterer)) {
        System.err.println("Only density based clusterers can append probabilities. Instead cluster will be assigned for each instance.");
        if (m_logger != null) {
          m_logger.logMessage("[PredictionAppender] " + statusMessagePrefix() + " Only density based clusterers can "+ "append probabilities. Instead cluster will be assigned for each "+ "instance.");
          m_logger.statusMessage(statusMessagePrefix() + "WARNING: Only density based clusterers can append probabilities. " + "Instead cluster will be assigned for each instance.");
        }
      }
      try {
        Instances newInstances=makeClusterDataSetClass(testSet,clusterer,relationNameModifier);
        if (m_dataSourceListeners.size() > 0) {
          notifyDataSetAvailable(new DataSetEvent(this,new Instances(newInstances,0)));
        }
        if (m_trainingSetListeners.size() > 0 && e.getTestOrTrain() > 0) {
          TrainingSetEvent tse=new TrainingSetEvent(this,new Instances(newInstances,0));
          tse.m_setNumber=e.getSetNumber();
          tse.m_maxSetNumber=e.getMaxSetNumber();
          notifyTrainingSetAvailable(tse);
        }
        if (m_testSetListeners.size() > 0 && e.getTestOrTrain() == 0) {
          TestSetEvent tse=new TestSetEvent(this,new Instances(newInstances,0));
          tse.m_setNumber=e.getSetNumber();
          tse.m_maxSetNumber=e.getMaxSetNumber();
          notifyTestSetAvailable(tse);
        }
        for (int i=0; i < testSet.numInstances(); i++) {
          double predCluster=clusterer.clusterInstance(testSet.instance(i));
          newInstances.instance(i).setValue(newInstances.numAttributes() - 1,predCluster);
        }
        if (m_dataSourceListeners.size() > 0) {
          notifyDataSetAvailable(new DataSetEvent(this,newInstances));
        }
        if (m_trainingSetListeners.size() > 0 && e.getTestOrTrain() > 0) {
          TrainingSetEvent tse=new TrainingSetEvent(this,newInstances);
          tse.m_setNumber=e.getSetNumber();
          tse.m_maxSetNumber=e.getMaxSetNumber();
          notifyTrainingSetAvailable(tse);
        }
        if (m_testSetListeners.size() > 0 && e.getTestOrTrain() == 0) {
          TestSetEvent tse=new TestSetEvent(this,newInstances);
          tse.m_setNumber=e.getSetNumber();
          tse.m_maxSetNumber=e.getMaxSetNumber();
          notifyTestSetAvailable(tse);
        }
        return;
      }
 catch (      Exception ex) {
        ex.printStackTrace();
      }
    }
 else {
      try {
        Instances newInstances=makeClusterDataSetProbabilities(testSet,clusterer,relationNameModifier);
        notifyDataSetAvailable(new DataSetEvent(this,new Instances(newInstances,0)));
        for (int i=0; i < testSet.numInstances(); i++) {
          double[] probs=clusterer.distributionForInstance(testSet.instance(i));
          for (int j=0; j < clusterer.numberOfClusters(); j++) {
            newInstances.instance(i).setValue(testSet.numAttributes() + j,probs[j]);
          }
        }
        notifyDataSetAvailable(new DataSetEvent(this,newInstances));
      }
 catch (      Exception ex) {
        ex.printStackTrace();
      }
    }
  }
}
