{
  String msg;
  String title;
  String value;
  String valueNew;
  int i;
  ArffSortedTableModel model;
  value="";
  valueNew="";
  if (o == menuItemSetMissingValues) {
    title="Replace missing values...";
    msg="New value for MISSING values";
  }
 else   if (o == menuItemSetAllValues) {
    title="Set all values...";
    msg="New value for ALL values";
  }
 else   if (o == menuItemReplaceValues) {
    title="Replace values...";
    msg="Old value";
  }
 else   return;
  value=ComponentHelper.showInputBox(m_TableArff.getParent(),title,msg,m_LastSearch);
  if (value == null)   return;
  m_LastSearch=value;
  if (o == menuItemReplaceValues) {
    valueNew=ComponentHelper.showInputBox(m_TableArff.getParent(),title,"New value",m_LastReplace);
    if (valueNew == null)     return;
    m_LastReplace=valueNew;
  }
  model=(ArffSortedTableModel)m_TableArff.getModel();
  model.setNotificationEnabled(false);
  addUndoPoint();
  model.setUndoEnabled(false);
  String valueCopy=value;
  String valueNewCopy=valueNew;
  for (i=0; i < m_TableArff.getRowCount(); i++) {
    if (o == menuItemSetAllValues) {
      if (valueCopy.equals("NaN") || valueCopy.equals("?")) {
        value=null;
      }
      model.setValueAt(value,i,m_CurrentCol);
    }
 else     if ((o == menuItemSetMissingValues) && model.isMissingAt(i,m_CurrentCol))     model.setValueAt(value,i,m_CurrentCol);
 else     if ((o == menuItemReplaceValues) && model.getValueAt(i,m_CurrentCol).toString().equals(value)) {
      if (valueNewCopy.equals("NaN") || valueNewCopy.equals("?")) {
        valueNew=null;
      }
      model.setValueAt(valueNew,i,m_CurrentCol);
    }
  }
  model.setUndoEnabled(true);
  model.setNotificationEnabled(true);
  model.notifyListener(new TableModelEvent(model,0,model.getRowCount(),m_CurrentCol,TableModelEvent.UPDATE));
  m_TableArff.repaint();
}
