{
  runnerLock.lock();
  log.info("starting runner: {}",this);
  PostMethod method=null;
  try {
    do {
      try {
        RequestEntity request=new RequestEntity(){
          public long getContentLength(){
            return -1;
          }
          public String getContentType(){
            return ClientUtils.TEXT_XML;
          }
          public boolean isRepeatable(){
            return false;
          }
          public void writeRequest(          OutputStream out) throws IOException {
            try {
              OutputStreamWriter writer=new OutputStreamWriter(out,"UTF-8");
              writer.append("<stream>");
              UpdateRequest req=queue.poll(250,TimeUnit.MILLISECONDS);
              while (req != null) {
                log.debug("sending: {}",req);
                req.writeXML(writer);
                SolrParams params=req.getParams();
                if (params != null) {
                  String fmt=null;
                  if (params.getBool(UpdateParams.OPTIMIZE,false)) {
                    fmt="<optimize waitSearcher=\"%s\" waitFlush=\"%s\" />";
                  }
 else                   if (params.getBool(UpdateParams.COMMIT,false)) {
                    fmt="<commit waitSearcher=\"%s\" waitFlush=\"%s\" />";
                  }
                  if (fmt != null) {
                    log.info(fmt);
                    writer.write(String.format(fmt,params.getBool(UpdateParams.WAIT_SEARCHER,false) + "",params.getBool(UpdateParams.WAIT_FLUSH,false) + ""));
                  }
                }
                writer.flush();
                req=queue.poll(250,TimeUnit.MILLISECONDS);
              }
              writer.append("</stream>");
              writer.flush();
            }
 catch (            InterruptedException e) {
              e.printStackTrace();
            }
          }
        }
;
        method=new PostMethod(_baseURL + updateUrl);
        method.setRequestEntity(request);
        method.setFollowRedirects(false);
        method.addRequestHeader("User-Agent",AGENT);
        int statusCode=getHttpClient().executeMethod(method);
        if (statusCode != HttpStatus.SC_OK) {
          StringBuilder msg=new StringBuilder();
          msg.append(method.getStatusLine().getReasonPhrase());
          msg.append("\n\n");
          msg.append(method.getStatusText());
          msg.append("\n\n");
          msg.append("request: " + method.getURI());
          handleError(new Exception(msg.toString()));
        }
      }
  finally {
        try {
          if (method != null)           method.releaseConnection();
        }
 catch (        Exception ex) {
        }
      }
    }
 while (!queue.isEmpty());
  }
 catch (  Throwable e) {
    handleError(e);
  }
 finally {
synchronized (runners) {
      if (runners.size() == 1 && queue.remainingCapacity() == 0) {
        scheduler.execute(this);
      }
 else {
        runners.remove(this);
      }
    }
    log.info("finished: {}",this);
    runnerLock.unlock();
  }
}
