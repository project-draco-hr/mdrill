{
  long startTime;
  long endTime;
  int i;
  int n;
  m_Result=new StringBuffer();
  startTime=System.currentTimeMillis();
  kernel.buildKernel(data);
  endTime=System.currentTimeMillis();
  m_Result.append("\n=== Model ===\n\n");
  if (Utils.joinOptions(getUserOptions()).trim().length() != 0)   m_Result.append("Options: " + Utils.joinOptions(getUserOptions()) + "\n\n");
  m_Result.append(kernel.toString() + "\n");
  m_Evaluations=new double[data.numInstances()][data.numInstances()];
  for (n=0; n < data.numInstances(); n++) {
    for (i=n; i < data.numInstances(); i++) {
      m_Evaluations[n][i]=kernel.eval(n,i,data.instance(n));
    }
  }
  if (kernel instanceof CachedKernel) {
    for (n=0; n < data.numInstances(); n++) {
      for (i=n; i < data.numInstances(); i++) {
        m_Evaluations[n][i]=kernel.eval(n,i,data.instance(n));
      }
    }
  }
  m_NumEvals=kernel.numEvals();
  m_NumCacheHits=kernel.numCacheHits();
  m_Result.append("\n=== Evaluation ===\n\n");
  if (kernel instanceof CachedKernel) {
    m_Result.append("Cache size   : " + ((CachedKernel)kernel).getCacheSize() + "\n");
  }
  m_Result.append("# Evaluations: " + m_NumEvals + "\n");
  m_Result.append("# Cache hits : " + m_NumCacheHits + "\n");
  m_Result.append("Elapsed time : " + (((double)(endTime - startTime)) / 1000) + "s\n");
  return m_Result.toString();
}
