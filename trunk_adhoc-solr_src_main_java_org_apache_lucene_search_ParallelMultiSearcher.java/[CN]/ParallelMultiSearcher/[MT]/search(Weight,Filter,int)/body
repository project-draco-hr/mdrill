{
  final HitQueue hq=new HitQueue(nDocs,false);
  final Lock lock=new ReentrantLock();
  final ExecutionHelper<TopDocs> runner=new ExecutionHelper<TopDocs>(executor);
  for (int i=0; i < searchables.length; i++) {
    runner.submit(new MultiSearcherCallableNoSort(lock,searchables[i],weight,filter,nDocs,hq,i,starts));
  }
  int totalHits=0;
  float maxScore=Float.NEGATIVE_INFINITY;
  double sum=0.0f;
  double max=Double.NEGATIVE_INFINITY;
  double min=Double.POSITIVE_INFINITY;
  for (  final TopDocs topDocs : runner) {
    totalHits+=topDocs.totalHits;
    maxScore=Math.max(maxScore,topDocs.getMaxScore());
    sum+=topDocs.getSum();
    max=Math.max(max,topDocs.getMax());
    min=Math.min(min,topDocs.getMin());
  }
  final ScoreDoc[] scoreDocs=new ScoreDoc[hq.size()];
  for (int i=hq.size() - 1; i >= 0; i--)   scoreDocs[i]=hq.pop();
  return new TopDocs(totalHits,scoreDocs,maxScore,sum,max,min);
}
