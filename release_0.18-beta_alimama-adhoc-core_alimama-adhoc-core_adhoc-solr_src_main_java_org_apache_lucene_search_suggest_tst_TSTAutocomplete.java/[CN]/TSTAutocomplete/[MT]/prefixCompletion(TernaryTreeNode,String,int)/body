{
  TernaryTreeNode p=root;
  ArrayList<TernaryTreeNode> suggest=new ArrayList<TernaryTreeNode>();
  while (p != null) {
    if (s.charAt(x) < p.splitchar) {
      p=p.loKid;
    }
 else     if (s.charAt(x) == p.splitchar) {
      if (x == s.length() - 1) {
        break;
      }
 else {
        x++;
      }
      p=p.eqKid;
    }
 else {
      p=p.hiKid;
    }
  }
  if (p == null)   return suggest;
  if (p.eqKid == null && p.token == null)   return suggest;
  if (p.eqKid == null && p.token != null) {
    suggest.add(p);
    return suggest;
  }
  if (p.token != null) {
    suggest.add(p);
  }
  p=p.eqKid;
  Stack<TernaryTreeNode> st=new Stack<TernaryTreeNode>();
  st.push(p);
  while (!st.empty()) {
    TernaryTreeNode top=st.peek();
    st.pop();
    if (top.token != null) {
      suggest.add(top);
    }
    if (top.eqKid != null) {
      st.push(top.eqKid);
    }
    if (top.loKid != null) {
      st.push(top.loKid);
    }
    if (top.hiKid != null) {
      st.push(top.hiKid);
    }
  }
  return suggest;
}
