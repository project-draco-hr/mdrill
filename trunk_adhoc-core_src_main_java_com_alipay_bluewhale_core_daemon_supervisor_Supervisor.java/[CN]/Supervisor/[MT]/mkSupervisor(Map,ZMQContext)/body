{
  LOG.info("Starting Supervisor with conf " + conf);
  String path=StormConfig.supervisorTmpDir(conf);
  FileUtils.cleanDirectory(new File(path));
  AtomicBoolean active=new AtomicBoolean(true);
  int startTimeStamp=TimeUtils.current_time_secs();
  String myHostName=NetWorkUtils.local_hostname();
  ConcurrentHashMap<String,String> workerThreadPids=new ConcurrentHashMap<String,String>();
  StormClusterState stormClusterState=Cluster.mk_storm_cluster_state(conf);
  LocalState localState=StormConfig.supervisorState(conf);
  String supervisorId=(String)localState.get(Common.LS_ID);
  if (supervisorId == null) {
    supervisorId=UUID.randomUUID().toString();
    localState.put(Common.LS_ID,supervisorId);
  }
  EventManager eventManager=new EventManagerImp(false);
  EventManager processesEventManager=new EventManagerImp(false);
  SyncProcesses syncProcesses=new SyncProcesses(supervisorId,conf,localState,workerThreadPids,sharedContext);
  SynchronizeSupervisor synchronizeSupervisor=new SynchronizeSupervisor(supervisorId,conf,eventManager,processesEventManager,stormClusterState,localState,syncProcesses);
  Heartbeat hb=new Heartbeat(conf,stormClusterState,supervisorId,myHostName,startTimeStamp);
  hb.run();
  Vector<SmartThread> threads=new Vector<SmartThread>();
  AsyncHeartbeat asyncHB=new AsyncHeartbeat(conf,hb,active);
  AsyncLoopThread heartbeat=new AsyncLoopThread(asyncHB,false,null,Thread.MAX_PRIORITY,true);
  threads.add(heartbeat);
  AsyncSynchronizeSupervisor syncSupervisor=new AsyncSynchronizeSupervisor(eventManager,synchronizeSupervisor,active);
  AsyncLoopThread syncsThread=new AsyncLoopThread(syncSupervisor);
  threads.add(syncsThread);
  AsyncSyncProcesses syncProcess=new AsyncSyncProcesses(conf,processesEventManager,syncProcesses,active);
  AsyncLoopThread syncpThread=new AsyncLoopThread(syncProcess,false,null,Thread.MAX_PRIORITY,true);
  threads.add(syncpThread);
  LOG.info("Starting supervisor with id " + supervisorId + " at host "+ myHostName);
  return new SupervisorManger(conf,supervisorId,active,threads,processesEventManager,eventManager,stormClusterState,workerThreadPids);
}
