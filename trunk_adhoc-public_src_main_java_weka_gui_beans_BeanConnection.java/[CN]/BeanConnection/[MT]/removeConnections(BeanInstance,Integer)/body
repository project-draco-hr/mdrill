{
  int tabIndex=0;
  if (tab.length > 0) {
    tabIndex=tab[0].intValue();
  }
  Vector connections=TABBED_CONNECTIONS.get(tabIndex);
  Vector instancesToRemoveFor=new Vector();
  if (instance.getBean() instanceof MetaBean) {
    instancesToRemoveFor=((MetaBean)instance.getBean()).getBeansInSubFlow();
  }
 else {
    instancesToRemoveFor.add(instance);
  }
  Vector removeVector=new Vector();
  for (int j=0; j < instancesToRemoveFor.size(); j++) {
    BeanInstance tempInstance=(BeanInstance)instancesToRemoveFor.elementAt(j);
    for (int i=0; i < connections.size(); i++) {
      BeanConnection bc=(BeanConnection)connections.elementAt(i);
      BeanInstance tempTarget=bc.getTarget();
      BeanInstance tempSource=bc.getSource();
      EventSetDescriptor tempEsd=bc.getSourceEventSetDescriptor();
      if (tempInstance == tempTarget) {
        try {
          Method deregisterMethod=tempEsd.getRemoveListenerMethod();
          Object targetBean=tempTarget.getBean();
          Object[] args=new Object[1];
          args[0]=targetBean;
          deregisterMethod.invoke(tempSource.getBean(),args);
          removeVector.addElement(bc);
        }
 catch (        Exception ex) {
          ex.printStackTrace();
        }
      }
 else       if (tempInstance == tempSource) {
        removeVector.addElement(bc);
        if (tempTarget.getBean() instanceof BeanCommon) {
          ((BeanCommon)tempTarget.getBean()).disconnectionNotification(tempEsd.getName(),tempSource.getBean());
        }
      }
    }
  }
  for (int i=0; i < removeVector.size(); i++) {
    connections.removeElement((BeanConnection)removeVector.elementAt(i));
  }
}
