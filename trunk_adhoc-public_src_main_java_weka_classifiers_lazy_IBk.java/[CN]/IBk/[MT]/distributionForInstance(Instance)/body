{
  if (m_Train.numInstances() == 0) {
    return m_defaultModel.distributionForInstance(instance);
  }
  if ((m_WindowSize > 0) && (m_Train.numInstances() > m_WindowSize)) {
    m_kNNValid=false;
    boolean deletedInstance=false;
    while (m_Train.numInstances() > m_WindowSize) {
      m_Train.delete(0);
    }
    if (deletedInstance == true)     m_NNSearch.setInstances(m_Train);
  }
  if (!m_kNNValid && (m_CrossValidate) && (m_kNNUpper >= 1)) {
    crossValidate();
  }
  m_NNSearch.addInstanceInfo(instance);
  Instances neighbours=m_NNSearch.kNearestNeighbours(instance,m_kNN);
  double[] distances=m_NNSearch.getDistances();
  double[] distribution=makeDistribution(neighbours,distances);
  return distribution;
}
