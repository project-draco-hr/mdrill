{
  StringBuffer[] result=new StringBuffer[2];
  if (m_isLeaf) {
    result[0]=new StringBuffer("    p = " + m_localModel.distribution().maxClass(0) + ";\n");
    result[1]=new StringBuffer("");
  }
 else {
    StringBuffer text=new StringBuffer();
    StringBuffer atEnd=new StringBuffer();
    long printID=ClassifierTree.nextID();
    text.append("  static double N").append(Integer.toHexString(m_localModel.hashCode()) + printID).append("(Object []i) {\n").append("    double p = Double.NaN;\n");
    text.append("    if (").append(m_localModel.sourceExpression(-1,m_train)).append(") {\n");
    text.append("      p = ").append(m_localModel.distribution().maxClass(0)).append(";\n");
    text.append("    } ");
    for (int i=0; i < m_sons.length; i++) {
      text.append("else if (" + m_localModel.sourceExpression(i,m_train) + ") {\n");
      if (m_sons[i].m_isLeaf) {
        text.append("      p = " + m_localModel.distribution().maxClass(i) + ";\n");
      }
 else {
        StringBuffer[] sub=m_sons[i].toSource(className);
        text.append(sub[0]);
        atEnd.append(sub[1]);
      }
      text.append("    } ");
      if (i == m_sons.length - 1) {
        text.append('\n');
      }
    }
    text.append("    return p;\n  }\n");
    result[0]=new StringBuffer("    p = " + className + ".N");
    result[0].append(Integer.toHexString(m_localModel.hashCode()) + printID).append("(i);\n");
    result[1]=text.append(atEnd);
  }
  return result;
}
