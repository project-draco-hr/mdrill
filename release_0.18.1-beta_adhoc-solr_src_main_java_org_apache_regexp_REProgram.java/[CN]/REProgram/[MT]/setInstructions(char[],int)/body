{
  this.instruction=instruction;
  this.lenInstruction=lenInstruction;
  flags=0;
  prefix=null;
  if (instruction != null && lenInstruction != 0) {
    if (lenInstruction >= RE.nodeSize && instruction[0 + RE.offsetOpcode] == RE.OP_BRANCH) {
      char next=instruction[0 + RE.offsetNext];
      if (instruction[next + RE.offsetOpcode] == RE.OP_END && lenInstruction >= (RE.nodeSize * 2)) {
        final char nextOp=instruction[RE.nodeSize + RE.offsetOpcode];
        if (nextOp == RE.OP_ATOM) {
          int lenAtom=instruction[RE.nodeSize + RE.offsetOpdata];
          prefix=new char[lenAtom];
          System.arraycopy(instruction,RE.nodeSize * 2,prefix,0,lenAtom);
        }
 else         if (nextOp == RE.OP_BOL) {
          flags|=OPT_HASBOL;
        }
      }
    }
    BackrefScanLoop:     for (int i=0; i < lenInstruction; i+=RE.nodeSize) {
switch (instruction[i + RE.offsetOpcode]) {
case RE.OP_ANYOF:
        i+=(instruction[i + RE.offsetOpdata] * 2);
      break;
case RE.OP_ATOM:
    i+=instruction[i + RE.offsetOpdata];
  break;
case RE.OP_BACKREF:
flags|=OPT_HASBACKREFS;
break BackrefScanLoop;
}
}
}
}
