{
  Vector<String> list;
  int i;
  Class cls;
  Object obj;
  CapabilitiesHandler handler;
  boolean fits;
  Capabilities caps;
  m_Matches=new Vector<String>();
  m_Misses=new Vector<String>();
  list=ClassDiscovery.find(m_Superclass,(String[])m_Packages.toArray(new String[m_Packages.size()]));
  for (i=0; i < list.size(); i++) {
    try {
      cls=Class.forName((String)list.get(i));
      obj=cls.newInstance();
      if (cls == this.getClass())       continue;
      if (!(obj instanceof CapabilitiesHandler))       continue;
      handler=(CapabilitiesHandler)obj;
      caps=handler.getCapabilities();
      fits=true;
      for (      Capability cap : Capability.values()) {
        if (m_Capabilities.handles(cap)) {
          if (!(caps.handles(cap))) {
            fits=false;
            break;
          }
        }
      }
      if (!fits) {
        m_Misses.add(list.get(i));
        continue;
      }
      for (      Capability cap : Capability.values()) {
        if (m_NotCapabilities.handles(cap)) {
          if ((caps.handles(cap))) {
            fits=false;
            break;
          }
        }
      }
      if (!fits) {
        m_Misses.add(list.get(i));
        continue;
      }
      if (caps.getMinimumNumberInstances() > m_Capabilities.getMinimumNumberInstances()) {
        m_Misses.add(list.get(i));
        continue;
      }
      m_Matches.add(list.get(i));
    }
 catch (    Exception e) {
    }
  }
  return m_Matches;
}
