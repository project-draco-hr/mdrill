{
  Vector<Option> result=new Vector<Option>();
  result.addElement(new Option("","",0,"All class and attribute options can be prefixed with 'not',\n" + "e.g., '-not-numeric-class'. This makes sure that the returned\n" + "schemes 'cannot' handle numeric classes."));
  result.addElement(new Option("\tThe minimum number of instances (default 1).","num-instances",1,"-num-instances <num>"));
  result.addElement(new Option("\tMust handle unray classes.","unary-class",0,"-unary-class"));
  result.addElement(new Option("\tMust handle binary classes.","binary-class",0,"-binary-class"));
  result.addElement(new Option("\tMust handle nominal classes.","nominal-class",0,"-nominal-class"));
  result.addElement(new Option("\tMust handle numeric classes.","numeric-class",0,"-numeric-class"));
  result.addElement(new Option("\tMust handle string classes.","string-class",0,"-string-class"));
  result.addElement(new Option("\tMust handle date classes.","date-class",0,"-date-class"));
  result.addElement(new Option("\tMust handle relational classes.","relational-class",0,"-relational-class"));
  result.addElement(new Option("\tMust handle missing class values.","missing-class-values",0,"-missing-class-values"));
  result.addElement(new Option("\tDoesn't need a class.","no-class",0,"-no-class"));
  result.addElement(new Option("\tMust handle unary attributes.","unary-atts",0,"-unary-atts"));
  result.addElement(new Option("\tMust handle binary attributes.","binary-atts",0,"-binary-atts"));
  result.addElement(new Option("\tMust handle nominal attributes.","nominal-atts",0,"-nominal-atts"));
  result.addElement(new Option("\tMust handle numeric attributes.","numeric-atts",0,"-numeric-atts"));
  result.addElement(new Option("\tMust handle string attributes.","string-atts",0,"-string-atts"));
  result.addElement(new Option("\tMust handle date attributes.","date-atts",0,"-date-atts"));
  result.addElement(new Option("\tMust handle relational attributes.","relational-atts",0,"-relational-atts"));
  result.addElement(new Option("\tMust handle missing attribute values.","missing-att-values",0,"-missing-att-values"));
  result.addElement(new Option("\tMust handle multi-instance data.","only-multiinstance",0,"-only-multiinstance"));
  result.addElement(new Option("\tThe Capabilities handler to base the handling on.\n" + "\tThe other parameters can be used to override the ones\n" + "\tdetermined from the handler. Additional parameters for\n"+ "\thandler can be passed on after the '--'.\n"+ "\tEither '-W' or '-t' can be used.","W",1,"-W <classname>"));
  result.addElement(new Option("\tThe dataset to base the capabilities on.\n" + "\tThe other parameters can be used to override the ones\n" + "\tdetermined from the handler.\n"+ "\tEither '-t' or '-W' can be used.","t",1,"-t <file>"));
  result.addElement(new Option("\tThe index of the class attribute, -1 for none.\n" + "\t'first' and 'last' are also valid.\n" + "\tOnly in conjunction with option '-t'.","c",1,"-c <num>"));
  result.addElement(new Option("\tSuperclass to look for in the packages.\n","superclass",1,"-superclass"));
  result.addElement(new Option("\tComma-separated list of packages to search in.","packages",1,"-packages"));
  result.addElement(new Option("\tRetrieves the package list from the GenericPropertiesCreator\n" + "\tfor the given superclass. (overrides -packages <list>).","generic",1,"-generic"));
  result.addElement(new Option("\tAlso prints the classname that didn't match the criteria.","misses",0,"-misses"));
  return result.elements();
}
