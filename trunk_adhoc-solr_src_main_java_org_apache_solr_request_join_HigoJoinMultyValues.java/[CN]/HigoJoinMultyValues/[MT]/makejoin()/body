{
  IndexSchema schema=null;
  if (this.leftreader != null) {
    schema=this.schema;
  }
 else {
    schema=readerleft.getSchema();
  }
  FieldType ftleft=schema.getFieldType(fieldLeft);
  String prefixLeft=TrieField.getMainValuePrefix(ftleft);
  TermIndex tiLeft=new TermIndex(fieldLeft,prefixLeft);
  tiLeft.setCacheDir(null,String.valueOf(System.currentTimeMillis()));
  NumberedTermEnum teLeft=null;
  if (this.leftreader != null) {
    teLeft=tiLeft.getEnumerator(this.leftreader);
  }
 else {
    teLeft=tiLeft.getEnumerator(readerleft.getReader());
  }
  FieldType ftright=readerright.getSchema().getFieldType(fieldRigth);
  String prefixRight=TrieField.getMainValuePrefix(ftright);
  TermIndex tiRight=new TermIndex(fieldRigth,prefixRight);
  tiRight.setCacheDir(null,String.valueOf(System.currentTimeMillis()));
  NumberedTermEnum teRight=tiRight.getEnumerator(readerright.getReader());
  int[] docs=new int[1000];
  int[] freqs=new int[1000];
  int debugline=0;
  for (; ; ) {
    Term tleft=teLeft.term();
    Term tRight=teRight.term();
    if (tleft == null || tRight == null) {
      LOG.info("###termbreak###" + String.valueOf(tleft) + ">>>>"+ String.valueOf(tRight)+ ","+ fieldLeft+ ","+ fieldRigth);
      break;
    }
    String tvleft=ftleft.indexedToReadable(tleft.text());
    String tvRight=ftright.indexedToReadable(tRight.text());
    if (tvleft.equals(tvRight)) {
      if (debugline++ < 10) {
        LOG.info("###termok###" + String.valueOf(tvleft) + ">>>>"+ String.valueOf(tvRight)+ ","+ fieldLeft+ ","+ fieldRigth);
      }
      JoinPair jp=new JoinPair();
      jp.termNum=teLeft.getTermNumber();
      ArrayList<Integer> jpleft=new ArrayList<Integer>();
      TermDocs tdleft=teLeft.getTermDocs();
      tdleft.seek(teLeft);
      for (; ; ) {
        int n=tdleft.read(docs,freqs);
        if (n <= 0) {
          break;
        }
        for (int i=0; i < n; i++) {
          jpleft.add(docs[i]);
        }
      }
      jp.left=new int[jpleft.size()];
      int index=0;
      for (      Integer d : jpleft) {
        jp.left[index]=d;
        index++;
      }
      ArrayList<Integer> RightList=new ArrayList<Integer>();
      TermDocs tdRight=teRight.getTermDocs();
      tdRight.seek(teRight);
      boolean isset=false;
      for (; ; ) {
        int n=tdRight.read(docs,freqs);
        if (n <= 0) {
          break;
        }
        for (int i=0; i < n; i++) {
          if (isset) {
            continue;
          }
          int docid=docs[i];
          RightList.add(docid);
          ArrayList<JoinPair> list=join_tmp.get(docid);
          if (list == null) {
            list=new ArrayList<JoinPair>();
            join_tmp.put(docid,list);
          }
          list.add(jp);
          isset=true;
        }
      }
      for (      Integer leftid : jp.left) {
        JoinTermNum tm=new JoinTermNum(leftid,jp.termNum);
        joinRevert.put(tm,IntArr.parse(RightList));
      }
      teLeft.next();
      teRight.next();
    }
 else     if (tvleft.compareTo(tvRight) > 0) {
      teRight.next();
    }
 else {
      teLeft.next();
    }
  }
  teLeft.close();
  teRight.close();
  for (  Entry<Integer,ArrayList<JoinPair>> e : this.join_tmp.entrySet()) {
    this.join.put(e.getKey(),JoinPariArr.parse(e.getValue()));
  }
  this.join_tmp.clear();
  LOG.info("###join###" + join.size() + ","+ joinRevert.size());
}
