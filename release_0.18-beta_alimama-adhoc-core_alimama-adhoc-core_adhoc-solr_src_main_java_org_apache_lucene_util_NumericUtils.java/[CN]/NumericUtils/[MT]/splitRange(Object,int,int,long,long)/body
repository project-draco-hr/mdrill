{
  if (precisionStep < 1)   throw new IllegalArgumentException("precisionStep must be >=1");
  if (minBound > maxBound)   return;
  for (int shift=0; ; shift+=precisionStep) {
    final long diff=1L << (shift + precisionStep), mask=((1L << precisionStep) - 1L) << shift;
    final boolean hasLower=(minBound & mask) != 0L, hasUpper=(maxBound & mask) != mask;
    final long nextMinBound=(hasLower ? (minBound + diff) : minBound) & ~mask, nextMaxBound=(hasUpper ? (maxBound - diff) : maxBound) & ~mask;
    final boolean lowerWrapped=nextMinBound < minBound, upperWrapped=nextMaxBound > maxBound;
    if (shift + precisionStep >= valSize || nextMinBound > nextMaxBound || lowerWrapped || upperWrapped) {
      addRange(builder,valSize,minBound,maxBound,shift);
      break;
    }
    if (hasLower)     addRange(builder,valSize,minBound,minBound | mask,shift);
    if (hasUpper)     addRange(builder,valSize,maxBound & ~mask,maxBound,shift);
    minBound=nextMinBound;
    maxBound=nextMaxBound;
  }
}
