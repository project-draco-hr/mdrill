{
  SolrParams params=req.getParams();
  String[] docTexts=doc.getValues(fieldName);
  if (docTexts.length == 0)   return;
  SolrIndexSearcher searcher=req.getSearcher();
  IndexSchema schema=searcher.getSchema();
  TokenStream tstream=null;
  int numFragments=getMaxSnippets(fieldName,params);
  boolean mergeContiguousFragments=isMergeContiguousFragments(fieldName,params);
  String[] summaries=null;
  List<TextFragment> frags=new ArrayList<TextFragment>();
  TermOffsetsTokenStream tots=null;
  try {
    TokenStream tvStream=TokenSources.getTokenStream(searcher.getReader(),docId,fieldName);
    if (tvStream != null) {
      tots=new TermOffsetsTokenStream(tvStream);
    }
  }
 catch (  IllegalArgumentException e) {
  }
  for (int j=0; j < docTexts.length; j++) {
    if (tots != null) {
      tstream=tots.getMultiValuedTokenStream(docTexts[j].length());
    }
 else {
      tstream=createAnalyzerTStream(schema,fieldName,docTexts[j]);
    }
    int maxCharsToAnalyze=params.getFieldInt(fieldName,HighlightParams.MAX_CHARS,Highlighter.DEFAULT_MAX_CHARS_TO_ANALYZE);
    Highlighter highlighter;
    if (Boolean.valueOf(req.getParams().get(HighlightParams.USE_PHRASE_HIGHLIGHTER,"true"))) {
      if (maxCharsToAnalyze < 0) {
        tstream=new CachingTokenFilter(tstream);
      }
 else {
        tstream=new CachingTokenFilter(new OffsetLimitTokenFilter(tstream,maxCharsToAnalyze));
      }
      highlighter=getPhraseHighlighter(query,fieldName,req,(CachingTokenFilter)tstream);
      tstream.reset();
    }
 else {
      highlighter=getHighlighter(query,fieldName,req);
    }
    if (maxCharsToAnalyze < 0) {
      highlighter.setMaxDocCharsToAnalyze(docTexts[j].length());
    }
 else {
      highlighter.setMaxDocCharsToAnalyze(maxCharsToAnalyze);
    }
    try {
      TextFragment[] bestTextFragments=highlighter.getBestTextFragments(tstream,docTexts[j],mergeContiguousFragments,numFragments);
      for (int k=0; k < bestTextFragments.length; k++) {
        if ((bestTextFragments[k] != null) && (bestTextFragments[k].getScore() > 0)) {
          frags.add(bestTextFragments[k]);
        }
      }
    }
 catch (    InvalidTokenOffsetsException e) {
      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,e);
    }
  }
  Collections.sort(frags,new Comparator<TextFragment>(){
    public int compare(    TextFragment arg0,    TextFragment arg1){
      return Math.round(arg1.getScore() - arg0.getScore());
    }
  }
);
  if (frags.size() > 0) {
    ArrayList<String> fragTexts=new ArrayList<String>();
    for (    TextFragment fragment : frags) {
      if ((fragment != null) && (fragment.getScore() > 0)) {
        fragTexts.add(fragment.toString());
      }
      if (fragTexts.size() >= numFragments)       break;
    }
    summaries=fragTexts.toArray(new String[0]);
    if (summaries.length > 0)     docSummaries.add(fieldName,summaries);
  }
  if (summaries == null || summaries.length == 0) {
    alternateField(docSummaries,params,doc,fieldName);
  }
}
