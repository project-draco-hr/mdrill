{
  final int maxQueueSize=offset + topN;
  for (int shardIDX=0; shardIDX < shards.size(); shardIDX++) {
    final Collection<SearchGroup<T>> shard=shards.get(shardIDX);
    if (!shard.isEmpty()) {
      updateNextGroup(maxQueueSize,new ShardIter<T>(shard,shardIDX));
    }
  }
  final List<SearchGroup<T>> newTopGroups=new ArrayList<SearchGroup<T>>();
  int count=0;
  while (queue.size() != 0) {
    final MergedGroup<T> group=queue.first();
    queue.remove(group);
    group.processed=true;
    if (count++ >= offset) {
      final SearchGroup<T> newGroup=new SearchGroup<T>();
      newGroup.groupValue=group.groupValue;
      newGroup.sortValues=group.topValues;
      newTopGroups.add(newGroup);
      if (newTopGroups.size() == topN) {
        break;
      }
    }
    for (    ShardIter<T> shardIter : group.shards) {
      updateNextGroup(maxQueueSize,shardIter);
    }
  }
  if (newTopGroups.size() == 0) {
    return null;
  }
 else {
    return newTopGroups;
  }
}
