{
  JPanel toolBarPanel=new JPanel();
  toolBarPanel.setLayout(new BorderLayout());
  if (m_showFileMenu) {
    JToolBar fixedTools=new JToolBar();
    fixedTools.setOrientation(JToolBar.HORIZONTAL);
    m_cutB=new JButton(new ImageIcon(loadImage(BeanVisual.ICON_PATH + "cut.png")));
    m_cutB.setBorder(BorderFactory.createEmptyBorder(0,8,0,0));
    m_cutB.setToolTipText("Cut selected");
    m_copyB=new JButton(new ImageIcon(loadImage(BeanVisual.ICON_PATH + "page_copy.png")));
    m_copyB.setBorder(BorderFactory.createEmptyBorder(0,8,0,0));
    m_copyB.setToolTipText("Copy selected");
    m_pasteB=new JButton(new ImageIcon(loadImage(BeanVisual.ICON_PATH + "paste_plain.png")));
    m_pasteB.setBorder(BorderFactory.createEmptyBorder(0,8,0,0));
    m_pasteB.setToolTipText("Paste from clipboard");
    m_deleteB=new JButton(new ImageIcon(loadImage(BeanVisual.ICON_PATH + "delete.png")));
    m_deleteB.setBorder(BorderFactory.createEmptyBorder(0,8,0,0));
    m_deleteB.setToolTipText("Delete selected");
    m_snapToGridB=new JToggleButton(new ImageIcon(loadImage(BeanVisual.ICON_PATH + "shape_handles.png")));
    m_snapToGridB.setToolTipText("Snap to grid");
    m_saveB=new JButton(new ImageIcon(loadImage(BeanVisual.ICON_PATH + "disk.png")));
    m_saveB.setBorder(BorderFactory.createEmptyBorder(0,8,0,0));
    m_saveB.setToolTipText("Save layout");
    m_saveBB=new JButton(new ImageIcon(loadImage(BeanVisual.ICON_PATH + "disk_multiple.png")));
    m_saveBB.setBorder(BorderFactory.createEmptyBorder(0,8,0,0));
    m_saveBB.setToolTipText("Save layout with new name");
    m_loadB=new JButton(new ImageIcon(loadImage(BeanVisual.ICON_PATH + "folder_add.png")));
    m_loadB.setToolTipText("Load layout");
    m_loadB.setBorder(BorderFactory.createEmptyBorder(0,8,0,0));
    m_newB=new JButton(new ImageIcon(loadImage(BeanVisual.ICON_PATH + "page_add.png")));
    m_newB.setToolTipText("New layout");
    m_newB.setBorder(BorderFactory.createEmptyBorder(0,8,0,0));
    m_newB.setEnabled(getAllowMultipleTabs());
    m_helpB=new JButton(new ImageIcon(loadImage(BeanVisual.ICON_PATH + "help.png")));
    m_helpB.setBorder(BorderFactory.createEmptyBorder(0,8,0,0));
    m_helpB.setToolTipText("Display help");
    m_togglePerspectivesB=new JButton(new ImageIcon(loadImage(BeanVisual.ICON_PATH + "cog_go.png")));
    m_togglePerspectivesB.setBorder(BorderFactory.createEmptyBorder(0,8,0,0));
    m_togglePerspectivesB.setToolTipText("Show/hide perspectives toolbar");
    m_templatesB=new JButton(new ImageIcon(loadImage(BeanVisual.ICON_PATH + "application_view_tile.png")));
    m_templatesB.setBorder(BorderFactory.createEmptyBorder(0,8,0,0));
    m_templatesB.setToolTipText("Load a template layout");
    m_noteB=new JButton(new ImageIcon(loadImage(BeanVisual.ICON_PATH + "note_add.png")));
    m_noteB.setBorder(BorderFactory.createEmptyBorder(0,8,0,0));
    m_noteB.setToolTipText("Add a note to the layout");
    m_selectAllB=new JButton(new ImageIcon(loadImage(BeanVisual.ICON_PATH + "shape_group.png")));
    m_selectAllB.setBorder(BorderFactory.createEmptyBorder(0,8,0,0));
    m_selectAllB.setToolTipText("Select all");
    m_undoB=new JButton(new ImageIcon(loadImage(BeanVisual.ICON_PATH + "arrow_undo.png")));
    m_undoB.setBorder(BorderFactory.createEmptyBorder(0,8,0,0));
    m_undoB.setToolTipText("Undo");
    fixedTools.add(m_selectAllB);
    fixedTools.add(m_cutB);
    fixedTools.add(m_copyB);
    fixedTools.add(m_deleteB);
    fixedTools.add(m_pasteB);
    fixedTools.add(m_undoB);
    fixedTools.add(m_noteB);
    fixedTools.addSeparator();
    fixedTools.add(m_snapToGridB);
    fixedTools.addSeparator();
    fixedTools.add(m_newB);
    fixedTools.add(m_saveB);
    fixedTools.add(m_saveBB);
    fixedTools.add(m_loadB);
    fixedTools.add(m_templatesB);
    fixedTools.addSeparator();
    fixedTools.add(m_togglePerspectivesB);
    fixedTools.add(m_helpB);
    Dimension d=m_undoB.getPreferredSize();
    Dimension d2=fixedTools.getMinimumSize();
    Dimension d3=new Dimension(d2.width,d.height + 4);
    fixedTools.setPreferredSize(d3);
    fixedTools.setMaximumSize(d3);
    m_saveB.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        if (m_mainKFPerspective.getCurrentTabIndex() >= 0) {
          saveLayout(m_mainKFPerspective.getCurrentTabIndex(),false);
        }
      }
    }
);
    m_saveBB.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        saveLayout(m_mainKFPerspective.getCurrentTabIndex(),true);
      }
    }
);
    m_loadB.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        m_flowEnvironment=new Environment();
        loadLayout();
      }
    }
);
    m_newB.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent ae){
        clearLayout();
      }
    }
);
    m_selectAllB.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        if (BeanInstance.getBeanInstances(m_mainKFPerspective.getCurrentTabIndex()).size() > 0) {
          Vector allBeans=BeanInstance.getBeanInstances(m_mainKFPerspective.getCurrentTabIndex());
          Vector newSelected=new Vector();
          for (int i=0; i < allBeans.size(); i++) {
            newSelected.add(allBeans.get(i));
          }
          if (newSelected.size() == m_mainKFPerspective.getSelectedBeans().size()) {
            m_mainKFPerspective.setSelectedBeans(new Vector());
          }
 else {
            m_mainKFPerspective.setSelectedBeans(newSelected);
          }
        }
      }
    }
);
    m_cutB.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        if (copyToClipboard()) {
          deleteSelectedBeans();
        }
      }
    }
);
    m_deleteB.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        deleteSelectedBeans();
      }
    }
);
    m_copyB.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        copyToClipboard();
        m_mainKFPerspective.setSelectedBeans(new Vector());
      }
    }
);
    m_pasteB.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        KnowledgeFlowApp.this.setCursor(Cursor.getPredefinedCursor(Cursor.CROSSHAIR_CURSOR));
        m_mode=PASTING;
      }
    }
);
    m_snapToGridB.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        if (m_snapToGridB.isSelected()) {
          snapSelectedToGrid();
        }
      }
    }
);
    fixedTools.setFloatable(false);
    toolBarPanel.add(fixedTools,BorderLayout.EAST);
  }
  m_noteB.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      Note n=new Note();
      m_toolBarBean=n;
      KnowledgeFlowApp.this.setCursor(Cursor.getPredefinedCursor(Cursor.CROSSHAIR_CURSOR));
      m_mode=ADDING;
    }
  }
);
  m_undoB.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      Stack<File> undo=m_mainKFPerspective.getUndoBuffer();
      if (undo.size() > 0) {
        File undoF=undo.pop();
        if (undo.size() == 0) {
          m_undoB.setEnabled(false);
        }
        loadLayout(undoF,false,true);
      }
    }
  }
);
  m_playB=new JButton(new ImageIcon(loadImage(BeanVisual.ICON_PATH + "resultset_next.png")));
  m_playB.setBorder(BorderFactory.createEmptyBorder(0,5,0,0));
  m_playB.setToolTipText("Run this flow (all start points launched in parallel)");
  m_playB.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      if (BeanInstance.getBeanInstances(m_mainKFPerspective.getCurrentTabIndex()).size() == 0) {
        return;
      }
      runFlow(false);
    }
  }
);
  m_playBB=new JButton(new ImageIcon(loadImage(BeanVisual.ICON_PATH + "resultset_last.png")));
  m_playBB.setBorder(BorderFactory.createEmptyBorder(0,5,0,0));
  m_playBB.setToolTipText("Run this flow (start points launched sequentially)");
  m_playBB.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      if (BeanInstance.getBeanInstances(m_mainKFPerspective.getCurrentTabIndex()).size() == 0) {
        return;
      }
      if (!Utils.getDontShowDialog("weka.gui.beans.KnowledgeFlow.SequentialRunInfo")) {
        JCheckBox dontShow=new JCheckBox("Do not show this message again");
        Object[] stuff=new Object[2];
        stuff[0]="The order that data sources are launched in can be\n" + "specified by setting a custom name for each data source that\n" + "that includes a number. E.g. \"1:MyArffLoader\". To set a name,\n"+ "right-click over a data source and select \"Set name\"\n\n"+ "If the prefix is not specified, then the order of execution\n"+ "will correspond to the order that the components were added\n"+ "to the layout. Note that it is also possible to prevent a data\n"+ "source from executing by prefixing its name with a \"!\". E.g\n"+ "\"!:MyArffLoader\"";
        stuff[1]=dontShow;
        JOptionPane.showMessageDialog(KnowledgeFlowApp.this,stuff,"Sequential execution information",JOptionPane.OK_OPTION);
        if (dontShow.isSelected()) {
          try {
            Utils.setDontShowDialog("weka.gui.beans.KnowledgeFlow.SequentialRunInfo");
          }
 catch (          Exception ex) {
          }
        }
      }
      runFlow(true);
    }
  }
);
  m_stopB=new JButton(new ImageIcon(loadImage(BeanVisual.ICON_PATH + "shape_square.png")));
  m_stopB.setBorder(BorderFactory.createEmptyBorder(0,8,0,0));
  m_stopB.setToolTipText("Stop all execution");
  Image tempI=loadImage(BeanVisual.ICON_PATH + "cursor.png");
  m_pointerB=new JButton(new ImageIcon(tempI));
  m_pointerB.setBorder(BorderFactory.createEmptyBorder(0,5,0,0));
  m_pointerB.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      m_toolBarBean=null;
      m_mode=NONE;
      KnowledgeFlowApp.this.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
      m_componentTree.clearSelection();
    }
  }
);
  JToolBar fixedTools2=new JToolBar();
  fixedTools2.setOrientation(JToolBar.HORIZONTAL);
  fixedTools2.setFloatable(false);
  fixedTools2.add(m_pointerB);
  fixedTools2.add(m_playB);
  fixedTools2.add(m_playBB);
  fixedTools2.add(m_stopB);
  Dimension d=m_playB.getPreferredSize();
  Dimension d2=fixedTools2.getMinimumSize();
  Dimension d3=new Dimension(d2.width,d.height + 4);
  fixedTools2.setPreferredSize(d3);
  fixedTools2.setMaximumSize(d3);
  toolBarPanel.add(fixedTools2,BorderLayout.WEST);
  m_stopB.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      m_logPanel.statusMessage("[KnowledgeFlow]|Attempting to stop all components...");
      stopFlow();
      m_logPanel.statusMessage("[KnowledgeFlow]|OK.");
    }
  }
);
  m_helpB.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent ae){
      popupHelp();
    }
  }
);
  m_templatesB.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      createTemplateMenuPopup();
    }
  }
);
  m_templatesB.setEnabled(TEMPLATE_PATHS.size() > 0);
  m_togglePerspectivesB.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      if (m_firstUserComponentOpp) {
        installWindowListenerForSavingUserStuff();
        m_firstUserComponentOpp=false;
      }
      if (!Utils.getDontShowDialog("weka.gui.beans.KnowledgeFlow.PerspectiveInfo")) {
        JCheckBox dontShow=new JCheckBox("Do not show this message again");
        Object[] stuff=new Object[2];
        stuff[0]="Perspectives are environments that take over the\n" + "Knowledge Flow UI and provide major additional functionality.\n" + "Many perspectives will operate on a set of instances. Instances\n"+ "Can be sent to a perspective by placing a DataSource on the\n"+ "layout canvas, configuring it and then selecting \"Send to perspective\"\n"+ "from the contextual popup menu that appears when you right-click on\n"+ "it. Several perspectives are built in to the Knowledge Flow, others\n"+ "can be installed via the package manager.\n";
        stuff[1]=dontShow;
        JOptionPane.showMessageDialog(KnowledgeFlowApp.this,stuff,"Perspective information",JOptionPane.OK_OPTION);
        if (dontShow.isSelected()) {
          try {
            Utils.setDontShowDialog("weka.gui.beans.KnowledgeFlow.PerspectiveInfo");
          }
 catch (          Exception ex) {
          }
        }
      }
      if (m_configAndPerspectivesVisible) {
        KnowledgeFlowApp.this.remove(m_configAndPerspectives);
        m_configAndPerspectivesVisible=false;
      }
 else {
        KnowledgeFlowApp.this.add(m_configAndPerspectives,BorderLayout.NORTH);
        m_configAndPerspectivesVisible=true;
      }
      revalidate();
      repaint();
      notifyIsDirty();
    }
  }
);
  final int standard_toolset=0;
  final int wrapper_toolset=1;
  int toolBarType=standard_toolset;
  DefaultMutableTreeNode jtreeRoot=new DefaultMutableTreeNode("Weka");
  for (int i=0; i < TOOLBARS.size(); i++) {
    Vector tempBarSpecs=(Vector)TOOLBARS.elementAt(i);
    String tempToolSetName=(String)tempBarSpecs.elementAt(0);
    DefaultMutableTreeNode subTreeNode=new DefaultMutableTreeNode(tempToolSetName);
    jtreeRoot.add(subTreeNode);
    String tempBeanCompName=(String)tempBarSpecs.elementAt(1);
    JPanel tempBean;
    String rootPackage="";
    weka.gui.HierarchyPropertyParser hpp=null;
    Hashtable hpps=null;
    if (tempBeanCompName.compareTo("null") != 0) {
      tempBean=null;
      toolBarType=wrapper_toolset;
      rootPackage=(String)tempBarSpecs.elementAt(2);
      hpps=(Hashtable)tempBarSpecs.elementAt(3);
      try {
        Beans.instantiate(this.getClass().getClassLoader(),tempBeanCompName);
      }
 catch (      Exception ex) {
        System.err.println("[KnowledgeFlow] Failed to instantiate: " + tempBeanCompName);
        break;
      }
    }
 else {
      toolBarType=standard_toolset;
    }
    int z=2;
    if (toolBarType == wrapper_toolset) {
      Enumeration enm=hpps.keys();
      while (enm.hasMoreElements()) {
        String root=(String)enm.nextElement();
        String userPrefix="";
        hpp=(HierarchyPropertyParser)hpps.get(root);
        if (!hpp.goTo(rootPackage)) {
          System.out.println("[KnowledgeFlow] Processing user package... ");
          userPrefix=root + ".";
        }
        String[] primaryPackages=hpp.childrenValues();
        for (int kk=0; kk < primaryPackages.length; kk++) {
          hpp.goToChild(primaryPackages[kk]);
          if (hpp.isLeafReached()) {
            String algName=hpp.fullValue();
            Object visibleCheck=instantiateBean((toolBarType == wrapper_toolset),tempBeanCompName,algName);
            if (visibleCheck != null) {
              if (visibleCheck instanceof BeanContextChild) {
                m_bcSupport.add(visibleCheck);
              }
              ImageIcon scaledForTree=null;
              if (visibleCheck instanceof Visible) {
                BeanVisual bv=((Visible)visibleCheck).getVisual();
                if (bv != null) {
                  scaledForTree=new ImageIcon(bv.scale(0.33));
                }
              }
              JTreeLeafDetails leafData=new JTreeLeafDetails(tempBeanCompName,algName,scaledForTree);
              DefaultMutableTreeNode leafAlgo=new DefaultMutableTreeNode(leafData);
              subTreeNode.add(leafAlgo);
            }
            hpp.goToParent();
          }
 else {
            DefaultMutableTreeNode firstLevelOfMainAlgoType=new DefaultMutableTreeNode(primaryPackages[kk]);
            subTreeNode.add(firstLevelOfMainAlgoType);
            processPackage(tempBeanCompName,hpp,firstLevelOfMainAlgoType);
          }
        }
      }
    }
 else {
      for (int j=z; j < tempBarSpecs.size(); j++) {
        tempBean=null;
        tempBeanCompName=(String)tempBarSpecs.elementAt(j);
        Object visibleCheck=instantiateBean((toolBarType == wrapper_toolset),tempBeanCompName,"");
        if (visibleCheck != null) {
          String treeName=tempBeanCompName;
          if (treeName.lastIndexOf('.') > 0) {
            treeName=treeName.substring(treeName.lastIndexOf('.') + 1,treeName.length());
          }
          if (visibleCheck instanceof BeanContextChild) {
            m_bcSupport.add(visibleCheck);
          }
          ImageIcon scaledForTree=null;
          if (visibleCheck instanceof Visible) {
            BeanVisual bv=((Visible)visibleCheck).getVisual();
            if (bv != null) {
              scaledForTree=new ImageIcon(bv.scale(0.33));
            }
          }
          JTreeLeafDetails leafData=new JTreeLeafDetails(tempBeanCompName,"",scaledForTree);
          DefaultMutableTreeNode fixedLeafNode=new DefaultMutableTreeNode(leafData);
          subTreeNode.add(fixedLeafNode);
        }
      }
    }
  }
  if (BEAN_PLUGINS_PROPERTIES != null && BEAN_PLUGINS_PROPERTIES.size() > 0) {
    boolean pluginBeans=false;
    DefaultMutableTreeNode userSubTree=null;
    for (int i=0; i < BEAN_PLUGINS_PROPERTIES.size(); i++) {
      Properties tempP=BEAN_PLUGINS_PROPERTIES.get(i);
      JPanel tempBean=null;
      String components=tempP.getProperty("weka.gui.beans.KnowledgeFlow.Plugins");
      if (components != null && components.length() > 0) {
        StringTokenizer st2=new StringTokenizer(components,", ");
        while (st2.hasMoreTokens()) {
          String tempBeanCompName=st2.nextToken().trim();
          String treeName=tempBeanCompName;
          if (treeName.lastIndexOf('.') > 0) {
            treeName=treeName.substring(treeName.lastIndexOf('.') + 1,treeName.length());
          }
          Object visibleCheck=instantiateBean((toolBarType == wrapper_toolset),tempBeanCompName,"");
          if (visibleCheck instanceof BeanContextChild) {
            m_bcSupport.add(visibleCheck);
          }
          ImageIcon scaledForTree=null;
          if (visibleCheck instanceof Visible) {
            BeanVisual bv=((Visible)visibleCheck).getVisual();
            if (bv != null) {
              scaledForTree=new ImageIcon(bv.scale(0.33));
            }
          }
          Class compClass=visibleCheck.getClass();
          Annotation[] annotations=compClass.getDeclaredAnnotations();
          DefaultMutableTreeNode targetFolder=null;
          String category=null;
          String tipText=null;
          for (          Annotation ann : annotations) {
            if (ann instanceof KFStep) {
              category=((KFStep)ann).category();
              tipText=((KFStep)ann).toolTipText();
              Enumeration children=jtreeRoot.children();
              while (children.hasMoreElements()) {
                Object child=children.nextElement();
                if (child instanceof DefaultMutableTreeNode) {
                  if (((DefaultMutableTreeNode)child).getUserObject().toString().equals(category)) {
                    targetFolder=(DefaultMutableTreeNode)child;
                    break;
                  }
                }
              }
              break;
            }
          }
          JTreeLeafDetails leafData=new JTreeLeafDetails(tempBeanCompName,"",scaledForTree);
          if (tipText != null) {
            leafData.setToolTipText(tipText);
          }
          DefaultMutableTreeNode pluginLeaf=new DefaultMutableTreeNode(leafData);
          if (targetFolder != null) {
            targetFolder.add(pluginLeaf);
          }
 else           if (category != null) {
            DefaultMutableTreeNode newCategoryNode=new DefaultMutableTreeNode(category);
            jtreeRoot.add(newCategoryNode);
            newCategoryNode.add(pluginLeaf);
          }
 else {
            if (!pluginBeans) {
              userSubTree=new DefaultMutableTreeNode("Plugins");
              jtreeRoot.add(userSubTree);
              pluginBeans=true;
            }
            userSubTree.add(pluginLeaf);
          }
        }
      }
      String perspectives=tempP.getProperty(("weka.gui.beans.KnowledgeFlow.Perspectives"));
      if (perspectives != null && perspectives.length() > 0) {
        StringTokenizer st2=new StringTokenizer(perspectives,",");
        while (st2.hasMoreTokens()) {
          String className=st2.nextToken();
          try {
            Object p=Class.forName(className).newInstance();
            if (p instanceof KFPerspective && p instanceof JPanel) {
              String title=((KFPerspective)p).getPerspectiveTitle();
              System.out.println("[KnowledgeFlow] loaded perspective: " + title);
              m_pluginPerspectiveLookup.put(className,title);
              ((KFPerspective)p).setLoaded(false);
              if (VISIBLE_PERSPECTIVES.contains(className)) {
                m_perspectiveCache.put(className,(KFPerspective)p);
              }
            }
          }
 catch (          Exception ex) {
            if (m_logPanel != null) {
              m_logPanel.logMessage("[KnowledgeFlow] WARNING: " + "unable to instantiate perspective \"" + className + "\"");
              ex.printStackTrace();
            }
 else {
              System.err.println("[KnowledgeFlow] WARNING: " + "unable to instantiate perspective \"" + className + "\"");
              ex.printStackTrace();
            }
          }
        }
      }
    }
  }
  m_togglePerspectivesB.setEnabled(m_pluginPerspectiveLookup.keySet().size() > 0);
  add(toolBarPanel,BorderLayout.NORTH);
  DefaultTreeModel model=new DefaultTreeModel(jtreeRoot);
  m_componentTree=new JTree(model){
    public String getToolTipText(    MouseEvent e){
      if ((getRowForLocation(e.getX(),e.getY())) == -1) {
        return null;
      }
      TreePath currPath=getPathForLocation(e.getX(),e.getY());
      if (currPath.getLastPathComponent() instanceof DefaultMutableTreeNode) {
        DefaultMutableTreeNode node=(DefaultMutableTreeNode)currPath.getLastPathComponent();
        if (node.isLeaf()) {
          JTreeLeafDetails leaf=(JTreeLeafDetails)node.getUserObject();
          return leaf.getToolTipText();
        }
      }
      return null;
    }
  }
;
  m_componentTree.setEnabled(true);
  m_componentTree.setToolTipText("");
  m_componentTree.setRootVisible(false);
  m_componentTree.setShowsRootHandles(true);
  m_componentTree.setCellRenderer(new BeanIconRenderer());
  DefaultTreeSelectionModel selectionModel=new DefaultTreeSelectionModel();
  selectionModel.setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
  m_componentTree.setSelectionModel(selectionModel);
  m_componentTree.addMouseListener(new MouseAdapter(){
    public void mouseClicked(    MouseEvent e){
      if (((e.getModifiers() & InputEvent.BUTTON1_MASK) != InputEvent.BUTTON1_MASK) || e.isAltDown()) {
        boolean clearSelection=true;
        if (clearSelection) {
          m_toolBarBean=null;
          m_mode=NONE;
          KnowledgeFlowApp.this.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
          m_componentTree.clearSelection();
        }
      }
      TreePath p=m_componentTree.getSelectionPath();
      if (p != null) {
        if (p.getLastPathComponent() instanceof DefaultMutableTreeNode) {
          DefaultMutableTreeNode tNode=(DefaultMutableTreeNode)p.getLastPathComponent();
          if (tNode.isLeaf()) {
            Object userObject=tNode.getUserObject();
            if (userObject instanceof JTreeLeafDetails) {
              if ((e.getModifiers() & InputEvent.SHIFT_MASK) != 0 && ((JTreeLeafDetails)userObject).isMetaBean()) {
                if (m_firstUserComponentOpp) {
                  installWindowListenerForSavingUserStuff();
                  m_firstUserComponentOpp=false;
                }
                Vector toRemove=((JTreeLeafDetails)userObject).getMetaBean();
                DefaultTreeModel model=(DefaultTreeModel)m_componentTree.getModel();
                MutableTreeNode userRoot=(MutableTreeNode)tNode.getParent();
                model.removeNodeFromParent(tNode);
                m_userComponents.remove(toRemove);
                if (m_userComponents.size() == 0) {
                  model.removeNodeFromParent(userRoot);
                  m_userCompNode=null;
                }
              }
 else {
                ((JTreeLeafDetails)userObject).instantiateBean();
              }
            }
          }
        }
      }
    }
  }
);
}
