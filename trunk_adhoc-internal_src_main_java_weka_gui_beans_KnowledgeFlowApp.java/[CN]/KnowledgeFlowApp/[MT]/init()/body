{
  System.err.println("[KnowledgeFlow] Initializing KF...");
  try {
    TOOLBARS=new Vector();
    TreeMap wrapList=new TreeMap();
    Properties GEOProps=GenericPropertiesCreator.getGlobalOutputProperties();
    if (GEOProps == null) {
      GenericPropertiesCreator creator=new GenericPropertiesCreator();
      if (creator.useDynamic()) {
        creator.execute(false);
        GEOProps=creator.getOutputProperties();
      }
 else {
        GEOProps=Utils.readProperties("weka/gui/GenericObjectEditor.props");
      }
    }
    Enumeration en=GEOProps.propertyNames();
    while (en.hasMoreElements()) {
      String geoKey=(String)en.nextElement();
      String beanCompName=BEAN_PROPERTIES.getProperty(geoKey);
      if (beanCompName != null) {
        Vector newV=new Vector();
        String toolBarNameAlias=BEAN_PROPERTIES.getProperty(geoKey + ".alias");
        String toolBarName=(toolBarNameAlias != null) ? toolBarNameAlias : geoKey.substring(geoKey.lastIndexOf('.') + 1,geoKey.length());
        String order=BEAN_PROPERTIES.getProperty(geoKey + ".order");
        Integer intOrder=(order != null) ? new Integer(order) : new Integer(0);
        newV.addElement(toolBarName);
        newV.addElement(beanCompName);
        String rootPackage=geoKey.substring(0,geoKey.lastIndexOf('.'));
        newV.addElement(rootPackage);
        String wekaAlgs=GEOProps.getProperty(geoKey);
        Hashtable roots=GenericObjectEditor.sortClassesByRoot(wekaAlgs);
        Hashtable hpps=new Hashtable();
        Enumeration enm=roots.keys();
        while (enm.hasMoreElements()) {
          String root=(String)enm.nextElement();
          String classes=(String)roots.get(root);
          weka.gui.HierarchyPropertyParser hpp=new weka.gui.HierarchyPropertyParser();
          hpp.build(classes,", ");
          hpps.put(root,hpp);
        }
        newV.addElement(hpps);
        StringTokenizer st=new StringTokenizer(wekaAlgs,", ");
        while (st.hasMoreTokens()) {
          String current=st.nextToken().trim();
          newV.addElement(current);
        }
        wrapList.put(intOrder,newV);
      }
    }
    Iterator keysetIt=wrapList.keySet().iterator();
    while (keysetIt.hasNext()) {
      Integer key=(Integer)keysetIt.next();
      Vector newV=(Vector)wrapList.get(key);
      if (newV != null) {
        TOOLBARS.addElement(newV);
      }
    }
  }
 catch (  Exception ex) {
    JOptionPane.showMessageDialog(null,"Could not read a configuration file for the generic objecte editor" + ". An example file is included with the Weka distribution.\n" + "This file should be named \"GenericObjectEditor.props\" and\n"+ "should be placed either in your user home (which is set\n"+ "to \"" + System.getProperties().getProperty("user.home") + "\")\n"+ "or the directory that java was started from\n","KnowledgeFlow",JOptionPane.ERROR_MESSAGE);
  }
  try {
    String standardToolBarNames=BEAN_PROPERTIES.getProperty("weka.gui.beans.KnowledgeFlow.standardToolBars");
    StringTokenizer st=new StringTokenizer(standardToolBarNames,", ");
    while (st.hasMoreTokens()) {
      String tempBarName=st.nextToken().trim();
      Vector newV=new Vector();
      newV.addElement(tempBarName);
      newV.addElement("null");
      String toolBarContents=BEAN_PROPERTIES.getProperty("weka.gui.beans.KnowledgeFlow." + tempBarName);
      StringTokenizer st2=new StringTokenizer(toolBarContents,", ");
      while (st2.hasMoreTokens()) {
        String tempBeanName=st2.nextToken().trim();
        newV.addElement(tempBeanName);
      }
      TOOLBARS.addElement(newV);
    }
  }
 catch (  Exception ex) {
    JOptionPane.showMessageDialog(null,ex.getMessage(),"KnowledgeFlow",JOptionPane.ERROR_MESSAGE);
  }
}
