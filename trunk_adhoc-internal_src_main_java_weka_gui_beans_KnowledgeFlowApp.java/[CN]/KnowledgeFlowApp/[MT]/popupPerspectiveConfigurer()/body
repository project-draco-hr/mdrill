{
  if (m_perspectiveConfigurer == null) {
    m_perspectiveConfigurer=new AttributeSelectionPanel(true,true,true,true);
  }
  if (m_firstUserComponentOpp) {
    installWindowListenerForSavingUserStuff();
    m_firstUserComponentOpp=false;
  }
  ArrayList<Attribute> atts=new ArrayList<Attribute>();
  final ArrayList<String> pClasses=new ArrayList<String>();
  SortedSet<String> sortedPerspectives=new TreeSet<String>();
  for (  String clName : m_pluginPerspectiveLookup.keySet()) {
    sortedPerspectives.add(clName);
  }
  for (  String clName : sortedPerspectives) {
    pClasses.add(clName);
    String pName=m_pluginPerspectiveLookup.get(clName);
    atts.add(new Attribute(pName));
  }
  Instances perspectiveInstances=new Instances("Perspectives",atts,1);
  boolean[] selectedPerspectives=new boolean[perspectiveInstances.numAttributes()];
  for (  String selected : VISIBLE_PERSPECTIVES) {
    String pName=m_pluginPerspectiveLookup.get(selected);
    if (pName != null) {
      int index=perspectiveInstances.attribute(pName).index();
      selectedPerspectives[index]=true;
    }
  }
  m_perspectiveConfigurer.setInstances(perspectiveInstances);
  try {
    m_perspectiveConfigurer.setSelectedAttributes(selectedPerspectives);
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    return;
  }
  final JDialog d=new JDialog((JFrame)KnowledgeFlowApp.this.getTopLevelAncestor(),"Manage Perspectives",true);
  d.setLayout(new BorderLayout());
  JPanel holder=new JPanel();
  holder.setLayout(new BorderLayout());
  holder.add(m_perspectiveConfigurer,BorderLayout.CENTER);
  JButton okBut=new JButton("OK");
  JButton cancelBut=new JButton("Cancel");
  JPanel butHolder=new JPanel();
  butHolder.setLayout(new GridLayout(1,2));
  butHolder.add(okBut);
  butHolder.add(cancelBut);
  holder.add(butHolder,BorderLayout.SOUTH);
  okBut.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      VISIBLE_PERSPECTIVES=new TreeSet<String>();
      int[] selected=m_perspectiveConfigurer.getSelectedAttributes();
      for (int i=0; i < selected.length; i++) {
        String selectedClassName=pClasses.get(selected[i]);
        if (m_perspectiveCache.get(selectedClassName) == null) {
          try {
            Object p=Class.forName(selectedClassName).newInstance();
            if (p instanceof KFPerspective && p instanceof JPanel) {
              String title=((KFPerspective)p).getPerspectiveTitle();
              System.out.println("[KnowledgeFlow] loaded perspective: " + title);
              ((KFPerspective)p).setLoaded(true);
              ((KFPerspective)p).setMainKFPerspective(m_mainKFPerspective);
              m_perspectiveCache.put(selectedClassName,(KFPerspective)p);
            }
          }
 catch (          Exception ex) {
            ex.printStackTrace();
          }
        }
        VISIBLE_PERSPECTIVES.add(selectedClassName);
      }
      setupUserPerspectives();
      d.dispose();
    }
  }
);
  cancelBut.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      d.dispose();
    }
  }
);
  d.getContentPane().add(holder,BorderLayout.CENTER);
  d.pack();
  d.setVisible(true);
}
