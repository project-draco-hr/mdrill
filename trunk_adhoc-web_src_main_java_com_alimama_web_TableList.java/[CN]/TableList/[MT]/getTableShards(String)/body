{
  StormClusterState zkCluster=GetShards.getCluster();
  List<Integer> list=zkCluster.higo_ids(tableName);
  List<String> listrtntotal=new ArrayList<String>();
  List<String> listrtn=new ArrayList<String>();
  listrtntotal.add("?????????:" + list.size() + "<br>");
  Long recordCount=0l;
  HashMap<String,Long> partionCount=new HashMap<String,Long>();
  HashMap<String,Long> dayCount=new HashMap<String,Long>();
  HashMap<String,Long> dayAmt=new HashMap<String,Long>();
  for (  Integer id : list) {
    SolrInfo info=zkCluster.higo_info(tableName,id);
    if (info != null) {
      if (info.stat == ShardsState.SERVICE) {
        for (        Entry<String,ShardCount> e : info.recorecount.entrySet()) {
          Long sc=partionCount.get(e.getKey());
          if (sc == null) {
            sc=0l;
          }
          sc+=e.getValue().cnt;
          recordCount+=e.getValue().cnt;
          partionCount.put(e.getKey(),sc);
        }
        for (        Entry<String,ShardCount> e : info.daycount.entrySet()) {
          Long sc=dayCount.get(e.getKey() + "@" + info.replicationindex);
          long cnt=e.getValue().cnt;
          if (sc == null) {
            sc=0l;
          }
          sc+=cnt;
          dayCount.put(e.getKey() + "@" + info.replicationindex,sc);
          Long amt=dayAmt.get(e.getKey() + "@" + info.replicationindex);
          if (amt == null) {
            amt=0l;
          }
          if (cnt > 1) {
            amt+=1;
          }
          dayAmt.put(e.getKey() + "@" + info.replicationindex,amt);
        }
      }
      StringBuffer buff=new StringBuffer();
      buff.append("<tr style=\"background:#FFFFCC; font:bold\">");
      buff.append("<td>" + info.isMergeServer + "</td>");
      buff.append("<td>" + info.taskIndex + "@"+ info.replicationindex+ "@"+ info.replication+ "</td>");
      buff.append("<td>" + info.hostname + "</td>");
      buff.append("<td>" + info.localip + ":"+ info.port+ "</td>");
      buff.append("<td>" + info.workport + "</td>");
      buff.append("<td>" + info.processId + "</td>");
      buff.append("<td>" + info.stat + "</td>");
      buff.append("<td>" + info.memInfo + "</td>");
      buff.append("<td>" + info.hdfsfolder + "</td>");
      buff.append("</tr>");
      SimpleDateFormat fmt=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
      String yyyymmmddd=fmt.format(new Date(info.times));
      String yyyymmmdddstart=fmt.format(new Date(info.startTimes));
      String yyyymmmdddhb=fmt.format(new Date(info.solrhbTimes));
      buff.append("<tr>");
      buff.append("<td colspan=10>" + "solr????????????:" + yyyymmmdddhb + "&nbsp;&nbsp;&nbsp;&nbsp;"+ "????????????????????????:"+ yyyymmmddd+ "&nbsp;&nbsp;&nbsp;&nbsp;"+ "????????????:"+ yyyymmmdddstart+ "</td>");
      buff.append("</tr>");
      if (!info.isMergeServer) {
        if (info.recorecount.size() > 0) {
          buff.append("<tr>");
          buff.append("<td>???????????????</td>");
          buff.append("<td colspan=9>" + info.recorecount.toString() + "</td>");
          buff.append("</tr>");
        }
        if (info.daycount.size() > 0) {
          buff.append("<tr>");
          buff.append("<td>???????????????</td>");
          buff.append("<td colspan=9>" + info.daycount.toString() + "</td>");
          buff.append("</tr>");
        }
        buff.append("<tr>");
        buff.append("<td>?????????????????????</td>");
        buff.append("<td colspan=9>" + info.localpath + "</td>");
        buff.append("</tr>");
        buff.append("<tr>");
        buff.append("<td>hdfs???????????????</td>");
        buff.append("<td colspan=9>" + info.hdfsPath + "</td>");
        buff.append("</tr>");
      }
      listrtn.add(buff.toString());
    }
  }
  StringBuffer buff=new StringBuffer();
  buff.append("<tr>");
  buff.append("<td>merger server</td>");
  buff.append("<td>replication</td>");
  buff.append("<td>??????</td>");
  buff.append("<td>solr??????</td>");
  buff.append("<td>????????????</td>");
  buff.append("<td>worker??????ID</td>");
  buff.append("<td>????????????</td>");
  buff.append("<td>??????</td>");
  buff.append("<td>hdfs??????</td>");
  buff.append("</tr>");
  listrtntotal.add("????????????=" + recordCount + "<br>");
  listrtntotal.add("??????????????????" + "<br>");
  List<String> tmp=new ArrayList<String>();
  for (  Entry<String,Long> e : partionCount.entrySet()) {
    tmp.add("" + e.getKey() + "="+ e.getValue()+ "<br>");
  }
  Collections.sort(tmp);
  listrtntotal.addAll(tmp);
  listrtntotal.add("??????????????????????????????" + "<br>");
  tmp=new ArrayList<String>();
  for (  Entry<String,Long> e : dayCount.entrySet()) {
    tmp.add(" day:" + e.getKey() + "="+ e.getValue()+ "<br>");
  }
  Collections.sort(tmp);
  listrtntotal.addAll(tmp);
  listrtntotal.add("????????????????????????shard??????" + "<br>");
  tmp=new ArrayList<String>();
  for (  Entry<String,Long> e : dayAmt.entrySet()) {
    tmp.add(e.getKey() + "=" + e.getValue()+ "<br>");
  }
  Collections.sort(tmp);
  listrtntotal.addAll(tmp);
  Collections.sort(listrtn);
  List<String> finalrtnlist=new ArrayList<String>();
  finalrtnlist.addAll(listrtntotal);
  finalrtnlist.add("<hr><table border=1 >");
  finalrtnlist.add(buff.toString());
  finalrtnlist.addAll(listrtn);
  finalrtnlist.add("</table>");
  String[] rtn=new String[finalrtnlist.size()];
  return finalrtnlist.toArray(rtn);
}
