{
  HigoJoinUtils.MakeGroups make=null;
  if (joinInvert.length >= 0) {
    make=new HigoJoinUtils.MakeGroupsJoin(this.groupListCache);
    ;
  }
 else {
    make=new HigoJoinUtils.MakeGroupsDefault();
  }
  int groupbySize=ufs.length;
  for (  HigoJoinInvert inv : joinInvert) {
    groupbySize+=inv.fieldCount();
  }
  int groupNonEmptySize=ufs.listIndex.length;
  for (  HigoJoinInvert inv : joinInvert) {
    groupNonEmptySize+=inv.fieldCount();
  }
  GroupList group=GroupList.INSTANCE(this.groupListCache,groupbySize);
  QuickHashMap<GroupList,RefRow> groups=new QuickHashMap<GroupList,RefRow>(this.limit_offset_maxgroups + 1);
  if (groupNonEmptySize == 0) {
    group.reset();
    RefRow cnt=this.getGroup(groups,group,crossufs,distufs);
    if (crossufs.listIndex.length == 0 && (this.distFS == null || distufs.listIndex.length == 0)) {
      cnt.val+=baseDocs.size();
    }
 else {
      if ((this.distFS == null || distufs.listIndex.length == 0)) {
        DocIterator iter=baseDocs.iterator();
        while (iter.hasNext()) {
          int doc=iter.nextDoc();
          cnt.val++;
          for (          int i : crossufs.listIndex) {
            UnvertFile uf=crossufs.cols[i];
            double value=uf.uif.quickToDouble(doc,uf.filetype,uf.ti);
            cnt.stat[i].update(value);
          }
        }
      }
 else       if (crossufs.listIndex.length == 0) {
        DocIterator iter=baseDocs.iterator();
        while (iter.hasNext()) {
          int doc=iter.nextDoc();
          cnt.val++;
          for (          int i : distufs.listIndex) {
            UnvertFile uf=distufs.cols[i];
            double value=uf.uif.quickToDouble(doc,uf.filetype,uf.ti);
            cnt.dist[i].set(String.valueOf(value));
          }
        }
      }
 else {
        DocIterator iter=baseDocs.iterator();
        while (iter.hasNext()) {
          int doc=iter.nextDoc();
          cnt.val++;
          for (          int i : crossufs.listIndex) {
            UnvertFile uf=crossufs.cols[i];
            double value=uf.uif.quickToDouble(doc,uf.filetype,uf.ti);
            cnt.stat[i].update(value);
          }
          for (          int i : distufs.listIndex) {
            UnvertFile uf=distufs.cols[i];
            double value=uf.uif.quickToDouble(doc,uf.filetype,uf.ti);
            cnt.dist[i].set(String.valueOf(value));
          }
        }
      }
    }
  }
 else   if (crossufs.listIndex.length == 0 && (this.distFS == null || distufs.listIndex.length == 0)) {
    DocIterator iter=baseDocs.iterator();
    while (iter.hasNext()) {
      int doc=iter.nextDoc();
      ArrayList<GroupList> groupsall=make.toGroupsByJoin(doc,group,ufs,joinInvert);
      for (      GroupList g : groupsall) {
        if (pre.contains(g)) {
          RefRow cnt=this.getGroup(groups,g,crossufs,distufs);
          cnt.val++;
          this.delayPut(groups,cnt,g);
        }
      }
    }
  }
 else   if (this.distFS == null || distufs.listIndex.length == 0) {
    DocIterator iter=baseDocs.iterator();
    while (iter.hasNext()) {
      int doc=iter.nextDoc();
      ArrayList<GroupList> groupsall=make.toGroupsByJoin(doc,group,ufs,joinInvert);
      for (      GroupList g : groupsall) {
        if (pre.contains(g)) {
          RefRow cnt=this.getGroup(groups,g,crossufs,distufs);
          cnt.val++;
          for (          int i : crossufs.listIndex) {
            UnvertFile uf=crossufs.cols[i];
            double value=uf.uif.quickToDouble(doc,uf.filetype,uf.ti);
            cnt.stat[i].update(value);
          }
          this.delayPut(groups,cnt,g);
        }
      }
    }
  }
 else   if (crossufs.listIndex.length == 0) {
    DocIterator iter=baseDocs.iterator();
    while (iter.hasNext()) {
      int doc=iter.nextDoc();
      ArrayList<GroupList> groupsall=make.toGroupsByJoin(doc,group,ufs,joinInvert);
      for (      GroupList g : groupsall) {
        if (pre.contains(g)) {
          RefRow cnt=this.getGroup(groups,g,crossufs,distufs);
          cnt.val++;
          for (          int i : distufs.listIndex) {
            UnvertFile uf=distufs.cols[i];
            double value=uf.uif.quickToDouble(doc,uf.filetype,uf.ti);
            DistinctCount dist=cnt.dist[i];
            dist.set(String.valueOf(value));
          }
          this.delayPut(groups,cnt,g);
        }
      }
    }
  }
 else {
    DocIterator iter=baseDocs.iterator();
    while (iter.hasNext()) {
      int doc=iter.nextDoc();
      ArrayList<GroupList> groupsall=make.toGroupsByJoin(doc,group,ufs,joinInvert);
      for (      GroupList g : groupsall) {
        if (pre.contains(g)) {
          RefRow cnt=this.getGroup(groups,g,crossufs,distufs);
          cnt.val++;
          for (          int i : crossufs.listIndex) {
            UnvertFile uf=crossufs.cols[i];
            double value=uf.uif.quickToDouble(doc,uf.filetype,uf.ti);
            cnt.stat[i].update(value);
          }
          for (          int i : distufs.listIndex) {
            UnvertFile uf=distufs.cols[i];
            double value=uf.uif.quickToDouble(doc,uf.filetype,uf.ti);
            DistinctCount dist=cnt.dist[i];
            dist.set(String.valueOf(value));
          }
          this.delayPut(groups,cnt,g);
        }
      }
    }
  }
  TopMaps(crossufs,distufs,groups);
  return groups;
}
