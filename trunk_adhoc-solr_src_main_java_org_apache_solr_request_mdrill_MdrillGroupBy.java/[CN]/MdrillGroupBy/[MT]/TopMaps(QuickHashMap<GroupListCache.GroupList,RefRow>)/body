{
  long t1=System.currentTimeMillis();
  int groupsize=groups.size();
  if (groupsize <= this.parse.limit_offset) {
    return;
  }
  PriorityQueue<ShardGroupByTermNum> res=new PriorityQueue<ShardGroupByTermNum>(this.parse.limit_offset,Collections.reverseOrder(this.container.cmpTermNum));
  LinkedBlockingQueue<GroupListCache.GroupList> toremove=new LinkedBlockingQueue<GroupListCache.GroupList>();
  ;
  QuickHashMap<GroupListCache.GroupList,RefRow> debug=new QuickHashMap<GroupListCache.GroupList,MdrillUtils.RefRow>(this.parse.limit_offset);
  for (  Entry<GroupListCache.GroupList,RefRow> e : groups.entrySet()) {
    debug.put(e.getKey(),e.getValue());
    ShardGroupByTermNum mrow=new ShardGroupByTermNum(e.getKey(),e.getValue());
    if (res.size() < this.parse.limit_offset) {
      res.add(mrow);
    }
 else     if (this.container.cmpTermNum.compare(res.peek(),mrow) > 0) {
      res.add(mrow);
      ShardGroupByTermNum free=res.poll();
      toremove.add(free.key);
    }
 else {
      toremove.add(mrow.key);
    }
  }
  int cnt1=0;
  for (  GroupListCache.GroupList torm : toremove) {
    groups.remove(torm);
    this.container.groupListCache.add(torm);
    cnt1++;
  }
  smallestShardGroup=res.peek();
  long t2=System.currentTimeMillis();
  LOG.info("TopMaps groups.size=" + groupsize + "@"+ debug.size()+ " to "+ groups.size()+ "@"+ this.parse.limit_offset+ ",res.size="+ res.size()+ ",remove="+ cnt1+ ",timetaken="+ (t2 - t1)+ ",mergercount="+ this.mergercount);
}
