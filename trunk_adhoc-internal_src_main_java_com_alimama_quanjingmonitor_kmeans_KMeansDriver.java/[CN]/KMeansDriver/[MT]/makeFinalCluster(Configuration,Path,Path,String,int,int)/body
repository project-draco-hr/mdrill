{
  FileSystem fs=FileSystem.get(finalClusters.toUri(),conf);
  ArrayList<Cluster> clusters=getClusters(finalClusters,conf,fs);
  long total=0;
  for (  Cluster c : clusters) {
    total+=c.getCenter().getNumPoints();
  }
  float rate=total / count;
  HashMap<Integer,Integer> hashm=new HashMap<Integer,Integer>();
  long total2=0;
  for (  Cluster c : clusters) {
    long points=c.getCenter().getNumPoints();
    if (points >= 20) {
      int allow=(int)(points / rate) + 1;
      total2+=allow;
      hashm.put(c.getId(),allow);
    }
 else {
      hashm.put(c.getId(),0);
    }
  }
  Collections.sort(clusters,new Comparator<Cluster>(){
    @Override public int compare(    Cluster o1,    Cluster o2){
      long t1=o1.getCenter().getNumPoints();
      long t2=o2.getCenter().getNumPoints();
      return t1 == t2 ? 0 : t1 < t2 ? 1 : -1;
    }
  }
);
  long left=total2 - count;
  while (true) {
    if (left <= 0) {
      break;
    }
    for (    Cluster c : clusters) {
      if (left <= 0) {
        break;
      }
      int id=c.getId();
      int num=hashm.get(id);
      if (num > 0) {
        hashm.put(id,num - 1);
        left--;
      }
    }
  }
  for (int i=0; i < clusters.size(); i++) {
    Cluster c=clusters.get(i);
    int id=c.getId();
    int num=hashm.get(id);
    c.setNumselect(num);
  }
  Path clustersOut=new Path(output,"cluster_final");
  int suma=0;
  int sumb=0;
  SequenceFile.Writer writer=SequenceFile.createWriter(fs,conf,clustersOut,Text.class,Cluster.class);
  for (int i=0; i < clusters.size(); i++) {
    Cluster c=clusters.get(i);
    int id=c.getId();
    suma+=c.getCenter().getNumPoints();
    sumb+=c.getNumselect();
    if (i < 10) {
      System.out.println(id + "@" + c.getCenter().getNumPoints()+ "@"+ c.getNumselect()+ ","+ c.asFormatString());
    }
    writer.append(new Text(String.valueOf(id)),c);
  }
  writer.close();
  System.out.println(suma + "===" + sumb);
  return clustersOut;
}
