{
  if (m_bNeedsUndoAction) {
    addUndoAction(new DeleteNodeAction(nTargetNode));
  }
  int nAtts=m_Instances.numAttributes() - 1;
  int nTargetCard=m_Instances.attribute(nTargetNode).numValues();
  Estimator[][] distributions=new Estimator[nAtts][];
  for (int iNode=0; iNode < nAtts; iNode++) {
    int iNode2=iNode;
    if (iNode >= nTargetNode) {
      iNode2++;
    }
    Estimator[] distribution=m_Distributions[iNode2];
    if (m_ParentSets[iNode2].contains(nTargetNode)) {
      int nParentCard=m_ParentSets[iNode2].getCardinalityOfParents();
      nParentCard=nParentCard / nTargetCard;
      Estimator[] distribution2=new Estimator[nParentCard];
      for (int iParent=0; iParent < nParentCard; iParent++) {
        distribution2[iParent]=distribution[iParent];
      }
      distribution=distribution2;
    }
    distributions[iNode]=distribution;
  }
  m_Distributions=distributions;
  ParentSet[] parentSets=new ParentSet[nAtts];
  for (int iParentSet=0; iParentSet < nAtts; iParentSet++) {
    int iParentSet2=iParentSet;
    if (iParentSet >= nTargetNode) {
      iParentSet2++;
    }
    ParentSet parentset=m_ParentSets[iParentSet2];
    parentset.deleteParent(nTargetNode,m_Instances);
    for (int iParent=0; iParent < parentset.getNrOfParents(); iParent++) {
      int nParent=parentset.getParent(iParent);
      if (nParent > nTargetNode) {
        parentset.SetParent(iParent,nParent - 1);
      }
    }
    parentSets[iParentSet]=parentset;
  }
  m_ParentSets=parentSets;
  m_Instances.setClassIndex(-1);
  m_Instances.deleteAttributeAt(nTargetNode);
  m_Instances.setClassIndex(nAtts - 1);
  m_nPositionX.removeElementAt(nTargetNode);
  m_nPositionY.removeElementAt(nTargetNode);
  m_nEvidence.removeElementAt(nTargetNode);
  m_fMarginP.removeElementAt(nTargetNode);
}
