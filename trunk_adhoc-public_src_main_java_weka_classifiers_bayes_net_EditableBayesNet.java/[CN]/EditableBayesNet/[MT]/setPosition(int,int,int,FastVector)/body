{
  int dX=nX - getPositionX(nNode);
  int dY=nY - getPositionY(nNode);
  if (m_bNeedsUndoAction) {
    boolean isUpdate=false;
    try {
      UndoAction undoAction=null;
      if (m_undoStack.size() > 0) {
        undoAction=(UndoAction)m_undoStack.elementAt(m_undoStack.size() - 1);
        SetGroupPositionAction posAction=(SetGroupPositionAction)undoAction;
        isUpdate=true;
        int iNode=0;
        while (isUpdate && iNode < posAction.m_nodes.size()) {
          if ((Integer)posAction.m_nodes.elementAt(iNode) != (Integer)nodes.elementAt(iNode)) {
            isUpdate=false;
          }
          iNode++;
        }
        if (isUpdate == true) {
          posAction.setUndoPosition(dX,dY);
        }
      }
    }
 catch (    Exception e) {
    }
    if (!isUpdate) {
      addUndoAction(new SetGroupPositionAction(nodes,dX,dY));
    }
  }
  for (int iNode=0; iNode < nodes.size(); iNode++) {
    nNode=(Integer)nodes.elementAt(iNode);
    m_nPositionX.setElementAt(getPositionX(nNode) + dX,nNode);
    m_nPositionY.setElementAt(getPositionY(nNode) + dY,nNode);
  }
}
