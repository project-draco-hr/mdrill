{
  out.unsafeWrite(firstChar);
  long v='0' - firstChar;
  int i;
  for (i=0; i < 17; i++) {
    int ch=getChar();
switch (ch) {
case '0':
case '1':
case '2':
case '3':
case '4':
case '5':
case '6':
case '7':
case '8':
case '9':
      v=v * 10 - (ch - '0');
    out.unsafeWrite(ch);
  continue;
case '.':
out.unsafeWrite('.');
valstate=readFrac(out,22 - i);
return 0;
case 'e':
case 'E':
out.unsafeWrite(ch);
nstate=0;
valstate=readExp(out,22 - i);
return 0;
default :
if (ch != -1) --start;
valstate=LONG;
return isNeg ? v : -v;
}
}
boolean overflow=false;
long maxval=isNeg ? Long.MIN_VALUE : -Long.MAX_VALUE;
for (; i < 22; i++) {
int ch=getChar();
switch (ch) {
case '0':
case '1':
case '2':
case '3':
case '4':
case '5':
case '6':
case '7':
case '8':
case '9':
if (v < (0x8000000000000000L / 10)) overflow=true;
v*=10;
int digit=ch - '0';
if (v < maxval + digit) overflow=true;
v-=digit;
out.unsafeWrite(ch);
continue;
case '.':
out.unsafeWrite('.');
valstate=readFrac(out,22 - i);
return 0;
case 'e':
case 'E':
out.unsafeWrite(ch);
nstate=0;
valstate=readExp(out,22 - i);
return 0;
default :
if (ch != -1) --start;
valstate=overflow ? BIGNUMBER : LONG;
return isNeg ? v : -v;
}
}
nstate=0;
valstate=BIGNUMBER;
return 0;
}
