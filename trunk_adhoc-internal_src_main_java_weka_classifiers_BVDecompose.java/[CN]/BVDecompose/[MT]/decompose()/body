{
  Reader dataReader=new BufferedReader(new FileReader(m_DataFileName));
  Instances data=new Instances(dataReader);
  if (m_ClassIndex < 0) {
    data.setClassIndex(data.numAttributes() - 1);
  }
 else {
    data.setClassIndex(m_ClassIndex);
  }
  if (data.classAttribute().type() != Attribute.NOMINAL) {
    throw new Exception("Class attribute must be nominal");
  }
  int numClasses=data.numClasses();
  data.deleteWithMissingClass();
  if (data.checkForStringAttributes()) {
    throw new Exception("Can't handle string attributes!");
  }
  if (data.numInstances() < 2 * m_TrainPoolSize) {
    throw new Exception("The dataset must contain at least " + (2 * m_TrainPoolSize) + " instances");
  }
  Random random=new Random(m_Seed);
  data.randomize(random);
  Instances trainPool=new Instances(data,0,m_TrainPoolSize);
  Instances test=new Instances(data,m_TrainPoolSize,data.numInstances() - m_TrainPoolSize);
  int numTest=test.numInstances();
  double[][] instanceProbs=new double[numTest][numClasses];
  m_Error=0;
  for (int i=0; i < m_TrainIterations; i++) {
    if (m_Debug) {
      System.err.println("Iteration " + (i + 1));
    }
    trainPool.randomize(random);
    Instances train=new Instances(trainPool,0,m_TrainPoolSize / 2);
    Classifier current=AbstractClassifier.makeCopy(m_Classifier);
    current.buildClassifier(train);
    for (int j=0; j < numTest; j++) {
      int pred=(int)current.classifyInstance(test.instance(j));
      if (pred != test.instance(j).classValue()) {
        m_Error++;
      }
      instanceProbs[j][pred]++;
    }
  }
  m_Error/=(m_TrainIterations * numTest);
  m_Bias=0;
  m_Variance=0;
  m_Sigma=0;
  for (int i=0; i < numTest; i++) {
    Instance current=test.instance(i);
    double[] predProbs=instanceProbs[i];
    double pActual, pPred;
    double bsum=0, vsum=0, ssum=0;
    for (int j=0; j < numClasses; j++) {
      pActual=(current.classValue() == j) ? 1 : 0;
      pPred=predProbs[j] / m_TrainIterations;
      bsum+=(pActual - pPred) * (pActual - pPred) - pPred * (1 - pPred) / (m_TrainIterations - 1);
      vsum+=pPred * pPred;
      ssum+=pActual * pActual;
    }
    m_Bias+=bsum;
    m_Variance+=(1 - vsum);
    m_Sigma+=(1 - ssum);
  }
  m_Bias/=(2 * numTest);
  m_Variance/=(2 * numTest);
  m_Sigma/=(2 * numTest);
  if (m_Debug) {
    System.err.println("Decomposition finished");
  }
}
