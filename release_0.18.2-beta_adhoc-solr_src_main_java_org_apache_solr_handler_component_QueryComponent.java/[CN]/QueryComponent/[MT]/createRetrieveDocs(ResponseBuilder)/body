{
  HashMap<String,Collection<ShardDoc>> shardMap=new HashMap<String,Collection<ShardDoc>>();
  for (  ShardDoc sdoc : rb.resultIds.values()) {
    Collection<ShardDoc> shardDocs=shardMap.get(sdoc.shard);
    if (shardDocs == null) {
      shardDocs=new ArrayList<ShardDoc>();
      shardMap.put(sdoc.shard,shardDocs);
    }
    shardDocs.add(sdoc);
  }
  SchemaField uniqueField=rb.req.getSchema().getUniqueKeyField();
  for (  Collection<ShardDoc> shardDocs : shardMap.values()) {
    ShardRequest sreq=new ShardRequest();
    sreq.purpose=ShardRequest.PURPOSE_GET_FIELDS;
    sreq.shards=new String[]{shardDocs.iterator().next().shard};
    sreq.params=new ModifiableSolrParams();
    sreq.params.add(rb.req.getParams());
    sreq.params.remove(CommonParams.SORT);
    sreq.params.remove(ResponseBuilder.FIELD_SORT_VALUES);
    sreq.params.remove("group");
    String fl=sreq.params.get(CommonParams.FL);
    if (fl != null) {
      fl=fl.trim();
      if (fl.length() != 0 && !"score".equals(fl) && !"*".equals(fl)) {
        sreq.params.set(CommonParams.FL,fl + ',' + uniqueField.getName());
      }
    }
    ArrayList<String> ids=new ArrayList<String>(shardDocs.size());
    for (    ShardDoc shardDoc : shardDocs) {
      ids.add(shardDoc.id.toString());
    }
    sreq.params.add(ShardParams.IDS,StrUtils.join(ids,','));
    rb.addRequest(this,sreq);
  }
}
