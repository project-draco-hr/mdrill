{
  super.paintComponent(g);
  this.setBackground(Color.black);
  if (m_fontMetrics == null) {
    m_fontMetrics=g.getFontMetrics();
    m_fontHeight=m_fontMetrics.getHeight();
  }
  Dimension d=this.getSize();
  Dimension d2=m_boundaryPanel.getSize();
  g.setColor(Color.gray);
  int hf=m_fontMetrics.getAscent();
  if (!m_vertical) {
    g.drawLine(d.width,PAD,d.width - d2.width,PAD);
    if (getInstances() != null) {
      int precisionXmax=1;
      int precisionXmin=1;
      int whole=(int)Math.abs(m_maxX);
      double decimal=Math.abs(m_maxX) - whole;
      int nondecimal;
      nondecimal=(whole > 0) ? (int)(Math.log(whole) / Math.log(10)) : 1;
      precisionXmax=(decimal > 0) ? (int)Math.abs(((Math.log(Math.abs(m_maxX)) / Math.log(10)))) + 2 : 1;
      if (precisionXmax > MAX_PRECISION) {
        precisionXmax=1;
      }
      String maxStringX=Utils.doubleToString(m_maxX,nondecimal + 1 + precisionXmax,precisionXmax);
      whole=(int)Math.abs(m_minX);
      decimal=Math.abs(m_minX) - whole;
      nondecimal=(whole > 0) ? (int)(Math.log(whole) / Math.log(10)) : 1;
      precisionXmin=(decimal > 0) ? (int)Math.abs(((Math.log(Math.abs(m_minX)) / Math.log(10)))) + 2 : 1;
      if (precisionXmin > MAX_PRECISION) {
        precisionXmin=1;
      }
      String minStringX=Utils.doubleToString(m_minX,nondecimal + 1 + precisionXmin,precisionXmin);
      g.drawString(minStringX,d.width - d2.width,PAD + hf + 2);
      int maxWidth=m_fontMetrics.stringWidth(maxStringX);
      g.drawString(maxStringX,d.width - maxWidth,PAD + hf + 2);
    }
  }
 else {
    g.drawLine(d.width - PAD,0,d.width - PAD,d2.height);
    if (getInstances() != null) {
      int precisionYmax=1;
      int precisionYmin=1;
      int whole=(int)Math.abs(m_maxY);
      double decimal=Math.abs(m_maxY) - whole;
      int nondecimal;
      nondecimal=(whole > 0) ? (int)(Math.log(whole) / Math.log(10)) : 1;
      precisionYmax=(decimal > 0) ? (int)Math.abs(((Math.log(Math.abs(m_maxY)) / Math.log(10)))) + 2 : 1;
      if (precisionYmax > MAX_PRECISION) {
        precisionYmax=1;
      }
      String maxStringY=Utils.doubleToString(m_maxY,nondecimal + 1 + precisionYmax,precisionYmax);
      whole=(int)Math.abs(m_minY);
      decimal=Math.abs(m_minY) - whole;
      nondecimal=(whole > 0) ? (int)(Math.log(whole) / Math.log(10)) : 1;
      precisionYmin=(decimal > 0) ? (int)Math.abs(((Math.log(Math.abs(m_minY)) / Math.log(10)))) + 2 : 1;
      if (precisionYmin > MAX_PRECISION) {
        precisionYmin=1;
      }
      String minStringY=Utils.doubleToString(m_minY,nondecimal + 1 + precisionYmin,precisionYmin);
      int maxWidth=m_fontMetrics.stringWidth(minStringY);
      g.drawString(minStringY,d.width - PAD - maxWidth- 2,d2.height);
      maxWidth=m_fontMetrics.stringWidth(maxStringY);
      g.drawString(maxStringY,d.width - PAD - maxWidth- 2,hf);
    }
  }
}
