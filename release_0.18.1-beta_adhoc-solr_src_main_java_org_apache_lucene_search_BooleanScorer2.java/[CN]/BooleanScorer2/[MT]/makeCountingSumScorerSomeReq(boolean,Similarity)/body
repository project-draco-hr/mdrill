{
  if (optionalScorers.size() == minNrShouldMatch) {
    ArrayList<Scorer> allReq=new ArrayList<Scorer>(requiredScorers);
    allReq.addAll(optionalScorers);
    return addProhibitedScorers(countingConjunctionSumScorer(disableCoord,similarity,allReq));
  }
 else {
    Scorer requiredCountingSumScorer=requiredScorers.size() == 1 ? new SingleMatchScorer(requiredScorers.get(0)) : countingConjunctionSumScorer(disableCoord,similarity,requiredScorers);
    if (minNrShouldMatch > 0) {
      return addProhibitedScorers(dualConjunctionSumScorer(disableCoord,similarity,requiredCountingSumScorer,countingDisjunctionSumScorer(optionalScorers,minNrShouldMatch)));
    }
 else {
      return new ReqOptSumScorer(addProhibitedScorers(requiredCountingSumScorer),optionalScorers.size() == 1 ? new SingleMatchScorer(optionalScorers.get(0)) : countingDisjunctionSumScorer(optionalScorers,1));
    }
  }
}
