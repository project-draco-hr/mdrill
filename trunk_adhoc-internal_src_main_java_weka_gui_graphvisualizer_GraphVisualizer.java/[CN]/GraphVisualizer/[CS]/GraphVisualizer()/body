{
  m_gp=new GraphPanel();
  m_js=new JScrollPane(m_gp);
  m_le=new HierarchicalBCEngine(m_nodes,m_edges,paddedNodeWidth,nodeHeight);
  m_le.addLayoutCompleteEventListener(this);
  m_jBtSave=new JButton();
  java.net.URL tempURL=ClassLoader.getSystemResource(ICONPATH + "save.gif");
  if (tempURL != null)   m_jBtSave.setIcon(new ImageIcon(tempURL));
 else   System.err.println(ICONPATH + "save.gif not found for weka.gui.graphvisualizer.Graph");
  m_jBtSave.setToolTipText("Save Graph");
  m_jBtSave.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent ae){
      JFileChooser fc=new JFileChooser(System.getProperty("user.dir"));
      ExtensionFileFilter ef1=new ExtensionFileFilter(".dot","DOT files");
      ExtensionFileFilter ef2=new ExtensionFileFilter(".xml","XML BIF files");
      fc.addChoosableFileFilter(ef1);
      fc.addChoosableFileFilter(ef2);
      fc.setDialogTitle("Save Graph As");
      int rval=fc.showSaveDialog(GraphVisualizer.this);
      if (rval == JFileChooser.APPROVE_OPTION) {
        if (fc.getFileFilter() == ef2) {
          String filename=fc.getSelectedFile().toString();
          if (!filename.endsWith(".xml"))           filename=filename.concat(".xml");
          BIFParser.writeXMLBIF03(filename,graphID,m_nodes,m_edges);
        }
 else {
          String filename=fc.getSelectedFile().toString();
          if (!filename.endsWith(".dot"))           filename=filename.concat(".dot");
          DotParser.writeDOT(filename,graphID,m_nodes,m_edges);
        }
      }
    }
  }
);
  final JButton jBtZoomIn=new JButton();
  tempURL=ClassLoader.getSystemResource(ICONPATH + "zoomin.gif");
  if (tempURL != null)   jBtZoomIn.setIcon(new ImageIcon(tempURL));
 else   System.err.println(ICONPATH + "zoomin.gif not found for weka.gui.graphvisualizer.Graph");
  jBtZoomIn.setToolTipText("Zoom In");
  final JButton jBtZoomOut=new JButton();
  tempURL=ClassLoader.getSystemResource(ICONPATH + "zoomout.gif");
  if (tempURL != null)   jBtZoomOut.setIcon(new ImageIcon(tempURL));
 else   System.err.println(ICONPATH + "zoomout.gif not found for weka.gui.graphvisualizer.Graph");
  jBtZoomOut.setToolTipText("Zoom Out");
  final JTextField jTfZoom=new JTextField("100%");
  jTfZoom.setMinimumSize(jTfZoom.getPreferredSize());
  jTfZoom.setHorizontalAlignment(JTextField.CENTER);
  jTfZoom.setToolTipText("Zoom");
  jTfZoom.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent ae){
      JTextField jt=(JTextField)ae.getSource();
      try {
        int i=-1;
        i=jt.getText().indexOf('%');
        if (i == -1)         i=Integer.parseInt(jt.getText());
 else         i=Integer.parseInt(jt.getText().substring(0,i));
        if (i <= 999)         scale=i / 100D;
        jt.setText((int)(scale * 100) + "%");
        if (scale > 0.1) {
          if (!jBtZoomOut.isEnabled())           jBtZoomOut.setEnabled(true);
        }
 else         jBtZoomOut.setEnabled(false);
        if (scale < 9.99) {
          if (!jBtZoomIn.isEnabled())           jBtZoomIn.setEnabled(true);
        }
 else         jBtZoomIn.setEnabled(false);
        setAppropriateSize();
        m_gp.repaint();
        m_gp.invalidate();
        m_js.revalidate();
      }
 catch (      NumberFormatException ne) {
        JOptionPane.showMessageDialog(GraphVisualizer.this.getParent(),"Invalid integer entered for zoom.","Error",JOptionPane.ERROR_MESSAGE);
        jt.setText((scale * 100) + "%");
      }
    }
  }
);
  jBtZoomIn.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent ae){
      int i=0, s=(int)(scale * 100);
      if (s < 300)       i=s / 25;
 else       if (s < 700)       i=6 + s / 50;
 else       i=13 + s / 100;
      if (s >= 999) {
        JButton b=(JButton)ae.getSource();
        b.setEnabled(false);
        return;
      }
 else       if (s >= 10) {
        if (i >= 22) {
          JButton b=(JButton)ae.getSource();
          b.setEnabled(false);
        }
        if (s == 10 && !jBtZoomOut.isEnabled())         jBtZoomOut.setEnabled(true);
        jTfZoom.setText(zoomPercents[i + 1] + "%");
        scale=zoomPercents[i + 1] / 100D;
      }
 else {
        if (!jBtZoomOut.isEnabled())         jBtZoomOut.setEnabled(true);
        jTfZoom.setText(zoomPercents[0] + "%");
        scale=zoomPercents[0] / 100D;
      }
      setAppropriateSize();
      m_gp.repaint();
      m_gp.invalidate();
      m_js.revalidate();
    }
  }
);
  jBtZoomOut.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent ae){
      int i=0, s=(int)(scale * 100);
      if (s < 300)       i=(int)Math.ceil(s / 25D);
 else       if (s < 700)       i=6 + (int)Math.ceil(s / 50D);
 else       i=13 + (int)Math.ceil(s / 100D);
      if (s <= 10) {
        JButton b=(JButton)ae.getSource();
        b.setEnabled(false);
      }
 else       if (s < 999) {
        if (i <= 1) {
          JButton b=(JButton)ae.getSource();
          b.setEnabled(false);
        }
        jTfZoom.setText(zoomPercents[i - 1] + "%");
        scale=zoomPercents[i - 1] / 100D;
      }
 else {
        if (!jBtZoomIn.isEnabled())         jBtZoomIn.setEnabled(true);
        jTfZoom.setText(zoomPercents[22] + "%");
        scale=zoomPercents[22] / 100D;
      }
      setAppropriateSize();
      m_gp.repaint();
      m_gp.invalidate();
      m_js.revalidate();
    }
  }
);
  JButton jBtExtraControls=new JButton();
  tempURL=ClassLoader.getSystemResource(ICONPATH + "extra.gif");
  if (tempURL != null)   jBtExtraControls.setIcon(new ImageIcon(tempURL));
 else   System.err.println(ICONPATH + "extra.gif not found for weka.gui.graphvisualizer.Graph");
  jBtExtraControls.setToolTipText("Show/Hide extra controls");
  final JCheckBox jCbCustomNodeSize=new JCheckBox("Custom Node Size");
  final JLabel jLbNodeWidth=new JLabel("Width");
  final JLabel jLbNodeHeight=new JLabel("Height");
  jTfNodeWidth.setHorizontalAlignment(JTextField.CENTER);
  jTfNodeWidth.setText("" + nodeWidth);
  jTfNodeHeight.setHorizontalAlignment(JTextField.CENTER);
  jTfNodeHeight.setText("" + nodeHeight);
  jLbNodeWidth.setEnabled(false);
  jTfNodeWidth.setEnabled(false);
  jLbNodeHeight.setEnabled(false);
  jTfNodeHeight.setEnabled(false);
  jCbCustomNodeSize.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent ae){
      if (((JCheckBox)ae.getSource()).isSelected()) {
        jLbNodeWidth.setEnabled(true);
        jTfNodeWidth.setEnabled(true);
        jLbNodeHeight.setEnabled(true);
        jTfNodeHeight.setEnabled(true);
      }
 else {
        jLbNodeWidth.setEnabled(false);
        jTfNodeWidth.setEnabled(false);
        jLbNodeHeight.setEnabled(false);
        jTfNodeHeight.setEnabled(false);
        setAppropriateNodeSize();
      }
    }
  }
);
  jBtLayout=new JButton("Layout Graph");
  jBtLayout.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent ae){
      int tmpW, tmpH;
      if (jCbCustomNodeSize.isSelected()) {
        try {
          tmpW=Integer.parseInt(jTfNodeWidth.getText());
        }
 catch (        NumberFormatException ne) {
          JOptionPane.showMessageDialog(GraphVisualizer.this.getParent(),"Invalid integer entered for node width.","Error",JOptionPane.ERROR_MESSAGE);
          tmpW=nodeWidth;
          jTfNodeWidth.setText("" + nodeWidth);
        }
        try {
          tmpH=Integer.parseInt(jTfNodeHeight.getText());
        }
 catch (        NumberFormatException ne) {
          JOptionPane.showMessageDialog(GraphVisualizer.this.getParent(),"Invalid integer entered for node height.","Error",JOptionPane.ERROR_MESSAGE);
          tmpH=nodeHeight;
          jTfNodeWidth.setText("" + nodeHeight);
        }
        if (tmpW != nodeWidth || tmpH != nodeHeight) {
          nodeWidth=tmpW;
          paddedNodeWidth=nodeWidth + 8;
          nodeHeight=tmpH;
        }
      }
      JButton bt=(JButton)ae.getSource();
      bt.setEnabled(false);
      m_le.setNodeSize(paddedNodeWidth,nodeHeight);
      m_le.layoutGraph();
    }
  }
);
  GridBagConstraints gbc=new GridBagConstraints();
  final JPanel p=new JPanel(new GridBagLayout());
  gbc.gridwidth=gbc.REMAINDER;
  gbc.anchor=gbc.NORTHWEST;
  gbc.fill=gbc.NONE;
  p.add(m_le.getControlPanel(),gbc);
  gbc.gridwidth=1;
  gbc.insets=new Insets(8,0,0,0);
  gbc.anchor=gbc.NORTHWEST;
  gbc.gridwidth=gbc.REMAINDER;
  p.add(jCbCustomNodeSize,gbc);
  gbc.insets=new Insets(0,0,0,0);
  gbc.gridwidth=gbc.REMAINDER;
  Container c=new Container();
  c.setLayout(new GridBagLayout());
  gbc.gridwidth=gbc.RELATIVE;
  c.add(jLbNodeWidth,gbc);
  gbc.gridwidth=gbc.REMAINDER;
  c.add(jTfNodeWidth,gbc);
  gbc.gridwidth=gbc.RELATIVE;
  c.add(jLbNodeHeight,gbc);
  gbc.gridwidth=gbc.REMAINDER;
  c.add(jTfNodeHeight,gbc);
  gbc.fill=gbc.HORIZONTAL;
  p.add(c,gbc);
  gbc.anchor=gbc.NORTHWEST;
  gbc.insets=new Insets(8,0,0,0);
  gbc.fill=gbc.HORIZONTAL;
  p.add(jBtLayout,gbc);
  gbc.fill=gbc.NONE;
  p.setBorder(BorderFactory.createCompoundBorder(BorderFactory.createTitledBorder("ExtraControls"),BorderFactory.createEmptyBorder(4,4,4,4)));
  p.setPreferredSize(new Dimension(0,0));
  final JToolBar jTbTools=new JToolBar();
  jTbTools.setFloatable(false);
  jTbTools.setLayout(new GridBagLayout());
  gbc.anchor=gbc.NORTHWEST;
  gbc.gridwidth=gbc.REMAINDER;
  gbc.insets=new Insets(0,0,0,0);
  jTbTools.add(p,gbc);
  gbc.gridwidth=1;
  jTbTools.add(m_jBtSave,gbc);
  jTbTools.addSeparator(new Dimension(2,2));
  jTbTools.add(jBtZoomIn,gbc);
  gbc.fill=gbc.VERTICAL;
  gbc.weighty=1;
  JPanel p2=new JPanel(new BorderLayout());
  p2.setPreferredSize(jTfZoom.getPreferredSize());
  p2.setMinimumSize(jTfZoom.getPreferredSize());
  p2.add(jTfZoom,BorderLayout.CENTER);
  jTbTools.add(p2,gbc);
  gbc.weighty=0;
  gbc.fill=gbc.NONE;
  jTbTools.add(jBtZoomOut,gbc);
  jTbTools.addSeparator(new Dimension(2,2));
  jTbTools.add(jBtExtraControls,gbc);
  jTbTools.addSeparator(new Dimension(4,2));
  gbc.weightx=1;
  gbc.fill=gbc.BOTH;
  jTbTools.add(m_le.getProgressBar(),gbc);
  jBtExtraControls.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent ae){
      Dimension d=p.getPreferredSize();
      if (d.width == 0 || d.height == 0) {
        LayoutManager lm=p.getLayout();
        Dimension d2=lm.preferredLayoutSize(p);
        p.setPreferredSize(d2);
        jTbTools.revalidate();
      }
 else {
        p.setPreferredSize(new Dimension(0,0));
        jTbTools.revalidate();
      }
    }
  }
);
  this.setLayout(new BorderLayout());
  this.add(jTbTools,BorderLayout.NORTH);
  this.add(m_js,BorderLayout.CENTER);
}
