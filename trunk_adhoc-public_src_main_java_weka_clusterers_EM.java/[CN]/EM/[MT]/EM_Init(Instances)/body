{
  int i, j, k;
  SimpleKMeans bestK=null;
  double bestSqE=Double.MAX_VALUE;
  for (i=0; i < 10; i++) {
    SimpleKMeans sk=new SimpleKMeans();
    sk.setSeed(m_rr.nextInt());
    sk.setNumClusters(m_num_clusters);
    sk.setDisplayStdDevs(true);
    sk.buildClusterer(inst);
    if (sk.getSquaredError() < bestSqE) {
      bestSqE=sk.getSquaredError();
      bestK=sk;
    }
  }
  m_num_clusters=bestK.numberOfClusters();
  m_weights=new double[inst.numInstances()][m_num_clusters];
  m_model=new DiscreteEstimator[m_num_clusters][m_num_attribs];
  m_modelNormal=new double[m_num_clusters][m_num_attribs][3];
  m_priors=new double[m_num_clusters];
  Instances centers=bestK.getClusterCentroids();
  Instances stdD=bestK.getClusterStandardDevs();
  int[][][] nominalCounts=bestK.getClusterNominalCounts();
  int[] clusterSizes=bestK.getClusterSizes();
  for (i=0; i < m_num_clusters; i++) {
    Instance center=centers.instance(i);
    for (j=0; j < m_num_attribs; j++) {
      if (inst.attribute(j).isNominal()) {
        m_model[i][j]=new DiscreteEstimator(m_theInstances.attribute(j).numValues(),true);
        for (k=0; k < inst.attribute(j).numValues(); k++) {
          m_model[i][j].addValue(k,nominalCounts[i][j][k]);
        }
      }
 else {
        double minStdD=(m_minStdDevPerAtt != null) ? m_minStdDevPerAtt[j] : m_minStdDev;
        double mean=(center.isMissing(j)) ? inst.meanOrMode(j) : center.value(j);
        m_modelNormal[i][j][0]=mean;
        double stdv=(stdD.instance(i).isMissing(j)) ? ((m_maxValues[j] - m_minValues[j]) / (2 * m_num_clusters)) : stdD.instance(i).value(j);
        if (stdv < minStdD) {
          stdv=inst.attributeStats(j).numericStats.stdDev;
          if (Double.isInfinite(stdv)) {
            stdv=minStdD;
          }
          if (stdv < minStdD) {
            stdv=minStdD;
          }
        }
        if (stdv <= 0) {
          stdv=m_minStdDev;
        }
        m_modelNormal[i][j][1]=stdv;
        m_modelNormal[i][j][2]=1.0;
      }
    }
  }
  for (j=0; j < m_num_clusters; j++) {
    m_priors[j]=clusterSizes[j];
  }
  Utils.normalize(m_priors);
}
