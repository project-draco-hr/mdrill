{
  getCapabilities().testWithFail(instances);
  instances=new Instances(instances);
  instances.deleteWithMissingClass();
  m_Discretizer.setIgnoreClass(true);
  m_Discretizer.setAttributeIndices("" + (instances.classIndex() + 1));
  m_Discretizer.setBins(getNumBins());
  m_Discretizer.setUseEqualFrequency(getUseEqualFrequency());
  m_Discretizer.setInputFormat(instances);
  Instances newTrain=Filter.useFilter(instances,m_Discretizer);
  if (m_DeleteEmptyBins) {
    int numNonEmptyClasses=0;
    boolean[] notEmptyClass=new boolean[newTrain.numClasses()];
    for (int i=0; i < newTrain.numInstances(); i++) {
      if (!notEmptyClass[(int)newTrain.instance(i).classValue()]) {
        numNonEmptyClasses++;
        notEmptyClass[(int)newTrain.instance(i).classValue()]=true;
      }
    }
    FastVector newClassVals=new FastVector(numNonEmptyClasses);
    int[] oldIndexToNewIndex=new int[newTrain.numClasses()];
    for (int i=0; i < newTrain.numClasses(); i++) {
      if (notEmptyClass[i]) {
        oldIndexToNewIndex[i]=newClassVals.size();
        newClassVals.addElement(newTrain.classAttribute().value(i));
      }
    }
    Attribute newClass=new Attribute(newTrain.classAttribute().name(),newClassVals);
    FastVector newAttributes=new FastVector(newTrain.numAttributes());
    for (int i=0; i < newTrain.numAttributes(); i++) {
      if (i != newTrain.classIndex()) {
        newAttributes.addElement(newTrain.attribute(i).copy());
      }
 else {
        newAttributes.addElement(newClass);
      }
    }
    Instances newTrainTransformed=new Instances(newTrain.relationName(),newAttributes,newTrain.numInstances());
    newTrainTransformed.setClassIndex(newTrain.classIndex());
    for (int i=0; i < newTrain.numInstances(); i++) {
      Instance inst=newTrain.instance(i);
      newTrainTransformed.add(inst);
      newTrainTransformed.lastInstance().setClassValue(oldIndexToNewIndex[(int)inst.classValue()]);
    }
    newTrain=newTrainTransformed;
  }
  m_OriginalTargetValues=new double[instances.numInstances()];
  m_NewTargetValues=new int[instances.numInstances()];
  for (int i=0; i < m_OriginalTargetValues.length; i++) {
    m_OriginalTargetValues[i]=instances.instance(i).classValue();
    m_NewTargetValues[i]=(int)newTrain.instance(i).classValue();
  }
  m_DiscretizedHeader=new Instances(newTrain,0);
  int numClasses=newTrain.numClasses();
  m_ClassMeans=new double[numClasses];
  m_ClassCounts=new int[numClasses];
  for (int i=0; i < instances.numInstances(); i++) {
    Instance inst=newTrain.instance(i);
    if (!inst.classIsMissing()) {
      int classVal=(int)inst.classValue();
      m_ClassCounts[classVal]++;
      m_ClassMeans[classVal]+=instances.instance(i).classValue();
    }
  }
  for (int i=0; i < numClasses; i++) {
    if (m_ClassCounts[i] > 0) {
      m_ClassMeans[i]/=m_ClassCounts[i];
    }
  }
  if (m_Debug) {
    System.out.println("Bin Means");
    System.out.println("==========");
    for (int i=0; i < m_ClassMeans.length; i++) {
      System.out.println(m_ClassMeans[i]);
    }
    System.out.println();
  }
  m_Classifier.buildClassifier(newTrain);
}
