{
  boolean[] result=new boolean[2];
  print("correct initialisation during buildAssociations");
  printAttributeSummary(nominalPredictor,numericPredictor,stringPredictor,datePredictor,relationalPredictor,multiInstance,classType);
  print("...");
  int numTrain=getNumInstances(), numClasses=2, missingLevel=0;
  boolean predictorMissing=false, classMissing=false;
  Instances train1=null;
  Instances train2=null;
  Associator associator=null;
  AssociatorEvaluation evaluation1A=null;
  AssociatorEvaluation evaluation1B=null;
  AssociatorEvaluation evaluation2=null;
  int stage=0;
  try {
    train1=makeTestDataset(42,numTrain,nominalPredictor ? getNumNominal() : 0,numericPredictor ? getNumNumeric() : 0,stringPredictor ? getNumString() : 0,datePredictor ? getNumDate() : 0,relationalPredictor ? getNumRelational() : 0,numClasses,classType,multiInstance);
    train2=makeTestDataset(84,numTrain,nominalPredictor ? getNumNominal() + 1 : 0,numericPredictor ? getNumNumeric() + 1 : 0,stringPredictor ? getNumString() + 1 : 0,datePredictor ? getNumDate() + 1 : 0,relationalPredictor ? getNumRelational() + 1 : 0,numClasses,classType,multiInstance);
    if (missingLevel > 0) {
      addMissing(train1,missingLevel,predictorMissing,classMissing);
      addMissing(train2,missingLevel,predictorMissing,classMissing);
    }
    associator=AbstractAssociator.makeCopies(getAssociator(),1)[0];
    evaluation1A=new AssociatorEvaluation();
    evaluation1B=new AssociatorEvaluation();
    evaluation2=new AssociatorEvaluation();
  }
 catch (  Exception ex) {
    throw new Error("Error setting up for tests: " + ex.getMessage());
  }
  try {
    stage=0;
    evaluation1A.evaluate(associator,train1);
    stage=1;
    evaluation2.evaluate(associator,train2);
    stage=2;
    evaluation1B.evaluate(associator,train1);
    stage=3;
    if (!evaluation1A.equals(evaluation1B)) {
      if (m_Debug) {
        println("\n=== Full report ===\n" + evaluation1A.toSummaryString("\nFirst buildAssociations()") + "\n\n");
        println(evaluation1B.toSummaryString("\nSecond buildAssociations()") + "\n\n");
      }
      throw new Exception("Results differ between buildAssociations calls");
    }
    println("yes");
    result[0]=true;
    if (false && m_Debug) {
      println("\n=== Full report ===\n" + evaluation1A.toSummaryString("\nFirst buildAssociations()") + "\n\n");
      println(evaluation1B.toSummaryString("\nSecond buildAssociations()") + "\n\n");
    }
  }
 catch (  Exception ex) {
    println("no");
    result[0]=false;
    if (m_Debug) {
      println("\n=== Full Report ===");
      print("Problem during building");
switch (stage) {
case 0:
        print(" of dataset 1");
      break;
case 1:
    print(" of dataset 2");
  break;
case 2:
print(" of dataset 1 (2nd build)");
break;
case 3:
print(", comparing results from builds of dataset 1");
break;
}
println(": " + ex.getMessage() + "\n");
println("here are the datasets:\n");
println("=== Train1 Dataset ===\n" + train1.toString() + "\n");
println("=== Train2 Dataset ===\n" + train2.toString() + "\n");
}
}
return result;
}
