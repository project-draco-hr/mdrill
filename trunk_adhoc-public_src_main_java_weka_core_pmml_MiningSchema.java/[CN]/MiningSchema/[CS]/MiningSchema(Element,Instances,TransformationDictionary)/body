{
  ArrayList<Attribute> attInfo=new ArrayList<Attribute>();
  NodeList fieldList=model.getElementsByTagName("MiningField");
  int classIndex=-1;
  int addedCount=0;
  for (int i=0; i < fieldList.getLength(); i++) {
    Node miningField=fieldList.item(i);
    if (miningField.getNodeType() == Node.ELEMENT_NODE) {
      Element miningFieldEl=(Element)miningField;
      MiningFieldMetaInfo mfi=new MiningFieldMetaInfo(miningFieldEl);
      if (mfi.getUsageType() == MiningFieldMetaInfo.Usage.ACTIVE || mfi.getUsageType() == MiningFieldMetaInfo.Usage.PREDICTED) {
        Attribute miningAtt=dataDictionary.attribute(mfi.getName());
        if (miningAtt != null) {
          mfi.setIndex(addedCount);
          attInfo.add(miningAtt);
          addedCount++;
          if (mfi.getUsageType() == MiningFieldMetaInfo.Usage.PREDICTED) {
            classIndex=addedCount - 1;
          }
          m_miningMeta.add(mfi);
        }
 else {
          throw new Exception("Can't find mining field: " + mfi.getName() + " in the data dictionary.");
        }
      }
    }
  }
  m_miningSchemaInstancesStructure=new Instances("miningSchema",attInfo,0);
  for (  MiningFieldMetaInfo m : m_miningMeta) {
    m.setMiningSchemaInstances(m_miningSchemaInstancesStructure);
  }
  m_transformationDictionary=transDict;
  if (m_transformationDictionary != null) {
    ArrayList<DerivedFieldMetaInfo> transDerived=transDict.getDerivedFields();
    m_derivedMeta.addAll(transDerived);
  }
  getLocalTransformations(model);
  ArrayList<Attribute> newStructure=new ArrayList<Attribute>();
  for (  MiningFieldMetaInfo m : m_miningMeta) {
    newStructure.add(m.getFieldAsAttribute());
  }
  for (  DerivedFieldMetaInfo d : m_derivedMeta) {
    newStructure.add(d.getFieldAsAttribute());
  }
  m_fieldInstancesStructure=new Instances("FieldStructure",newStructure,0);
  if (m_transformationDictionary != null) {
    m_transformationDictionary.setFieldDefsForDerivedFields(m_fieldInstancesStructure);
  }
  for (  DerivedFieldMetaInfo d : m_derivedMeta) {
    d.setFieldDefs(m_fieldInstancesStructure);
  }
  if (classIndex != -1) {
    m_fieldInstancesStructure.setClassIndex(classIndex);
    m_miningSchemaInstancesStructure.setClassIndex(classIndex);
  }
  NodeList targetsList=model.getElementsByTagName("Targets");
  if (targetsList.getLength() > 0) {
    if (targetsList.getLength() > 1) {
      throw new Exception("[MiningSchema] Can only handle a single Target");
    }
 else {
      Node te=targetsList.item(0);
      if (te.getNodeType() == Node.ELEMENT_NODE) {
        m_targetMetaInfo=new TargetMetaInfo((Element)te);
        if (m_fieldInstancesStructure.classIndex() >= 0 && m_fieldInstancesStructure.classAttribute().isString()) {
          ArrayList<String> targetVals=m_targetMetaInfo.getValues();
          if (targetVals.size() > 0) {
            Attribute classAtt=m_fieldInstancesStructure.classAttribute();
            for (int i=0; i < targetVals.size(); i++) {
              classAtt.addStringValue(targetVals.get(i));
            }
          }
        }
      }
    }
  }
}
