{
  int visibleRow=state.getVisibleSeriesIndex(row);
  if (visibleRow < 0) {
    return;
  }
  int seriesCount=state.getVisibleSeriesCount() >= 0 ? state.getVisibleSeriesCount() : getRowCount();
  int categoryCount=getColumnCount();
  PlotOrientation orientation=plot.getOrientation();
  double rectX=0.0;
  double rectY=0.0;
  RectangleEdge domainAxisLocation=plot.getDomainAxisEdge();
  RectangleEdge rangeAxisLocation=plot.getRangeAxisEdge();
  Number value0=dataset.getEndValue(row,column);
  if (value0 == null) {
    return;
  }
  double java2dValue0=rangeAxis.valueToJava2D(value0.doubleValue(),dataArea,rangeAxisLocation);
  Number value1=dataset.getStartValue(row,column);
  if (value1 == null) {
    return;
  }
  double java2dValue1=rangeAxis.valueToJava2D(value1.doubleValue(),dataArea,rangeAxisLocation);
  if (java2dValue1 < java2dValue0) {
    double temp=java2dValue1;
    java2dValue1=java2dValue0;
    java2dValue0=temp;
    Number tempNum=value1;
    value1=value0;
    value0=tempNum;
  }
  double rectWidth=state.getBarWidth();
  double rectHeight=Math.abs(java2dValue1 - java2dValue0);
  RectangleEdge barBase=RectangleEdge.LEFT;
  if (orientation == PlotOrientation.HORIZONTAL) {
    rectY=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,domainAxisLocation);
    if (seriesCount > 1) {
      double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));
      rectY=rectY + visibleRow * (state.getBarWidth() + seriesGap);
    }
 else {
      rectY=rectY + visibleRow * state.getBarWidth();
    }
    rectX=java2dValue0;
    rectHeight=state.getBarWidth();
    rectWidth=Math.abs(java2dValue1 - java2dValue0);
    barBase=RectangleEdge.LEFT;
  }
 else   if (orientation == PlotOrientation.VERTICAL) {
    rectX=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,domainAxisLocation);
    if (seriesCount > 1) {
      double seriesGap=dataArea.getWidth() * getItemMargin() / (categoryCount * (seriesCount - 1));
      rectX=rectX + visibleRow * (state.getBarWidth() + seriesGap);
    }
 else {
      rectX=rectX + visibleRow * state.getBarWidth();
    }
    rectY=java2dValue0;
    barBase=RectangleEdge.BOTTOM;
  }
  Rectangle2D bar=new Rectangle2D.Double(rectX,rectY,rectWidth,rectHeight);
  BarPainter painter=getBarPainter();
  if (getShadowsVisible()) {
    painter.paintBarShadow(g2,this,row,column,bar,barBase,false);
  }
  getBarPainter().paintBar(g2,this,row,column,bar,barBase);
  CategoryItemLabelGenerator generator=getItemLabelGenerator(row,column);
  if (generator != null && isItemLabelVisible(row,column)) {
    drawItemLabel(g2,dataset,row,column,plot,generator,bar,false);
  }
  EntityCollection entities=state.getEntityCollection();
  if (entities != null) {
    addItemEntity(entities,dataset,row,column,bar);
  }
}
