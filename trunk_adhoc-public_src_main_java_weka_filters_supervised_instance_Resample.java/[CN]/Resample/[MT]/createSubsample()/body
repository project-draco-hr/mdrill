{
  int origSize=getInputFormat().numInstances();
  int sampleSize=(int)(origSize * m_SampleSizePercent / 100);
  getInputFormat().sort(getInputFormat().classIndex());
  int[] classIndices=new int[getInputFormat().numClasses() + 1];
  int currentClass=0;
  classIndices[currentClass]=0;
  for (int i=0; i < getInputFormat().numInstances(); i++) {
    Instance current=getInputFormat().instance(i);
    if (current.classIsMissing()) {
      for (int j=currentClass + 1; j < classIndices.length; j++) {
        classIndices[j]=i;
      }
      break;
    }
 else     if (current.classValue() != currentClass) {
      for (int j=currentClass + 1; j <= current.classValue(); j++) {
        classIndices[j]=i;
      }
      currentClass=(int)current.classValue();
    }
  }
  if (currentClass <= getInputFormat().numClasses()) {
    for (int j=currentClass + 1; j < classIndices.length; j++) {
      classIndices[j]=getInputFormat().numInstances();
    }
  }
  int actualClasses=0;
  for (int i=0; i < classIndices.length - 1; i++) {
    if (classIndices[i] != classIndices[i + 1]) {
      actualClasses++;
    }
  }
  Random random=new Random(m_RandomSeed);
  if (getNoReplacement())   createSubsampleWithoutReplacement(random,origSize,sampleSize,actualClasses,classIndices);
 else   createSubsampleWithReplacement(random,origSize,sampleSize,actualClasses,classIndices);
}
