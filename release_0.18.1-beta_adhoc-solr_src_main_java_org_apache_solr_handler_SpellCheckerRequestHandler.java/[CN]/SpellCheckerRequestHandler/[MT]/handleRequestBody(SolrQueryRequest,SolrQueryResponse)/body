{
  SolrParams p=req.getParams();
  String words=p.get("q");
  String cmd=p.get("cmd");
  if (cmd != null) {
    cmd=cmd.trim();
    if (cmd.equals("rebuild")) {
      rebuild(req);
      rsp.add("cmdExecuted","rebuild");
    }
 else     if (cmd.equals("reopen")) {
      reopen();
      rsp.add("cmdExecuted","reopen");
    }
 else {
      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"Unrecognized Command: " + cmd);
    }
  }
  if (null == words || "".equals(words.trim())) {
    return;
  }
  IndexReader indexReader=null;
  String suggestionField=null;
  Float accuracy;
  int numSug;
  boolean onlyMorePopular;
  boolean extendedResults;
  try {
    accuracy=p.getFloat(ACCURACY,p.getFloat("accuracy",DEFAULT_ACCURACY));
    spellChecker.setAccuracy(accuracy);
  }
 catch (  NumberFormatException e) {
    throw new RuntimeException("Accuracy must be a valid positive float",e);
  }
  try {
    numSug=p.getInt(SUGGESTIONS,p.getInt("suggestionCount",DEFAULT_SUGGESTION_COUNT));
  }
 catch (  NumberFormatException e) {
    throw new RuntimeException("Spelling suggestion count must be a valid positive integer",e);
  }
  try {
    onlyMorePopular=p.getBool(POPULAR,DEFAULT_MORE_POPULAR);
  }
 catch (  SolrException e) {
    throw new RuntimeException("'Only more popular' must be a valid boolean",e);
  }
  try {
    extendedResults=p.getBool(EXTENDED,DEFAULT_EXTENDED_RESULTS);
  }
 catch (  SolrException e) {
    throw new RuntimeException("'Extended results' must be a valid boolean",e);
  }
  if (onlyMorePopular || extendedResults) {
    indexReader=req.getSearcher().getReader();
    suggestionField=termSourceField;
  }
  if (extendedResults) {
    rsp.add("numDocs",indexReader.numDocs());
    SimpleOrderedMap<Object> results=new SimpleOrderedMap<Object>();
    String[] wordz=words.split(" ");
    for (    String word : wordz) {
      SimpleOrderedMap<Object> nl=new SimpleOrderedMap<Object>();
      nl.add("frequency",indexReader.docFreq(new Term(suggestionField,word)));
      String[] suggestions=spellChecker.suggestSimilar(word,numSug,indexReader,suggestionField,onlyMorePopular);
      NamedList<Object> sa=new NamedList<Object>();
      for (int i=0; i < suggestions.length; i++) {
        SimpleOrderedMap<Object> si=new SimpleOrderedMap<Object>();
        si.add("frequency",indexReader.docFreq(new Term(termSourceField,suggestions[i])));
        sa.add(suggestions[i],si);
      }
      nl.add("suggestions",sa);
      results.add(word,nl);
    }
    rsp.add("result",results);
  }
 else {
    rsp.add("words",words);
    if (spellChecker.exist(words)) {
      rsp.add("exist","true");
    }
 else {
      rsp.add("exist","false");
    }
    String[] suggestions=spellChecker.suggestSimilar(words,numSug,indexReader,suggestionField,onlyMorePopular);
    rsp.add("suggestions",Arrays.asList(suggestions));
  }
}
