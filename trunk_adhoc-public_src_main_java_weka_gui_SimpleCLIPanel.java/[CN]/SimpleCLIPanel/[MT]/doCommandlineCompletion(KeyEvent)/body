{
  if (e.getSource() == m_Input) {
switch (e.getKeyCode()) {
case KeyEvent.VK_TAB:
      if (e.getModifiers() == 0) {
        m_Input.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        m_OutputArea.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        try {
          String txt=m_Input.getText();
          if (txt.trim().startsWith("java ")) {
            int pos=m_Input.getCaretPosition();
            int nonNameCharPos=-1;
            for (int i=pos - 1; i >= 0; i--) {
              if ((txt.charAt(i) == '"') || (txt.charAt(i) == ' ')) {
                nonNameCharPos=i;
                break;
              }
            }
            if (nonNameCharPos > -1) {
              String search=txt.substring(nonNameCharPos + 1,pos);
              Vector<String> list=m_Completion.getMatches(search);
              String common=m_Completion.getCommonPrefix(list);
              if ((search.toLowerCase() + File.separator).equals(common.toLowerCase()))               common=search;
              if (common.length() > search.length()) {
                try {
                  m_Input.getDocument().remove(nonNameCharPos + 1,search.length());
                  m_Input.getDocument().insertString(nonNameCharPos + 1,common,null);
                }
 catch (                Exception ex) {
                  ex.printStackTrace();
                }
              }
 else               if (list.size() > 1) {
                System.out.println("\nPossible matches:");
                for (int i=0; i < list.size(); i++)                 System.out.println("  " + list.get(i));
              }
 else {
              }
            }
          }
        }
  finally {
          m_Input.setCursor(null);
          m_OutputArea.setCursor(null);
        }
      }
    break;
case KeyEvent.VK_BACK_SPACE:
  if (e.getModifiers() == KeyEvent.ALT_MASK) {
    String txt=m_Input.getText();
    int pos=m_Input.getCaretPosition();
    int start=pos;
    start--;
    while (start >= 0) {
      if ((txt.charAt(start) == '.') || (txt.charAt(start) == ' ') || (txt.charAt(start) == '\\')|| (txt.charAt(start) == '/'))       start--;
 else       break;
    }
    int newPos=-1;
    for (int i=start; i >= 0; i--) {
      if ((txt.charAt(i) == '.') || (txt.charAt(i) == ' ') || (txt.charAt(i) == '\\')|| (txt.charAt(i) == '/')) {
        newPos=i;
        break;
      }
    }
    try {
      m_Input.getDocument().remove(newPos + 1,pos - newPos - 1);
    }
 catch (    Exception ex) {
      ex.printStackTrace();
    }
  }
break;
}
}
}
