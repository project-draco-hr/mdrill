{
  if (obj == null) {
    return 0;
  }
  if (checkInterned && obj instanceof String && obj == ((String)obj).intern()) {
    return 0;
  }
  if (seen.containsKey(obj)) {
    return 0;
  }
  seen.put(obj,null);
  Class<?> clazz=obj.getClass();
  if (clazz.isArray()) {
    return sizeOfArray(obj);
  }
  long size=0;
  while (clazz != null) {
    Field[] fields=clazz.getDeclaredFields();
    for (int i=0; i < fields.length; i++) {
      if (Modifier.isStatic(fields[i].getModifiers())) {
        continue;
      }
      if (fields[i].getType().isPrimitive()) {
        size+=memoryModel.getPrimitiveSize(fields[i].getType());
      }
 else {
        size+=refSize;
        fields[i].setAccessible(true);
        try {
          Object value=fields[i].get(obj);
          if (value != null) {
            size+=size(value);
          }
        }
 catch (        IllegalAccessException ex) {
        }
      }
    }
    clazz=clazz.getSuperclass();
  }
  size+=classSize;
  return size;
}
