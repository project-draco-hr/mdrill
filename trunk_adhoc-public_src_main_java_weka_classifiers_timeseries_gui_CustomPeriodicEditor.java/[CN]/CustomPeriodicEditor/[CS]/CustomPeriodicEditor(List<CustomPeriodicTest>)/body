{
  m_testsToEdit=tests;
  final DefaultListModel testVec=new DefaultListModel();
  for (  CustomPeriodicTest t : tests) {
    testVec.addElement(t);
  }
  m_testsToEditList=new JList(testVec);
  JScrollPane js=new JScrollPane(m_testsToEditList);
  js.setBorder(BorderFactory.createTitledBorder("Test list (rows are OR'ed)"));
  m_testsToEditList.setVisibleRowCount(5);
  m_deleteBut.setEnabled(false);
  setLayout(new BorderLayout());
  JPanel fieldHolder=new JPanel();
  fieldHolder.setLayout(new BorderLayout());
  fieldHolder.setBorder(BorderFactory.createTitledBorder("Field name"));
  fieldHolder.add(m_fieldName,BorderLayout.CENTER);
  JPanel buttHolder=new JPanel();
  buttHolder.setLayout(new BorderLayout());
  buttHolder.setBorder(BorderFactory.createTitledBorder("Edit"));
  JPanel tempH=new JPanel();
  tempH.setLayout(new BorderLayout());
  tempH.add(m_newBut,BorderLayout.WEST);
  tempH.add(m_deleteBut,BorderLayout.EAST);
  buttHolder.add(tempH,BorderLayout.WEST);
  JPanel fieldAndButtHolder=new JPanel();
  fieldAndButtHolder.setLayout(new BorderLayout());
  fieldAndButtHolder.add(fieldHolder,BorderLayout.NORTH);
  fieldAndButtHolder.add(buttHolder,BorderLayout.CENTER);
  JPanel testEditorHolder=new JPanel();
  testEditorHolder.setLayout(new BorderLayout());
  JPanel tempP=new JPanel();
  tempP.setLayout(new BorderLayout());
  testEditorHolder.setBorder(BorderFactory.createTitledBorder("Test interval"));
  tempP.add(m_lowerBoundEditor,BorderLayout.NORTH);
  tempP.add(m_upperBoundEditor,BorderLayout.SOUTH);
  JPanel labelHolder=new JPanel();
  labelHolder.setLayout(new BorderLayout());
  JLabel labelLabel=new JLabel("Label");
  labelLabel.setToolTipText("The label for this test. If all tests have " + "a label then a nominal attribute is created; otherwise it is binary");
  labelHolder.add(labelLabel,BorderLayout.WEST);
  labelHolder.add(m_labelField,BorderLayout.CENTER);
  m_labelField.setToolTipText("The label for this test. If all tests have " + "a label then a nominal attribute is created; otherwise it is binary");
  testEditorHolder.add(tempP,BorderLayout.NORTH);
  testEditorHolder.add(labelHolder,BorderLayout.SOUTH);
  fieldAndButtHolder.add(testEditorHolder,BorderLayout.SOUTH);
  add(fieldAndButtHolder,BorderLayout.NORTH);
  add(js,BorderLayout.CENTER);
  m_testsToEditList.addListSelectionListener(new ListSelectionListener(){
    public void valueChanged(    ListSelectionEvent e){
      if (!e.getValueIsAdjusting()) {
        if (!m_deleteBut.isEnabled()) {
          m_deleteBut.setEnabled(true);
        }
        Object test=m_testsToEditList.getSelectedValue();
        if (test != null) {
          CustomPeriodicTest t=(CustomPeriodicTest)test;
          m_lowerBoundEditor.setTestToEdit(t);
          m_upperBoundEditor.setTestToEdit(t);
          if (t.getLabel() != null && t.getLabel().length() > 0) {
            m_labelField.setText(t.getLabel());
          }
 else {
            m_labelField.setText("");
          }
        }
      }
    }
  }
);
  m_newBut.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      CustomPeriodicTest newTest=new CustomPeriodicTest(">*:*:*:*:*:*:*:*:*:* <*:*:*:*:*:*:*:*:*:*");
      m_lowerBoundEditor.setTestToEdit(newTest);
      m_upperBoundEditor.setTestToEdit(newTest);
      testVec.addElement(newTest);
      m_testsToEdit.add(newTest);
      m_labelField.setText("");
      m_testsToEditList.setSelectedIndex(m_testsToEdit.size() - 1);
    }
  }
);
  m_deleteBut.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      int selected=m_testsToEditList.getSelectedIndex();
      if (selected >= 0) {
        testVec.removeElementAt(selected);
        m_testsToEdit.remove(selected);
      }
    }
  }
);
  m_lowerBoundEditor.addPropertyChangeListener(new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent e){
      m_testsToEditList.repaint();
      if (m_lowerBoundEditor.getTestBeingEdited().getLowerTest().m_boundOperator == CustomPeriodicTest.Operator.EQUALS) {
        m_upperBoundEditor.setEnabled(false);
      }
 else {
        m_upperBoundEditor.setEnabled(true);
      }
    }
  }
);
  m_upperBoundEditor.addPropertyChangeListener(new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent e){
      m_testsToEditList.repaint();
    }
  }
);
  m_labelField.addKeyListener(new KeyAdapter(){
    public void keyReleased(    KeyEvent e){
      Object test=m_testsToEditList.getSelectedValue();
      if (test != null) {
        CustomPeriodicTest t=(CustomPeriodicTest)test;
        t.setLabel(m_labelField.getText());
        m_testsToEditList.repaint();
      }
    }
  }
);
}
