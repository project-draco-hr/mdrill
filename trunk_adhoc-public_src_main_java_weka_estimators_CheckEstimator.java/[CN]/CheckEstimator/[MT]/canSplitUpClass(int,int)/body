{
  boolean[] result=new boolean[2];
  FastVector accepts=new FastVector();
  accepts.addElement("not in classpath");
  print("split per class type ");
  printAttributeSummary(attrType,Attribute.NOMINAL);
  print("...");
  int numTrain=getNumInstances(), numTest=getNumInstances(), numClasses=2;
  boolean attributeMissing=false, classMissing=false;
  int numAtts=3, attrIndex=0, classIndex=1;
  Instances train=null;
  Vector test;
  Estimator estimator=null;
  boolean built=false;
  try {
    AttrTypes at=new AttrTypes(attrType);
    train=makeTestDataset(42,numTrain,numAtts,at,numClasses,classType,classIndex);
    test=makeTestValueList(24,numTest,train,attrIndex,attrType);
    estimator=Estimator.makeCopies(getEstimator(),1)[0];
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    throw new Error("Error setting up for tests: " + ex.getMessage());
  }
  try {
    estimator.addValues(train,attrIndex,classType,classIndex);
    built=true;
    testWithTestValues(estimator,test);
    println("yes");
    result[0]=true;
  }
 catch (  Exception ex) {
    boolean acceptable=false;
    String msg;
    if (ex.getMessage() == null)     msg="";
 else     msg=ex.getMessage().toLowerCase();
    if (msg.indexOf("not in classpath") > -1)     m_ClasspathProblems=true;
    for (int i=0; i < accepts.size(); i++) {
      if (msg.indexOf((String)accepts.elementAt(i)) >= 0) {
        acceptable=true;
      }
    }
    println("no" + (acceptable ? " (OK error message)" : ""));
    result[1]=acceptable;
    if (m_Debug) {
      println("\n=== Full Report ===");
      print("Problem during");
      if (built) {
        print(" testing");
      }
 else {
        print(" training");
      }
      println(": " + ex.getMessage() + "\n");
      if (!acceptable) {
        if (accepts.size() > 0) {
          print("Error message doesn't mention ");
          for (int i=0; i < accepts.size(); i++) {
            if (i != 0) {
              print(" or ");
            }
            print('"' + (String)accepts.elementAt(i) + '"');
          }
        }
        println("here are the datasets:\n");
        println("=== Train Dataset ===\n" + train.toString() + "\n");
        println("=== Test Dataset ===\n" + test.toString() + "\n\n");
      }
    }
  }
  return result;
}
