{
  Method method;
  Class[] methodClasses;
  Object[] methodArgs;
  boolean array;
  boolean useDefault;
  useDefault=false;
  method=null;
  m_CurrentNode=node;
  try {
    if (stringToBoolean(node.getAttribute(ATT_NULL)))     useDefault=true;
    if (!useDefault) {
      array=stringToBoolean(node.getAttribute(ATT_ARRAY));
      if (m_CustomMethods.read().contains(node.getAttribute(ATT_NAME)))       method=(Method)m_CustomMethods.read().get(node.getAttribute(ATT_NAME));
 else       if ((!array) && (m_CustomMethods.read().contains(determineClass(node.getAttribute(ATT_CLASS)))))       method=(Method)m_CustomMethods.read().get(determineClass(node.getAttribute(ATT_CLASS)));
 else       method=null;
      useDefault=(method == null);
    }
    if (!useDefault) {
      methodClasses=new Class[1];
      methodClasses[0]=Element.class;
      methodArgs=new Object[1];
      methodArgs[0]=node;
      return method.invoke(this,methodArgs);
    }
 else {
      return readFromXML(node);
    }
  }
 catch (  Exception e) {
    if (DEBUG)     e.printStackTrace();
    if (m_CurrentNode != null) {
      System.out.println("Happened near: " + getPath(m_CurrentNode));
      m_CurrentNode=null;
    }
    System.out.println("PROBLEM (read): " + node.getAttribute("name"));
    throw (Exception)e.fillInStackTrace();
  }
}
