{
  StringBuffer result=new StringBuffer();
  result.append("Relation Name:  ").append(relationName()).append('\n');
  result.append("Num Instances:  ").append(numInstances()).append('\n');
  result.append("Num Attributes: ").append(numAttributes()).append('\n');
  result.append('\n');
  result.append(Utils.padLeft("",5)).append(Utils.padRight("Name",25));
  result.append(Utils.padLeft("Type",5)).append(Utils.padLeft("Nom",5));
  result.append(Utils.padLeft("Int",5)).append(Utils.padLeft("Real",5));
  result.append(Utils.padLeft("Missing",12));
  result.append(Utils.padLeft("Unique",12));
  result.append(Utils.padLeft("Dist",6)).append('\n');
  for (int i=0; i < numAttributes(); i++) {
    Attribute a=attribute(i);
    AttributeStats as=attributeStats(i);
    result.append(Utils.padLeft("" + (i + 1),4)).append(' ');
    result.append(Utils.padRight(a.name(),25)).append(' ');
    long percent;
switch (a.type()) {
case Attribute.NOMINAL:
      result.append(Utils.padLeft("Nom",4)).append(' ');
    percent=Math.round(100.0 * as.intCount / as.totalCount);
  result.append(Utils.padLeft("" + percent,3)).append("% ");
result.append(Utils.padLeft("" + 0,3)).append("% ");
percent=Math.round(100.0 * as.realCount / as.totalCount);
result.append(Utils.padLeft("" + percent,3)).append("% ");
break;
case Attribute.NUMERIC:
result.append(Utils.padLeft("Num",4)).append(' ');
result.append(Utils.padLeft("" + 0,3)).append("% ");
percent=Math.round(100.0 * as.intCount / as.totalCount);
result.append(Utils.padLeft("" + percent,3)).append("% ");
percent=Math.round(100.0 * as.realCount / as.totalCount);
result.append(Utils.padLeft("" + percent,3)).append("% ");
break;
case Attribute.DATE:
result.append(Utils.padLeft("Dat",4)).append(' ');
result.append(Utils.padLeft("" + 0,3)).append("% ");
percent=Math.round(100.0 * as.intCount / as.totalCount);
result.append(Utils.padLeft("" + percent,3)).append("% ");
percent=Math.round(100.0 * as.realCount / as.totalCount);
result.append(Utils.padLeft("" + percent,3)).append("% ");
break;
case Attribute.STRING:
result.append(Utils.padLeft("Str",4)).append(' ');
percent=Math.round(100.0 * as.intCount / as.totalCount);
result.append(Utils.padLeft("" + percent,3)).append("% ");
result.append(Utils.padLeft("" + 0,3)).append("% ");
percent=Math.round(100.0 * as.realCount / as.totalCount);
result.append(Utils.padLeft("" + percent,3)).append("% ");
break;
case Attribute.RELATIONAL:
result.append(Utils.padLeft("Rel",4)).append(' ');
percent=Math.round(100.0 * as.intCount / as.totalCount);
result.append(Utils.padLeft("" + percent,3)).append("% ");
result.append(Utils.padLeft("" + 0,3)).append("% ");
percent=Math.round(100.0 * as.realCount / as.totalCount);
result.append(Utils.padLeft("" + percent,3)).append("% ");
break;
default :
result.append(Utils.padLeft("???",4)).append(' ');
result.append(Utils.padLeft("" + 0,3)).append("% ");
percent=Math.round(100.0 * as.intCount / as.totalCount);
result.append(Utils.padLeft("" + percent,3)).append("% ");
percent=Math.round(100.0 * as.realCount / as.totalCount);
result.append(Utils.padLeft("" + percent,3)).append("% ");
break;
}
result.append(Utils.padLeft("" + as.missingCount,5)).append(" /");
percent=Math.round(100.0 * as.missingCount / as.totalCount);
result.append(Utils.padLeft("" + percent,3)).append("% ");
result.append(Utils.padLeft("" + as.uniqueCount,5)).append(" /");
percent=Math.round(100.0 * as.uniqueCount / as.totalCount);
result.append(Utils.padLeft("" + percent,3)).append("% ");
result.append(Utils.padLeft("" + as.distinctCount,5)).append(' ');
result.append('\n');
}
return result.toString();
}
