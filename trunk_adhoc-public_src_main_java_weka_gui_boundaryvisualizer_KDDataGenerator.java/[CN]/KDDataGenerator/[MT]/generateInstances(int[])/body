{
  double[][] values=new double[m_instances.numInstances()][];
  for (int k=0; k < indices.length; k++) {
    values[indices[k]]=new double[m_instances.numAttributes()];
    for (int i=0; i < m_instances.numAttributes(); i++) {
      if ((!m_weightingDimensions[i]) && (i != m_instances.classIndex())) {
        if (m_instances.attribute(i).isNumeric()) {
          double mean=0;
          double val=m_random.nextGaussian();
          if (!m_instances.instance(indices[k]).isMissing(i)) {
            mean=m_instances.instance(indices[k]).value(i);
          }
 else {
            mean=m_globalMeansOrModes[i];
          }
          val*=m_kernelParams[indices[k]][i];
          val+=mean;
          values[indices[k]][i]=val;
        }
 else {
          double[] dist=new double[m_instances.attribute(i).numValues()];
          for (int j=0; j < dist.length; j++) {
            dist[j]=m_laplaceConst;
          }
          if (!m_instances.instance(indices[k]).isMissing(i)) {
            dist[(int)m_instances.instance(indices[k]).value(i)]++;
          }
 else {
            dist[(int)m_globalMeansOrModes[i]]++;
          }
          Utils.normalize(dist);
          double[] cumDist=computeCumulativeDistribution(dist);
          double randomVal=m_random.nextDouble();
          int instVal=0;
          for (int j=0; j < cumDist.length; j++) {
            if (randomVal <= cumDist[j]) {
              instVal=j;
              break;
            }
          }
          values[indices[k]][i]=(double)instVal;
        }
      }
    }
  }
  return values;
}
