{
  m_Min=new double[m_instances.numAttributes()];
  m_Max=new double[m_instances.numAttributes()];
  for (int i=0; i < m_instances.numAttributes(); i++) {
    m_Min[i]=m_Max[i]=Double.NaN;
  }
  for (int i=0; i < m_instances.numInstances(); i++) {
    updateMinMax(m_instances.instance(i));
  }
  double[] distances=new double[m_instances.numInstances()];
  for (int i=0; i < m_instances.numInstances(); i++) {
    Instance current=m_instances.instance(i);
    for (int j=0; j < m_instances.numInstances(); j++) {
      distances[j]=distance(current,m_instances.instance(j));
    }
    int[] sorted=Utils.sort(distances);
    int k=m_kernelBandwidth;
    double bandwidth=distances[sorted[k]];
    if (bandwidth <= 0) {
      for (int j=k + 1; j < sorted.length; j++) {
        if (distances[sorted[j]] > bandwidth) {
          bandwidth=distances[sorted[j]];
          break;
        }
      }
      if (bandwidth <= 0) {
        throw new Exception("All training instances coincide with " + "test instance!");
      }
    }
    for (int j=0; j < m_instances.numAttributes(); j++) {
      if ((m_Max[j] - m_Min[j]) > 0) {
        m_kernelParams[i][j]=bandwidth * (m_Max[j] - m_Min[j]);
      }
    }
  }
}
