{
  if (m_eigenvalues == null) {
    throw new Exception("convertInstance: Principal components not " + "built yet");
  }
  double[] newVals=new double[m_outputNumAtts];
  Instance tempInst=(Instance)instance.copy();
  if (!instance.dataset().equalHeaders(m_trainHeader)) {
    throw new Exception("Can't convert instance: header's don't match: " + "PrincipalComponents\n" + instance.dataset().equalHeadersMsg(m_trainHeader));
  }
  m_replaceMissingFilter.input(tempInst);
  m_replaceMissingFilter.batchFinished();
  tempInst=m_replaceMissingFilter.output();
  m_nominalToBinFilter.input(tempInst);
  m_nominalToBinFilter.batchFinished();
  tempInst=m_nominalToBinFilter.output();
  if (m_attributeFilter != null) {
    m_attributeFilter.input(tempInst);
    m_attributeFilter.batchFinished();
    tempInst=m_attributeFilter.output();
  }
  if (!m_center) {
    m_standardizeFilter.input(tempInst);
    m_standardizeFilter.batchFinished();
    tempInst=m_standardizeFilter.output();
  }
 else {
    m_centerFilter.input(tempInst);
    m_centerFilter.batchFinished();
    tempInst=m_centerFilter.output();
  }
  if (m_hasClass) {
    newVals[m_outputNumAtts - 1]=instance.value(instance.classIndex());
  }
  double cumulative=0;
  for (int i=m_numAttribs - 1; i >= 0; i--) {
    double tempval=0.0;
    for (int j=0; j < m_numAttribs; j++) {
      tempval+=(m_eigenvectors[j][m_sortedEigens[i]] * tempInst.value(j));
    }
    newVals[m_numAttribs - i - 1]=tempval;
    cumulative+=m_eigenvalues[m_sortedEigens[i]];
    if ((cumulative / m_sumOfEigenValues) >= m_coverVariance) {
      break;
    }
  }
  if (!m_transBackToOriginal) {
    if (instance instanceof SparseInstance) {
      return new SparseInstance(instance.weight(),newVals);
    }
 else {
      return new DenseInstance(instance.weight(),newVals);
    }
  }
 else {
    if (instance instanceof SparseInstance) {
      return convertInstanceToOriginal(new SparseInstance(instance.weight(),newVals));
    }
 else {
      return convertInstanceToOriginal(new DenseInstance(instance.weight(),newVals));
    }
  }
}
