{
  if (m_eigenvalues == null) {
    return null;
  }
  double cumulative=0.0;
  FastVector attributes=new FastVector();
  for (int i=m_numAttribs - 1; i >= 0; i--) {
    StringBuffer attName=new StringBuffer();
    double[] coeff_mags=new double[m_numAttribs];
    for (int j=0; j < m_numAttribs; j++)     coeff_mags[j]=-Math.abs(m_eigenvectors[j][m_sortedEigens[i]]);
    int num_attrs=(m_maxAttrsInName > 0) ? Math.min(m_numAttribs,m_maxAttrsInName) : m_numAttribs;
    int[] coeff_inds;
    if (m_numAttribs > 0) {
      coeff_inds=Utils.sort(coeff_mags);
    }
 else {
      coeff_inds=new int[m_numAttribs];
      for (int j=0; j < m_numAttribs; j++)       coeff_inds[j]=j;
    }
    for (int j=0; j < num_attrs; j++) {
      double coeff_value=m_eigenvectors[coeff_inds[j]][m_sortedEigens[i]];
      if (j > 0 && coeff_value >= 0)       attName.append("+");
      attName.append(Utils.doubleToString(coeff_value,5,3) + m_trainInstances.attribute(coeff_inds[j]).name());
    }
    if (num_attrs < m_numAttribs)     attName.append("...");
    attributes.addElement(new Attribute(attName.toString()));
    cumulative+=m_eigenvalues[m_sortedEigens[i]];
    if ((cumulative / m_sumOfEigenValues) >= m_coverVariance) {
      break;
    }
  }
  if (m_hasClass) {
    attributes.addElement(m_trainHeader.classAttribute().copy());
  }
  Instances outputFormat=new Instances(m_trainInstances.relationName() + "_principal components",attributes,0);
  if (m_hasClass) {
    outputFormat.setClassIndex(outputFormat.numAttributes() - 1);
  }
  m_outputNumAtts=outputFormat.numAttributes();
  return outputFormat;
}
