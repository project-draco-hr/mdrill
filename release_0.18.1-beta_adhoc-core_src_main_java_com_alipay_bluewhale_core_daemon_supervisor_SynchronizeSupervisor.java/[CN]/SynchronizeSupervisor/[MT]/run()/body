{
  RunnableCallback syncCallback=new SyncCallback(this,eventManager);
  Map<String,String> stormCodeMap=readStormCodeLocations(stormClusterState,syncCallback);
  List<String> downloadedTopologyIds=null;
  if (stormCodeMap != null) {
    try {
      downloadedTopologyIds=readDownloadedTopologyIds(conf);
    }
 catch (    IOException e) {
      String errMsg="Failed to get downloaded topologyids\n";
      LOG.error(errMsg,e);
    }
    Map<Integer,LocalAssignment> newAssignment=readAssignments(stormClusterState,supervisorId,syncCallback);
    LOG.debug("Synchronizing supervisor");
    LOG.debug("Storm code map: " + stormCodeMap);
    LOG.debug("Downloaded storm ids: " + downloadedTopologyIds);
    LOG.debug("New assignment: " + newAssignment);
    Set<Entry<String,String>> entryStormCodeSet=stormCodeMap.entrySet();
    for (    Entry<String,String> entry : entryStormCodeSet) {
      String stormId=entry.getKey();
      String masterCodeDir=entry.getValue();
      if (!downloadedTopologyIds.contains(stormId)) {
        LOG.info("Downloading code for storm id " + stormId + " from "+ masterCodeDir);
        try {
          downloadStormCode(conf,stormId,masterCodeDir);
        }
 catch (        IOException e) {
          LOG.error(e + " downloadStormCode failed " + "stormId:"+ stormId+ "masterCodeDir:"+ masterCodeDir);
        }
catch (        TException e) {
          LOG.error(e + " downloadStormCode failed " + "stormId:"+ stormId+ "masterCodeDir:"+ masterCodeDir);
        }
        LOG.info("Finished downloading code for storm id " + stormId + " from "+ masterCodeDir);
      }
    }
    for (Iterator<String> it=downloadedTopologyIds.iterator(); it.hasNext(); ) {
      String topologyId=it.next();
      if (!stormCodeMap.containsKey(topologyId)) {
        LOG.info("Removing code for storm id " + topologyId);
        String path=null;
        try {
          path=StormConfig.supervisor_stormdist_root(conf,topologyId);
          PathUtils.rmr(path);
        }
 catch (        IOException e) {
          String errMsg="rmr the path:" + path + "failed\n";
          LOG.error(errMsg,e);
        }
      }
    }
    LOG.debug("Writing new assignment " + newAssignment);
    try {
      localState.put(Common.LS_LOCAL_ASSIGNMENTS,newAssignment);
    }
 catch (    IOException e) {
      LOG.error("put LS_LOCAL_ASSIGNMENTS " + newAssignment + " of localState failed");
    }
  }
  processesEventManager.add(syncProcesses);
}
