{
  if (!RELATION_NAME.equals(tcurve.relationName()) || (tcurve.numInstances() == 0)) {
    return Double.NaN;
  }
  int recallInd=tcurve.attribute(RECALL_NAME).index();
  int precisInd=tcurve.attribute(PRECISION_NAME).index();
  double[] recallVals=tcurve.attributeToDoubleArray(recallInd);
  int[] sorted=Utils.sort(recallVals);
  double isize=1.0 / (n - 1);
  double psum=0;
  for (int i=0; i < n; i++) {
    int pos=binarySearch(sorted,recallVals,i * isize);
    double recall=recallVals[sorted[pos]];
    double precis=tcurve.instance(sorted[pos]).value(precisInd);
    while ((pos != 0) && (pos < sorted.length - 1)) {
      pos++;
      double recall2=recallVals[sorted[pos]];
      if (recall2 != recall) {
        double precis2=tcurve.instance(sorted[pos]).value(precisInd);
        double slope=(precis2 - precis) / (recall2 - recall);
        double offset=precis - recall * slope;
        precis=isize * i * slope + offset;
        break;
      }
    }
    psum+=precis;
  }
  return psum / n;
}
