{
  NamedList<Object> queryResult=new NamedList<Object>();
  queryResult.add("matches",result.getMatches());
  queryResult.add("totalHits",result.getTopDocs().totalHits);
  if (rb.getGroupingSpec().isNeedScore()) {
    queryResult.add("maxScore",result.getTopDocs().getMaxScore());
  }
  queryResult.add("sum",result.getTopDocs().getSum());
  queryResult.add("max",result.getTopDocs().getMax());
  queryResult.add("min",result.getTopDocs().getMin());
  List<NamedList> documents=new ArrayList<NamedList>();
  queryResult.add("documents",documents);
  SchemaField uniqueField=rb.req.getSearcher().getSchema().getUniqueKeyField();
  for (  ScoreDoc scoreDoc : result.getTopDocs().scoreDocs) {
    NamedList<Object> document=new NamedList<Object>();
    documents.add(document);
    Document doc=retrieveDocument(uniqueField,scoreDoc.doc);
    document.add("id",uniqueField.getType().toObject(doc.getFieldable(uniqueField.getName())));
    if (rb.getGroupingSpec().isNeedScore()) {
      document.add("score",scoreDoc.score);
    }
    if (!FieldDoc.class.isInstance(scoreDoc)) {
      continue;
    }
    FieldDoc fieldDoc=(FieldDoc)scoreDoc;
    Object[] convertedSortValues=new Object[fieldDoc.fields.length];
    for (int j=0; j < fieldDoc.fields.length; j++) {
      Object sortValue=fieldDoc.fields[j];
      Sort groupSort=rb.getGroupingSpec().getGroupSort();
      SchemaField field=groupSort.getSort()[j].getField() != null ? rb.req.getSearcher().getSchema().getFieldOrNull(groupSort.getSort()[j].getField()) : null;
      if (field != null) {
        FieldType fieldType=field.getType();
        if (sortValue instanceof String) {
          sortValue=fieldType.toObject(field.createField(fieldType.indexedToReadable((String)sortValue),0.0f));
        }
      }
      convertedSortValues[j]=sortValue;
    }
    document.add("sortValues",convertedSortValues);
  }
  return queryResult;
}
