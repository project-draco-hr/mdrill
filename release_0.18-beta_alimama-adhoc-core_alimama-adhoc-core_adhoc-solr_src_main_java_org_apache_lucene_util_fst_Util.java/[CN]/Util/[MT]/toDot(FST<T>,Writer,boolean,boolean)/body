{
  final String expandedNodeColor="blue";
  final FST.Arc<T> startArc=fst.getFirstArc(new FST.Arc<T>());
  final List<FST.Arc<T>> thisLevelQueue=new ArrayList<FST.Arc<T>>();
  final List<FST.Arc<T>> nextLevelQueue=new ArrayList<FST.Arc<T>>();
  nextLevelQueue.add(startArc);
  final List<Integer> sameLevelStates=new ArrayList<Integer>();
  final BitSet seen=new BitSet();
  seen.set(startArc.target);
  final String stateShape="circle";
  out.write("digraph FST {\n");
  out.write("  rankdir = LR; splines=true; concentrate=true; ordering=out; ranksep=2.5; \n");
  if (!labelStates) {
    out.write("  node [shape=circle, width=.2, height=.2, style=filled]\n");
  }
  emitDotState(out,"initial","point","white","");
  emitDotState(out,Integer.toString(startArc.target),stateShape,fst.isExpandedTarget(startArc) ? expandedNodeColor : null,"");
  out.write("  initial -> " + startArc.target + "\n");
  final T NO_OUTPUT=fst.outputs.getNoOutput();
  int level=0;
  while (!nextLevelQueue.isEmpty()) {
    thisLevelQueue.addAll(nextLevelQueue);
    nextLevelQueue.clear();
    level++;
    out.write("\n  // Transitions and states at level: " + level + "\n");
    while (!thisLevelQueue.isEmpty()) {
      final FST.Arc<T> arc=thisLevelQueue.remove(thisLevelQueue.size() - 1);
      if (fst.targetHasArcs(arc)) {
        final int node=arc.target;
        fst.readFirstTargetArc(arc,arc);
        while (true) {
          if (arc.target >= 0 && !seen.get(arc.target)) {
            final boolean isExpanded=fst.isExpandedTarget(arc);
            emitDotState(out,Integer.toString(arc.target),stateShape,isExpanded ? expandedNodeColor : null,labelStates ? Integer.toString(arc.target) : "");
            seen.set(arc.target);
            nextLevelQueue.add(new FST.Arc<T>().copyFrom(arc));
            sameLevelStates.add(arc.target);
          }
          String outs;
          if (arc.output != NO_OUTPUT) {
            outs="/" + fst.outputs.outputToString(arc.output);
          }
 else {
            outs="";
          }
          final String cl;
          if (arc.label == FST.END_LABEL) {
            cl="~";
          }
 else {
            cl=printableLabel(arc.label);
          }
          out.write("  " + node + " -> "+ arc.target+ " [label=\""+ cl+ outs+ "\"]\n");
          if (arc.isLast()) {
            break;
          }
          fst.readNextArc(arc);
        }
      }
    }
    if (sameRank && sameLevelStates.size() > 1) {
      out.write("  {rank=same; ");
      for (      int state : sameLevelStates) {
        out.write(state + "; ");
      }
      out.write(" }\n");
    }
    sameLevelStates.clear();
  }
  out.write("  -1 [style=filled, color=black, shape=circle, label=\"\"]\n\n");
  out.write("  {rank=sink; -1 }\n");
  out.write("}\n");
  out.flush();
}
