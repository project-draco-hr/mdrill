{
  getCapabilities().testWithFail(data);
  m_ReplaceMissingFilter=new ReplaceMissingValues();
  m_ReplaceMissingFilter.setInputFormat(data);
  m_instances=Filter.useFilter(data,m_ReplaceMissingFilter);
  initMinMax(m_instances);
  m_ClusterCentroids=new Instances(m_instances,m_NumClusters);
  int n=m_instances.numInstances();
  Random r=new Random(getSeed());
  boolean[] selected=new boolean[n];
  double[] minDistance=new double[n];
  for (int i=0; i < n; i++)   minDistance[i]=Double.MAX_VALUE;
  int firstI=r.nextInt(n);
  m_ClusterCentroids.add(m_instances.instance(firstI));
  selected[firstI]=true;
  updateMinDistance(minDistance,selected,m_instances,m_instances.instance(firstI));
  if (m_NumClusters > n)   m_NumClusters=n;
  for (int i=1; i < m_NumClusters; i++) {
    int nextI=farthestAway(minDistance,selected);
    m_ClusterCentroids.add(m_instances.instance(nextI));
    selected[nextI]=true;
    updateMinDistance(minDistance,selected,m_instances,m_instances.instance(nextI));
  }
  m_instances=new Instances(m_instances,0);
}
