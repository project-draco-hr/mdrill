{
  double[] probs=new double[instance.classAttribute().numValues()];
  double[] votes=new double[probs.length];
  for (int i=0; i < m_Classifiers.length; i++) {
    probs=getClassifier(i).distributionForInstance(instance);
    int maxIndex=0;
    for (int j=0; j < probs.length; j++) {
      if (probs[j] > probs[maxIndex])       maxIndex=j;
    }
    for (int j=0; j < probs.length; j++) {
      if (probs[j] == probs[maxIndex])       votes[j]++;
    }
  }
  for (int i=0; i < m_preBuiltClassifiers.size(); i++) {
    probs=m_preBuiltClassifiers.get(i).distributionForInstance(instance);
    int maxIndex=0;
    for (int j=0; j < probs.length; j++) {
      if (probs[j] > probs[maxIndex])       maxIndex=j;
    }
    for (int j=0; j < probs.length; j++) {
      if (probs[j] == probs[maxIndex])       votes[j]++;
    }
  }
  int tmpMajorityIndex=0;
  for (int k=1; k < votes.length; k++) {
    if (votes[k] > votes[tmpMajorityIndex])     tmpMajorityIndex=k;
  }
  Vector<Integer> majorityIndexes=new Vector<Integer>();
  for (int k=0; k < votes.length; k++) {
    if (votes[k] == votes[tmpMajorityIndex])     majorityIndexes.add(k);
  }
  int majorityIndex=majorityIndexes.get(m_Random.nextInt(majorityIndexes.size()));
  for (int k=0; k < probs.length; k++)   probs[k]=0;
  probs[majorityIndex]=1;
  return probs;
}
