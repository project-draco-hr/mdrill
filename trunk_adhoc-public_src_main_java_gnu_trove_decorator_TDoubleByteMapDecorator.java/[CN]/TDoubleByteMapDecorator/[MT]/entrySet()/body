{
  return new AbstractSet<Map.Entry<Double,Byte>>(){
    public int size(){
      return _map.size();
    }
    public boolean isEmpty(){
      return TDoubleByteMapDecorator.this.isEmpty();
    }
    public boolean contains(    Object o){
      if (o instanceof Map.Entry) {
        Object k=((Map.Entry)o).getKey();
        Object v=((Map.Entry)o).getValue();
        return TDoubleByteMapDecorator.this.containsKey(k) && TDoubleByteMapDecorator.this.get(k).equals(v);
      }
 else {
        return false;
      }
    }
    public Iterator<Map.Entry<Double,Byte>> iterator(){
      return new Iterator<Map.Entry<Double,Byte>>(){
        private final TDoubleByteIterator it=_map.iterator();
        public Map.Entry<Double,Byte> next(){
          it.advance();
          double ik=it.key();
          final Double key=(ik == _map.getNoEntryKey()) ? null : wrapKey(ik);
          byte iv=it.value();
          final Byte v=(iv == _map.getNoEntryValue()) ? null : wrapValue(iv);
          return new Map.Entry<Double,Byte>(){
            private Byte val=v;
            public boolean equals(            Object o){
              return o instanceof Map.Entry && ((Map.Entry)o).getKey().equals(key) && ((Map.Entry)o).getValue().equals(val);
            }
            public Double getKey(){
              return key;
            }
            public Byte getValue(){
              return val;
            }
            public int hashCode(){
              return key.hashCode() + val.hashCode();
            }
            public Byte setValue(            Byte value){
              val=value;
              return put(key,value);
            }
          }
;
        }
        public boolean hasNext(){
          return it.hasNext();
        }
        public void remove(){
          it.remove();
        }
      }
;
    }
    public boolean add(    Map.Entry<Double,Byte> o){
      throw new UnsupportedOperationException();
    }
    public boolean remove(    Object o){
      boolean modified=false;
      if (contains(o)) {
        Double key=((Map.Entry<Double,Byte>)o).getKey();
        _map.remove(unwrapKey(key));
        modified=true;
      }
      return modified;
    }
    public boolean addAll(    Collection<? extends Map.Entry<Double,Byte>> c){
      throw new UnsupportedOperationException();
    }
    public void clear(){
      TDoubleByteMapDecorator.this.clear();
    }
  }
;
}
