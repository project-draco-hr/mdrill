{
  try {
    if (m_train != null) {
      if (m_train.classIndex() < 0) {
        stop();
        String errorMessage=statusMessagePrefix() + "ERROR: no class attribute set in test data!";
        if (m_log != null) {
          m_log.statusMessage(errorMessage);
          m_log.logMessage("[Classifier] " + errorMessage);
        }
 else {
          System.err.println("[Classifier] " + errorMessage);
        }
        return;
      }
      if (m_runNum == 1 && m_setNum == 1) {
        m_state=BUILDING_MODEL;
        m_taskInfo.setExecutionStatus(TaskStatusInfo.PROCESSING);
      }
      String msg=statusMessagePrefix() + "Building model for run " + m_runNum+ " fold "+ m_setNum;
      if (m_log != null) {
        m_log.statusMessage(msg);
      }
 else {
        System.err.println(msg);
      }
      weka.classifiers.Classifier classifierCopy=weka.classifiers.AbstractClassifier.makeCopy(m_ClassifierTemplate);
      if (classifierCopy instanceof EnvironmentHandler && m_env != null) {
        ((EnvironmentHandler)classifierCopy).setEnvironment(m_env);
      }
      classifierCopy.buildClassifier(m_train);
      if (m_runNum == m_maxRunNum && m_setNum == m_maxSetNum) {
        m_Classifier=classifierCopy;
        m_trainingSet=new Instances(m_train,0);
      }
      BatchClassifierEvent ce=new BatchClassifierEvent(Classifier.this,classifierCopy,new DataSetEvent(this,m_train),null,m_setNum,m_maxSetNum);
      ce.setGroupIdentifier(m_currentBatchIdentifier.getTime());
      notifyBatchClassifierListeners(ce);
      ce=new BatchClassifierEvent(Classifier.this,classifierCopy,new DataSetEvent(this,m_train),null,m_setNum,m_maxSetNum);
      ce.setGroupIdentifier(m_currentBatchIdentifier.getTime());
      classifierTrainingComplete(ce);
      if (classifierCopy instanceof weka.core.Drawable && m_graphListeners.size() > 0) {
        String grphString=((weka.core.Drawable)classifierCopy).graph();
        int grphType=((weka.core.Drawable)classifierCopy).graphType();
        String grphTitle=classifierCopy.getClass().getName();
        grphTitle=grphTitle.substring(grphTitle.lastIndexOf('.') + 1,grphTitle.length());
        grphTitle="Set " + m_setNum + " ("+ m_train.relationName()+ ") "+ grphTitle;
        GraphEvent ge=new GraphEvent(Classifier.this,grphString,grphTitle,grphType);
        notifyGraphListeners(ge);
      }
      if (m_textListeners.size() > 0) {
        String modelString=classifierCopy.toString();
        String titleString=classifierCopy.getClass().getName();
        titleString=titleString.substring(titleString.lastIndexOf('.') + 1,titleString.length());
        modelString="=== Classifier model ===\n\n" + "Scheme:   " + titleString + "\n"+ "Relation: "+ m_train.relationName()+ ((m_maxSetNum > 1) ? "\nTraining Fold: " + m_setNum : "")+ "\n\n"+ modelString;
        titleString="Model: " + titleString;
        TextEvent nt=new TextEvent(Classifier.this,modelString,titleString);
        notifyTextListeners(nt);
      }
    }
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    if (m_log != null) {
      String titleString="[Classifier] " + statusMessagePrefix();
      titleString+=" run " + m_runNum + " fold "+ m_setNum+ " failed to complete.";
      m_log.logMessage(titleString + " (build classifier). " + ex.getMessage());
      m_log.statusMessage(statusMessagePrefix() + "ERROR (see log for details)");
      ex.printStackTrace();
    }
    m_taskInfo.setExecutionStatus(TaskStatusInfo.FAILED);
    stop();
  }
 finally {
    m_visual.setStatic();
    if (m_log != null) {
      m_log.statusMessage(statusMessagePrefix() + "Finished.");
    }
    m_state=IDLE;
    if (Thread.currentThread().isInterrupted()) {
      m_trainingSet=null;
      if (m_log != null) {
        String titleString="[Classifier] " + statusMessagePrefix();
        m_log.logMessage(titleString + " (" + " run "+ m_runNum+ " fold "+ m_setNum+ ") interrupted!");
        m_log.statusMessage(statusMessagePrefix() + "INTERRUPTED");
      }
    }
  }
}
