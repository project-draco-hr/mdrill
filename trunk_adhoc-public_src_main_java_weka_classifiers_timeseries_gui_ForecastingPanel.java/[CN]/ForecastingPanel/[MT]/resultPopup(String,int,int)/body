{
  final String selectedName=name;
  JPopupMenu resultListMenu=new JPopupMenu();
  JMenuItem showMainBuff=new JMenuItem("View in main window");
  if (selectedName != null) {
    showMainBuff.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        m_history.setSingle(selectedName);
        updateMainTabs(selectedName);
      }
    }
);
  }
 else {
    showMainBuff.setEnabled(false);
  }
  resultListMenu.add(showMainBuff);
  JMenuItem showSepBuff=new JMenuItem("View in separate window");
  if (selectedName != null) {
    showSepBuff.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        openResultFrame(selectedName);
      }
    }
);
  }
 else {
    showSepBuff.setEnabled(false);
  }
  resultListMenu.add(showSepBuff);
  JMenuItem deleteResultBuff=new JMenuItem("Delete result");
  if (selectedName != null && m_runThread == null) {
    deleteResultBuff.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        m_history.removeResult(selectedName);
      }
    }
);
  }
 else {
    deleteResultBuff.setEnabled(false);
  }
  resultListMenu.add(deleteResultBuff);
  resultListMenu.addSeparator();
  List<Object> resultList=null;
  if (selectedName != null) {
    resultList=(List<Object>)m_history.getNamedObject(name);
  }
  WekaForecaster saveForecaster=null;
  Instances saveForecasterStructure=null;
  if (resultList != null) {
    for (    Object o : resultList) {
      if (o instanceof WekaForecaster) {
        saveForecaster=(WekaForecaster)o;
      }
 else       if (o instanceof Instances) {
        saveForecasterStructure=(Instances)o;
      }
    }
  }
  final WekaForecaster toSave=saveForecaster;
  final Instances structureToSave=saveForecasterStructure;
  JMenuItem saveForecasterMenuItem=new JMenuItem("Save forecasting model");
  if (saveForecaster != null) {
    saveForecasterMenuItem.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        saveForecaster(name,toSave,structureToSave);
      }
    }
);
  }
 else {
    saveForecasterMenuItem.setEnabled(false);
  }
  resultListMenu.add(saveForecasterMenuItem);
  JMenuItem loadForecasterMenuItem=new JMenuItem("Load forecasting model");
  resultListMenu.add(loadForecasterMenuItem);
  loadForecasterMenuItem.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      loadForecaster();
    }
  }
);
  if (m_isRunningAsPerspective) {
    JMenuItem copyToKFClipboardMenuItem=new JMenuItem("Copy model to Knowledge Flow clipboard");
    resultListMenu.add(copyToKFClipboardMenuItem);
    copyToKFClipboardMenuItem.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        try {
          KnowledgeFlowApp singleton=KnowledgeFlowApp.getSingleton();
          String encoded=TimeSeriesForecasting.encodeForecasterToBase64(toSave,structureToSave);
          TimeSeriesForecasting component=new TimeSeriesForecasting();
          component.setEncodedForecaster(encoded);
          TimeSeriesForecastingKFPerspective.setClipboard(component);
        }
 catch (        Exception ex) {
          ex.printStackTrace();
        }
      }
    }
);
  }
  JMenuItem reevaluateModelItem=new JMenuItem("Re-evaluate model");
  if (selectedName != null && m_runThread == null) {
    reevaluateModelItem.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        reevaluateForecaster(selectedName,toSave,structureToSave);
      }
    }
);
    reevaluateModelItem.setEnabled((m_advancedConfigPanel.m_trainingCheckBox.isSelected() || m_advancedConfigPanel.m_holdoutCheckBox.isSelected()) && m_instances != null);
  }
 else {
    reevaluateModelItem.setEnabled(false);
  }
  resultListMenu.add(reevaluateModelItem);
  resultListMenu.show(m_history.getList(),x,y);
}
