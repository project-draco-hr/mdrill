{
  TopologyContext systemTopology=systemContext.make(null);
  RefreshConnections refreshConn=makeRefreshConnections(taskids);
  refreshConn.run();
  RefreshActive refreshZkActive=new RefreshActive(active,conf,zkCluster,topologyId,zkActive);
  refreshZkActive.run();
  RunnableCallback heartbeat_fn=new WorkerHeartbeatRunable(conf,workerId,port,topologyId,new CopyOnWriteArraySet<Integer>(taskids),active);
  heartbeat_fn.run();
  LinkedBlockingQueue<TransferData> transferQueue=new LinkedBlockingQueue<TransferData>();
  KryoTupleSerializer serializer=new KryoTupleSerializer(stormConf,systemTopology);
  WorkerTransfer workerTransfer=new WorkerTransfer(serializer,transferQueue);
  List<TaskShutdownDameon> shutdowntasks=new ArrayList<TaskShutdownDameon>();
  if (taskids != null) {
    for (    int taskid : taskids) {
      TaskShutdownDameon t=Task.mk_task(conf,stormConf,systemContext.make(taskid),userContext.make(taskid),topologyId,mqContext,zkClusterstate,zkActive,workerTransfer,workHalt);
      shutdowntasks.add(t);
    }
  }
  AsyncLoopThread refreshconn=new AsyncLoopThread(refreshConn);
  AsyncLoopThread refreshzk=new AsyncLoopThread(refreshZkActive);
  AsyncLoopThread hb=new AsyncLoopThread(heartbeat_fn,false,null,Thread.MAX_PRIORITY,true);
  AsyncLoopThread dr=new AsyncLoopThread(new DrainerRunable(transferQueue,nodeportSocket,taskNodeport));
  AsyncLoopThread[] threads={refreshconn,refreshzk,hb,dr};
  WorkerVirtualPort virtual_port=new WorkerVirtualPort(conf,supervisorId,topologyId,port,mqContext,taskids);
  Shutdownable virtual_port_shutdown=virtual_port.launch();
  return new WorkerShutdown(shutdowntasks,active,nodeportSocket,virtual_port_shutdown,mqContext,threads,zkCluster,zkClusterstate);
}
