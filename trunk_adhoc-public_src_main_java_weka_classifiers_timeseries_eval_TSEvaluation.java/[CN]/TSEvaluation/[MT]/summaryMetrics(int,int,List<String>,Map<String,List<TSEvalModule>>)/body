{
  StringBuffer temp=new StringBuffer();
  temp.append(pad("Target"," ",maxWidthForLeftCol,false));
  for (int i=0; i < m_horizon; i++) {
    String stepS=(i == 0) ? "step-ahead" : "steps-ahead";
    temp.append(pad("" + (i + 1) + "-"+ stepS," ",maxWidth,true));
  }
  temp.append("\n");
  temp.append(pad("=","=",maxWidthForLeftCol + (m_horizon * maxWidth),true));
  temp.append("\n");
  for (int i=0; i < targetFieldNames.size(); i++) {
    temp.append(targetFieldNames.get(i) + "\n");
    if (m_evalModules.get(1) instanceof ErrorModule) {
      String tempKey=m_evalModules.get(1).getEvalName();
      temp.append(pad("  N"," ",maxWidthForLeftCol,false));
      List<TSEvalModule> metricForSteps=metricsToUse.get(tempKey);
      for (      TSEvalModule m : metricForSteps) {
        double[] countsForTargets=((ErrorModule)m).countsForTargets();
        double countForTarget=countsForTargets[i];
        temp.append(pad(Utils.doubleToString(countForTarget,0)," ",maxWidth,true));
      }
      temp.append("\n");
    }
    Set<String> keys=metricsToUse.keySet();
    for (    String key : keys) {
      String metricName="  " + metricsToUse.get(key).get(0).getDescription();
      List<TSEvalModule> metricForSteps=metricsToUse.get(key);
      temp.append(pad(metricName," ",maxWidthForLeftCol,false));
      for (      TSEvalModule m : metricForSteps) {
        double[] metricsForTargets=m.calculateMeasure();
        double metricForTargetI=metricsForTargets[i];
        String result=(Utils.isMissingValue(metricForTargetI)) ? "N/A" : Utils.doubleToString(metricForTargetI,4);
        temp.append(pad(result," ",maxWidth,true));
      }
      temp.append("\n");
    }
  }
  return temp.toString();
}
