{
  if (futureForecast == null) {
    if (forecaster instanceof OverlayForecaster && ((OverlayForecaster)forecaster).isUsingOverlayData()) {
      return "Unable to generate future forecast because there is no " + "future overlay data available.";
    }
 else {
      return "Unable to generate future forecast.";
    }
  }
  boolean timeIsInstanceNum=true;
  double timeStart=1;
  double timeDelta=1;
  String dateFormat=null;
  TSLagMaker lagMaker=null;
  if (forecaster instanceof TSLagUser) {
    lagMaker=((TSLagUser)forecaster).getTSLagMaker();
    if (!lagMaker.isUsingAnArtificialTimeIndex() && lagMaker.getAdjustForTrends()) {
      String timeStampName=lagMaker.getTimeStampField();
      if (insts.attribute(timeStampName).isDate()) {
        dateFormat=insts.attribute(timeStampName).getDateFormat();
      }
      timeStart=insts.instance(0).value(insts.attribute(timeStampName));
      timeDelta=lagMaker.getDeltaTime();
      timeIsInstanceNum=false;
    }
  }
  List<String> targets=AbstractForecaster.stringToList(forecaster.getFieldsToForecast());
  int maxColWidth=1;
  for (  String t : targets) {
    if (t.length() > maxColWidth) {
      maxColWidth=t.length();
    }
  }
  int maxTimeColWidth="inst#".length();
  SimpleDateFormat format=null;
  if (dateFormat != null) {
    maxTimeColWidth="Time".length();
    format=new SimpleDateFormat(dateFormat);
    String formatted=format.format(new Date((long)timeStart));
    if (formatted.length() > maxTimeColWidth) {
      maxTimeColWidth=formatted.length();
    }
  }
 else {
    double maxTime=timeStart + ((insts.numInstances() + m_horizon) * timeDelta);
    maxTimeColWidth=maxWidth(maxTimeColWidth,maxTime);
  }
  for (int i=0; i < insts.numInstances(); i++) {
    Instance current=insts.instance(i);
    for (    String t : targets) {
      if (!current.isMissing(insts.attribute(t))) {
        maxColWidth=maxWidth(maxColWidth,current.value(insts.attribute(t)));
      }
    }
  }
  StringBuffer result=new StringBuffer();
  if (dateFormat != null) {
    result.append(pad("Time"," ",maxTimeColWidth,false)).append("  ");
  }
 else {
    result.append(pad("inst#"," ",maxTimeColWidth,false)).append("  ");
  }
  for (  String t : targets) {
    result.append(pad(t," ",maxColWidth,true)).append(" ");
  }
  result.append("\n");
  int instNum=(int)timeStart;
  long dateTime=(long)timeStart;
  for (int i=0; i < insts.numInstances() + futureForecast.size(); i++) {
    String predMarker=(i < insts.numInstances()) ? "" : "*";
    if (timeIsInstanceNum) {
      result.append(pad("" + instNum + predMarker," ",maxTimeColWidth,false)).append("  ");
      instNum+=(int)timeDelta;
    }
 else     if (dateFormat != null) {
      result.append(pad(format.format(new Date(dateTime)) + predMarker," ",maxTimeColWidth,false)).append("  ");
      if (lagMaker != null) {
        dateTime=(long)lagMaker.advanceSuppliedTimeValue(dateTime);
      }
 else {
        dateTime+=(long)timeDelta;
      }
    }
 else {
      result.append(pad(Utils.doubleToString(timeStart,4) + predMarker," ",maxTimeColWidth,false)).append("  ");
      timeStart+=timeDelta;
    }
    if (i < insts.numInstances()) {
      Instance current=insts.instance(i);
      for (      String t : targets) {
        if (!current.isMissing(insts.attribute(t))) {
          double value=current.value(insts.attribute(t));
          result.append(pad(Utils.doubleToString(value,4)," ",maxColWidth,true)).append(" ");
        }
 else {
          result.append(pad("?"," ",maxColWidth,true)).append(" ");
        }
      }
    }
 else {
      if (futureForecast != null) {
        int step=i - insts.numInstances();
        List<NumericPrediction> preds=futureForecast.get(step);
        for (        NumericPrediction p : preds) {
          result.append(pad(Utils.doubleToString(p.predicted(),4)," ",maxColWidth,true)).append(" ");
        }
      }
    }
    result.append("\n");
  }
  return result.toString();
}
