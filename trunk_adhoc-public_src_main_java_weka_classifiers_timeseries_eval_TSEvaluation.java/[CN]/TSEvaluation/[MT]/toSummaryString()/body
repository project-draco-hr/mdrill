{
  StringBuffer result=new StringBuffer();
  int maxWidth="10-steps-ahead".length() + 1;
  int maxWidthForLeftCol="Target".length();
  List<String> targetFieldNames=null;
  if (m_evaluateTrainingData) {
    Set<String> keys=m_metricsForTrainingData.keySet();
    for (    String key : keys) {
      List<TSEvalModule> evalsForKey=m_metricsForTrainingData.get(key);
      for (      TSEvalModule e : evalsForKey) {
        if (targetFieldNames == null) {
          targetFieldNames=e.getTargetFields();
        }
        double[] metricsForTargets=e.calculateMeasure();
        for (        double m : metricsForTargets) {
          maxWidth=maxWidth(maxWidth,m);
        }
      }
    }
  }
  if (m_evaluateTestData) {
    Set<String> keys=m_metricsForTestData.keySet();
    for (    String key : keys) {
      List<TSEvalModule> evalsForKey=m_metricsForTestData.get(key);
      for (      TSEvalModule e : evalsForKey) {
        if (targetFieldNames == null) {
          targetFieldNames=e.getTargetFields();
        }
        double[] metricsForTargets=e.calculateMeasure();
        for (        double m : metricsForTargets) {
          maxWidth=maxWidth(maxWidth,m);
        }
      }
    }
  }
  for (  String targetName : targetFieldNames) {
    if (targetName.length() > maxWidthForLeftCol) {
      maxWidthForLeftCol=targetName.length();
    }
  }
  for (  TSEvalModule mod : m_evalModules) {
    if (mod.getDescription().length() + 2 > maxWidthForLeftCol) {
      maxWidthForLeftCol=mod.getDescription().length() + 2;
    }
  }
  if (m_missingTimeStampTestSetRows != null && m_missingTimeStampTestSetRows.size() > 0) {
    result.append("\n--------------------------------------------------\n" + "Instances were inserted in the test data for the following\n" + "time-stamps (target values set by interpolation):\n\n");
    for (int i=0; i < m_missingTimeStampTestSetRows.size(); i++) {
      if (i == 0) {
        result.append("              " + m_missingTimeStampTestSetRows.get(i));
      }
 else {
        result.append(", " + m_missingTimeStampTestSetRows.get(i));
      }
    }
    result.append("\n--------------------------------------------------\n");
  }
  if (m_missingTargetListTestSet != null && m_missingTargetListTestSet.size() > 0) {
    Collections.sort(m_missingTargetListTestSet);
    result.append("\n---------------------------------------------------\n" + "The following test instances had missing values\n" + "imputed via interpolation. Check source data as\n"+ "this may affect forecasting performance:\n\n");
    for (int i=0; i < m_missingTargetListTestSet.size(); i++) {
      if (i == 0) {
        result.append("              " + m_missingTargetListTestSet.get(i));
      }
 else       if (!m_missingTargetListTestSet.get(i).equals(m_missingTargetListTestSet.get(i - 1))) {
        result.append("," + m_missingTargetListTestSet.get(i));
      }
    }
    result.append("\n---------------------------------------------------\n");
  }
  if (m_missingTimeStampListTestSet != null && m_missingTimeStampListTestSet.size() > 0) {
    Collections.sort(m_missingTimeStampListTestSet);
    result.append("\n--------------------------------------------------------\n" + "The following test instances had missing time stamps:\n\n");
    for (int i=0; i < m_missingTimeStampListTestSet.size(); i++) {
      if (i == 0) {
        result.append("              " + m_missingTimeStampListTestSet.get(i));
      }
 else {
        result.append("," + m_missingTimeStampListTestSet.get(i));
      }
    }
    result.append("\n-------------------------------------------------------\n");
  }
  if (m_evaluateTrainingData) {
    String temp=summaryMetrics(maxWidthForLeftCol,maxWidth,targetFieldNames,m_metricsForTrainingData);
    result.append("=== Evaluation on training data ===\n");
    result.append(temp).append("\n");
    result.append("Total number of instances: " + m_trainingData.numInstances()).append("\n\n");
  }
  if (m_evaluateTestData) {
    String temp=summaryMetrics(maxWidthForLeftCol,maxWidth,targetFieldNames,m_metricsForTestData);
    result.append("=== Evaluation on test data ===\n");
    result.append(temp).append("\n");
    result.append("Total number of instances: " + m_testData.numInstances()).append("\n\n");
  }
  return result.toString();
}
