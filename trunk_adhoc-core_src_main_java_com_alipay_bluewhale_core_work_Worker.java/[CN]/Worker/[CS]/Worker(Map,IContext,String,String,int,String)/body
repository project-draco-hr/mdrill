{
  LOG.info("Launching worker for " + topology_id + " on "+ supervisor_id+ ":"+ port+ " with id "+ worker_id+ " and conf "+ conf);
  this.conf=conf;
  this.mqContext=mq_context;
  this.topologyId=topology_id;
  this.supervisorId=supervisor_id;
  this.port=port;
  workerport=port;
  this.workerId=worker_id;
  this.active=new AtomicBoolean(true);
  this.zkActive=new AtomicBoolean();
  if (StormConfig.cluster_mode(conf).equals("distributed")) {
    PathUtils.touch(StormConfig.worker_pid_path(conf,worker_id,StormUtils.process_pid()));
  }
  this.zkClusterstate=Cluster.mk_distributed_cluster_state(conf);
  this.zkCluster=Cluster.mk_storm_cluster_state(zkClusterstate);
  shareCluster=this.zkCluster;
  this.stormConf=StormConfig.read_supervisor_storm_conf(conf,topology_id);
  if (this.mqContext == null) {
    int zmqThreads=StormUtils.parseInt(stormConf.get(Config.ZMQ_THREADS));
    int linger=StormUtils.parseInt(stormConf.get(Config.ZMQ_LINGER_MILLIS));
    boolean isLocal=stormConf.get(Config.STORM_CLUSTER_MODE).equals("local");
    this.mqContext=MsgLoader.mk_zmq_context(zmqThreads,linger,isLocal);
  }
  this.nodeportSocket=new ConcurrentHashMap<NodePort,IConnection>();
  this.taskNodeport=new ConcurrentHashMap<Integer,NodePort>();
  this.tasksToComponent=Common.topology_task_info(zkCluster,topologyId);
  this.taskids=WorkCommon.readWorkerTaskids(zkCluster,topologyId,supervisorId,port);
  StormTopology topology=StormConfig.read_supervisor_topology(conf,topology_id);
  this.systemContext=new SystemContextMake(topology,stormConf,topologyId,worker_id,tasksToComponent);
  this.userContext=new UserContextMake(topology,stormConf,topologyId,worker_id,tasksToComponent);
}
