{
  Instances result=insts;
  if (m_adjustForTrends && !m_useArtificialTimeIndex) {
    m_dateBasedPeriodicity=determinePeriodicity(insts,m_timeStampName,m_userHintPeriodicity);
    if (m_skipEntries != null && m_skipEntries.length() > 0) {
      m_dateBasedPeriodicity.setSkipList(m_skipEntries,m_dateFormat);
    }
    if (insts.attribute(m_timeStampName).isDate()) {
      m_derivedPeriodicMakers=new ArrayList<Filter>();
      if (m_am) {
        Add a=new Add();
        a.setAttributeName("AM");
        a.setInputFormat(insts);
        result=Filter.useFilter(result,a);
        m_derivedPeriodicMakers.add(a);
      }
      if (m_dayOfWeek) {
        Add a=new Add();
        a.setAttributeName("DayOfWeek");
        a.setNominalLabels("sun,mon,tue,wed,thu,fri,sat");
        a.setInputFormat(result);
        result=Filter.useFilter(result,a);
        m_derivedPeriodicMakers.add(a);
      }
      if (m_dayOfMonth) {
        Add a=new Add();
        a.setAttributeName("DayOfMonth");
        a.setNominalLabels("1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19," + "20,21,22,23,24,25,26,27,28,29,30,31");
        a.setInputFormat(result);
        result=Filter.useFilter(result,a);
        m_derivedPeriodicMakers.add(a);
      }
      if (m_numDaysInMonth) {
        Add a=new Add();
        a.setAttributeName("NumDaysInMonth");
        a.setInputFormat(insts);
        result=Filter.useFilter(result,a);
        m_derivedPeriodicMakers.add(a);
      }
      if (m_weekend) {
        Add a=new Add();
        a.setAttributeName("Weekend");
        a.setInputFormat(result);
        result=Filter.useFilter(result,a);
        m_derivedPeriodicMakers.add(a);
      }
      if (m_monthOfYear) {
        Add a=new Add();
        a.setAttributeName("Month");
        a.setNominalLabels("jan,feb,mar,apr,may,jun,jul,aug,sep,oct,nov,dec");
        a.setInputFormat(result);
        result=Filter.useFilter(result,a);
        m_derivedPeriodicMakers.add(a);
      }
      if (m_quarter) {
        Add a=new Add();
        a.setAttributeName("Quarter");
        a.setNominalLabels("Q1,Q2,Q3,Q4");
        a.setInputFormat(result);
        result=Filter.useFilter(result,a);
        m_derivedPeriodicMakers.add(a);
      }
      if (m_customPeriodics != null) {
        for (        String name : m_customPeriodics.keySet()) {
          List<CustomPeriodicTest> l=m_customPeriodics.get(name);
          boolean binary=false;
          String labels="";
          Set<String> uniqueLabels=new HashSet<String>();
          for (          CustomPeriodicTest t : l) {
            if (t.getLabel() == null || t.getLabel().length() == 0) {
              binary=true;
              break;
            }
 else {
              if (uniqueLabels.add(t.getLabel())) {
                labels+=t.getLabel() + ",";
              }
            }
          }
          Add a=new Add();
          a.setAttributeName("c_" + name);
          if (!binary) {
            labels=labels.substring(0,labels.lastIndexOf(','));
            a.setAttributeType(new SelectedTag("NOM",Add.TAGS_TYPE));
            a.setNominalLabels(labels);
          }
          a.setInputFormat(result);
          result=Filter.useFilter(result,a);
          m_derivedPeriodicMakers.add(a);
        }
      }
      for (int i=0; i < result.numInstances(); i++) {
        setDerivedPeriodicValues(result.instance(i));
      }
    }
  }
  return result;
}
