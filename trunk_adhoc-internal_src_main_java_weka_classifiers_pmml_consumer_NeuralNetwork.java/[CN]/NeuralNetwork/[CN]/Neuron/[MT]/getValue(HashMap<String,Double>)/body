{
  double z=0;
  double result=Double.NaN;
  double width=(Double.isNaN(m_neuronWidth)) ? m_layer.getWidth() : m_neuronWidth;
  z=m_bias;
  for (int i=0; i < m_connectionIDs.length; i++) {
    Double inVal=incoming.get(m_connectionIDs[i]);
    if (inVal == null) {
      throw new Exception("[Neuron] unable to find connection " + m_connectionIDs[i] + " in input Map!");
    }
    if (m_layer.getActivationFunction() != ActivationFunction.RADIALBASIS) {
      double inV=inVal.doubleValue() * m_weights[i];
      z+=inV;
    }
 else {
      double inV=Math.pow((inVal.doubleValue() - m_weights[i]),2.0);
      z+=inV;
    }
  }
  if (m_layer.getActivationFunction() == ActivationFunction.RADIALBASIS) {
    z/=(2.0 * (width * width));
  }
  double threshold=m_layer.getThreshold();
  double altitude=(Double.isNaN(m_neuronAltitude)) ? m_layer.getAltitude() : m_neuronAltitude;
  double fanIn=m_connectionIDs.length;
  result=m_layer.getActivationFunction().eval(z,threshold,altitude,fanIn);
  return result;
}
