{
  if (dataSet.classIndex() < 0) {
    if (m_logger != null) {
      m_logger.logMessage("[ClassValuePicker] " + statusMessagePrefix() + " No class attribute defined in data set.");
      m_logger.statusMessage(statusMessagePrefix() + "WARNING: No class attribute defined in data set.");
    }
    return dataSet;
  }
  if (dataSet.classAttribute().isNumeric()) {
    if (m_logger != null) {
      m_logger.logMessage("[ClassValuePicker] " + statusMessagePrefix() + " Class attribute must be nominal (ClassValuePicker)");
      m_logger.statusMessage(statusMessagePrefix() + "WARNING: Class attribute must be nominal.");
    }
    return dataSet;
  }
 else {
    if (m_logger != null) {
      m_logger.statusMessage(statusMessagePrefix() + "remove");
    }
  }
  if ((m_classValue == null || m_classValue.length() == 0) && dataSet.numInstances() > 0) {
    if (m_logger != null) {
      m_logger.logMessage("[ClassValuePicker] " + statusMessagePrefix() + " Class value to consider as positive has not been set"+ " (ClassValuePicker)");
      m_logger.statusMessage(statusMessagePrefix() + "WARNING: Class value to consider as positive has not been set.");
    }
    return dataSet;
  }
  if (m_classValue == null) {
    return dataSet;
  }
  Attribute classAtt=dataSet.classAttribute();
  int classValueIndex=-1;
  if (m_classValue.startsWith("/") && m_classValue.length() > 1) {
    String remainder=m_classValue.substring(1);
    remainder=remainder.trim();
    if (remainder.equalsIgnoreCase("first")) {
      classValueIndex=0;
    }
 else     if (remainder.equalsIgnoreCase("last")) {
      classValueIndex=classAtt.numValues() - 1;
    }
 else {
      try {
        classValueIndex=Integer.parseInt(remainder);
        classValueIndex--;
        if (classValueIndex < 0 || classValueIndex > classAtt.numValues() - 1) {
          if (m_logger != null) {
            m_logger.logMessage("[ClassValuePicker] " + statusMessagePrefix() + " Class value index is out of range!"+ " (ClassValuePicker)");
            m_logger.statusMessage(statusMessagePrefix() + "ERROR: Class value index is out of range!.");
          }
        }
      }
 catch (      NumberFormatException n) {
        if (m_logger != null) {
          m_logger.logMessage("[ClassValuePicker] " + statusMessagePrefix() + " Unable to parse supplied class value index as an integer"+ " (ClassValuePicker)");
          m_logger.statusMessage(statusMessagePrefix() + "WARNING: Unable to parse supplied class value index " + "as an integer.");
          return dataSet;
        }
      }
    }
  }
 else {
    classValueIndex=classAtt.indexOfValue(m_classValue.trim());
  }
  if (classValueIndex < 0) {
    return null;
  }
  if (classValueIndex != 0) {
    try {
      SwapValues sv=new SwapValues();
      sv.setAttributeIndex("" + (dataSet.classIndex() + 1));
      sv.setFirstValueIndex("first");
      sv.setSecondValueIndex("" + (classValueIndex + 1));
      sv.setInputFormat(dataSet);
      Instances newDataSet=Filter.useFilter(dataSet,sv);
      newDataSet.setRelationName(dataSet.relationName());
      return newDataSet;
    }
 catch (    Exception ex) {
      if (m_logger != null) {
        m_logger.logMessage("[ClassValuePicker] " + statusMessagePrefix() + " Unable to swap class attibute values.");
        m_logger.statusMessage(statusMessagePrefix() + "ERROR: (See log for details)");
        return null;
      }
    }
  }
  return dataSet;
}
