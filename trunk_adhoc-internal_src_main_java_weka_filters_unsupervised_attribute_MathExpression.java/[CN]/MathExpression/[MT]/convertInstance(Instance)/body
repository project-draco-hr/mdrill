{
  Instance inst=null;
  HashMap symbols=new HashMap(5);
  if (instance instanceof SparseInstance) {
    double[] newVals=new double[instance.numAttributes()];
    int[] newIndices=new int[instance.numAttributes()];
    double[] vals=instance.toDoubleArray();
    double[] valsCopy=instance.toDoubleArray();
    for (int z=0; z < getInputFormat().numAttributes(); z++) {
      if (instance.attribute(z).isNumeric() && z != getInputFormat().classIndex()) {
        symbols.put("A" + (z + 1),new Double(valsCopy[z]));
      }
    }
    int ind=0;
    double value;
    for (int j=0; j < instance.numAttributes(); j++) {
      if (m_SelectCols.isInRange(j)) {
        if (instance.attribute(j).isNumeric() && (!Utils.isMissingValue(vals[j])) && (getInputFormat().classIndex() != j)) {
          symbols.put("A",new Double(vals[j]));
          symbols.put("MAX",new Double(m_attStats[j].numericStats.max));
          symbols.put("MIN",new Double(m_attStats[j].numericStats.min));
          symbols.put("MEAN",new Double(m_attStats[j].numericStats.mean));
          symbols.put("SD",new Double(m_attStats[j].numericStats.stdDev));
          symbols.put("COUNT",new Double(m_attStats[j].numericStats.count));
          symbols.put("SUM",new Double(m_attStats[j].numericStats.sum));
          symbols.put("SUMSQUARED",new Double(m_attStats[j].numericStats.sumSq));
          value=eval(symbols);
          if (Double.isNaN(value) || Double.isInfinite(value)) {
            System.err.println("WARNING:Error in evaluating the expression: missing value set");
            value=Utils.missingValue();
          }
          if (value != 0.0) {
            newVals[ind]=value;
            newIndices[ind]=j;
            ind++;
          }
        }
      }
 else {
        value=vals[j];
        if (value != 0.0) {
          newVals[ind]=value;
          newIndices[ind]=j;
          ind++;
        }
      }
    }
    double[] tempVals=new double[ind];
    int[] tempInd=new int[ind];
    System.arraycopy(newVals,0,tempVals,0,ind);
    System.arraycopy(newIndices,0,tempInd,0,ind);
    inst=new SparseInstance(instance.weight(),tempVals,tempInd,instance.numAttributes());
  }
 else {
    double[] vals=instance.toDoubleArray();
    double[] valsCopy=instance.toDoubleArray();
    for (int z=0; z < getInputFormat().numAttributes(); z++) {
      if (instance.attribute(z).isNumeric() && z != getInputFormat().classIndex()) {
        symbols.put("A" + (z + 1),new Double(valsCopy[z]));
      }
    }
    for (int j=0; j < getInputFormat().numAttributes(); j++) {
      if (m_SelectCols.isInRange(j)) {
        if (instance.attribute(j).isNumeric() && (!Utils.isMissingValue(vals[j])) && (getInputFormat().classIndex() != j)) {
          symbols.put("A",new Double(vals[j]));
          symbols.put("MAX",new Double(m_attStats[j].numericStats.max));
          symbols.put("MIN",new Double(m_attStats[j].numericStats.min));
          symbols.put("MEAN",new Double(m_attStats[j].numericStats.mean));
          symbols.put("SD",new Double(m_attStats[j].numericStats.stdDev));
          symbols.put("COUNT",new Double(m_attStats[j].numericStats.count));
          symbols.put("SUM",new Double(m_attStats[j].numericStats.sum));
          symbols.put("SUMSQUARED",new Double(m_attStats[j].numericStats.sumSq));
          vals[j]=eval(symbols);
          if (Double.isNaN(vals[j]) || Double.isInfinite(vals[j])) {
            System.err.println("WARNING:Error in Evaluation the Expression: missing value set");
            vals[j]=Utils.missingValue();
          }
        }
      }
    }
    inst=new DenseInstance(instance.weight(),vals);
  }
  inst.setDataset(instance.dataset());
  push(inst);
}
