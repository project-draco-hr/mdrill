{
  if (first) {
    m_overlayData=null;
    m_bufferedPrimeData=null;
    statusMessage("configuring forecaster...");
    m_modelLagMaker=m_forecaster.getTSLagMaker();
    if (!m_modelLagMaker.isUsingAnArtificialTimeIndex() && m_modelLagMaker.getAdjustForTrends()) {
      m_timeStampName=m_modelLagMaker.getTimeStampField();
    }
    m_isUsingOverlayData=m_forecaster.isUsingOverlayData();
    if (!m_rebuildForecaster) {
      logMessage("forecaster will be primed " + "incrementally.");
      try {
        m_forecaster.primeForecaster(new Instances(m_header,0));
      }
 catch (      Exception ex) {
        ex.printStackTrace();
        statusError();
        logError("problem during initialization of the " + "priming data.",ex);
        stop();
        return;
      }
    }
 else {
      logMessage("forecaster will be " + "rebuilt/re-estimated on incoming data");
    }
    if (m_isUsingOverlayData) {
      logMessage("forecaster is using " + "overlay data. We expect to see overlay attribute " + "values for the forecasting period.");
      m_overlayData=new Instances(m_header,0);
    }
    if (m_rebuildForecaster) {
      m_bufferedPrimeData=new Instances(m_header,0);
    }
    m_fieldsToForecast=AbstractForecaster.stringToList(m_forecaster.getFieldsToForecast());
    m_outgoingStructure=new Instances(m_header);
    if (m_forecaster.isProducingConfidenceIntervals()) {
      ArrayList<Attribute> atts=new ArrayList<Attribute>();
      for (int i=0; i < m_header.numAttributes(); i++) {
        atts.add((Attribute)m_header.attribute(i).copy());
      }
      for (      String f : m_fieldsToForecast) {
        Attribute lb=new Attribute(f + "_lowerBound");
        Attribute ub=new Attribute(f + "_upperBound");
        atts.add(lb);
        atts.add(ub);
      }
      m_outgoingStructure=new Instances(m_header.relationName() + "_" + "plus_forecast",atts,0);
    }
    InstanceEvent ie=new InstanceEvent(this,m_outgoingStructure);
    notifyInstanceListeners(ie);
  }
 else   if (toProcess == null) {
    if (m_rebuildForecaster && m_bufferedPrimeData.numInstances() > 0) {
      for (int i=0; i < m_bufferedPrimeData.numInstances(); i++) {
        InstanceEvent ie=new InstanceEvent(this,m_bufferedPrimeData.instance(i),InstanceEvent.INSTANCE_AVAILABLE);
        notifyInstanceListeners(ie);
      }
      try {
        statusMessage("rebuilding the forecasting model...");
        logMessage("rebuilding the forecasting model.");
        m_forecaster.buildForecaster(m_bufferedPrimeData);
        statusMessage("priming the forecasting model...");
        logMessage("priming the forecasting model.");
        m_forecaster.primeForecaster(m_bufferedPrimeData);
      }
 catch (      Exception e) {
        e.printStackTrace();
        statusError();
        logError("a problem occurred when rebuilding the forecaster",e);
        stop();
      }
    }
    if (m_rebuildForecaster && !isEmpty(m_saveFileName)) {
      String saveName=m_saveFileName;
      if (m_env == null) {
        m_env=Environment.getSystemWide();
      }
      try {
        saveName=m_env.substitute(saveName);
      }
 catch (      Exception ex) {
      }
      statusMessage("Saving rebuilt forecasting model...");
      logMessage("Saving rebuild forecasting model to \"" + saveName + "\"");
      try {
        OutputStream os=new FileOutputStream(saveName);
        if (saveName.toLowerCase().endsWith(".gz")) {
          os=new GZIPOutputStream(os);
        }
        ObjectOutputStream oos=new ObjectOutputStream(new BufferedOutputStream(os));
        oos.writeObject(m_forecaster);
        oos.writeObject(m_header);
        oos.close();
      }
 catch (      IOException e) {
        statusError();
        logError("a problem occurred when trying to save rebuilt model.",e);
        stop();
      }
    }
  }
 else {
    if (m_isUsingOverlayData) {
      boolean allMissing=true;
      for (      String field : m_fieldsToForecast) {
        if (!toProcess.isMissing(m_header.attribute(field))) {
          allMissing=false;
          break;
        }
      }
      if (allMissing) {
        m_overlayData.add(toProcess);
        statusMessage("buffering overlay instance");
      }
 else {
        if (m_overlayData.numInstances() > 0) {
          m_overlayData.add(toProcess);
          logMessage("encountered a supposed " + "overlay instance with non-missing target values - " + "converting buffered overlay data into " + (m_rebuildForecaster ? "training" : "priming") + " data...");
          statusMessage("flushing overlay buffer.");
          for (int i=0; i < m_overlayData.numInstances(); i++) {
            if (!m_rebuildForecaster) {
              try {
                m_forecaster.primeForecasterIncremental(m_overlayData.instance(i));
                Instance outgoing=convertToOutputFormat(m_overlayData.instance(i));
                InstanceEvent ie=new InstanceEvent(this,outgoing,InstanceEvent.INSTANCE_AVAILABLE);
                notifyInstanceListeners(ie);
              }
 catch (              Exception e) {
                e.printStackTrace();
                statusError();
                logError("problem occurred during priming.",e);
                stop();
                return;
              }
            }
 else {
              m_bufferedPrimeData.add(m_overlayData.instance(i));
            }
          }
          m_overlayData=new Instances(m_header,0);
        }
 else {
          if (!m_rebuildForecaster) {
            try {
              m_forecaster.primeForecasterIncremental(toProcess);
              Instance outgoing=convertToOutputFormat(toProcess);
              InstanceEvent ie=new InstanceEvent(this,outgoing,InstanceEvent.INSTANCE_AVAILABLE);
              notifyInstanceListeners(ie);
            }
 catch (            Exception ex) {
              ex.printStackTrace();
              statusError();
              logError("problem occurred during priming.",ex);
              stop();
              return;
            }
          }
 else {
            m_bufferedPrimeData.add(toProcess);
          }
        }
      }
    }
 else {
      if (!m_rebuildForecaster) {
        try {
          m_forecaster.primeForecasterIncremental(toProcess);
          Instance outgoing=convertToOutputFormat(toProcess);
          InstanceEvent ie=new InstanceEvent(this,outgoing,InstanceEvent.INSTANCE_AVAILABLE);
          notifyInstanceListeners(ie);
        }
 catch (        Exception ex) {
          ex.printStackTrace();
          statusError();
          logError("problem occurred during priming.",ex);
          stop();
          return;
        }
      }
 else {
        m_bufferedPrimeData.add(toProcess);
      }
    }
  }
}
