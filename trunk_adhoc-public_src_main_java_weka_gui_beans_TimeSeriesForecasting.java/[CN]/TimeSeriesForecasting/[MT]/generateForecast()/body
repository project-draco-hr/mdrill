{
  double lastTimeFromPrime=-1;
  if (m_modelLagMaker.getAdjustForTrends() && m_modelLagMaker.getTimeStampField() != null && m_modelLagMaker.getTimeStampField().length() > 0 && !m_modelLagMaker.isUsingAnArtificialTimeIndex()) {
    try {
      lastTimeFromPrime=m_modelLagMaker.getCurrentTimeStampValue();
    }
 catch (    Exception ex) {
      statusError();
      logError("a problem occurred while establishing the current " + "time stamp value",ex);
      stop();
      return;
    }
  }
 else   if (m_modelLagMaker.getAdjustForTrends() && m_modelLagMaker.isUsingAnArtificialTimeIndex()) {
    try {
      String artOff=m_artificialTimeStartOffset;
      if (m_env != null) {
        artOff=m_env.substitute(artOff);
      }
      double artificialStartValue=m_modelLagMaker.getArtificialTimeStartValue();
      artificialStartValue+=Integer.parseInt(artOff);
      m_modelLagMaker.setArtificialTimeStartValue(artificialStartValue);
    }
 catch (    Exception ex) {
      ex.printStackTrace();
      statusError();
      logError("unable to set the value of the artificial time stamp.",ex);
      stop();
      return;
    }
  }
  boolean overlay=(m_overlayData != null && m_overlayData.numInstances() > 0 && m_isUsingOverlayData);
  String numS=m_numberOfStepsToForecast;
  if (m_env != null) {
    try {
      numS=m_env.substitute(numS);
    }
 catch (    Exception e) {
    }
  }
  int numSteps=(overlay) ? m_overlayData.numInstances() : Integer.parseInt(numS);
  List<List<NumericPrediction>> forecast=null;
  try {
    if (overlay) {
      forecast=m_forecaster.forecast(numSteps,m_overlayData);
    }
 else {
      forecast=m_forecaster.forecast(numSteps);
    }
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    statusError();
    logError("unable to generate a forecast.",ex);
    stop();
    return;
  }
  double time=lastTimeFromPrime;
  int timeStampIndex=-1;
  if (m_timeStampName.length() > 0) {
    Attribute timeStampAtt=m_outgoingStructure.attribute(m_timeStampName);
    if (timeStampAtt == null) {
      statusError();
      logError("couldn't find time stamp: " + m_timeStampName + "in the input data",null);
      stop();
      return;
    }
    timeStampIndex=timeStampAtt.index();
  }
  statusMessage("Generating forecast...");
  logMessage("Generating forecast.");
  for (int i=0; i < numSteps; i++) {
    Instance outputI=null;
    double[] outVals=new double[m_outgoingStructure.numAttributes()];
    for (int j=0; j < outVals.length; j++) {
      if (overlay) {
        outVals[j]=m_overlayData.instance(i).value(j);
      }
 else {
        outVals[j]=Utils.missingValue();
      }
    }
    List<NumericPrediction> predsForStep=forecast.get(i);
    if (timeStampIndex != -1) {
      time=m_modelLagMaker.advanceSuppliedTimeValue(time);
      outVals[timeStampIndex]=time;
    }
    for (int j=0; j < m_fieldsToForecast.size(); j++) {
      String target=m_fieldsToForecast.get(j);
      int targetI=m_outgoingStructure.attribute(target).index();
      NumericPrediction predForTargetAtStep=predsForStep.get(j);
      double y=predForTargetAtStep.predicted();
      double yHigh=y;
      double yLow=y;
      double[][] conf=predForTargetAtStep.predictionIntervals();
      if (!Utils.isMissingValue(y)) {
        outVals[targetI]=y;
      }
      if (conf.length > 0) {
        yLow=conf[0][0];
        yHigh=conf[0][1];
        int indexOfLow=m_outgoingStructure.attribute(target + "_lowerBound").index();
        int indexOfHigh=m_outgoingStructure.attribute(target + "_upperBound").index();
        outVals[indexOfLow]=yLow;
        outVals[indexOfHigh]=yHigh;
      }
    }
    outputI=new DenseInstance(1.0,outVals);
    outputI.setDataset(m_outgoingStructure);
    InstanceEvent ie=new InstanceEvent(this,outputI,InstanceEvent.INSTANCE_AVAILABLE);
    if (i == (numSteps - 1)) {
      ie.setStatus(InstanceEvent.BATCH_FINISHED);
    }
    notifyInstanceListeners(ie);
  }
  statusMessage("Finished.");
  logMessage("Finished. Generated " + numSteps + " forecasted values.");
}
