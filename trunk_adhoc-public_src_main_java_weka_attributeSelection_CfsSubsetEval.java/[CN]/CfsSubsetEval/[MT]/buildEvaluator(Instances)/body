{
  getCapabilities().testWithFail(data);
  m_trainInstances=new Instances(data);
  m_trainInstances.deleteWithMissingClass();
  m_classIndex=m_trainInstances.classIndex();
  m_numAttribs=m_trainInstances.numAttributes();
  m_numInstances=m_trainInstances.numInstances();
  m_isNumeric=m_trainInstances.attribute(m_classIndex).isNumeric();
  if (!m_isNumeric) {
    m_disTransform=new Discretize();
    m_disTransform.setUseBetterEncoding(true);
    m_disTransform.setInputFormat(m_trainInstances);
    m_trainInstances=Filter.useFilter(m_trainInstances,m_disTransform);
  }
  m_std_devs=new double[m_numAttribs];
  m_corr_matrix=new float[m_numAttribs][];
  for (int i=0; i < m_numAttribs; i++) {
    m_corr_matrix[i]=new float[i + 1];
  }
  for (int i=0; i < m_corr_matrix.length; i++) {
    m_corr_matrix[i][i]=1.0f;
    m_std_devs[i]=1.0;
  }
  for (int i=0; i < m_numAttribs; i++) {
    for (int j=0; j < m_corr_matrix[i].length - 1; j++) {
      m_corr_matrix[i][j]=-999;
    }
  }
}
