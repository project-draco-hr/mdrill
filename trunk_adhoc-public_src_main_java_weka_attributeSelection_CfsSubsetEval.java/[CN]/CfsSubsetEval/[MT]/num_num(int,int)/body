{
  int i;
  Instance inst;
  double r, diff1, diff2, num=0.0, sx=0.0, sy=0.0;
  double mx=m_trainInstances.meanOrMode(m_trainInstances.attribute(att1));
  double my=m_trainInstances.meanOrMode(m_trainInstances.attribute(att2));
  for (i=0; i < m_numInstances; i++) {
    inst=m_trainInstances.instance(i);
    diff1=(inst.isMissing(att1)) ? 0.0 : (inst.value(att1) - mx);
    diff2=(inst.isMissing(att2)) ? 0.0 : (inst.value(att2) - my);
    num+=(diff1 * diff2);
    sx+=(diff1 * diff1);
    sy+=(diff2 * diff2);
  }
  if (sx != 0.0) {
    if (m_std_devs[att1] == 1.0) {
      m_std_devs[att1]=Math.sqrt((sx / m_numInstances));
    }
  }
  if (sy != 0.0) {
    if (m_std_devs[att2] == 1.0) {
      m_std_devs[att2]=Math.sqrt((sy / m_numInstances));
    }
  }
  if ((sx * sy) > 0.0) {
    r=(num / (Math.sqrt(sx * sy)));
    return ((r < 0.0) ? -r : r);
  }
 else {
    if (att1 != m_classIndex && att2 != m_classIndex) {
      return 1.0;
    }
 else {
      return 0.0;
    }
  }
}
