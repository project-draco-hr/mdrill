{
  double[] confidences, supports;
  int[] indices;
  FastVector[] sortedRuleSet;
  double necSupport=0;
  instances=new Instances(instances);
  if (m_removeMissingCols) {
    instances=removeMissingColumns(instances);
  }
  if (m_car && m_metricType != CONFIDENCE)   throw new Exception("For CAR-Mining metric type has to be confidence!");
  if (m_car) {
    if (m_classIndex == -1) {
      instances.setClassIndex(instances.numAttributes() - 1);
    }
 else     if (m_classIndex <= instances.numAttributes() && m_classIndex > 0) {
      instances.setClassIndex(m_classIndex - 1);
    }
 else {
      throw new Exception("Invalid class index.");
    }
  }
  getCapabilities().testWithFail(instances);
  m_cycles=0;
  double lowerBoundMinSupportToUse=(m_lowerBoundMinSupport * (double)instances.numInstances() < 1.0) ? 1.0 / (double)instances.numInstances() : m_lowerBoundMinSupport;
  if (m_car) {
    m_instances=LabeledItemSet.divide(instances,false);
    m_onlyClass=LabeledItemSet.divide(instances,true);
  }
 else   m_instances=instances;
  if (m_car && m_numRules == Integer.MAX_VALUE) {
    m_minSupport=lowerBoundMinSupportToUse;
  }
 else {
    m_minSupport=1.0 - m_delta;
    m_minSupport=(m_minSupport < lowerBoundMinSupportToUse) ? lowerBoundMinSupportToUse : m_minSupport;
  }
  do {
    m_Ls=new FastVector();
    m_hashtables=new FastVector();
    m_allTheRules=new FastVector[6];
    m_allTheRules[0]=new FastVector();
    m_allTheRules[1]=new FastVector();
    m_allTheRules[2]=new FastVector();
    m_allTheRules[3]=new FastVector();
    m_allTheRules[4]=new FastVector();
    m_allTheRules[5]=new FastVector();
    sortedRuleSet=new FastVector[6];
    sortedRuleSet[0]=new FastVector();
    sortedRuleSet[1]=new FastVector();
    sortedRuleSet[2]=new FastVector();
    sortedRuleSet[3]=new FastVector();
    sortedRuleSet[4]=new FastVector();
    sortedRuleSet[5]=new FastVector();
    if (!m_car) {
      findLargeItemSets();
      if (m_significanceLevel != -1 || m_metricType != CONFIDENCE)       findRulesBruteForce();
 else       findRulesQuickly();
    }
 else {
      findLargeCarItemSets();
      findCarRulesQuickly();
    }
    if (m_upperBoundMinSupport < 1.0) {
      pruneRulesForUpperBoundSupport();
    }
    int j=m_allTheRules[2].size() - 1;
    supports=new double[m_allTheRules[2].size()];
    for (int i=0; i < (j + 1); i++)     supports[j - i]=((double)((ItemSet)m_allTheRules[1].elementAt(j - i)).support()) * (-1);
    indices=Utils.stableSort(supports);
    for (int i=0; i < (j + 1); i++) {
      sortedRuleSet[0].addElement(m_allTheRules[0].elementAt(indices[j - i]));
      sortedRuleSet[1].addElement(m_allTheRules[1].elementAt(indices[j - i]));
      sortedRuleSet[2].addElement(m_allTheRules[2].elementAt(indices[j - i]));
      if (!m_car) {
        sortedRuleSet[3].addElement(m_allTheRules[3].elementAt(indices[j - i]));
        sortedRuleSet[4].addElement(m_allTheRules[4].elementAt(indices[j - i]));
        sortedRuleSet[5].addElement(m_allTheRules[5].elementAt(indices[j - i]));
      }
    }
    m_allTheRules[0].removeAllElements();
    m_allTheRules[1].removeAllElements();
    m_allTheRules[2].removeAllElements();
    m_allTheRules[3].removeAllElements();
    m_allTheRules[4].removeAllElements();
    m_allTheRules[5].removeAllElements();
    confidences=new double[sortedRuleSet[2].size()];
    int sortType=2 + m_metricType;
    for (int i=0; i < sortedRuleSet[2].size(); i++)     confidences[i]=((Double)sortedRuleSet[sortType].elementAt(i)).doubleValue();
    indices=Utils.stableSort(confidences);
    for (int i=sortedRuleSet[0].size() - 1; (i >= (sortedRuleSet[0].size() - m_numRules)) && (i >= 0); i--) {
      m_allTheRules[0].addElement(sortedRuleSet[0].elementAt(indices[i]));
      m_allTheRules[1].addElement(sortedRuleSet[1].elementAt(indices[i]));
      m_allTheRules[2].addElement(sortedRuleSet[2].elementAt(indices[i]));
      if (!m_car) {
        m_allTheRules[3].addElement(sortedRuleSet[3].elementAt(indices[i]));
        m_allTheRules[4].addElement(sortedRuleSet[4].elementAt(indices[i]));
        m_allTheRules[5].addElement(sortedRuleSet[5].elementAt(indices[i]));
      }
    }
    if (m_verbose) {
      if (m_Ls.size() > 1) {
        System.out.println(toString());
      }
    }
    if (m_minSupport == lowerBoundMinSupportToUse || m_minSupport - m_delta > lowerBoundMinSupportToUse)     m_minSupport-=m_delta;
 else     m_minSupport=lowerBoundMinSupportToUse;
    necSupport=Math.rint(m_minSupport * (double)m_instances.numInstances());
    m_cycles++;
  }
 while ((m_allTheRules[0].size() < m_numRules) && (Utils.grOrEq(m_minSupport,lowerBoundMinSupportToUse)) && (necSupport >= 1));
  m_minSupport+=m_delta;
}
