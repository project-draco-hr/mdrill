{
  SolrParams localParams=getLocalParams();
  SolrParams params=getParams();
  SolrParams solrParams=localParams == null ? params : new DefaultSolrParams(localParams,params);
  queryFields=U.parseFieldBoosts(solrParams.getParams(DMP.QF));
  if (0 == queryFields.size()) {
    queryFields.put(req.getSchema().getDefaultSearchFieldName(),1.0f);
  }
  Map<String,Float> phraseFields=U.parseFieldBoosts(solrParams.getParams(DMP.PF));
  Map<String,Float> phraseFields2=U.parseFieldBoosts(solrParams.getParams("pf2"));
  Map<String,Float> phraseFields3=U.parseFieldBoosts(solrParams.getParams("pf3"));
  float tiebreaker=solrParams.getFloat(DMP.TIE,0.0f);
  int pslop=solrParams.getInt(DMP.PS,0);
  int qslop=solrParams.getInt(DMP.QS,0);
  boolean stopwords=solrParams.getBool("stopwords",true);
  BooleanQuery query=new BooleanQuery(true);
  parsedUserQuery=null;
  String userQuery=getString();
  altUserQuery=null;
  if (userQuery == null || userQuery.length() < 1) {
    String altQ=solrParams.get(DMP.ALTQ);
    if (altQ != null) {
      altQParser=subQuery(altQ,null);
      altUserQuery=altQParser.getQuery();
      query.add(altUserQuery,BooleanClause.Occur.MUST);
    }
 else {
      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"missing query string");
    }
  }
 else {
    boolean lowercaseOperators=solrParams.getBool("lowercaseOperators",true);
    String mainUserQuery=userQuery;
    ExtendedSolrQueryParser up=new ExtendedSolrQueryParser(this,IMPOSSIBLE_FIELD_NAME);
    up.addAlias(IMPOSSIBLE_FIELD_NAME,tiebreaker,queryFields);
    up.setPhraseSlop(qslop);
    up.setAllowLeadingWildcard(true);
    List<Clause> clauses=null;
    boolean specialSyntax=false;
    int numPluses=0;
    int numMinuses=0;
    int numOptional=0;
    int numAND=0;
    int numOR=0;
    int numNOT=0;
    boolean sawLowerAnd=false;
    boolean sawLowerOr=false;
    clauses=splitIntoClauses(userQuery,false);
    for (    Clause clause : clauses) {
      if (!clause.isPhrase && clause.hasSpecialSyntax) {
        specialSyntax=true;
      }
      if (clause.must == '+')       numPluses++;
      if (clause.must == '-')       numMinuses++;
      if (clause.isBareWord()) {
        String s=clause.val;
        if ("AND".equals(s)) {
          numAND++;
        }
 else         if ("OR".equals(s)) {
          numOR++;
        }
 else         if ("NOT".equals(s)) {
          numNOT++;
        }
 else         if (lowercaseOperators) {
          if ("and".equals(s)) {
            numAND++;
            sawLowerAnd=true;
          }
 else           if ("or".equals(s)) {
            numOR++;
            sawLowerOr=true;
          }
        }
      }
    }
    numOptional=clauses.size() - (numPluses + numMinuses);
    if (sawLowerAnd || sawLowerOr) {
      StringBuilder sb=new StringBuilder();
      for (int i=0; i < clauses.size(); i++) {
        Clause clause=clauses.get(i);
        String s=clause.raw;
        if (i > 0 && i + 1 < clauses.size()) {
          if ("AND".equalsIgnoreCase(s)) {
            s="AND";
          }
 else           if ("OR".equalsIgnoreCase(s)) {
            s="OR";
          }
        }
        sb.append(s);
        sb.append(' ');
      }
      mainUserQuery=sb.toString();
    }
    boolean doMinMatched=(numOR + numNOT + numPluses+ numMinuses) == 0;
    try {
      up.setRemoveStopFilter(!stopwords);
      up.exceptions=true;
      parsedUserQuery=up.parse(mainUserQuery);
      if (stopwords && isEmpty(parsedUserQuery)) {
        up.setRemoveStopFilter(true);
        parsedUserQuery=up.parse(mainUserQuery);
      }
    }
 catch (    Exception e) {
      up.exceptions=false;
    }
    if (parsedUserQuery != null && doMinMatched) {
      String minShouldMatch=solrParams.get(DMP.MM,"100%");
      if (parsedUserQuery instanceof BooleanQuery) {
        U.setMinShouldMatch((BooleanQuery)parsedUserQuery,minShouldMatch);
      }
    }
    if (parsedUserQuery == null) {
      StringBuilder sb=new StringBuilder();
      for (      Clause clause : clauses) {
        boolean doQuote=clause.isPhrase;
        String s=clause.val;
        if (!clause.isPhrase && ("OR".equals(s) || "AND".equals(s) || "NOT".equals(s))) {
          doQuote=true;
        }
        if (clause.must != 0) {
          sb.append(clause.must);
        }
        if (clause.field != null) {
          sb.append(clause.field);
          sb.append(':');
        }
        if (doQuote) {
          sb.append('"');
        }
        sb.append(clause.val);
        if (doQuote) {
          sb.append('"');
        }
        sb.append(' ');
      }
      String escapedUserQuery=sb.toString();
      parsedUserQuery=up.parse(escapedUserQuery);
      String minShouldMatch=solrParams.get(DMP.MM,"100%");
      if (parsedUserQuery instanceof BooleanQuery) {
        BooleanQuery t=new BooleanQuery();
        U.flattenBooleanQuery(t,(BooleanQuery)parsedUserQuery);
        U.setMinShouldMatch(t,minShouldMatch);
        parsedUserQuery=t;
      }
    }
    query.add(parsedUserQuery,BooleanClause.Occur.MUST);
    if (phraseFields.size() > 0 || phraseFields2.size() > 0 || phraseFields3.size() > 0) {
      List<Clause> normalClauses=new ArrayList<Clause>(clauses.size());
      for (      Clause clause : clauses) {
        if (clause.field != null || clause.isPhrase)         continue;
        if (clause.isBareWord()) {
          String s=clause.val.toString();
          if ("OR".equals(s) || "AND".equals(s) || "NOT".equals(s)|| "TO".equals(s))           continue;
        }
        normalClauses.add(clause);
      }
      addShingledPhraseQueries(query,normalClauses,phraseFields,0,tiebreaker,pslop);
      addShingledPhraseQueries(query,normalClauses,phraseFields2,2,tiebreaker,pslop);
      addShingledPhraseQueries(query,normalClauses,phraseFields3,3,tiebreaker,pslop);
    }
  }
  boostParams=solrParams.getParams(DMP.BQ);
  boostQueries=null;
  if (boostParams != null && boostParams.length > 0) {
    boostQueries=new ArrayList<Query>();
    for (    String qs : boostParams) {
      if (qs.trim().length() == 0)       continue;
      Query q=subQuery(qs,null).getQuery();
      boostQueries.add(q);
    }
  }
  if (null != boostQueries) {
    for (    Query f : boostQueries) {
      query.add(f,BooleanClause.Occur.SHOULD);
    }
  }
  String[] boostFuncs=solrParams.getParams(DMP.BF);
  if (null != boostFuncs && 0 != boostFuncs.length) {
    for (    String boostFunc : boostFuncs) {
      if (null == boostFunc || "".equals(boostFunc))       continue;
      Map<String,Float> ff=SolrPluginUtils.parseFieldBoosts(boostFunc);
      for (      String f : ff.keySet()) {
        Query fq=subQuery(f,FunctionQParserPlugin.NAME).getQuery();
        Float b=ff.get(f);
        if (null != b) {
          fq.setBoost(b);
        }
        query.add(fq,BooleanClause.Occur.SHOULD);
      }
    }
  }
  Query topQuery=query;
  multBoosts=solrParams.getParams("boost");
  if (multBoosts != null && multBoosts.length > 0) {
    List<ValueSource> boosts=new ArrayList<ValueSource>();
    for (    String boostStr : multBoosts) {
      if (boostStr == null || boostStr.length() == 0)       continue;
      Query boost=subQuery(boostStr,FunctionQParserPlugin.NAME).getQuery();
      ValueSource vs;
      if (boost instanceof FunctionQuery) {
        vs=((FunctionQuery)boost).getValueSource();
      }
 else {
        vs=new QueryValueSource(boost,1.0f);
      }
      boosts.add(vs);
    }
    if (boosts.size() > 1) {
      ValueSource prod=new ProductFloatFunction(boosts.toArray(new ValueSource[boosts.size()]));
      topQuery=new BoostedQuery(query,prod);
    }
 else     if (boosts.size() == 1) {
      topQuery=new BoostedQuery(query,boosts.get(0));
    }
  }
  return topQuery;
}
