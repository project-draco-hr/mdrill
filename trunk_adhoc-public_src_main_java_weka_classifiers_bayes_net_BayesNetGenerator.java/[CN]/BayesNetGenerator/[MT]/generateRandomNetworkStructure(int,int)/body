{
  if (nArcs < nNodes - 1) {
    throw new Exception("Number of arcs should be at least (nNodes - 1) = " + (nNodes - 1) + " instead of "+ nArcs);
  }
  if (nArcs > nNodes * (nNodes - 1) / 2) {
    throw new Exception("Number of arcs should be at most nNodes * (nNodes - 1) / 2 = " + (nNodes * (nNodes - 1) / 2) + " instead of "+ nArcs);
  }
  if (nArcs == 0) {
    return;
  }
  generateTree(nNodes);
  for (int iArc=nNodes - 1; iArc < nArcs; iArc++) {
    boolean bDone=false;
    while (!bDone) {
      int nNode1=random.nextInt(nNodes);
      int nNode2=random.nextInt(nNodes);
      if (nNode1 == nNode2) {
        nNode2=(nNode1 + 1) % nNodes;
      }
      if (nNode2 < nNode1) {
        int h=nNode1;
        nNode1=nNode2;
        nNode2=h;
      }
      if (!m_ParentSets[nNode2].contains(nNode1)) {
        m_ParentSets[nNode2].addParent(nNode1,m_Instances);
        bDone=true;
      }
    }
  }
}
