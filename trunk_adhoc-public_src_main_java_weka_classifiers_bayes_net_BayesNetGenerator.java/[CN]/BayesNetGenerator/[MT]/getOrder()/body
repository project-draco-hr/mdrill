{
  int nNrOfAtts=m_Instances.numAttributes();
  int[] order=new int[nNrOfAtts];
  boolean[] bDone=new boolean[nNrOfAtts];
  for (int iAtt=0; iAtt < nNrOfAtts; iAtt++) {
    int iAtt2=0;
    boolean allParentsDone=false;
    while (!allParentsDone && iAtt2 < nNrOfAtts) {
      if (!bDone[iAtt2]) {
        allParentsDone=true;
        int iParent=0;
        while (allParentsDone && iParent < m_ParentSets[iAtt2].getNrOfParents()) {
          allParentsDone=bDone[m_ParentSets[iAtt2].getParent(iParent++)];
        }
        if (allParentsDone && iParent == m_ParentSets[iAtt2].getNrOfParents()) {
          order[iAtt]=iAtt2;
          bDone[iAtt2]=true;
        }
 else {
          iAtt2++;
        }
      }
 else {
        iAtt2++;
      }
    }
    if (!allParentsDone && iAtt2 == nNrOfAtts) {
      throw new Exception("There appears to be a cycle in the graph");
    }
  }
  return order;
}
