{
  SolrParams p=rb.req.getParams();
  IndexSchema schema=searcher.getSchema();
  MoreLikeThisHandler.MoreLikeThisHelper mltHelper=new MoreLikeThisHandler.MoreLikeThisHelper(p,searcher);
  NamedList<DocList> mlt=new SimpleOrderedMap<DocList>();
  DocIterator iterator=docs.iterator();
  SimpleOrderedMap<Object> dbg=null;
  if (rb.isDebug()) {
    dbg=new SimpleOrderedMap<Object>();
  }
  while (iterator.hasNext()) {
    int id=iterator.nextDoc();
    int rows=p.getInt(MoreLikeThisParams.DOC_COUNT,5);
    DocListAndSet sim=mltHelper.getMoreLikeThis(id,0,rows,null,null,flags);
    String name=schema.printableUniqueKey(searcher.doc(id));
    mlt.add(name,sim.docList);
    if (dbg != null) {
      SimpleOrderedMap<Object> docDbg=new SimpleOrderedMap<Object>();
      docDbg.add("rawMLTQuery",mltHelper.getRawMLTQuery().toString());
      docDbg.add("boostedMLTQuery",mltHelper.getBoostedMLTQuery().toString());
      docDbg.add("realMLTQuery",mltHelper.getRealMLTQuery().toString());
      SimpleOrderedMap<Object> explains=new SimpleOrderedMap<Object>();
      DocIterator mltIte=sim.docList.iterator();
      while (mltIte.hasNext()) {
        int mltid=mltIte.nextDoc();
        String key=schema.printableUniqueKey(searcher.doc(mltid));
        explains.add(key,searcher.explain(mltHelper.getRealMLTQuery(),mltid));
      }
      docDbg.add("explain",explains);
      dbg.add(name,docDbg);
    }
  }
  if (dbg != null) {
    rb.addDebugInfo("moreLikeThis",dbg);
  }
  return mlt;
}
