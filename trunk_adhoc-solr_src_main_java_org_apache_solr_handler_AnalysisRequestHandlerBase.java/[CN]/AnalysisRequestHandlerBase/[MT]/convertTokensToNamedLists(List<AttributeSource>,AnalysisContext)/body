{
  final List<NamedList> tokensNamedLists=new ArrayList<NamedList>();
  final FieldType fieldType=context.getFieldType();
  final AttributeSource[] tokens=tokenList.toArray(new AttributeSource[tokenList.size()]);
  ArrayUtil.mergeSort(tokens,new Comparator<AttributeSource>(){
    public int compare(    AttributeSource a,    AttributeSource b){
      return arrayCompare(a.getAttribute(TokenTrackingAttribute.class).getPositions(),b.getAttribute(TokenTrackingAttribute.class).getPositions());
    }
    private int arrayCompare(    int[] a,    int[] b){
      int p=0;
      final int stop=Math.min(a.length,b.length);
      while (p < stop) {
        int diff=a[p] - b[p];
        if (diff != 0)         return diff;
        p++;
      }
      return a.length - b.length;
    }
  }
);
  for (int i=0; i < tokens.length; i++) {
    AttributeSource token=tokens[i];
    final NamedList<Object> tokenNamedList=new SimpleOrderedMap<Object>();
    final String rawText=token.addAttribute(CharTermAttribute.class).toString();
    String text=fieldType.indexedToReadable(rawText);
    tokenNamedList.add("text",text);
    if (!text.equals(rawText)) {
      tokenNamedList.add("raw_text",rawText);
    }
    if (context.getTermsToMatch().contains(rawText)) {
      tokenNamedList.add("match",true);
    }
    token.reflectWith(new AttributeReflector(){
      public void reflect(      Class<? extends Attribute> attClass,      String key,      Object value){
        if (CharTermAttribute.class.isAssignableFrom(attClass))         return;
        if (PositionIncrementAttribute.class.isAssignableFrom(attClass))         return;
        String k=attClass.getName() + '#' + key;
        if (ATTRIBUTE_MAPPING.containsKey(k)) {
          k=ATTRIBUTE_MAPPING.get(k);
        }
        if (value instanceof Payload) {
          Payload p=(Payload)value;
          if (null != p) {
            BigInteger bi=new BigInteger(p.getData());
            String ret=bi.toString(16);
            if (ret.length() % 2 != 0) {
              ret="0" + ret;
            }
            value=ret;
          }
 else {
            value=null;
          }
        }
        tokenNamedList.add(k,value);
      }
    }
);
    tokensNamedLists.add(tokenNamedList);
  }
  return tokensNamedLists;
}
