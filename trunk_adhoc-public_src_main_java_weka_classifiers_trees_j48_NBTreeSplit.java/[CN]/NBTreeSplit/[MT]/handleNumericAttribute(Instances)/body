{
  m_c45S=new C45Split(m_attIndex,2,m_sumOfWeights,true);
  m_c45S.buildClassifier(trainInstances);
  if (m_c45S.numSubsets() == 0) {
    return;
  }
  m_errors=0;
  Instances[] trainingSets=new Instances[m_complexityIndex];
  trainingSets[0]=new Instances(trainInstances,0);
  trainingSets[1]=new Instances(trainInstances,0);
  int subset=-1;
  for (int i=0; i < trainInstances.numInstances(); i++) {
    Instance instance=trainInstances.instance(i);
    subset=m_c45S.whichSubset(instance);
    if (subset != -1) {
      trainingSets[subset].add((Instance)instance.copy());
    }
 else {
      double[] weights=m_c45S.weights(instance);
      for (int j=0; j < m_complexityIndex; j++) {
        Instance temp=(Instance)instance.copy();
        if (weights.length == m_complexityIndex) {
          temp.setWeight(temp.weight() * weights[j]);
        }
 else {
          temp.setWeight(temp.weight() / m_complexityIndex);
        }
        trainingSets[j].add(temp);
      }
    }
  }
  Random r=new Random(1);
  int minNumCount=0;
  for (int i=0; i < m_complexityIndex; i++) {
    if (trainingSets[i].numInstances() > 5) {
      minNumCount++;
      Discretize disc=new Discretize();
      disc.setInputFormat(trainingSets[i]);
      trainingSets[i]=Filter.useFilter(trainingSets[i],disc);
      trainingSets[i].randomize(r);
      trainingSets[i].stratify(5);
      NaiveBayesUpdateable fullModel=new NaiveBayesUpdateable();
      fullModel.buildClassifier(trainingSets[i]);
      m_errors+=NBTreeNoSplit.crossValidate(fullModel,trainingSets[i],r);
    }
 else {
      for (int j=0; j < trainingSets[i].numInstances(); j++) {
        m_errors+=trainingSets[i].instance(j).weight();
      }
    }
  }
  if (minNumCount > 1) {
    m_numSubsets=m_complexityIndex;
  }
}
