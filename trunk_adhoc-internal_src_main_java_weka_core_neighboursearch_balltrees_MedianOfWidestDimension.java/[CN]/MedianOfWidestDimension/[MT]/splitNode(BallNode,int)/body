{
  correctlyInitialized();
  double[][] ranges=m_DistanceFunction.initializeRanges(m_Instlist,node.m_Start,node.m_End);
  int splitAttrib=widestDim(ranges,m_DistanceFunction.getRanges());
  int medianIdxIdx=node.m_Start + (node.m_End - node.m_Start) / 2;
  int medianIdx=select(splitAttrib,m_Instlist,node.m_Start,node.m_End,(node.m_End - node.m_Start) / 2 + 1);
  Instance pivot;
  node.m_SplitAttrib=splitAttrib;
  node.m_SplitVal=m_Instances.instance(m_Instlist[medianIdx]).value(splitAttrib);
  node.m_Left=new BallNode(node.m_Start,medianIdxIdx,numNodesCreated + 1,(pivot=BallNode.calcCentroidPivot(node.m_Start,medianIdxIdx,m_Instlist,m_Instances)),BallNode.calcRadius(node.m_Start,medianIdxIdx,m_Instlist,m_Instances,pivot,m_DistanceFunction));
  node.m_Right=new BallNode(medianIdxIdx + 1,node.m_End,numNodesCreated + 2,(pivot=BallNode.calcCentroidPivot(medianIdxIdx + 1,node.m_End,m_Instlist,m_Instances)),BallNode.calcRadius(medianIdxIdx + 1,node.m_End,m_Instlist,m_Instances,pivot,m_DistanceFunction));
}
