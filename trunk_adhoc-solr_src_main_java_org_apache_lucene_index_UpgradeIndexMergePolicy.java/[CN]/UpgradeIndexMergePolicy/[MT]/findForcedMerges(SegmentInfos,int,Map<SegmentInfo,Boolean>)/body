{
  final Map<SegmentInfo,Boolean> oldSegments=new HashMap<SegmentInfo,Boolean>();
  for (  final SegmentInfo si : segmentInfos) {
    final Boolean v=segmentsToMerge.get(si);
    if (v != null && shouldUpgradeSegment(si)) {
      oldSegments.put(si,v);
    }
  }
  if (verbose())   message("findForcedMerges: segmentsToUpgrade=" + oldSegments);
  if (oldSegments.isEmpty())   return null;
  MergeSpecification spec=base.findForcedMerges(segmentInfos,maxSegmentCount,oldSegments);
  if (spec != null) {
    for (    final OneMerge om : spec.merges) {
      oldSegments.keySet().removeAll(om.segments);
    }
  }
  if (!oldSegments.isEmpty()) {
    if (verbose())     message("findForcedMerges: " + base.getClass().getSimpleName() + " does not want to merge all old segments, merge remaining ones into new segment: "+ oldSegments);
    final List<SegmentInfo> newInfos=new ArrayList<SegmentInfo>();
    for (    final SegmentInfo si : segmentInfos) {
      if (oldSegments.containsKey(si)) {
        newInfos.add(si);
      }
    }
    if (spec == null) {
      spec=new MergeSpecification();
    }
    spec.add(new OneMerge(newInfos));
  }
  return spec;
}
