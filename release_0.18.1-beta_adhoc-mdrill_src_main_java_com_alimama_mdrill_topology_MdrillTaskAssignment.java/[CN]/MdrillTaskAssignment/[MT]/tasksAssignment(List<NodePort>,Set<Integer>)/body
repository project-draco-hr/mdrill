{
  LOG.info("higolog reassignIds " + reassignIds.toString());
  if (reassignIds.size() <= 0) {
    return new HashMap<Integer,NodePort>();
  }
  Set<NodePort> allSlots=MdrillTaskAssignmentBase.AllSlots(supInfos,zkCluster);
  TaskJobIds jobids=new TaskJobIds();
  jobids.setSpecialTask(reassignIds,this);
  Resources resources=new Resources();
  resources.setup(reassignSlots,this.porttype);
  HostSlots[] shardResourceMap=getHostSlots(resources.shard,allSlots,portTypeEnum.shard);
  HostSlots[] msResourceMap=getHostSlots(resources.ms,allSlots,portTypeEnum.mergerserver);
  HostSlots[] realtimeResourceMap=getHostSlots(resources.realtime,allSlots,portTypeEnum.realtime);
  Map<Integer,NodePort> shardAssign=this.assignment(shardResourceMap,resources.shard,jobids.shardTask,"shard");
  Map<Integer,NodePort> msAssign=this.assignment(msResourceMap,resources.ms,jobids.msTask,"ms");
  Map<Integer,NodePort> realtimeAssign=this.assignment(realtimeResourceMap,resources.realtime,jobids.realtimeTask,"realtime");
  Map<Integer,NodePort> shardAssignRandom=this.randomAssign(resources.shard,jobids.shardTask);
  Map<Integer,NodePort> msAssignRandom=this.randomAssign(resources.ms,jobids.msTask);
  Map<Integer,NodePort> realtimeAssignRandom=this.randomAssign(resources.realtime,jobids.realtimeTask);
  Map<Integer,NodePort> rtn=new HashMap<Integer,NodePort>();
  rtn.putAll(shardAssign);
  rtn.putAll(msAssign);
  rtn.putAll(realtimeAssign);
  rtn.putAll(shardAssignRandom);
  rtn.putAll(msAssignRandom);
  rtn.putAll(realtimeAssignRandom);
  NodePort tmp=null;
  for (  Entry<Integer,NodePort> e : rtn.entrySet()) {
    tmp=e.getValue();
    break;
  }
  if (tmp == null) {
    tmp=reassignSlots.get(0);
  }
  for (  Integer tid : jobids.otherTask) {
    rtn.put(tid,tmp);
  }
  return rtn;
}
