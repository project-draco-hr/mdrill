{
  String[] newKey=new String[template.length - 1];
  System.arraycopy(template,0,newKey,0,m_KeyIndex);
  System.arraycopy(template,m_KeyIndex + 1,newKey,m_KeyIndex,template.length - m_KeyIndex - 1);
  if (m_ResultListener.isResultRequired(this,newKey)) {
    Object[] resultTypes=m_ResultProducer.getResultTypes();
    Stats[] stats=new Stats[resultTypes.length];
    for (int i=0; i < stats.length; i++) {
      stats[i]=new Stats();
    }
    Object[] result=getResultTypes();
    int numMatches=0;
    for (int i=0; i < m_Keys.size(); i++) {
      Object[] currentKey=(Object[])m_Keys.elementAt(i);
      if (!matchesTemplate(template,currentKey)) {
        continue;
      }
      Object[] currentResult=(Object[])m_Results.elementAt(i);
      numMatches++;
      for (int j=0; j < resultTypes.length; j++) {
        if (resultTypes[j] instanceof Double) {
          if (currentResult[j] == null) {
            if (stats[j] != null) {
              stats[j]=null;
            }
          }
          if (stats[j] != null) {
            double currentVal=((Double)currentResult[j]).doubleValue();
            stats[j].add(currentVal);
          }
        }
      }
    }
    if (numMatches != m_ExpectedResultsPerAverage) {
      throw new Exception("Expected " + m_ExpectedResultsPerAverage + " results matching key \""+ DatabaseUtils.arrayToString(template)+ "\" but got "+ numMatches);
    }
    result[0]=new Double(numMatches);
    Object[] currentResult=(Object[])m_Results.elementAt(0);
    int k=1;
    for (int j=0; j < resultTypes.length; j++) {
      if (resultTypes[j] instanceof Double) {
        if (stats[j] != null) {
          stats[j].calculateDerived();
          result[k++]=new Double(stats[j].mean);
        }
 else {
          result[k++]=null;
        }
        if (getCalculateStdDevs()) {
          if (stats[j] != null) {
            result[k++]=new Double(stats[j].stdDev);
          }
 else {
            result[k++]=null;
          }
        }
      }
 else {
        result[k++]=currentResult[j];
      }
    }
    m_ResultListener.acceptResult(this,newKey,result);
  }
}
