{
  Cache<ILruMemSizeKey,ILruMemSizeCache> cache=GrobalCache.fieldValueCache;
  StringBuffer key=new StringBuffer();
  key.append("sig@");
  key.append(partion);
  key.append("@");
  key.append(fieldLeft);
  key.append("@");
  key.append(LuceneUtils.crcKey(reader));
  key.append("@");
  key.append(readerright.getPartionKey());
  key.append("@");
  key.append(fieldRigth);
  key.append("@");
  key.append(LuceneUtils.crcKey(readerright.getReader()));
  String cachekey=key.toString();
  GrobalCache.StringKey fvkey=new GrobalCache.StringKey(cachekey);
  HigoJoinInterface uif=(HigoJoinInterface)cache.get(fvkey);
  if (uif == null) {
synchronized (cache) {
      uif=(HigoJoinInterface)cache.get(fvkey);
      if (uif == null) {
        FieldType ftleft=schema.getFieldType(fieldLeft);
        FieldType ftright=readerright.getSchema().getFieldType(fieldRigth);
        if (ftleft.isMultiValued() || ftright.isMultiValued()) {
          uif=new HigoJoinMultyValues(reader,partion,schema,readerright,fieldLeft,fieldRigth);
        }
 else {
          uif=new HigoJoinSingleValues(reader,partion,schema,readerright,fieldLeft,fieldRigth);
        }
        cache.put(fvkey,uif);
      }
    }
  }
  return uif;
}
