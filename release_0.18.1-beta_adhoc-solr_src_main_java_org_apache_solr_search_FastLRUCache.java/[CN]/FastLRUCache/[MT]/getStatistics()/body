{
  NamedList<Serializable> lst=new SimpleOrderedMap<Serializable>();
  if (cache == null)   return lst;
  ConcurrentLRUCache.Stats stats=cache.getStats();
  long lookups=stats.getCumulativeLookups();
  long hits=stats.getCumulativeHits();
  long inserts=stats.getCumulativePuts();
  long evictions=stats.getCumulativeEvictions();
  long size=stats.getCurrentSize();
  lst.add("lookups",lookups);
  lst.add("hits",hits);
  lst.add("hitratio",calcHitRatio(lookups,hits));
  lst.add("inserts",inserts);
  lst.add("evictions",evictions);
  lst.add("size",size);
  lst.add("warmupTime",warmupTime);
  long clookups=0;
  long chits=0;
  long cinserts=0;
  long cevictions=0;
  for (  ConcurrentLRUCache.Stats statistiscs : statsList) {
    clookups+=statistiscs.getCumulativeLookups();
    chits+=statistiscs.getCumulativeHits();
    cinserts+=statistiscs.getCumulativePuts();
    cevictions+=statistiscs.getCumulativeEvictions();
  }
  lst.add("cumulative_lookups",clookups);
  lst.add("cumulative_hits",chits);
  lst.add("cumulative_hitratio",calcHitRatio(clookups,chits));
  lst.add("cumulative_inserts",cinserts);
  lst.add("cumulative_evictions",cevictions);
  if (showItems != 0) {
    Map items=cache.getLatestAccessedItems(showItems == -1 ? Integer.MAX_VALUE : showItems);
    for (    Map.Entry e : (Set<Map.Entry>)items.entrySet()) {
      Object k=e.getKey();
      Object v=e.getValue();
      String ks="item_" + k;
      String vs=v.toString();
      lst.add(ks,vs);
    }
  }
  return lst;
}
