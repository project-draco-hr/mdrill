{
  Instances result;
  FastVector atts;
  int i;
  FastVector values;
  int classindex;
  classindex=-1;
  atts=new FastVector();
  for (i=0; i < inputFormat.numAttributes(); i++) {
    if ((i == inputFormat.classIndex()) && (getRemoveOldClass()))     continue;
    if (i == inputFormat.classIndex())     classindex=i;
    atts.addElement(inputFormat.attribute(i).copy());
  }
  if (getOutputClassification()) {
    if (classindex == -1)     classindex=atts.size();
    atts.addElement(inputFormat.classAttribute().copy("classification"));
  }
  if (getOutputDistribution()) {
    if (inputFormat.classAttribute().isNominal()) {
      for (i=0; i < inputFormat.classAttribute().numValues(); i++) {
        atts.addElement(new Attribute("distribution_" + inputFormat.classAttribute().value(i)));
      }
    }
 else {
      atts.addElement(new Attribute("distribution"));
    }
  }
  if (getOutputErrorFlag()) {
    if (inputFormat.classAttribute().isNominal()) {
      values=new FastVector();
      values.addElement("no");
      values.addElement("yes");
      atts.addElement(new Attribute("error",values));
    }
 else {
      atts.addElement(new Attribute("error"));
    }
  }
  result=new Instances(inputFormat.relationName(),atts,0);
  result.setClassIndex(classindex);
  return result;
}
