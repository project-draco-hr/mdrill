{
  StringBuffer ret=new StringBuffer();
  int pos=0;
  int len=substituteIn.length();
  while (pos < len && match(substituteIn,pos)) {
    ret.append(substituteIn.substring(pos,getParenStart(0)));
    if ((flags & REPLACE_BACKREFERENCES) != 0) {
      int lCurrentPosition=0;
      int lLastPosition=-2;
      int lLength=substitution.length();
      boolean bAddedPrefix=false;
      while ((lCurrentPosition=substitution.indexOf("$",lCurrentPosition)) >= 0) {
        if ((lCurrentPosition == 0 || substitution.charAt(lCurrentPosition - 1) != '\\') && lCurrentPosition + 1 < lLength) {
          char c=substitution.charAt(lCurrentPosition + 1);
          if (c >= '0' && c <= '9') {
            if (bAddedPrefix == false) {
              ret.append(substitution.substring(0,lCurrentPosition));
              bAddedPrefix=true;
            }
 else {
              ret.append(substitution.substring(lLastPosition + 2,lCurrentPosition));
            }
            ret.append(getParen(c - '0'));
            lLastPosition=lCurrentPosition;
          }
        }
        lCurrentPosition++;
      }
      ret.append(substitution.substring(lLastPosition + 2,lLength));
    }
 else {
      ret.append(substitution);
    }
    int newpos=getParenEnd(0);
    if (newpos == pos) {
      newpos++;
    }
    pos=newpos;
    if ((flags & REPLACE_FIRSTONLY) != 0) {
      break;
    }
  }
  if (pos < len) {
    ret.append(substituteIn.substring(pos));
  }
  return ret.toString();
}
