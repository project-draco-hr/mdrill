{
  double[] weights=new double[data.numInstances()];
  for (int i=0; i < weights.length; i++) {
    weights[i]=data.instance(i).weight();
  }
  Instances newData=new Instances(data,data.numInstances());
  if (data.numInstances() == 0) {
    return newData;
  }
  double[] probabilities=new double[data.numInstances()];
  double sumProbs=0, sumOfWeights=Utils.sum(weights);
  for (int i=0; i < data.numInstances(); i++) {
    sumProbs+=random.nextDouble();
    probabilities[i]=sumProbs;
  }
  Utils.normalize(probabilities,sumProbs / sumOfWeights);
  probabilities[data.numInstances() - 1]=sumOfWeights;
  int k=0;
  int l=0;
  sumProbs=0;
  while ((k < data.numInstances() && (l < data.numInstances()))) {
    if (weights[l] < 0) {
      throw new IllegalArgumentException("Weights have to be positive.");
    }
    sumProbs+=weights[l];
    while ((k < data.numInstances()) && (probabilities[k] <= sumProbs)) {
      newData.add(data.instance(l));
      sampled[l]=true;
      newData.instance(k).setWeight(1);
      k++;
    }
    l++;
  }
  return newData;
}
