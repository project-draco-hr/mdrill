{
  int i, len, count, part;
  Impurity imp;
  int low=0;
  int high=inst.numInstances() - 1;
  this.initialize(low,high,attr);
  if (number < 4) {
    return;
  }
  len=((high - low + 1) < 5) ? 1 : (high - low + 1) / 5;
  position=low;
  part=low + len - 1;
  imp=new Impurity(part,attr,inst,5);
  count=0;
  for (i=low + len; i <= high - len - 1; i++) {
    imp.incremental(inst.instance(i).classValue(),1);
    if (Utils.eq(inst.instance(i + 1).value(attr),inst.instance(i).value(attr)) == false) {
      count=i;
      if (imp.impurity > maxImpurity) {
        maxImpurity=imp.impurity;
        splitValue=(inst.instance(i).value(attr) + inst.instance(i + 1).value(attr)) * 0.5;
        leftAve=imp.sl / imp.nl;
        rightAve=imp.sr / imp.nr;
        position=i;
      }
    }
  }
}
