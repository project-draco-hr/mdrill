{
  int startsAt=0;
  jjnewStateCnt=36;
  int i=1;
  jjstateSet[0]=startState;
  int kind=0x7fffffff;
  for (; ; ) {
    if (++jjround == 0x7fffffff)     ReInitRounds();
    if (curChar < 64) {
      long l=1L << curChar;
      do {
switch (jjstateSet[--i]) {
case 36:
          if ((0x3ff001000000000L & l) != 0L) {
            if (kind > 71)             kind=71;
            jjCheckNAdd(16);
          }
        if (curChar == 36) {
          if (kind > 71)           kind=71;
          jjCheckNAddTwoStates(15,16);
        }
      break;
case 7:
    if ((0x3ff000000000000L & l) != 0L) {
      if (kind > 67)       kind=67;
      jjCheckNAddStates(0,5);
    }
 else     if (curChar == 34)     jjCheckNAddTwoStates(23,24);
 else     if (curChar == 39)     jjCheckNAddTwoStates(18,19);
 else     if (curChar == 36) {
      if (kind > 71)       kind=71;
      jjCheckNAddTwoStates(15,16);
    }
 else     if (curChar == 47)     jjstateSet[jjnewStateCnt++]=8;
 else     if (curChar == 45)     jjstateSet[jjnewStateCnt++]=5;
 else     if (curChar == 46)     jjCheckNAdd(1);
  break;
case 0:
if (curChar == 46) jjCheckNAdd(1);
break;
case 1:
if ((0x3ff000000000000L & l) == 0L) break;
if (kind > 66) kind=66;
jjCheckNAddTwoStates(1,2);
break;
case 3:
if ((0x280000000000L & l) != 0L) jjCheckNAdd(4);
break;
case 4:
if ((0x3ff000000000000L & l) == 0L) break;
if (kind > 66) kind=66;
jjCheckNAdd(4);
break;
case 5:
if (curChar != 45) break;
if (kind > 69) kind=69;
jjCheckNAdd(6);
break;
case 6:
if ((0xffffffffffffdbffL & l) == 0L) break;
if (kind > 69) kind=69;
jjCheckNAdd(6);
break;
case 8:
if (curChar == 42) jjCheckNAddTwoStates(9,10);
break;
case 9:
if ((0xfffffbffffffffffL & l) != 0L) jjCheckNAddTwoStates(9,10);
break;
case 10:
if (curChar == 42) jjCheckNAddStates(6,8);
break;
case 11:
if ((0xffff7bffffffffffL & l) != 0L) jjCheckNAddTwoStates(12,10);
break;
case 12:
if ((0xfffffbffffffffffL & l) != 0L) jjCheckNAddTwoStates(12,10);
break;
case 13:
if (curChar == 47 && kind > 70) kind=70;
break;
case 14:
if (curChar == 47) jjstateSet[jjnewStateCnt++]=8;
break;
case 15:
if (curChar != 36) break;
if (kind > 71) kind=71;
jjCheckNAddTwoStates(15,16);
break;
case 16:
if ((0x3ff001000000000L & l) == 0L) break;
if (kind > 71) kind=71;
jjCheckNAdd(16);
break;
case 17:
if (curChar == 39) jjCheckNAddTwoStates(18,19);
break;
case 18:
if ((0xffffff7fffffffffL & l) != 0L) jjCheckNAddTwoStates(18,19);
break;
case 19:
if (curChar != 39) break;
if (kind > 74) kind=74;
jjstateSet[jjnewStateCnt++]=20;
break;
case 20:
if (curChar == 39) jjCheckNAddTwoStates(21,19);
break;
case 21:
if ((0xffffff7fffffffffL & l) != 0L) jjCheckNAddTwoStates(21,19);
break;
case 22:
if (curChar == 34) jjCheckNAddTwoStates(23,24);
break;
case 23:
if ((0xfffffffbffffdbffL & l) != 0L) jjCheckNAddTwoStates(23,24);
break;
case 24:
if (curChar == 34 && kind > 75) kind=75;
break;
case 26:
if ((0xffffffffffffdbffL & l) != 0L) jjAddStates(9,10);
break;
case 28:
if ((0x3ff000000000000L & l) == 0L) break;
if (kind > 67) kind=67;
jjCheckNAddStates(0,5);
break;
case 29:
if ((0x3ff000000000000L & l) != 0L) jjCheckNAddTwoStates(29,0);
break;
case 30:
if ((0x3ff000000000000L & l) != 0L) jjCheckNAddStates(11,13);
break;
case 31:
if (curChar == 46) jjCheckNAdd(32);
break;
case 33:
if ((0x280000000000L & l) != 0L) jjCheckNAdd(34);
break;
case 34:
if ((0x3ff000000000000L & l) == 0L) break;
if (kind > 66) kind=66;
jjCheckNAdd(34);
break;
case 35:
if ((0x3ff000000000000L & l) == 0L) break;
if (kind > 67) kind=67;
jjCheckNAdd(35);
break;
default :
break;
}
}
 while (i != startsAt);
}
 else if (curChar < 128) {
long l=1L << (curChar & 077);
do {
switch (jjstateSet[--i]) {
case 36:
if ((0x7fffffe87fffffeL & l) != 0L) {
if (kind > 71) kind=71;
jjCheckNAdd(16);
}
if ((0x7fffffe87fffffeL & l) != 0L) {
if (kind > 71) kind=71;
jjCheckNAddTwoStates(15,16);
}
break;
case 7:
if ((0x7fffffe87fffffeL & l) != 0L) {
if (kind > 71) kind=71;
jjCheckNAddTwoStates(15,16);
}
 else if (curChar == 96) jjCheckNAddTwoStates(26,27);
break;
case 2:
if ((0x2000000020L & l) != 0L) jjAddStates(14,15);
break;
case 6:
if (kind > 69) kind=69;
jjstateSet[jjnewStateCnt++]=6;
break;
case 9:
jjCheckNAddTwoStates(9,10);
break;
case 11:
case 12:
jjCheckNAddTwoStates(12,10);
break;
case 15:
if ((0x7fffffe87fffffeL & l) == 0L) break;
if (kind > 71) kind=71;
jjCheckNAddTwoStates(15,16);
break;
case 16:
if ((0x7fffffe87fffffeL & l) == 0L) break;
if (kind > 71) kind=71;
jjCheckNAdd(16);
break;
case 18:
jjCheckNAddTwoStates(18,19);
break;
case 21:
jjCheckNAddTwoStates(21,19);
break;
case 23:
jjAddStates(16,17);
break;
case 25:
if (curChar == 96) jjCheckNAddTwoStates(26,27);
break;
case 26:
if ((0xfffffffeffffffffL & l) != 0L) jjCheckNAddTwoStates(26,27);
break;
case 27:
if (curChar == 96 && kind > 75) kind=75;
break;
case 32:
if ((0x2000000020L & l) != 0L) jjAddStates(18,19);
break;
default :
break;
}
}
 while (i != startsAt);
}
 else {
int hiByte=(int)(curChar >> 8);
int i1=hiByte >> 6;
long l1=1L << (hiByte & 077);
int i2=(curChar & 0xff) >> 6;
long l2=1L << (curChar & 077);
do {
switch (jjstateSet[--i]) {
case 36:
if (jjCanMove_1(hiByte,i1,i2,l1,l2)) {
if (kind > 71) kind=71;
jjCheckNAddTwoStates(15,16);
}
if (jjCanMove_1(hiByte,i1,i2,l1,l2)) {
if (kind > 71) kind=71;
jjCheckNAdd(16);
}
break;
case 7:
case 15:
if (!jjCanMove_1(hiByte,i1,i2,l1,l2)) break;
if (kind > 71) kind=71;
jjCheckNAddTwoStates(15,16);
break;
case 6:
if (!jjCanMove_0(hiByte,i1,i2,l1,l2)) break;
if (kind > 69) kind=69;
jjstateSet[jjnewStateCnt++]=6;
break;
case 9:
if (jjCanMove_0(hiByte,i1,i2,l1,l2)) jjCheckNAddTwoStates(9,10);
break;
case 11:
case 12:
if (jjCanMove_0(hiByte,i1,i2,l1,l2)) jjCheckNAddTwoStates(12,10);
break;
case 16:
if (!jjCanMove_1(hiByte,i1,i2,l1,l2)) break;
if (kind > 71) kind=71;
jjCheckNAdd(16);
break;
case 18:
if (jjCanMove_2(hiByte,i1,i2,l1,l2)) jjCheckNAddTwoStates(18,19);
break;
case 21:
if (jjCanMove_2(hiByte,i1,i2,l1,l2)) jjCheckNAddTwoStates(21,19);
break;
case 23:
if (jjCanMove_2(hiByte,i1,i2,l1,l2)) jjAddStates(16,17);
break;
case 26:
if (jjCanMove_2(hiByte,i1,i2,l1,l2)) jjAddStates(9,10);
break;
default :
break;
}
}
 while (i != startsAt);
}
if (kind != 0x7fffffff) {
jjmatchedKind=kind;
jjmatchedPos=curPos;
kind=0x7fffffff;
}
++curPos;
if ((i=jjnewStateCnt) == (startsAt=36 - (jjnewStateCnt=startsAt))) return curPos;
try {
curChar=input_stream.readChar();
}
 catch (java.io.IOException e) {
return curPos;
}
}
}
