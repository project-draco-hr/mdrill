{
  int maxIdx=-1;
  double maxDist=Double.NEGATIVE_INFINITY;
  double[] distArray=(double[])anchorDistances.lastElement();
  for (int i=0; i < distArray.length; i++)   if (maxDist < distArray[i]) {
    maxDist=distArray[i];
    maxIdx=i;
  }
  boolean anyPointsStolen=false, pointsStolen=false;
  TempNode anchorI;
  double newDist, distI, interAnchMidDist;
  Instance newAnchInst=newAnchor.anchor, anchIInst;
  for (int i=0; i < anchors.size(); i++) {
    anchorI=(TempNode)anchors.elementAt(i);
    anchIInst=anchorI.anchor;
    pointsStolen=false;
    interAnchMidDist=m_DistanceFunction.distance(newAnchInst,anchIInst) / 2D;
    for (int j=0; j < anchorI.points.length(); j++) {
      ListNode tmp=(ListNode)anchorI.points.get(j);
      if (tmp.distance < interAnchMidDist)       break;
      newDist=m_DistanceFunction.distance(newAnchInst,m_Instances.instance(tmp.idx));
      distI=tmp.distance;
      if (newDist < distI) {
        newAnchor.points.insertReverseSorted(tmp.idx,newDist);
        anchorI.points.remove(j);
        anyPointsStolen=pointsStolen=true;
      }
    }
    if (pointsStolen)     anchorI.radius=((ListNode)anchorI.points.getFirst()).distance;
  }
  return anyPointsStolen;
}
