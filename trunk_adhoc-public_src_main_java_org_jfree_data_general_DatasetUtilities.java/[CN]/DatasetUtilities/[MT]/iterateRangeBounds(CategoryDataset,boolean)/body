{
  double minimum=Double.POSITIVE_INFINITY;
  double maximum=Double.NEGATIVE_INFINITY;
  int rowCount=dataset.getRowCount();
  int columnCount=dataset.getColumnCount();
  if (includeInterval && dataset instanceof IntervalCategoryDataset) {
    IntervalCategoryDataset icd=(IntervalCategoryDataset)dataset;
    Number lvalue, uvalue;
    for (int row=0; row < rowCount; row++) {
      for (int column=0; column < columnCount; column++) {
        lvalue=icd.getStartValue(row,column);
        uvalue=icd.getEndValue(row,column);
        if (lvalue != null && !Double.isNaN(lvalue.doubleValue())) {
          minimum=Math.min(minimum,lvalue.doubleValue());
        }
        if (uvalue != null && !Double.isNaN(uvalue.doubleValue())) {
          maximum=Math.max(maximum,uvalue.doubleValue());
        }
      }
    }
  }
 else {
    for (int row=0; row < rowCount; row++) {
      for (int column=0; column < columnCount; column++) {
        Number value=dataset.getValue(row,column);
        if (value != null) {
          double v=value.doubleValue();
          if (!Double.isNaN(v)) {
            minimum=Math.min(minimum,v);
            maximum=Math.max(maximum,v);
          }
        }
      }
    }
  }
  if (minimum == Double.POSITIVE_INFINITY) {
    return null;
  }
 else {
    return new Range(minimum,maximum);
  }
}
