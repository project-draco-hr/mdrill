{
  NodeList list;
  Node node;
  int i;
  int n;
  String indent;
  NamedNodeMap atts;
  indent="";
  for (i=0; i < depth; i++)   indent+="   ";
  if (parent.getNodeType() == Node.TEXT_NODE) {
    if (!parent.getNodeValue().trim().equals(""))     buf.append(indent + parent.getNodeValue().trim() + "\n");
  }
 else   if (parent.getNodeType() == Node.COMMENT_NODE) {
    buf.append(indent + "<!--" + parent.getNodeValue()+ "-->\n");
  }
 else {
    buf.append(indent + "<" + parent.getNodeName());
    if (parent.hasAttributes()) {
      atts=parent.getAttributes();
      for (n=0; n < atts.getLength(); n++) {
        node=atts.item(n);
        buf.append(" " + node.getNodeName() + "=\""+ node.getNodeValue()+ "\"");
      }
    }
    if (parent.hasChildNodes()) {
      list=parent.getChildNodes();
      if ((list.getLength() == 1) && (list.item(0).getNodeType() == Node.TEXT_NODE)) {
        buf.append(">");
        buf.append(list.item(0).getNodeValue().trim());
        buf.append("</" + parent.getNodeName() + ">\n");
      }
 else {
        buf.append(">\n");
        for (n=0; n < list.getLength(); n++) {
          node=list.item(n);
          toString(buf,node,depth + 1);
        }
        buf.append(indent + "</" + parent.getNodeName()+ ">\n");
      }
    }
 else {
      buf.append("/>\n");
    }
  }
  return buf;
}
