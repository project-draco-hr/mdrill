{
  if (m_Debug) {
    System.err.println("Training classifier " + (m_NumGenerated + 1));
  }
  for (int j=0; j < m_NumClasses; j++) {
    if (m_Debug) {
      System.err.println("\t...for class " + (j + 1) + " ("+ m_ClassAttribute.name()+ "="+ m_ClassAttribute.value(j)+ ")");
    }
    Instances boostData=new Instances(data);
    for (int i=0; i < probs.length; i++) {
      double p=probs[i][j];
      double z, actual=trainYs[i][j];
      if (actual == 1 - m_Offset) {
        z=1.0 / p;
        if (z > Z_MAX) {
          z=Z_MAX;
        }
      }
 else {
        z=-1.0 / (1.0 - p);
        if (z < -Z_MAX) {
          z=-Z_MAX;
        }
      }
      double w=(actual - p) / z;
      Instance current=boostData.instance(i);
      current.setValue(boostData.classIndex(),z);
      current.setWeight(current.weight() * w);
    }
    double sumOfWeights=boostData.sumOfWeights();
    double scalingFactor=(double)origSumOfWeights / sumOfWeights;
    for (int i=0; i < probs.length; i++) {
      Instance current=boostData.instance(i);
      current.setWeight(current.weight() * scalingFactor);
    }
    Instances trainData=boostData;
    if (m_WeightThreshold < 100) {
      trainData=selectWeightQuantile(boostData,(double)m_WeightThreshold / 100);
    }
 else {
      if (m_UseResampling) {
        double[] weights=new double[boostData.numInstances()];
        for (int kk=0; kk < weights.length; kk++) {
          weights[kk]=boostData.instance(kk).weight();
        }
        trainData=boostData.resampleWithWeights(m_RandomInstance,weights);
      }
    }
    m_Classifiers[j][m_NumGenerated].buildClassifier(trainData);
  }
  for (int i=0; i < trainFs.length; i++) {
    double[] pred=new double[m_NumClasses];
    double predSum=0;
    for (int j=0; j < m_NumClasses; j++) {
      pred[j]=m_Shrinkage * m_Classifiers[j][m_NumGenerated].classifyInstance(data.instance(i));
      predSum+=pred[j];
    }
    predSum/=m_NumClasses;
    for (int j=0; j < m_NumClasses; j++) {
      trainFs[i][j]+=(pred[j] - predSum) * (m_NumClasses - 1) / m_NumClasses;
    }
  }
  m_NumGenerated++;
  for (int i=0; i < trainYs.length; i++) {
    probs[i]=probs(trainFs[i]);
  }
}
