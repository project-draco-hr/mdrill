{
  if (m_NumGenerated == 0) {
    throw new Exception("No model built yet");
  }
  if (!(m_Classifiers[0][0] instanceof Sourcable)) {
    throw new Exception("Base learner " + m_Classifier.getClass().getName() + " is not Sourcable");
  }
  StringBuffer text=new StringBuffer("class ");
  text.append(className).append(" {\n\n");
  text.append("  private static double RtoP(double []R, int j) {\n" + "    double Rcenter = 0;\n" + "    for (int i = 0; i < R.length; i++) {\n"+ "      Rcenter += R[i];\n"+ "    }\n"+ "    Rcenter /= R.length;\n"+ "    double Rsum = 0;\n"+ "    for (int i = 0; i < R.length; i++) {\n"+ "      Rsum += Math.exp(R[i] - Rcenter);\n"+ "    }\n"+ "    return Math.exp(R[j]) / Rsum;\n"+ "  }\n\n");
  text.append("  public static double classify(Object[] i) {\n" + "    double [] d = distribution(i);\n" + "    double maxV = d[0];\n"+ "    int maxI = 0;\n"+ "    for (int j = 1; j < " + m_NumClasses + "; j++) {\n"+ "      if (d[j] > maxV) { maxV = d[j]; maxI = j; }\n"+ "    }\n    return (double) maxI;\n  }\n\n");
  text.append("  public static double [] distribution(Object [] i) {\n");
  text.append("    double [] Fs = new double [" + m_NumClasses + "];\n");
  text.append("    double [] Fi = new double [" + m_NumClasses + "];\n");
  text.append("    double Fsum;\n");
  for (int i=0; i < m_NumGenerated; i++) {
    text.append("    Fsum = 0;\n");
    for (int j=0; j < m_NumClasses; j++) {
      text.append("    Fi[" + j + "] = "+ className+ '_'+ j+ '_'+ i+ ".classify(i); Fsum += Fi["+ j+ "];\n");
    }
    text.append("    Fsum /= " + m_NumClasses + ";\n");
    text.append("    for (int j = 0; j < " + m_NumClasses + "; j++) {");
    text.append(" Fs[j] += (Fi[j] - Fsum) * " + (m_NumClasses - 1) + " / "+ m_NumClasses+ "; }\n");
  }
  text.append("    double [] dist = new double [" + m_NumClasses + "];\n"+ "    for (int j = 0; j < "+ m_NumClasses+ "; j++) {\n"+ "      dist[j] = RtoP(Fs, j);\n"+ "    }\n    return dist;\n");
  text.append("  }\n}\n");
  for (int i=0; i < m_Classifiers.length; i++) {
    for (int j=0; j < m_Classifiers[i].length; j++) {
      text.append(((Sourcable)m_Classifiers[i][j]).toSource(className + '_' + i+ '_'+ j));
    }
  }
  return text.toString();
}
