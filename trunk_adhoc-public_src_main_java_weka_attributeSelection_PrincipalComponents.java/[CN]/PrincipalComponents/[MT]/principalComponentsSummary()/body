{
  StringBuffer result=new StringBuffer();
  double cumulative=0.0;
  Instances output=null;
  int numVectors=0;
  try {
    output=setOutputFormat();
    numVectors=(output.classIndex() < 0) ? output.numAttributes() : output.numAttributes() - 1;
  }
 catch (  Exception ex) {
  }
  String corrCov=(m_center) ? "Covariance " : "Correlation ";
  result.append(corrCov + "matrix\n" + matrixToString(m_correlation)+ "\n\n");
  result.append("eigenvalue\tproportion\tcumulative\n");
  for (int i=m_numAttribs - 1; i > (m_numAttribs - numVectors - 1); i--) {
    cumulative+=m_eigenvalues[m_sortedEigens[i]];
    result.append(Utils.doubleToString(m_eigenvalues[m_sortedEigens[i]],9,5) + "\t" + Utils.doubleToString((m_eigenvalues[m_sortedEigens[i]] / m_sumOfEigenValues),9,5)+ "\t"+ Utils.doubleToString((cumulative / m_sumOfEigenValues),9,5)+ "\t"+ output.attribute(m_numAttribs - i - 1).name()+ "\n");
  }
  result.append("\nEigenvectors\n");
  for (int j=1; j <= numVectors; j++) {
    result.append(" V" + j + '\t');
  }
  result.append("\n");
  for (int j=0; j < m_numAttribs; j++) {
    for (int i=m_numAttribs - 1; i > (m_numAttribs - numVectors - 1); i--) {
      result.append(Utils.doubleToString(m_eigenvectors[j][m_sortedEigens[i]],7,4) + "\t");
    }
    result.append(m_trainInstances.attribute(j).name() + '\n');
  }
  if (m_transBackToOriginal) {
    result.append("\nPC space transformed back to original space.\n" + "(Note: can't evaluate attributes in the original " + "space)\n");
  }
  return result.toString();
}
