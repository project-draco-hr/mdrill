{
  m_DistributeExperimentPanel.addCheckBoxActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      if (m_DistributeExperimentPanel.distributedExperimentSelected()) {
        if (!(m_Exp instanceof RemoteExperiment)) {
          try {
            RemoteExperiment re=new RemoteExperiment(m_Exp);
            setExperiment(re);
          }
 catch (          Exception ex) {
            ex.printStackTrace();
          }
        }
      }
 else {
        if (m_Exp instanceof RemoteExperiment) {
          setExperiment(((RemoteExperiment)m_Exp).getBaseExperiment());
        }
      }
    }
  }
);
  m_NewBut.setMnemonic('N');
  m_NewBut.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      setExperiment(new Experiment());
    }
  }
);
  m_SaveBut.setMnemonic('S');
  m_SaveBut.setEnabled(false);
  m_SaveBut.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      saveExperiment();
    }
  }
);
  m_OpenBut.setMnemonic('O');
  m_OpenBut.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      openExperiment();
    }
  }
);
  m_FileChooser.addChoosableFileFilter(m_ExpFilter);
  if (KOML.isPresent())   m_FileChooser.addChoosableFileFilter(m_KOMLFilter);
  m_FileChooser.addChoosableFileFilter(m_XMLFilter);
  m_FileChooser.setFileFilter(m_ExpFilter);
  m_FileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
  m_GeneratorPropertyPanel.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      updateRadioLinks();
    }
  }
);
  m_RPEditor.setClassType(ResultProducer.class);
  m_RPEditor.setEnabled(false);
  m_RPEditor.addPropertyChangeListener(new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent e){
      m_Exp.setResultProducer((ResultProducer)m_RPEditor.getValue());
      m_Exp.setUsePropertyIterator(false);
      m_Exp.setPropertyArray(null);
      m_Exp.setPropertyPath(null);
      m_GeneratorPropertyPanel.setExperiment(m_Exp);
      repaint();
    }
  }
);
  m_RLEditor.setClassType(ResultListener.class);
  m_RLEditor.setEnabled(false);
  m_RLEditor.addPropertyChangeListener(new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent e){
      m_Exp.setResultListener((ResultListener)m_RLEditor.getValue());
      m_Support.firePropertyChange("",null,null);
      repaint();
    }
  }
);
  m_NotesFrame.addWindowListener(new WindowAdapter(){
    public void windowClosing(    WindowEvent e){
      m_NotesButton.setEnabled(true);
    }
  }
);
  m_NotesFrame.getContentPane().add(new JScrollPane(m_NotesText));
  m_NotesFrame.setSize(600,400);
  m_NotesButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      m_NotesButton.setEnabled(false);
      m_NotesFrame.setVisible(true);
    }
  }
);
  m_NotesButton.setEnabled(false);
  m_NotesText.setEditable(true);
  m_NotesText.addKeyListener(new KeyAdapter(){
    public void keyReleased(    KeyEvent e){
      m_Exp.setNotes(m_NotesText.getText());
    }
  }
);
  m_NotesText.addFocusListener(new FocusAdapter(){
    public void focusLost(    FocusEvent e){
      m_Exp.setNotes(m_NotesText.getText());
    }
  }
);
  JPanel buttons=new JPanel();
  GridBagLayout gb=new GridBagLayout();
  GridBagConstraints constraints=new GridBagConstraints();
  buttons.setBorder(BorderFactory.createEmptyBorder(10,5,10,5));
  buttons.setLayout(gb);
  constraints.gridx=0;
  constraints.gridy=0;
  constraints.weightx=5;
  constraints.fill=GridBagConstraints.HORIZONTAL;
  constraints.gridwidth=1;
  constraints.gridheight=1;
  constraints.insets=new Insets(0,2,0,2);
  buttons.add(m_OpenBut,constraints);
  constraints.gridx=1;
  constraints.gridy=0;
  constraints.weightx=5;
  constraints.gridwidth=1;
  constraints.gridheight=1;
  buttons.add(m_SaveBut,constraints);
  constraints.gridx=2;
  constraints.gridy=0;
  constraints.weightx=5;
  constraints.gridwidth=1;
  constraints.gridheight=1;
  buttons.add(m_NewBut,constraints);
  JPanel src=new JPanel();
  src.setLayout(new BorderLayout());
  src.setBorder(BorderFactory.createCompoundBorder(BorderFactory.createTitledBorder("Result generator"),BorderFactory.createEmptyBorder(0,5,5,5)));
  src.add(m_RPEditorPanel,BorderLayout.NORTH);
  m_RPEditorPanel.setEnabled(false);
  JPanel dest=new JPanel();
  dest.setLayout(new BorderLayout());
  dest.setBorder(BorderFactory.createCompoundBorder(BorderFactory.createTitledBorder("Destination"),BorderFactory.createEmptyBorder(0,5,5,5)));
  dest.add(m_RLEditorPanel,BorderLayout.NORTH);
  m_RLEditorPanel.setEnabled(false);
  m_advanceDataSetFirst.setEnabled(false);
  m_advanceIteratorFirst.setEnabled(false);
  m_advanceDataSetFirst.setToolTipText("Advance data set before custom generator");
  m_advanceIteratorFirst.setToolTipText("Advance custom generator before data set");
  m_advanceDataSetFirst.setSelected(true);
  ButtonGroup bg=new ButtonGroup();
  bg.add(m_advanceDataSetFirst);
  bg.add(m_advanceIteratorFirst);
  m_advanceDataSetFirst.addActionListener(m_RadioListener);
  m_advanceIteratorFirst.addActionListener(m_RadioListener);
  JPanel radioButs=new JPanel();
  radioButs.setBorder(BorderFactory.createTitledBorder("Iteration control"));
  radioButs.setLayout(new GridLayout(1,2));
  radioButs.add(m_advanceDataSetFirst);
  radioButs.add(m_advanceIteratorFirst);
  JPanel simpleIterators=new JPanel();
  simpleIterators.setLayout(new BorderLayout());
  JPanel tmp=new JPanel();
  tmp.setLayout(new GridBagLayout());
  constraints.gridx=0;
  constraints.gridy=0;
  constraints.weightx=5;
  constraints.fill=GridBagConstraints.HORIZONTAL;
  constraints.gridwidth=1;
  constraints.gridheight=1;
  constraints.insets=new Insets(0,2,0,2);
  tmp.add(m_RunNumberPanel,constraints);
  constraints.gridx=1;
  constraints.gridy=0;
  constraints.weightx=5;
  constraints.fill=GridBagConstraints.HORIZONTAL;
  constraints.gridwidth=1;
  constraints.gridheight=2;
  tmp.add(m_DistributeExperimentPanel,constraints);
  JPanel tmp2=new JPanel();
  tmp2.setLayout(new GridBagLayout());
  constraints.gridx=0;
  constraints.gridy=0;
  constraints.weightx=5;
  constraints.fill=GridBagConstraints.HORIZONTAL;
  constraints.gridwidth=1;
  constraints.gridheight=1;
  constraints.insets=new Insets(0,2,0,2);
  tmp2.add(tmp,constraints);
  constraints.gridx=0;
  constraints.gridy=1;
  constraints.weightx=5;
  constraints.fill=GridBagConstraints.HORIZONTAL;
  constraints.gridwidth=1;
  constraints.gridheight=1;
  tmp2.add(radioButs,constraints);
  simpleIterators.add(tmp2,BorderLayout.NORTH);
  simpleIterators.add(m_DatasetListPanel,BorderLayout.CENTER);
  JPanel iterators=new JPanel();
  iterators.setLayout(new GridLayout(1,2));
  iterators.add(simpleIterators);
  iterators.add(m_GeneratorPropertyPanel);
  JPanel top=new JPanel();
  top.setLayout(new GridLayout(2,1));
  top.add(dest);
  top.add(src);
  JPanel notes=new JPanel();
  notes.setLayout(new BorderLayout());
  notes.add(m_NotesButton,BorderLayout.CENTER);
  JPanel p2=new JPanel();
  p2.setLayout(new BorderLayout());
  p2.add(iterators,BorderLayout.CENTER);
  p2.add(notes,BorderLayout.SOUTH);
  JPanel p3=new JPanel();
  p3.setLayout(new BorderLayout());
  p3.add(buttons,BorderLayout.NORTH);
  p3.add(top,BorderLayout.SOUTH);
  setLayout(new BorderLayout());
  add(p3,BorderLayout.NORTH);
  add(p2,BorderLayout.CENTER);
}
