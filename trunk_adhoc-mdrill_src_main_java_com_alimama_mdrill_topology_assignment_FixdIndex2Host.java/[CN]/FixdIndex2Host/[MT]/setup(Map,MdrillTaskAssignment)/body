{
  for (int i=0; i < assimeng.replication; i++) {
    shardfixdMap.put(i,new HashMap<Integer,String>());
    realtimeMap.put(i,new HashMap<Integer,String>());
  }
  Integer fixassign=StormUtils.parseInt(topology_conf.get(MdrillTaskAssignment.HIGO_FIX_SHARDS));
  for (int i=1; i <= fixassign; i++) {
    String ass=String.valueOf(topology_conf.get(MdrillTaskAssignment.HIGO_FIX_SHARDS + "." + i));
    String[] host_ids=ass.split(":");
    String comp_name=assimeng.shard_name;
    if (host_ids.length >= 4) {
      comp_name=host_ids[3];
    }
    Integer group=StormUtils.parseInt(host_ids[0]);
    HashMap<Integer,String> fixMap=null;
    if (comp_name.indexOf(assimeng.shard_name) >= 0) {
      fixMap=this.shardfixdMap.get(group);
    }
 else     if (comp_name.indexOf(assimeng.ms_name) >= 0) {
      fixMap=this.mergerMap;
    }
 else     if (comp_name.indexOf(assimeng.realtime_name) >= 0) {
      fixMap=this.realtimeMap.get(group);
    }
 else {
      fixMap=this.mergerMap;
    }
    if (host_ids.length >= 3) {
      String hostname=host_ids[1].trim();
      String[] ids=host_ids[2].split(",");
      for (      String tidIndex : ids) {
        fixMap.put(Integer.parseInt(tidIndex),hostname);
      }
    }
  }
}
