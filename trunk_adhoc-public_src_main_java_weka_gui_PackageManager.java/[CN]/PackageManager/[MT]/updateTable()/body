{
  if (m_installedPackages == null || m_availablePackages == null) {
    for (    Package p : m_allPackages) {
      String loadStatus="";
      if (p.isInstalled()) {
        File packageRoot=new File(WekaPackageManager.getPackageHome().toString() + File.separator + p.getName());
        boolean loaded=WekaPackageManager.loadCheck(p,packageRoot);
        loadStatus=(loaded) ? "Yes" : "No - check log";
      }
      List<Object> catAndVers=m_packageLookupInfo.get(p.getName());
      catAndVers.set(2,loadStatus);
    }
  }
  if (m_allBut.isSelected()) {
    m_model.setRowCount(m_allPackages.size());
    Collections.sort(m_allPackages,m_packageComparator);
    int row=0;
    for (    Package p : m_allPackages) {
      m_model.setValueAt(p.getName(),row,getColumnIndex(PACKAGE_COLUMN));
      String category="";
      if (p.getPackageMetaDataElement("Category") != null) {
        category=(String)p.getPackageMetaDataElement("Category");
      }
      m_model.setValueAt(category,row,getColumnIndex(CATEGORY_COLUMN));
      String installedV="";
      Object repositoryV=p.getPackageMetaDataElement("Version");
      if (p.isInstalled()) {
        try {
          Package installed=WekaPackageManager.getInstalledPackageInfo(p.getName());
          installedV=installed.getPackageMetaDataElement("Version").toString();
        }
 catch (        Exception ex) {
          ex.printStackTrace();
          displayErrorDialog("An error has occurred while trying to obtain" + " installed package info",ex);
        }
      }
      m_model.setValueAt(installedV,row,getColumnIndex(INSTALLED_COLUMN));
      m_model.setValueAt(repositoryV,row,getColumnIndex(REPOSITORY_COLUMN));
      List<Object> catAndVers=m_packageLookupInfo.get(p.getName());
      String loadStatus=(String)catAndVers.get(2);
      m_model.setValueAt(loadStatus,row,getColumnIndex(LOADED_COLUMN));
      row++;
    }
    m_table.revalidate();
    m_table.repaint();
  }
 else   if (m_installedBut.isSelected()) {
    try {
      if (m_installedPackages == null) {
        m_installedPackages=WekaPackageManager.getInstalledPackages();
      }
      m_model.setRowCount(m_installedPackages.size());
      int row=0;
      for (      Package p : m_installedPackages) {
        m_model.setValueAt(p.getName(),row,getColumnIndex(PACKAGE_COLUMN));
        String installedV=p.getPackageMetaDataElement("Version").toString();
        String category="";
        if (p.getPackageMetaDataElement("Category") != null) {
          category=p.getPackageMetaDataElement("Category").toString();
        }
        List<Object> catAndVers=m_packageLookupInfo.get(p.getName());
        Object repositoryV="-----";
        if (catAndVers != null) {
          List<Object> repVersions=(List<Object>)catAndVers.get(1);
          repositoryV=repVersions.get(0);
        }
        m_model.setValueAt(category,row,getColumnIndex(CATEGORY_COLUMN));
        m_model.setValueAt(installedV,row,getColumnIndex(INSTALLED_COLUMN));
        m_model.setValueAt(repositoryV,row,getColumnIndex(REPOSITORY_COLUMN));
        if (catAndVers != null) {
          String loadStatus=(String)catAndVers.get(2);
          m_model.setValueAt(loadStatus,row,getColumnIndex(LOADED_COLUMN));
        }
 else {
          File packageRoot=new File(WekaPackageManager.getPackageHome().toString() + File.separator + p.getName());
          boolean loaded=WekaPackageManager.loadCheck(p,packageRoot);
          String loadStatus=(loaded) ? "Yes" : "No - check log";
          m_model.setValueAt(loadStatus,row,getColumnIndex(LOADED_COLUMN));
        }
        row++;
      }
    }
 catch (    Exception ex) {
      ex.printStackTrace();
    }
  }
 else {
    try {
      if (m_availablePackages == null) {
        m_availablePackages=WekaPackageManager.getAvailablePackages();
      }
      m_model.setRowCount(m_availablePackages.size());
      int row=0;
      for (      Package p : m_availablePackages) {
        m_model.setValueAt(p.getName(),row,getColumnIndex(PACKAGE_COLUMN));
        String category="";
        if (p.getPackageMetaDataElement("Category") != null) {
          category=p.getPackageMetaDataElement("Category").toString();
        }
        String installedV="";
        List<Object> catAndVers=m_packageLookupInfo.get(p.getName());
        List<Object> repVersions=(List<Object>)catAndVers.get(1);
        Object repositoryV=repVersions.get(0);
        m_model.setValueAt(category,row,getColumnIndex(CATEGORY_COLUMN));
        m_model.setValueAt(installedV,row,getColumnIndex(INSTALLED_COLUMN));
        m_model.setValueAt(repositoryV,row,getColumnIndex(REPOSITORY_COLUMN));
        String loadStatus=(String)catAndVers.get(2);
        m_model.setValueAt(loadStatus,row,getColumnIndex(LOADED_COLUMN));
        row++;
      }
    }
 catch (    Exception ex) {
      ex.printStackTrace();
    }
  }
}
