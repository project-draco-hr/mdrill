{
  Object result;
  String tmp;
  String key;
  boolean modified;
  result=null;
  key=rowIndex + "-" + columnIndex;
  if ((rowIndex >= 0) && (rowIndex < getRowCount()) && (columnIndex >= 0)&& (columnIndex < getColumnCount())) {
    if (columnIndex == 0) {
      result=new Integer(rowIndex + 1);
    }
 else {
      if (isMissingAt(rowIndex,columnIndex)) {
        result=null;
      }
 else {
        if (m_Cache.containsKey(key)) {
          result=m_Cache.get(key);
        }
 else {
switch (getType(columnIndex)) {
case Attribute.DATE:
case Attribute.NOMINAL:
case Attribute.STRING:
case Attribute.RELATIONAL:
            result=m_Data.instance(rowIndex).stringValue(columnIndex - 1);
          break;
case Attribute.NUMERIC:
        result=new Double(m_Data.instance(rowIndex).value(columnIndex - 1));
      break;
default :
    result="-can't display-";
}
if (getType(columnIndex) != Attribute.NUMERIC) {
  if (result != null) {
    tmp=result.toString();
    modified=false;
    if ((tmp.indexOf('<') > -1) || (tmp.indexOf('>') > -1)) {
      tmp=tmp.replace("<","(");
      tmp=tmp.replace(">",")");
      modified=true;
    }
    if ((tmp.indexOf("\n") > -1) || (tmp.indexOf("\r") > -1)) {
      tmp=tmp.replaceAll("\\r\\n","<font color=\"red\"><b>\\\\r\\\\n</b></font>");
      tmp=tmp.replaceAll("\\r","<font color=\"red\"><b>\\\\r</b></font>");
      tmp=tmp.replaceAll("\\n","<font color=\"red\"><b>\\\\n</b></font>");
      tmp="<html>" + tmp + "</html>";
      modified=true;
    }
    result=tmp;
    if (modified)     m_Cache.put(key,tmp);
  }
}
}
}
}
}
return result;
}
