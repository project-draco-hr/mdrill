{
  writeOut(CFH_SIG);
  written+=WORD;
  final long lfhOffset=offsets.get(ze).longValue();
  final boolean needsZip64Extra=hasZip64Extra(ze) || ze.getCompressedSize() >= ZIP64_MAGIC || ze.getSize() >= ZIP64_MAGIC || lfhOffset >= ZIP64_MAGIC;
  if (needsZip64Extra && zip64Mode == Zip64Mode.Never) {
    throw new Zip64RequiredException(Zip64RequiredException.ARCHIVE_TOO_BIG_MESSAGE);
  }
  handleZip64Extra(ze,lfhOffset,needsZip64Extra);
  writeOut(ZipShort.getBytes((ze.getPlatform() << 8) | (!hasUsedZip64 ? DATA_DESCRIPTOR_MIN_VERSION : ZIP64_MIN_VERSION)));
  written+=SHORT;
  final int zipMethod=ze.getMethod();
  final boolean encodable=zipEncoding.canEncode(ze.getName());
  writeVersionNeededToExtractAndGeneralPurposeBits(zipMethod,!encodable && fallbackToUTF8,needsZip64Extra);
  written+=WORD;
  writeOut(ZipShort.getBytes(zipMethod));
  written+=SHORT;
  writeOut(ZipUtil.toDosTime(ze.getTime()));
  written+=WORD;
  writeOut(ZipLong.getBytes(ze.getCrc()));
  if (ze.getCompressedSize() >= ZIP64_MAGIC || ze.getSize() >= ZIP64_MAGIC) {
    writeOut(ZipLong.ZIP64_MAGIC.getBytes());
    writeOut(ZipLong.ZIP64_MAGIC.getBytes());
  }
 else {
    writeOut(ZipLong.getBytes(ze.getCompressedSize()));
    writeOut(ZipLong.getBytes(ze.getSize()));
  }
  written+=12;
  ByteBuffer name=getName(ze);
  writeOut(ZipShort.getBytes(name.limit()));
  written+=SHORT;
  byte[] extra=ze.getCentralDirectoryExtra();
  writeOut(ZipShort.getBytes(extra.length));
  written+=SHORT;
  String comm=ze.getComment();
  if (comm == null) {
    comm="";
  }
  ByteBuffer commentB=getEntryEncoding(ze).encode(comm);
  writeOut(ZipShort.getBytes(commentB.limit()));
  written+=SHORT;
  writeOut(ZERO);
  written+=SHORT;
  writeOut(ZipShort.getBytes(ze.getInternalAttributes()));
  written+=SHORT;
  writeOut(ZipLong.getBytes(ze.getExternalAttributes()));
  written+=WORD;
  writeOut(ZipLong.getBytes(Math.min(lfhOffset,ZIP64_MAGIC)));
  written+=WORD;
  writeOut(name.array(),name.arrayOffset(),name.limit() - name.position());
  written+=name.limit();
  writeOut(extra);
  written+=extra.length;
  writeOut(commentB.array(),commentB.arrayOffset(),commentB.limit() - commentB.position());
  written+=commentB.limit();
}
