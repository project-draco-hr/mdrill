{
  int among_var;
  int v_1;
  ket=cursor;
  among_var=find_among_b(a_1,11);
  if (among_var == 0) {
    return false;
  }
  bra=cursor;
switch (among_var) {
case 0:
    return false;
case 1:
  lab0:   do {
    v_1=limit - cursor;
    lab1:     do {
      if (!(eq_s_b(2,"'t"))) {
        break lab1;
      }
      bra=cursor;
      slice_del();
      break lab0;
    }
 while (false);
    cursor=limit - v_1;
    lab2:     do {
      if (!(eq_s_b(2,"et"))) {
        break lab2;
      }
      bra=cursor;
      if (!r_R1()) {
        break lab2;
      }
      if (!r_C()) {
        break lab2;
      }
      slice_del();
      break lab0;
    }
 while (false);
    cursor=limit - v_1;
    lab3:     do {
      if (!(eq_s_b(3,"rnt"))) {
        break lab3;
      }
      bra=cursor;
      slice_from("rn");
      break lab0;
    }
 while (false);
    cursor=limit - v_1;
    lab4:     do {
      if (!(eq_s_b(1,"t"))) {
        break lab4;
      }
      bra=cursor;
      if (!r_R1()) {
        break lab4;
      }
      if (!r_VX()) {
        break lab4;
      }
      slice_del();
      break lab0;
    }
 while (false);
    cursor=limit - v_1;
    lab5:     do {
      if (!(eq_s_b(3,"ink"))) {
        break lab5;
      }
      bra=cursor;
      slice_from("ing");
      break lab0;
    }
 while (false);
    cursor=limit - v_1;
    lab6:     do {
      if (!(eq_s_b(2,"mp"))) {
        break lab6;
      }
      bra=cursor;
      slice_from("m");
      break lab0;
    }
 while (false);
    cursor=limit - v_1;
    lab7:     do {
      if (!(eq_s_b(1,"'"))) {
        break lab7;
      }
      bra=cursor;
      if (!r_R1()) {
        break lab7;
      }
      slice_del();
      break lab0;
    }
 while (false);
    cursor=limit - v_1;
    bra=cursor;
    if (!r_R1()) {
      return false;
    }
    if (!r_C()) {
      return false;
    }
    slice_del();
  }
 while (false);
break;
case 2:
if (!r_R1()) {
return false;
}
slice_from("g");
break;
case 3:
if (!r_R1()) {
return false;
}
slice_from("lijk");
break;
case 4:
if (!r_R1()) {
return false;
}
slice_from("isch");
break;
case 5:
if (!r_R1()) {
return false;
}
if (!r_C()) {
return false;
}
slice_del();
break;
case 6:
if (!r_R1()) {
return false;
}
slice_from("t");
break;
case 7:
if (!r_R1()) {
return false;
}
slice_from("s");
break;
case 8:
if (!r_R1()) {
return false;
}
slice_from("r");
break;
case 9:
if (!r_R1()) {
return false;
}
slice_del();
insert(cursor,cursor,"l");
if (!r_lengthen_V()) {
return false;
}
break;
case 10:
if (!r_R1()) {
return false;
}
if (!r_C()) {
return false;
}
slice_del();
insert(cursor,cursor,"en");
if (!r_lengthen_V()) {
return false;
}
break;
case 11:
if (!r_R1()) {
return false;
}
if (!r_C()) {
return false;
}
slice_from("ief");
break;
}
return true;
}
