{
  random=new Random(m_nSeed);
  FastVector attInfo=new FastVector(nNodes);
  FastVector nomStrings=new FastVector(nValues + 1);
  for (int iValue=0; iValue < nValues; iValue++) {
    nomStrings.addElement("Value" + (iValue + 1));
  }
  for (int iNode=0; iNode < nNodes; iNode++) {
    Attribute att=new Attribute("Node" + (iNode + 1),nomStrings);
    attInfo.addElement(att);
  }
  m_Instances=new Instances("RandomNet",attInfo,100);
  m_Instances.setClassIndex(nNodes - 1);
  setUseADTree(false);
  initStructure();
  m_Distributions=new Estimator[nNodes][1];
  for (int iNode=0; iNode < nNodes; iNode++) {
    m_Distributions[iNode][0]=new DiscreteEstimatorBayes(nValues,getEstimator().getAlpha());
  }
  m_nEvidence=new FastVector(nNodes);
  for (int i=0; i < nNodes; i++) {
    m_nEvidence.addElement(-1);
  }
  m_fMarginP=new FastVector(nNodes);
  for (int i=0; i < nNodes; i++) {
    double[] P=new double[getCardinality(i)];
    m_fMarginP.addElement(P);
  }
  m_nPositionX=new FastVector(nNodes);
  m_nPositionY=new FastVector(nNodes);
  for (int iNode=0; iNode < nNodes; iNode++) {
    m_nPositionX.addElement(iNode % 10 * 50);
    m_nPositionY.addElement(((int)(iNode / 10)) * 50);
  }
}
