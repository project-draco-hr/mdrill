{
  boolean[] bConnected=new boolean[nNodes];
  int nNode1=random.nextInt(nNodes);
  int nNode2=random.nextInt(nNodes);
  if (nNode1 == nNode2) {
    nNode2=(nNode1 + 1) % nNodes;
  }
  if (nNode2 < nNode1) {
    int h=nNode1;
    nNode1=nNode2;
    nNode2=h;
  }
  m_ParentSets[nNode2].addParent(nNode1,m_Instances);
  bConnected[nNode1]=true;
  bConnected[nNode2]=true;
  for (int iArc=2; iArc < nNodes; iArc++) {
    int nNode=random.nextInt(nNodes);
    nNode1=0;
    while (nNode >= 0) {
      nNode1=(nNode1 + 1) % nNodes;
      while (!bConnected[nNode1]) {
        nNode1=(nNode1 + 1) % nNodes;
      }
      nNode--;
    }
    nNode=random.nextInt(nNodes);
    nNode2=0;
    while (nNode >= 0) {
      nNode2=(nNode2 + 1) % nNodes;
      while (bConnected[nNode2]) {
        nNode2=(nNode2 + 1) % nNodes;
      }
      nNode--;
    }
    if (nNode2 < nNode1) {
      int h=nNode1;
      nNode1=nNode2;
      nNode2=h;
    }
    m_ParentSets[nNode2].addParent(nNode1,m_Instances);
    bConnected[nNode1]=true;
    bConnected[nNode2]=true;
  }
}
