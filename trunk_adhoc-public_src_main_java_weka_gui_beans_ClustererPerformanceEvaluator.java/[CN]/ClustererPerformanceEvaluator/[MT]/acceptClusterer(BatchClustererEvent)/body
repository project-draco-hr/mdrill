{
  if (ce.getTestSet().isStructureOnly()) {
    return;
  }
  try {
    if (m_evaluateThread == null) {
      m_evaluateThread=new Thread(){
        public void run(){
          boolean numericClass=false;
          try {
            if (ce.getSetNumber() == 1) {
              m_eval=new ClusterEvaluation();
              m_clusterer=ce.getClusterer();
              m_eval.setClusterer(m_clusterer);
            }
            if (ce.getSetNumber() <= ce.getMaxSetNumber()) {
              if (m_logger != null) {
                m_logger.statusMessage(statusMessagePrefix() + "Evaluating (" + ce.getSetNumber()+ ")...");
              }
              m_visual.setAnimated();
              if (ce.getTestSet().getDataSet().classIndex() != -1 && ce.getTestSet().getDataSet().classAttribute().isNumeric()) {
                numericClass=true;
                ce.getTestSet().getDataSet().setClassIndex(-1);
              }
              m_eval.evaluateClusterer(ce.getTestSet().getDataSet());
            }
            if (ce.getSetNumber() == ce.getMaxSetNumber()) {
              String textTitle=m_clusterer.getClass().getName();
              textTitle=textTitle.substring(textTitle.lastIndexOf('.') + 1,textTitle.length());
              String test;
              if (ce.getTestOrTrain() == 0)               test="test";
 else               test="training";
              String resultT="=== Evaluation result for " + test + " instances ===\n\n"+ "Scheme: "+ textTitle+ "\n"+ "Relation: "+ ce.getTestSet().getDataSet().relationName()+ "\n\n"+ m_eval.clusterResultsToString();
              if (numericClass)               resultT=resultT + "\n\nNo class based evaluation possible. Class attribute has to be nominal.";
              TextEvent te=new TextEvent(ClustererPerformanceEvaluator.this,resultT,textTitle);
              notifyTextListeners(te);
              if (m_logger != null) {
                m_logger.statusMessage(statusMessagePrefix() + "Finished.");
              }
            }
          }
 catch (          Exception ex) {
            ClustererPerformanceEvaluator.this.stop();
            if (m_logger != null) {
              m_logger.statusMessage(statusMessagePrefix() + "ERROR (see log for details");
              m_logger.logMessage("[ClustererPerformanceEvaluator] " + statusMessagePrefix() + " problem while evaluating clusterer. "+ ex.getMessage());
            }
            ex.printStackTrace();
          }
 finally {
            m_visual.setStatic();
            m_evaluateThread=null;
            if (isInterrupted()) {
              if (m_logger != null) {
                m_logger.logMessage("[" + getCustomName() + "] Evaluation interrupted!");
                m_logger.statusMessage(statusMessagePrefix() + "INTERRUPTED");
              }
            }
            block(false);
          }
        }
      }
;
      m_evaluateThread.setPriority(Thread.MIN_PRIORITY);
      m_evaluateThread.start();
      block(true);
      m_evaluateThread=null;
    }
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
}
