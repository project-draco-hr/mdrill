{
  Instance result=inst;
  if (!isDateBased()) {
    throw new Exception("This periodicity is not date timestamp-based");
  }
  int origIndex=result.dataset().attribute(timeStampName).index();
  Calendar c=new GregorianCalendar();
  boolean applyTrainingSkipAdjust=true;
  long localSkipAdjust=0;
  if (!result.isMissing(origIndex)) {
    Date d=new Date((long)result.value(origIndex));
    double origValue=result.value(origIndex);
    if (m_skipList != null && m_skipList.size() > 0 && previous != null) {
      if (dateInSkipList(d)) {
        throw new Exception("This instance contains a date time stamp that is " + "a member of the skip list - skip list entries are not time " + "units with respect to the model and should not be present : "+ inst.toString());
      }
      if (!previous.isMissing(origIndex)) {
        if (result.value(origIndex) >= previous.value(origIndex)) {
          double start=previous.value(origIndex);
          double end=origValue;
          while (start < end) {
            start=weka.classifiers.timeseries.core.Utils.advanceSuppliedTimeValue(start,this);
            if (start < end) {
              if (dateInSkipList(new Date((long)start))) {
                m_trainingRemapSkipAdjust--;
              }
 else {
                throw new Exception("There is an increment of more than " + "one time step between\n" + previous.toString() + "\nand\n"+ inst.toString()+ "\n but none of the "+ "intervening time steps are in the "+ "skip list.");
              }
            }
          }
        }
 else {
          throw new Exception("The data does not seem to be sorted in ascending order " + "of the date time stamp!");
        }
      }
    }
    if (m_skipList != null && m_skipList.size() > 0 && previous == null) {
      if (origValue < m_dateTimeStampInitialVal) {
        throw new Exception("The timestamp for this instance occurs before the " + "timestamp of the first training instance!");
      }
      double end=result.value(origIndex);
      while (dateInSkipList(new Date((long)end))) {
        end=weka.classifiers.timeseries.core.Utils.advanceSuppliedTimeValue(end,this);
      }
      double start=0;
      if (end < m_dateTimeStampFinalVal) {
        applyTrainingSkipAdjust=false;
        start=m_dateTimeStampInitialVal;
      }
 else {
        start=m_dateTimeStampFinalVal;
      }
      while (start < end) {
        start=weka.classifiers.timeseries.core.Utils.advanceSuppliedTimeValue(start,this);
        if (start < end) {
          if (dateInSkipList(new Date((long)start))) {
            localSkipAdjust--;
          }
        }
      }
      d=new Date((long)end);
      origValue=end;
    }
    if (m_handlerPeriodicity == Periodicity.MONTHLY || m_handlerPeriodicity == Periodicity.WEEKLY || m_handlerPeriodicity == Periodicity.QUARTERLY) {
      c.setTime(d);
      long year=c.get(Calendar.YEAR);
      long month=c.get(Calendar.MONTH);
      long week=c.get(Calendar.WEEK_OF_YEAR);
      long remapped=0;
      if (m_handlerPeriodicity == Periodicity.MONTHLY) {
        remapped=((year - m_dateTimeStampBaseVal) * 12) + month;
      }
 else       if (m_handlerPeriodicity == Periodicity.WEEKLY) {
        remapped=((year - m_dateTimeStampBaseVal) * 52) + week;
        if (month == Calendar.DECEMBER && week == 1) {
          remapped+=52;
        }
      }
 else       if (m_handlerPeriodicity == Periodicity.QUARTERLY) {
        remapped=((year - m_dateTimeStampBaseVal) * 4) + ((month / 3L) + 1L);
      }
      if (m_skipList != null && m_skipList.size() > 0) {
        remapped+=(applyTrainingSkipAdjust) ? m_trainingRemapSkipAdjust : 0;
        remapped+=localSkipAdjust;
      }
      result.setValue(result.numAttributes() - 1,remapped);
    }
 else {
      double remapped=origValue - m_dateTimeStampInitialVal;
      remapped/=deltaTime();
      if (m_skipList != null && m_skipList.size() > 0) {
        remapped+=(applyTrainingSkipAdjust) ? m_trainingRemapSkipAdjust : 0;
        remapped+=localSkipAdjust;
      }
      result.setValue(result.numAttributes() - 1,remapped);
    }
  }
  return result;
}
