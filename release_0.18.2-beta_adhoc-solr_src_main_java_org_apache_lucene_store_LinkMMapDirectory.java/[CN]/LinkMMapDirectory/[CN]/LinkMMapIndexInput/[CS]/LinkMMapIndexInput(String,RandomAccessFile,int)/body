{
  super(resourceDescription);
  this.length=raf.length();
  this.chunkSizePower=chunkSizePower;
  this.chunkSize=1L << chunkSizePower;
  this.chunkSizeMask=chunkSize - 1L;
  if (chunkSizePower < 0 || chunkSizePower > 30)   throw new IllegalArgumentException("Invalid chunkSizePower used for ByteBuffer size: " + chunkSizePower);
  if ((length >>> chunkSizePower) >= Integer.MAX_VALUE)   throw new IllegalArgumentException("RandomAccessFile too big for chunk size: " + raf.toString());
  final int nrBuffers=(int)(length >>> chunkSizePower) + 1;
  this.buffers=new ByteBuffer[nrBuffers];
  long bufferStart=0L;
  FileChannel rafc=raf.getChannel();
  for (int bufNr=0; bufNr < nrBuffers; bufNr++) {
    int bufSize=(int)((length > (bufferStart + chunkSize)) ? chunkSize : (length - bufferStart));
    this.buffers[bufNr]=rafc.map(MapMode.READ_ONLY,bufferStart,bufSize);
    bufferStart+=bufSize;
  }
  seek(0L);
}
