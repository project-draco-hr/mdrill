{
  int i;
  char[] word=new char[len + 3];
  char[] c=new char[2];
  int iIgnoreAtBeginning=0;
  int iLength=len;
  boolean bEndOfLetters=false;
  for (i=1; i <= len; i++) {
    c[0]=w[offset + i - 1];
    int nc=classmap.find(c,0);
    if (nc < 0) {
      if (i == (1 + iIgnoreAtBeginning)) {
        iIgnoreAtBeginning++;
      }
 else {
        bEndOfLetters=true;
      }
      iLength--;
    }
 else {
      if (!bEndOfLetters) {
        word[i - iIgnoreAtBeginning]=(char)nc;
      }
 else {
        return null;
      }
    }
  }
  len=iLength;
  if (len < (remainCharCount + pushCharCount)) {
    return null;
  }
  int[] result=new int[len + 1];
  int k=0;
  String sw=new String(word,1,len);
  if (stoplist.containsKey(sw)) {
    ArrayList<Object> hw=stoplist.get(sw);
    int j=0;
    for (i=0; i < hw.size(); i++) {
      Object o=hw.get(i);
      if (o instanceof String) {
        j+=((String)o).length();
        if (j >= remainCharCount && j < (len - pushCharCount)) {
          result[k++]=j + iIgnoreAtBeginning;
        }
      }
    }
  }
 else {
    word[0]='.';
    word[len + 1]='.';
    word[len + 2]=0;
    byte[] il=new byte[len + 3];
    for (i=0; i < len + 1; i++) {
      searchPatterns(word,i,il);
    }
    for (i=0; i < len; i++) {
      if (((il[i + 1] & 1) == 1) && i >= remainCharCount && i <= (len - pushCharCount)) {
        result[k++]=i + iIgnoreAtBeginning;
      }
    }
  }
  if (k > 0) {
    int[] res=new int[k + 2];
    System.arraycopy(result,0,res,1,k);
    res[0]=0;
    res[k + 1]=len;
    return new Hyphenation(res);
  }
 else {
    return null;
  }
}
