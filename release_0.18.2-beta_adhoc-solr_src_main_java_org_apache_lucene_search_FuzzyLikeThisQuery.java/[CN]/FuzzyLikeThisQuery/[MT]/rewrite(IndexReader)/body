{
  if (rewrittenQuery != null) {
    return rewrittenQuery;
  }
  for (Iterator<FieldVals> iter=fieldVals.iterator(); iter.hasNext(); ) {
    FieldVals f=iter.next();
    addTerms(reader,f);
  }
  fieldVals.clear();
  BooleanQuery bq=new BooleanQuery();
  HashMap<Term,ArrayList<ScoreTerm>> variantQueries=new HashMap<Term,ArrayList<ScoreTerm>>();
  int size=q.size();
  for (int i=0; i < size; i++) {
    ScoreTerm st=q.pop();
    ArrayList<ScoreTerm> l=variantQueries.get(st.fuzziedSourceTerm);
    if (l == null) {
      l=new ArrayList<ScoreTerm>();
      variantQueries.put(st.fuzziedSourceTerm,l);
    }
    l.add(st);
  }
  for (Iterator<ArrayList<ScoreTerm>> iter=variantQueries.values().iterator(); iter.hasNext(); ) {
    ArrayList<ScoreTerm> variants=iter.next();
    if (variants.size() == 1) {
      ScoreTerm st=variants.get(0);
      TermQuery tq=new FuzzyTermQuery(st.term,ignoreTF);
      tq.setBoost(st.score);
      bq.add(tq,BooleanClause.Occur.SHOULD);
    }
 else {
      BooleanQuery termVariants=new BooleanQuery(true);
      for (Iterator<ScoreTerm> iterator2=variants.iterator(); iterator2.hasNext(); ) {
        ScoreTerm st=iterator2.next();
        TermQuery tq=new FuzzyTermQuery(st.term,ignoreTF);
        tq.setBoost(st.score);
        termVariants.add(tq,BooleanClause.Occur.SHOULD);
      }
      bq.add(termVariants,BooleanClause.Occur.SHOULD);
    }
  }
  bq.setBoost(getBoost());
  this.rewrittenQuery=bq;
  return bq;
}
