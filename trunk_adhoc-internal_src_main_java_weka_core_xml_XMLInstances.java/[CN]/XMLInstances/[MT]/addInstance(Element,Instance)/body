{
  Element node;
  Element value;
  Element child;
  boolean sparse;
  int i;
  int n;
  int index;
  node=m_Document.createElement(TAG_INSTANCE);
  parent.appendChild(node);
  sparse=(inst instanceof SparseInstance);
  if (sparse)   node.setAttribute(ATT_TYPE,VAL_SPARSE);
  if (inst.weight() != 1.0)   node.setAttribute(ATT_WEIGHT,Utils.doubleToString(inst.weight(),m_Precision));
  for (i=0; i < inst.numValues(); i++) {
    index=inst.index(i);
    value=m_Document.createElement(TAG_VALUE);
    node.appendChild(value);
    if (inst.isMissing(index)) {
      value.setAttribute(ATT_MISSING,VAL_YES);
    }
 else {
      if (inst.attribute(index).isRelationValued()) {
        child=m_Document.createElement(TAG_INSTANCES);
        value.appendChild(child);
        for (n=0; n < inst.relationalValue(i).numInstances(); n++)         addInstance(child,inst.relationalValue(i).instance(n));
      }
 else {
        if (inst.attribute(index).type() == Attribute.NUMERIC)         value.appendChild(m_Document.createTextNode(Utils.doubleToString(inst.value(index),m_Precision)));
 else         value.appendChild(m_Document.createTextNode(validContent(inst.stringValue(index))));
      }
    }
    if (sparse)     value.setAttribute(ATT_INDEX,"" + (index + 1));
  }
}
