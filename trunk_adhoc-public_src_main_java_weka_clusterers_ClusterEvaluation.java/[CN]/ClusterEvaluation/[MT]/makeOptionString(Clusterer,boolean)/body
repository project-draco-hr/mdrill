{
  StringBuffer optionsText=new StringBuffer("");
  optionsText.append("\n\nGeneral options:\n\n");
  optionsText.append("-h or -help\n");
  optionsText.append("\tOutput help information.\n");
  optionsText.append("-synopsis or -info\n");
  optionsText.append("\tOutput synopsis for clusterer (use in conjunction " + " with -h)\n");
  optionsText.append("-t <name of training file>\n");
  optionsText.append("\tSets training file.\n");
  optionsText.append("-T <name of test file>\n");
  optionsText.append("\tSets test file.\n");
  optionsText.append("-l <name of input file>\n");
  optionsText.append("\tSets model input file.\n");
  optionsText.append("-d <name of output file>\n");
  optionsText.append("\tSets model output file.\n");
  optionsText.append("-p <attribute range>\n");
  optionsText.append("\tOutput predictions. Predictions are for " + "training file" + "\n\tif only training file is specified,"+ "\n\totherwise predictions are for the test file."+ "\n\tThe range specifies attribute values to be output"+ "\n\twith the predictions. Use '-p 0' for none.\n");
  optionsText.append("-x <number of folds>\n");
  optionsText.append("\tOnly Distribution Clusterers can be cross validated.\n");
  optionsText.append("-s <random number seed>\n");
  optionsText.append("\tSets the seed for randomizing the data in cross-validation\n");
  optionsText.append("-c <class index>\n");
  optionsText.append("\tSet class attribute. If supplied, class is ignored");
  optionsText.append("\n\tduring clustering but is used in a classes to");
  optionsText.append("\n\tclusters evaluation.\n");
  if (clusterer instanceof Drawable) {
    optionsText.append("-g <name of graph file>\n");
    optionsText.append("\tOutputs the graph representation of the clusterer to the file.\n");
  }
  if (clusterer instanceof OptionHandler) {
    optionsText.append("\nOptions specific to " + clusterer.getClass().getName() + ":\n\n");
    Enumeration enu=((OptionHandler)clusterer).listOptions();
    while (enu.hasMoreElements()) {
      Option option=(Option)enu.nextElement();
      optionsText.append(option.synopsis() + '\n');
      optionsText.append(option.description() + "\n");
    }
  }
  if (globalInfo) {
    try {
      String gi=getGlobalInfo(clusterer);
      optionsText.append(gi);
    }
 catch (    Exception ex) {
    }
  }
  return optionsText.toString();
}
