{
  return new FieldCacheRangeFilter<Double>(field,parser,lowerVal,upperVal,includeLower,includeUpper){
    @Override public DocIdSet getDocIdSet(    IndexReader reader) throws IOException {
      final double inclusiveLowerPoint, inclusiveUpperPoint;
      if (lowerVal != null) {
        double f=lowerVal.doubleValue();
        if (!includeUpper && f > 0.0 && Double.isInfinite(f))         return DocIdSet.EMPTY_DOCIDSET;
        long i=NumericUtils.doubleToSortableLong(f);
        inclusiveLowerPoint=NumericUtils.sortableLongToDouble(includeLower ? i : (i + 1L));
      }
 else {
        inclusiveLowerPoint=Double.NEGATIVE_INFINITY;
      }
      if (upperVal != null) {
        double f=upperVal.doubleValue();
        if (!includeUpper && f < 0.0 && Double.isInfinite(f))         return DocIdSet.EMPTY_DOCIDSET;
        long i=NumericUtils.doubleToSortableLong(f);
        inclusiveUpperPoint=NumericUtils.sortableLongToDouble(includeUpper ? i : (i - 1L));
      }
 else {
        inclusiveUpperPoint=Double.POSITIVE_INFINITY;
      }
      if (inclusiveLowerPoint > inclusiveUpperPoint)       return DocIdSet.EMPTY_DOCIDSET;
      final double[] values=FieldCache.DEFAULT.getDoubles(reader,field,(FieldCache.DoubleParser)parser);
      return new FieldCacheDocIdSet(reader,(inclusiveLowerPoint <= 0.0 && inclusiveUpperPoint >= 0.0)){
        @Override boolean matchDoc(        int doc){
          return values[doc] >= inclusiveLowerPoint && values[doc] <= inclusiveUpperPoint;
        }
      }
;
    }
  }
;
}
