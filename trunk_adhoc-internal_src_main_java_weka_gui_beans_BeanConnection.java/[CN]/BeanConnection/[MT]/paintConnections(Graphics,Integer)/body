{
  int tabIndex=0;
  if (tab.length > 0) {
    tabIndex=tab[0].intValue();
  }
  Vector connections=TABBED_CONNECTIONS.get(tabIndex);
  for (int i=0; i < connections.size(); i++) {
    BeanConnection bc=(BeanConnection)connections.elementAt(i);
    if (!bc.isHidden()) {
      BeanInstance source=bc.getSource();
      BeanInstance target=bc.getTarget();
      EventSetDescriptor srcEsd=bc.getSourceEventSetDescriptor();
      BeanVisual sourceVisual=(source.getBean() instanceof Visible) ? ((Visible)source.getBean()).getVisual() : null;
      BeanVisual targetVisual=(target.getBean() instanceof Visible) ? ((Visible)target.getBean()).getVisual() : null;
      if (sourceVisual != null && targetVisual != null) {
        Point bestSourcePt=sourceVisual.getClosestConnectorPoint(new Point((target.getX() + (target.getWidth() / 2)),(target.getY() + (target.getHeight() / 2))));
        Point bestTargetPt=targetVisual.getClosestConnectorPoint(new Point((source.getX() + (source.getWidth() / 2)),(source.getY() + (source.getHeight() / 2))));
        gx.setColor(Color.red);
        boolean active=true;
        if (source.getBean() instanceof EventConstraints) {
          if (!((EventConstraints)source.getBean()).eventGeneratable(srcEsd.getName())) {
            gx.setColor(Color.gray);
            active=false;
          }
        }
        gx.drawLine((int)bestSourcePt.getX(),(int)bestSourcePt.getY(),(int)bestTargetPt.getX(),(int)bestTargetPt.getY());
        double angle;
        try {
          double a=(double)(bestSourcePt.getY() - bestTargetPt.getY()) / (double)(bestSourcePt.getX() - bestTargetPt.getX());
          angle=Math.atan(a);
        }
 catch (        Exception ex) {
          angle=Math.PI / 2;
        }
        Point arrowstart=new Point(bestTargetPt.x,bestTargetPt.y);
        Point arrowoffset=new Point((int)(7 * Math.cos(angle)),(int)(7 * Math.sin(angle)));
        Point arrowend;
        if (bestSourcePt.getX() >= bestTargetPt.getX()) {
          arrowend=new Point(arrowstart.x + arrowoffset.x,arrowstart.y + arrowoffset.y);
        }
 else {
          arrowend=new Point(arrowstart.x - arrowoffset.x,arrowstart.y - arrowoffset.y);
        }
        int xs[]={arrowstart.x,arrowend.x + (int)(7 * Math.cos(angle + (Math.PI / 2))),arrowend.x + (int)(7 * Math.cos(angle - (Math.PI / 2)))};
        int ys[]={arrowstart.y,arrowend.y + (int)(7 * Math.sin(angle + (Math.PI / 2))),arrowend.y + (int)(7 * Math.sin(angle - (Math.PI / 2)))};
        gx.fillPolygon(xs,ys,3);
        int midx=(int)bestSourcePt.getX();
        midx+=(int)((bestTargetPt.getX() - bestSourcePt.getX()) / 2);
        int midy=(int)bestSourcePt.getY();
        midy+=(int)((bestTargetPt.getY() - bestSourcePt.getY()) / 2) - 2;
        gx.setColor((active) ? Color.blue : Color.gray);
        if (previousLink(source,target,i,tab)) {
          midy-=15;
        }
        gx.drawString(srcEsd.getName(),midx,midy);
      }
    }
  }
}
