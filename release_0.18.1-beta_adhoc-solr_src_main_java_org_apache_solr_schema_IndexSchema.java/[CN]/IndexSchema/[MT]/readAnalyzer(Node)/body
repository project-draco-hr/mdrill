{
  if (node == null)   return null;
  NamedNodeMap attrs=node.getAttributes();
  String analyzerName=DOMUtil.getAttr(attrs,"class");
  if (analyzerName != null) {
    try {
      final Class<? extends Analyzer> clazz=loader.findClass(analyzerName).asSubclass(Analyzer.class);
      try {
        Constructor<? extends Analyzer> cnstr=clazz.getConstructor(Version.class);
        final String matchVersionStr=DOMUtil.getAttr(attrs,LUCENE_MATCH_VERSION_PARAM);
        final Version luceneMatchVersion=(matchVersionStr == null) ? solrConfig.luceneMatchVersion : Config.parseLuceneVersionString(matchVersionStr);
        if (luceneMatchVersion == null) {
          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,"Configuration Error: Analyzer '" + clazz.getName() + "' needs a 'luceneMatchVersion' parameter");
        }
        return cnstr.newInstance(luceneMatchVersion);
      }
 catch (      NoSuchMethodException nsme) {
        return clazz.newInstance();
      }
    }
 catch (    Exception e) {
      log.error("Cannot load analyzer: " + analyzerName,e);
      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,"Cannot load analyzer: " + analyzerName,e);
    }
  }
  XPath xpath=XPathFactory.newInstance().newXPath();
  final ArrayList<CharFilterFactory> charFilters=new ArrayList<CharFilterFactory>();
  AbstractPluginLoader<CharFilterFactory> charFilterLoader=new AbstractPluginLoader<CharFilterFactory>("[schema.xml] analyzer/charFilter",false,false){
    @Override protected void init(    CharFilterFactory plugin,    Node node) throws Exception {
      if (plugin != null) {
        final Map<String,String> params=DOMUtil.toMapExcept(node.getAttributes(),"class");
        if (!params.containsKey(LUCENE_MATCH_VERSION_PARAM))         params.put(LUCENE_MATCH_VERSION_PARAM,solrConfig.luceneMatchVersion.toString());
        plugin.init(params);
        charFilters.add(plugin);
      }
    }
    @Override protected CharFilterFactory register(    String name,    CharFilterFactory plugin) throws Exception {
      return null;
    }
  }
;
  charFilterLoader.load(solrConfig.getResourceLoader(),(NodeList)xpath.evaluate("./charFilter",node,XPathConstants.NODESET));
  final ArrayList<TokenizerFactory> tokenizers=new ArrayList<TokenizerFactory>(1);
  AbstractPluginLoader<TokenizerFactory> tokenizerLoader=new AbstractPluginLoader<TokenizerFactory>("[schema.xml] analyzer/tokenizer",false,false){
    @Override protected void init(    TokenizerFactory plugin,    Node node) throws Exception {
      if (!tokenizers.isEmpty()) {
        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,"The schema defines multiple tokenizers for: " + node);
      }
      final Map<String,String> params=DOMUtil.toMapExcept(node.getAttributes(),"class");
      if (!params.containsKey(LUCENE_MATCH_VERSION_PARAM))       params.put(LUCENE_MATCH_VERSION_PARAM,solrConfig.luceneMatchVersion.toString());
      plugin.init(params);
      tokenizers.add(plugin);
    }
    @Override protected TokenizerFactory register(    String name,    TokenizerFactory plugin) throws Exception {
      return null;
    }
  }
;
  tokenizerLoader.load(loader,(NodeList)xpath.evaluate("./tokenizer",node,XPathConstants.NODESET));
  if (tokenizers.isEmpty()) {
    throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,"analyzer without class or tokenizer & filter list");
  }
  final ArrayList<TokenFilterFactory> filters=new ArrayList<TokenFilterFactory>();
  AbstractPluginLoader<TokenFilterFactory> filterLoader=new AbstractPluginLoader<TokenFilterFactory>("[schema.xml] analyzer/filter",false,false){
    @Override protected void init(    TokenFilterFactory plugin,    Node node) throws Exception {
      if (plugin != null) {
        final Map<String,String> params=DOMUtil.toMapExcept(node.getAttributes(),"class");
        if (!params.containsKey(LUCENE_MATCH_VERSION_PARAM))         params.put(LUCENE_MATCH_VERSION_PARAM,solrConfig.luceneMatchVersion.toString());
        plugin.init(params);
        filters.add(plugin);
      }
    }
    @Override protected TokenFilterFactory register(    String name,    TokenFilterFactory plugin) throws Exception {
      return null;
    }
  }
;
  filterLoader.load(loader,(NodeList)xpath.evaluate("./filter",node,XPathConstants.NODESET));
  return new TokenizerChain(charFilters.toArray(new CharFilterFactory[charFilters.size()]),tokenizers.get(0),filters.toArray(new TokenFilterFactory[filters.size()]));
}
