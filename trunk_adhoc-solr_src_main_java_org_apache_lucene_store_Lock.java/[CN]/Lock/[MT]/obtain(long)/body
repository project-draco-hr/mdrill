{
  failureReason=null;
  boolean locked=obtain();
  if (lockWaitTimeout < 0 && lockWaitTimeout != LOCK_OBTAIN_WAIT_FOREVER)   throw new IllegalArgumentException("lockWaitTimeout should be LOCK_OBTAIN_WAIT_FOREVER or a non-negative number (got " + lockWaitTimeout + ")");
  long maxSleepCount=lockWaitTimeout / LOCK_POLL_INTERVAL;
  long sleepCount=0;
  while (!locked) {
    if (lockWaitTimeout != LOCK_OBTAIN_WAIT_FOREVER && sleepCount++ >= maxSleepCount) {
      String reason="Lock obtain timed out: " + this.toString();
      if (failureReason != null) {
        reason+=": " + failureReason;
      }
      LockObtainFailedException e=new LockObtainFailedException(reason);
      if (failureReason != null) {
        e.initCause(failureReason);
      }
      throw e;
    }
    try {
      Thread.sleep(LOCK_POLL_INTERVAL);
    }
 catch (    InterruptedException ie) {
      throw new ThreadInterruptedException(ie);
    }
    locked=obtain();
  }
  return locked;
}
