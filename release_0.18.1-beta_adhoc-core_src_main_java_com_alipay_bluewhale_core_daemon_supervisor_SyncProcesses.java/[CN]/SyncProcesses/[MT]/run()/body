{
  Map<Integer,LocalAssignment> assignedTasks=null;
  try {
    assignedTasks=(Map<Integer,LocalAssignment>)localState.get(Common.LS_LOCAL_ASSIGNMENTS);
  }
 catch (  IOException e) {
    LOG.error("Failed to get Common.LS_LOCAL_ASSIGNMENTS from localState\n",e);
  }
  if (assignedTasks == null) {
    assignedTasks=new HashMap<Integer,LocalAssignment>();
  }
  Map<String,StateHeartbeat> allocated=null;
  try {
    allocated=readAllocatedworkers(conf,localState,assignedTasks);
  }
 catch (  IOException e2) {
    LOG.error("readAllocatedworkers" + allocated + " failed");
  }
  Map<String,StateHeartbeat> keepers=null;
  Set<Integer> keepPorts=null;
  if (allocated != null) {
    keepers=new HashMap<String,StateHeartbeat>();
    keepPorts=new HashSet<Integer>();
    Set<Entry<String,StateHeartbeat>> allocatedSet=allocated.entrySet();
    for (Iterator<Entry<String,StateHeartbeat>> it=allocatedSet.iterator(); it.hasNext(); ) {
      Entry<String,StateHeartbeat> entry=it.next();
      String workerid=entry.getKey();
      StateHeartbeat hbstate=entry.getValue();
      if (hbstate.getState().equals(State.valid)) {
        keepers.put(workerid,hbstate);
      }
      if (hbstate.getHeartbeat() != null) {
        keepPorts.add(hbstate.getHeartbeat().getPort());
      }
      if (hbstate.getState() != State.valid) {
        StringBuilder sb=new StringBuilder();
        sb.append("Shutting down and clearing state for id ");
        sb.append(workerid);
        sb.append(";State:");
        sb.append(hbstate.getState());
        sb.append(";Heartbeat");
        sb.append(hbstate.getHeartbeat());
        LOG.info(sb);
        try {
          shutWorker(conf,supervisorId,workerid,workerThreadPids);
        }
 catch (        IOException e) {
          String errMsg="Failed to shutdown worker workId:" + workerid + ",supervisorId: "+ supervisorId+ ",workerThreadPids:"+ workerThreadPids;
          LOG.error(errMsg,e);
        }
      }
    }
  }
  Map<Integer,LocalAssignment> reassignTasks=StormUtils.select_keys_pred(keepPorts,assignedTasks);
  Map<Integer,String> newWorkerIds=null;
  if (reassignTasks != null) {
    newWorkerIds=new HashMap<Integer,String>();
    Set<Integer> reassignedTaskSet=reassignTasks.keySet();
    for (    Integer port : reassignedTaskSet) {
      String newWorkerId=UUID.randomUUID().toString();
      newWorkerIds.put(port,newWorkerId);
      String path=StormConfig.worker_pids_root(conf,newWorkerId);
      try {
        PathUtils.local_mkdirs(path);
      }
 catch (      IOException e) {
        LOG.error("Making dirs at " + path + " failed");
      }
    }
  }
  LOG.debug("Syncing processes");
  LOG.debug("Assigned tasks: " + assignedTasks);
  LOG.debug("Allocated: " + allocated);
  Map<String,Integer> lsApprovedWorkers=null;
  try {
    lsApprovedWorkers=(Map<String,Integer>)localState.get(Common.LS_APPROVED_WORKERS);
  }
 catch (  IOException e) {
    LOG.error("get Common.LS_APPROVED_WORKERS of localState failed");
  }
  if (lsApprovedWorkers == null) {
    lsApprovedWorkers=new HashMap<String,Integer>();
  }
  Map<String,Integer> approvedWorkers=new HashMap<String,Integer>();
  if (keepers != null && lsApprovedWorkers != null) {
    Set<String> keepersKeySet=keepers.keySet();
    Set<Entry<String,Integer>> lsAWEntrySet=lsApprovedWorkers.entrySet();
    for (Iterator<Entry<String,Integer>> it=lsAWEntrySet.iterator(); it.hasNext(); ) {
      Entry<String,Integer> entry=it.next();
      String keepWorkerId=entry.getKey();
      if (keepersKeySet.contains(keepWorkerId)) {
        approvedWorkers.put(keepWorkerId,entry.getValue());
      }
    }
  }
  if (newWorkerIds != null) {
    Set<Entry<Integer,String>> newWorkerIdsEntrySet=newWorkerIds.entrySet();
    for (    Entry<Integer,String> entry : newWorkerIdsEntrySet) {
      String workerId=entry.getValue();
      Integer port=entry.getKey();
      approvedWorkers.put(workerId,port);
    }
  }
  try {
    localState.put(Common.LS_APPROVED_WORKERS,approvedWorkers);
  }
 catch (  IOException e1) {
    LOG.error("put Common.LS_APPROVED_WORKERS " + approvedWorkers + " of localState failed");
  }
  if (reassignTasks != null) {
    Set<Entry<Integer,LocalAssignment>> reassignTasksEntrySet=reassignTasks.entrySet();
    for (    Entry<Integer,LocalAssignment> entry : reassignTasksEntrySet) {
      Integer port=entry.getKey();
      LocalAssignment assignment=entry.getValue();
      String workerId=newWorkerIds.get(port);
      StringBuilder sb=new StringBuilder();
      sb.append("Launching worker with assiangment ");
      sb.append(assignment.toString());
      sb.append(" for the supervisor ");
      sb.append(supervisorId);
      sb.append(" on port ");
      sb.append(port);
      sb.append(" with id ");
      sb.append(workerId);
      LOG.info(sb);
      try {
        String clusterMode=StormConfig.cluster_mode(conf);
        if (clusterMode.equals("distributed")) {
          launchWorker(conf,sharedContext,assignment.getTopologyId(),supervisorId,port,workerId);
        }
 else         if (clusterMode.equals("local")) {
          launchWorker(conf,sharedContext,assignment.getTopologyId(),supervisorId,port,workerId,workerThreadPids);
        }
      }
 catch (      Exception e) {
        String errorMsg="Failed to launchWorker workerId:" + workerId + ":"+ port;
        LOG.error(errorMsg,e);
      }
    }
  }
  Collection<String> workerIds=newWorkerIds.values();
  try {
    waitForWorkersLaunch(conf,workerIds);
  }
 catch (  IOException e) {
    LOG.error(e + " waitForWorkersLaunch failed");
  }
catch (  InterruptedException e) {
    LOG.error(e + " waitForWorkersLaunch failed");
  }
}
