{
  if (sort.fields.length == 0) {
    throw new IllegalArgumentException("Sort must contain at least one field");
  }
  if (numHits <= 0) {
    throw new IllegalArgumentException("numHits must be > 0; please use TotalHitCountCollector if you just need the total hit count");
  }
  FieldValueHitQueue<Entry> queue=FieldValueHitQueue.create(sort.fields,numHits);
  if (queue.getComparators().length == 1) {
    if (docsScoredInOrder) {
      if (trackMaxScore) {
        return new OneComparatorScoringMaxScoreCollector(queue,numHits,fillFields);
      }
 else       if (trackDocScores) {
        return new OneComparatorScoringNoMaxScoreCollector(queue,numHits,fillFields);
      }
 else {
        return new OneComparatorNonScoringCollector(queue,numHits,fillFields);
      }
    }
 else {
      if (trackMaxScore) {
        return new OutOfOrderOneComparatorScoringMaxScoreCollector(queue,numHits,fillFields);
      }
 else       if (trackDocScores) {
        return new OutOfOrderOneComparatorScoringNoMaxScoreCollector(queue,numHits,fillFields);
      }
 else {
        return new OutOfOrderOneComparatorNonScoringCollector(queue,numHits,fillFields);
      }
    }
  }
  if (docsScoredInOrder) {
    if (trackMaxScore) {
      return new MultiComparatorScoringMaxScoreCollector(queue,numHits,fillFields);
    }
 else     if (trackDocScores) {
      return new MultiComparatorScoringNoMaxScoreCollector(queue,numHits,fillFields);
    }
 else {
      return new MultiComparatorNonScoringCollector(queue,numHits,fillFields);
    }
  }
 else {
    if (trackMaxScore) {
      return new OutOfOrderMultiComparatorScoringMaxScoreCollector(queue,numHits,fillFields);
    }
 else     if (trackDocScores) {
      return new OutOfOrderMultiComparatorScoringNoMaxScoreCollector(queue,numHits,fillFields);
    }
 else {
      return new OutOfOrderMultiComparatorNonScoringCollector(queue,numHits,fillFields);
    }
  }
}
