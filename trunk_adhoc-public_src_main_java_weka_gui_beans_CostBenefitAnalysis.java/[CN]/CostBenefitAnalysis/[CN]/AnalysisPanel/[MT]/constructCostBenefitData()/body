{
  double tpCost=0.0;
  try {
    tpCost=Double.parseDouble(m_cost_aa.getText());
  }
 catch (  NumberFormatException n) {
  }
  double fpCost=0.0;
  try {
    fpCost=Double.parseDouble(m_cost_ba.getText());
  }
 catch (  NumberFormatException n) {
  }
  double tnCost=0.0;
  try {
    tnCost=Double.parseDouble(m_cost_bb.getText());
  }
 catch (  NumberFormatException n) {
  }
  double fnCost=0.0;
  try {
    fnCost=Double.parseDouble(m_cost_ab.getText());
  }
 catch (  NumberFormatException n) {
  }
  double requestedPopSize=m_originalPopSize;
  try {
    requestedPopSize=Double.parseDouble(m_totalPopField.getText());
  }
 catch (  NumberFormatException e) {
  }
  double scaleFactor=1.0;
  if (m_originalPopSize != 0) {
    scaleFactor=requestedPopSize / m_originalPopSize;
  }
  if (tpCost == m_tpPrevious && fpCost == m_fpPrevious && tnCost == m_tnPrevious && fnCost == m_fnPrevious && requestedPopSize == m_totalPopPrevious) {
    return false;
  }
  FastVector fv=new FastVector();
  fv.addElement(new Attribute("Sample Size"));
  fv.addElement(new Attribute("Cost/Benefit"));
  Instances costBenefitI=new Instances("Cost/Benefit Curve",fv,100);
  Instances performanceI=m_masterPlot.getPlotInstances();
  for (int i=0; i < performanceI.numInstances(); i++) {
    Instance current=performanceI.instance(i);
    double[] vals=new double[2];
    vals[0]=current.value(10);
    vals[1]=(current.value(0) * tpCost + current.value(1) * fnCost + current.value(2) * fpCost + current.value(3) * tnCost) * scaleFactor;
    Instance newInst=new DenseInstance(1.0,vals);
    costBenefitI.add(newInst);
  }
  costBenefitI.compactify();
  m_costBenefit=new PlotData2D(costBenefitI);
  m_costBenefit.m_alwaysDisplayPointsOfThisSize=10;
  m_costBenefit.setPlotName("Cost/benefit curve");
  boolean[] connectPoints=new boolean[costBenefitI.numInstances()];
  for (int i=0; i < connectPoints.length; i++) {
    connectPoints[i]=true;
  }
  try {
    m_costBenefit.setConnectPoints(connectPoints);
    m_costBenefit.setShapeSize(m_shapeSizes);
  }
 catch (  Exception ex) {
  }
  m_tpPrevious=tpCost;
  m_fpPrevious=fpCost;
  m_tnPrevious=tnCost;
  m_fnPrevious=fnCost;
  return true;
}
