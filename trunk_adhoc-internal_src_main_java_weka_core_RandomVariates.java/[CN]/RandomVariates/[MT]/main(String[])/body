{
  int n=Integer.parseInt(ops[0]);
  if (n <= 0)   n=10;
  long seed=Long.parseLong(ops[1]);
  if (seed <= 0)   seed=45;
  RandomVariates var=new RandomVariates(seed);
  double varb[]=new double[n];
  try {
    System.out.println("Generate " + n + " values with std. exp dist:");
    for (int i=0; i < n; i++) {
      varb[i]=var.nextExponential();
      System.out.print("[" + i + "] "+ varb[i]+ ", ");
    }
    System.out.println("\nMean is " + Utils.mean(varb) + ", Variance is "+ Utils.variance(varb)+ "\n\nGenerate "+ n+ " values with"+ " std. Erlang-5 dist:");
    for (int i=0; i < n; i++) {
      varb[i]=var.nextErlang(5);
      System.out.print("[" + i + "] "+ varb[i]+ ", ");
    }
    System.out.println("\nMean is " + Utils.mean(varb) + ", Variance is "+ Utils.variance(varb)+ "\n\nGenerate "+ n+ " values with"+ " std. Gamma(4.5) dist:");
    for (int i=0; i < n; i++) {
      varb[i]=var.nextGamma(4.5);
      System.out.print("[" + i + "] "+ varb[i]+ ", ");
    }
    System.out.println("\nMean is " + Utils.mean(varb) + ", Variance is "+ Utils.variance(varb)+ "\n\nGenerate "+ n+ " values with"+ " std. Gamma(0.5) dist:");
    for (int i=0; i < n; i++) {
      varb[i]=var.nextGamma(0.5);
      System.out.print("[" + i + "] "+ varb[i]+ ", ");
    }
    System.out.println("\nMean is " + Utils.mean(varb) + ", Variance is "+ Utils.variance(varb)+ "\n\nGenerate "+ n+ " values with"+ " std. Gaussian(5, 2) dist:");
    for (int i=0; i < n; i++) {
      varb[i]=var.nextGaussian() * 2.0 + 5.0;
      System.out.print("[" + i + "] "+ varb[i]+ ", ");
    }
    System.out.println("\nMean is " + Utils.mean(varb) + ", Variance is "+ Utils.variance(varb)+ "\n");
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}
