{
  double[] preds=null;
  if (classAtt.isNumeric()) {
    preds=new double[1];
  }
 else {
    preds=new double[classAtt.numValues()];
  }
  ArrayList<SimpleRule> firingRules=new ArrayList<SimpleRule>();
  for (  Rule r : m_rules) {
    r.fires(instance,firingRules);
  }
  if (firingRules.size() > 0) {
    if (m_currentMethod == RuleSelectionMethod.FIRSTHIT) {
      preds=firingRules.get(0).score(instance,classAtt);
    }
 else     if (m_currentMethod == RuleSelectionMethod.WEIGHTEDMAX) {
      double wMax=Double.NEGATIVE_INFINITY;
      SimpleRule best=null;
      for (      SimpleRule s : firingRules) {
        if (Utils.isMissingValue(s.getWeight())) {
          throw new Exception("[RuleSet] Scoring criterion is WEIGHTEDMAX, but " + "rule " + s.getID() + " does not have a weight defined!");
        }
        if (s.getWeight() > wMax) {
          wMax=s.getWeight();
          best=s;
        }
      }
      if (best == null) {
        throw new Exception("[RuleSet] Unable to determine the best rule under " + "the WEIGHTEDMAX criterion!");
      }
      preds=best.score(instance,classAtt);
    }
 else     if (m_currentMethod == RuleSelectionMethod.WEIGHTEDSUM) {
      double sumOfWeights=0;
      for (      SimpleRule s : firingRules) {
        if (Utils.isMissingValue(s.getWeight())) {
          throw new Exception("[RuleSet] Scoring criterion is WEIGHTEDSUM, but " + "rule " + s.getID() + " does not have a weight defined!");
        }
        if (classAtt.isNumeric()) {
          sumOfWeights+=s.getWeight();
          preds[0]+=(s.getScore() * s.getWeight());
        }
 else {
          preds[(int)s.getScore()]+=s.getWeight();
        }
      }
      if (classAtt.isNumeric()) {
        if (sumOfWeights == 0) {
          throw new Exception("[RuleSet] Sum of weights is zero!");
        }
        preds[0]/=sumOfWeights;
      }
 else {
      }
    }
  }
 else {
    if (classAtt.isNumeric()) {
      preds[0]=m_defaultPrediction;
    }
 else {
      if (m_scoreDistributions.size() > 0) {
        for (        TreeModel.ScoreDistribution s : m_scoreDistributions) {
          preds[s.getClassLabelIndex()]=s.getConfidence();
        }
      }
 else       if (!Utils.isMissingValue(m_defaultConfidence)) {
        preds[(int)m_defaultPrediction]=m_defaultConfidence;
      }
 else {
        preds[(int)m_defaultPrediction]=1.0;
      }
    }
  }
  return preds;
}
