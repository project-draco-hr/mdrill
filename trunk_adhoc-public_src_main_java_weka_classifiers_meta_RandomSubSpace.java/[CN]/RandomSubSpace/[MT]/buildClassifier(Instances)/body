{
  getCapabilities().testWithFail(data);
  m_data=new Instances(data);
  m_data.deleteWithMissingClass();
  if (m_data.numAttributes() == 1) {
    System.err.println("Cannot build model (only class attribute present in data!), " + "using ZeroR model instead!");
    m_ZeroR=new weka.classifiers.rules.ZeroR();
    m_ZeroR.buildClassifier(m_data);
    return;
  }
 else {
    m_ZeroR=null;
  }
  super.buildClassifier(data);
  Integer[] indices=new Integer[data.numAttributes() - 1];
  int classIndex=data.classIndex();
  int offset=0;
  for (int i=0; i < indices.length + 1; i++) {
    if (i != classIndex) {
      indices[offset++]=i + 1;
    }
  }
  int subSpaceSize=numberOfAttributes(indices.length,getSubSpaceSize());
  Random random=data.getRandomNumberGenerator(m_Seed);
  for (int j=0; j < m_Classifiers.length; j++) {
    if (m_Classifier instanceof Randomizable) {
      ((Randomizable)m_Classifiers[j]).setSeed(random.nextInt());
    }
    FilteredClassifier fc=new FilteredClassifier();
    fc.setClassifier(m_Classifiers[j]);
    m_Classifiers[j]=fc;
    Remove rm=new Remove();
    rm.setOptions(new String[]{"-V","-R",randomSubSpace(indices,subSpaceSize,classIndex + 1,random)});
    fc.setFilter(rm);
  }
  buildClassifiers();
  m_data=null;
}
