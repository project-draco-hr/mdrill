{
  double delta=0, sum=0, currentProb=0;
  double zLower=0, zUpper=0;
  if (m_NumValues == 0) {
    zLower=(data - (m_Precision / 2)) / m_StandardDev;
    zUpper=(data + (m_Precision / 2)) / m_StandardDev;
    return (Statistics.normalProbability(zUpper) - Statistics.normalProbability(zLower));
  }
  double weightSum=0;
  int start=findNearestValue(data);
  for (int i=start; i < m_NumValues; i++) {
    delta=m_Values[i] - data;
    zLower=(delta - (m_Precision / 2)) / m_StandardDev;
    zUpper=(delta + (m_Precision / 2)) / m_StandardDev;
    currentProb=(Statistics.normalProbability(zUpper) - Statistics.normalProbability(zLower));
    sum+=currentProb * m_Weights[i];
    weightSum+=m_Weights[i];
    if (currentProb * (m_SumOfWeights - weightSum) < sum * MAX_ERROR) {
      break;
    }
  }
  for (int i=start - 1; i >= 0; i--) {
    delta=m_Values[i] - data;
    zLower=(delta - (m_Precision / 2)) / m_StandardDev;
    zUpper=(delta + (m_Precision / 2)) / m_StandardDev;
    currentProb=(Statistics.normalProbability(zUpper) - Statistics.normalProbability(zLower));
    sum+=currentProb * m_Weights[i];
    weightSum+=m_Weights[i];
    if (currentProb * (m_SumOfWeights - weightSum) < sum * MAX_ERROR) {
      break;
    }
  }
  return sum / m_SumOfWeights;
}
