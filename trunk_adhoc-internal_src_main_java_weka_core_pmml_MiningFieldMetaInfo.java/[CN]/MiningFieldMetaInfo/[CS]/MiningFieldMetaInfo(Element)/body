{
  super(field);
  String usage=field.getAttribute("usageType");
  for (  MiningFieldMetaInfo.Usage u : Usage.values()) {
    if (u.toString().equals(usage)) {
      m_usageType=u;
      break;
    }
  }
  String importance=field.getAttribute("importance");
  if (importance.length() > 0) {
    m_importance=Double.parseDouble(importance);
  }
  String outliers=field.getAttribute("outliers");
  for (  MiningFieldMetaInfo.Outlier o : Outlier.values()) {
    if (o.toString().equals(outliers)) {
      m_outlierTreatmentMethod=o;
      break;
    }
  }
  if (outliers.length() > 0 && m_outlierTreatmentMethod == Outlier.ASEXTREMEVALUES) {
    String lowValue=field.getAttribute("lowValue");
    if (lowValue.length() > 0) {
      m_lowValue=Double.parseDouble(lowValue);
    }
 else {
      throw new Exception("[MiningFieldMetaInfo] as extreme values outlier treatment " + "specified, but no low value defined!");
    }
    String highValue=field.getAttribute("highValue");
    if (highValue.length() > 0) {
      m_highValue=Double.parseDouble(highValue);
    }
 else {
      throw new Exception("[MiningFieldMetaInfo] as extreme values outlier treatment " + "specified, but no high value defined!");
    }
  }
  String missingReplacement=field.getAttribute("missingValueReplacement");
  if (missingReplacement.length() > 0) {
    try {
      m_missingValueReplacementNumeric=Double.parseDouble(missingReplacement);
    }
 catch (    IllegalArgumentException ex) {
      m_missingValueReplacementNominal=missingReplacement;
    }
    String missingTreatment=field.getAttribute("missingValueTreatment");
    for (    MiningFieldMetaInfo.Missing m : Missing.values()) {
      if (m.toString().equals(missingTreatment)) {
        m_missingValueTreatmentMethod=m;
        break;
      }
    }
  }
}
