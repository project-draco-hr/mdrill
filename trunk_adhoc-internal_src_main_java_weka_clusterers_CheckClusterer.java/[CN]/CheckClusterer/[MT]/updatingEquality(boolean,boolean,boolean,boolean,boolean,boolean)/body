{
  print("incremental training produces the same results" + " as batch training");
  printAttributeSummary(nominalPredictor,numericPredictor,stringPredictor,datePredictor,relationalPredictor,multiInstance);
  print("...");
  int numTrain=getNumInstances(), missingLevel=0;
  boolean predictorMissing=false, classMissing=false;
  boolean[] result=new boolean[2];
  Instances train=null;
  Clusterer[] clusterers=null;
  ClusterEvaluation evaluationB=null;
  ClusterEvaluation evaluationI=null;
  boolean built=false;
  try {
    train=makeTestDataset(42,numTrain,nominalPredictor ? getNumNominal() : 0,numericPredictor ? getNumNumeric() : 0,stringPredictor ? getNumString() : 0,datePredictor ? getNumDate() : 0,relationalPredictor ? getNumRelational() : 0,multiInstance);
    if (missingLevel > 0)     addMissing(train,missingLevel,predictorMissing,classMissing);
    clusterers=AbstractClusterer.makeCopies(getClusterer(),2);
    evaluationB=new ClusterEvaluation();
    evaluationI=new ClusterEvaluation();
    clusterers[0].buildClusterer(train);
    evaluationB.setClusterer(clusterers[0]);
  }
 catch (  Exception ex) {
    throw new Error("Error setting up for tests: " + ex.getMessage());
  }
  try {
    clusterers[1].buildClusterer(new Instances(train,0));
    for (int i=0; i < train.numInstances(); i++) {
      ((UpdateableClusterer)clusterers[1]).updateClusterer(train.instance(i));
    }
    built=true;
    evaluationI.setClusterer(clusterers[1]);
    if (!evaluationB.equals(evaluationI)) {
      println("no");
      result[0]=false;
      if (m_Debug) {
        println("\n=== Full Report ===");
        println("Results differ between batch and " + "incrementally built models.\n" + "Depending on the classifier, this may be OK");
        println("Here are the results:\n");
        println("\nbatch built results\n" + evaluationB.clusterResultsToString());
        println("\nincrementally built results\n" + evaluationI.clusterResultsToString());
        println("Here are the datasets:\n");
        println("=== Train Dataset ===\n" + train.toString() + "\n");
      }
    }
 else {
      println("yes");
      result[0]=true;
    }
  }
 catch (  Exception ex) {
    result[0]=false;
    print("Problem during");
    if (built)     print(" testing");
 else     print(" training");
    println(": " + ex.getMessage() + "\n");
  }
  return result;
}
