{
  if (getDescendantPopulationSize() < getPopulationSize()) {
    throw new Exception("Descendant PopulationSize should be at least Population Size");
  }
  if (!getUseCrossOver() && !getUseMutation()) {
    throw new Exception("At least one of mutation or cross-over should be used");
  }
  m_random=new Random(m_nSeed);
  BayesNet bestBayesNet;
  double fBestScore=calcScore(bayesNet);
  bestBayesNet=new BayesNet();
  bestBayesNet.m_Instances=instances;
  bestBayesNet.initStructure();
  copyParentSets(bestBayesNet,bayesNet);
  BayesNetRepresentation[] population=new BayesNetRepresentation[getPopulationSize()];
  for (int i=0; i < getPopulationSize(); i++) {
    population[i]=new BayesNetRepresentation(instances.numAttributes());
    population[i].randomInit();
    if (population[i].getScore() > fBestScore) {
      copyParentSets(bestBayesNet,bayesNet);
      fBestScore=population[i].getScore();
    }
  }
  for (int iRun=0; iRun < m_nRuns; iRun++) {
    BayesNetRepresentation[] descendantPopulation=new BayesNetRepresentation[getDescendantPopulationSize()];
    for (int i=0; i < getDescendantPopulationSize(); i++) {
      descendantPopulation[i]=population[m_random.nextInt(getPopulationSize())].copy();
      if (getUseMutation()) {
        if (getUseCrossOver() && m_random.nextBoolean()) {
          descendantPopulation[i].crossOver(population[m_random.nextInt(getPopulationSize())]);
        }
 else {
          descendantPopulation[i].mutate();
        }
      }
 else {
        descendantPopulation[i].crossOver(population[m_random.nextInt(getPopulationSize())]);
      }
      if (descendantPopulation[i].getScore() > fBestScore) {
        copyParentSets(bestBayesNet,bayesNet);
        fBestScore=descendantPopulation[i].getScore();
      }
    }
    boolean[] bSelected=new boolean[getDescendantPopulationSize()];
    for (int i=0; i < getPopulationSize(); i++) {
      int iSelected=0;
      if (m_bUseTournamentSelection) {
        iSelected=m_random.nextInt(getDescendantPopulationSize());
        while (bSelected[iSelected]) {
          iSelected=(iSelected + 1) % getDescendantPopulationSize();
        }
        int iSelected2=m_random.nextInt(getDescendantPopulationSize());
        while (bSelected[iSelected2]) {
          iSelected2=(iSelected2 + 1) % getDescendantPopulationSize();
        }
        if (descendantPopulation[iSelected2].getScore() > descendantPopulation[iSelected].getScore()) {
          iSelected=iSelected2;
        }
      }
 else {
        while (bSelected[iSelected]) {
          iSelected++;
        }
        double fScore=descendantPopulation[iSelected].getScore();
        for (int j=0; j < getDescendantPopulationSize(); j++) {
          if (!bSelected[j] && descendantPopulation[j].getScore() > fScore) {
            fScore=descendantPopulation[j].getScore();
            iSelected=j;
          }
        }
      }
      population[i]=descendantPopulation[iSelected];
      bSelected[iSelected]=true;
    }
  }
  copyParentSets(bayesNet,bestBayesNet);
  bestBayesNet=null;
}
