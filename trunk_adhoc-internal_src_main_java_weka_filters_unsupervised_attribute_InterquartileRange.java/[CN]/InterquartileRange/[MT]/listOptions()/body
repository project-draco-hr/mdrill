{
  Vector result=new Vector();
  Enumeration enm=super.listOptions();
  while (enm.hasMoreElements())   result.add(enm.nextElement());
  result.addElement(new Option("\tSpecifies list of columns to base outlier/extreme value detection\n" + "\ton. If an instance is considered in at least one of those\n" + "\tattributes an outlier/extreme value, it is tagged accordingly.\n"+ " 'first' and 'last' are valid indexes.\n"+ "\t(default none)","R",1,"-R <col1,col2-col4,...>"));
  result.addElement(new Option("\tThe factor for outlier detection.\n" + "\t(default: 3)","O",1,"-O <num>"));
  result.addElement(new Option("\tThe factor for extreme values detection.\n" + "\t(default: 2*Outlier Factor)","E",1,"-E <num>"));
  result.addElement(new Option("\tTags extreme values also as outliers.\n" + "\t(default: off)","E-as-O",0,"-E-as-O"));
  result.addElement(new Option("\tGenerates Outlier/ExtremeValue pair for each numeric attribute in\n" + "\tthe range, not just a single indicator pair for all the attributes.\n" + "\t(default: off)","P",0,"-P"));
  result.addElement(new Option("\tGenerates an additional attribute 'Offset' per Outlier/ExtremeValue\n" + "\tpair that contains the multiplier that the value is off the median.\n" + "\t   value = median + 'multiplier' * IQR\n"+ "Note: implicitely sets '-P'."+ "\t(default: off)","M",0,"-M"));
  return result.elements();
}
