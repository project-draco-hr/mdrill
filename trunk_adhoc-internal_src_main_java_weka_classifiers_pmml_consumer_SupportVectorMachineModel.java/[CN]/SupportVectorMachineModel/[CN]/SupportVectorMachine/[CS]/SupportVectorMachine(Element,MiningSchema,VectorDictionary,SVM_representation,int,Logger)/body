{
  m_miningSchema=miningSchema;
  m_log=log;
  String targetCat=machineElement.getAttribute("targetCategory");
  if (targetCat != null && targetCat.length() > 0) {
    m_targetCategory=targetCat;
    Attribute classAtt=m_miningSchema.getFieldsAsInstances().classAttribute();
    if (classAtt.isNominal()) {
      int index=classAtt.indexOfValue(m_targetCategory);
      if (index < 0) {
        throw new Exception("[SupportVectorMachine] : can't find target category: " + m_targetCategory + " in the class attribute!");
      }
      m_targetCategoryIndex=index;
      String altTargetCat=machineElement.getAttribute("alternateTargetCategory");
      if (altTargetCat != null && altTargetCat.length() > 0) {
        index=classAtt.indexOfValue(altTargetCat);
        if (index < 0) {
          throw new Exception("[SupportVectorMachine] : can't find alternate target category: " + altTargetCat + " in the class attribute!");
        }
        m_localAlternateTargetCategoryIndex=index;
      }
 else {
        m_globalAlternateTargetCategoryIndex=altCategoryInd;
      }
    }
 else {
      throw new Exception("[SupportVectorMachine] : target category supplied " + "but class attribute is numeric!");
    }
  }
 else {
    if (m_miningSchema.getFieldsAsInstances().classAttribute().isNominal()) {
      m_targetCategoryIndex=(altCategoryInd == 0) ? 1 : 0;
      m_globalAlternateTargetCategoryIndex=altCategoryInd;
      System.err.println("Setting target index for machine to " + m_targetCategoryIndex);
    }
  }
  if (svmRep == SVM_representation.SUPPORT_VECTORS) {
    NodeList vectorsL=machineElement.getElementsByTagName("SupportVectors");
    if (vectorsL.getLength() > 0) {
      Element vectors=(Element)vectorsL.item(0);
      NodeList allTheVectorsL=vectors.getElementsByTagName("SupportVector");
      for (int i=0; i < allTheVectorsL.getLength(); i++) {
        Node vec=allTheVectorsL.item(i);
        String vecId=((Element)vec).getAttribute("vectorId");
        VectorInstance suppV=dictionary.getVector(vecId);
        if (suppV == null) {
          throw new Exception("[SupportVectorMachine] : can't find " + "vector with ID: " + vecId + " in the "+ "vector dictionary!");
        }
        m_supportVectors.add(suppV);
      }
    }
  }
 else {
    m_coeffsOnly=true;
  }
  NodeList coefficientsL=machineElement.getElementsByTagName("Coefficients");
  if (coefficientsL.getLength() != 1) {
    throw new Exception("[SupportVectorMachine] Should be just one list of " + "coefficients per binary SVM!");
  }
  Element cL=(Element)coefficientsL.item(0);
  String intercept=cL.getAttribute("absoluteValue");
  if (intercept != null && intercept.length() > 0) {
    m_intercept=Double.parseDouble(intercept);
  }
  NodeList coeffL=cL.getElementsByTagName("Coefficient");
  if (coeffL.getLength() == 0) {
    throw new Exception("[SupportVectorMachine] No coefficients defined!");
  }
  m_coefficients=new double[coeffL.getLength()];
  for (int i=0; i < coeffL.getLength(); i++) {
    Element coeff=((Element)coeffL.item(i));
    String val=coeff.getAttribute("value");
    m_coefficients[i]=Double.parseDouble(val);
  }
}
