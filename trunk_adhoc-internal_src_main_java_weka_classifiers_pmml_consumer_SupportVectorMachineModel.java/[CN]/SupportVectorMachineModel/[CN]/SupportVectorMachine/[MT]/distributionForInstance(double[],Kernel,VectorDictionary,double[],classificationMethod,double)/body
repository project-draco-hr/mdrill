{
  int targetIndex=0;
  if (!m_coeffsOnly) {
    input=vecDict.incomingInstanceToVectorFieldVals(input);
  }
  if (m_miningSchema.getFieldsAsInstances().classAttribute().isNominal()) {
    targetIndex=m_targetCategoryIndex;
  }
  double result=0;
  for (int i=0; i < m_coefficients.length; i++) {
    double val=0;
    if (!m_coeffsOnly) {
      val=kernel.evaluate(m_supportVectors.get(i),input);
    }
 else {
      val=input[i];
    }
    val*=m_coefficients[i];
    result+=val;
  }
  result+=m_intercept;
  if (cMethod == classificationMethod.NONE || m_miningSchema.getFieldsAsInstances().classAttribute().isNumeric()) {
    if (m_miningSchema.getFieldsAsInstances().classAttribute().isNominal()) {
      if (result < 0) {
        preds[targetIndex]=1;
      }
 else {
        preds[targetIndex]=0;
      }
    }
 else {
      preds[targetIndex]=result;
    }
  }
 else {
    if (cMethod == classificationMethod.ONE_AGAINST_ALL) {
      preds[targetIndex]=result;
    }
 else {
      double threshold=(m_localThreshold < Double.MAX_VALUE) ? m_localThreshold : globalThreshold;
      if (result < threshold) {
        preds[targetIndex]++;
      }
 else {
        int altCat=(m_localAlternateTargetCategoryIndex != -1) ? m_localAlternateTargetCategoryIndex : m_globalAlternateTargetCategoryIndex;
        preds[altCat]++;
      }
    }
  }
}
