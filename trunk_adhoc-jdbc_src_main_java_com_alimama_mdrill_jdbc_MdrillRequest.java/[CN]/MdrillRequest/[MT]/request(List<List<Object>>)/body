{
  String text="";
  if (this.strurl.indexOf("higoself") >= 0) {
  }
 else {
    HttpClient httpclient=new DefaultHttpClient();
    httpclient.getParams().setParameter(HttpMethodParams.SO_TIMEOUT,60000 * 30);
    httpclient.getParams().setParameter(HttpMethodParams.HTTP_CONTENT_CHARSET,"UTF8");
    HttpPost httppost=new HttpPost("http://" + this.strurl + "/higo/result.jsp");
    List<NameValuePair> nameValuePairs=new ArrayList<NameValuePair>(1);
    nameValuePairs.add(new BasicNameValuePair("project",parser.tablename));
    nameValuePairs.add(new BasicNameValuePair("start",parser.start));
    nameValuePairs.add(new BasicNameValuePair("rows",parser.rows));
    nameValuePairs.add(new BasicNameValuePair("fl",parser.fl));
    if (parser.queryStr != null) {
      nameValuePairs.add(new BasicNameValuePair("q",parser.queryStr));
    }
    if (parser.groupby != null) {
      nameValuePairs.add(new BasicNameValuePair("groupby",parser.groupby));
    }
    if (parser.sort != null) {
      nameValuePairs.add(new BasicNameValuePair("sort",parser.sort));
    }
    if (parser.order != null) {
      nameValuePairs.add(new BasicNameValuePair("order",parser.order));
    }
    httppost.setEntity(new UrlEncodedFormEntity(nameValuePairs,"UTF-8"));
    HttpResponse response=httpclient.execute(httppost);
    InputStream is=response.getEntity().getContent();
    BufferedInputStream bis=new BufferedInputStream(is);
    ByteArrayBuffer baf=new ByteArrayBuffer(1024);
    int current=0;
    while ((current=bis.read()) != -1) {
      baf.append((byte)current);
    }
    text=(new String(baf.toByteArray(),"utf-8")).trim();
  }
  content=text;
  JSONObject jsonObj=new JSONObject(text);
  if (!"1".equals(jsonObj.get("code"))) {
    return -1l;
  }
  Long total=jsonObj.getLong("total");
  JSONObject data=jsonObj.getJSONObject("data");
  JSONArray list=data.getJSONArray("docs");
  for (int i=0; i < list.length(); i++) {
    JSONObject rowMap=list.getJSONObject(i);
    ArrayList<Object> row=new ArrayList<Object>();
    for (int j=0; j < this.parser.colsNames.length; j++) {
      String colname=this.parser.colsNames[j];
      row.add(j,String.valueOf(rowMap.opt(colname)));
    }
    results.add(row);
  }
  return total;
}
