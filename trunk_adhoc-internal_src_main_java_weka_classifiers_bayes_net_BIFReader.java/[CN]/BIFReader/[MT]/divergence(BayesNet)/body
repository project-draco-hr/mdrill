{
  try {
    Sync(other);
    double D=0.0;
    int nNodes=m_Instances.numAttributes();
    int[] nCard=new int[nNodes];
    for (int iNode=0; iNode < nNodes; iNode++) {
      nCard[iNode]=m_Instances.attribute(iNode).numValues();
    }
    int[] x=new int[nNodes];
    int i=0;
    while (i < nNodes) {
      x[i]++;
      while (i < nNodes && x[i] == m_Instances.attribute(i).numValues()) {
        x[i]=0;
        i++;
        if (i < nNodes) {
          x[i]++;
        }
      }
      if (i < nNodes) {
        i=0;
        double P=1.0;
        for (int iNode=0; iNode < nNodes; iNode++) {
          int iCPT=0;
          for (int iParent=0; iParent < m_ParentSets[iNode].getNrOfParents(); iParent++) {
            int nParent=m_ParentSets[iNode].getParent(iParent);
            iCPT=iCPT * nCard[nParent] + x[nParent];
          }
          P=P * m_Distributions[iNode][iCPT].getProbability(x[iNode]);
        }
        double Q=1.0;
        for (int iNode=0; iNode < nNodes; iNode++) {
          int iCPT=0;
          for (int iParent=0; iParent < other.getParentSet(m_order[iNode]).getNrOfParents(); iParent++) {
            int nParent=m_order[other.getParentSet(m_order[iNode]).getParent(iParent)];
            iCPT=iCPT * nCard[nParent] + x[nParent];
          }
          Q=Q * other.m_Distributions[m_order[iNode]][iCPT].getProbability(x[iNode]);
        }
        if (P > 0.0 && Q > 0.0) {
          D=D + P * Math.log(Q / P);
        }
      }
    }
    return D;
  }
 catch (  Exception e) {
    System.err.println(e.getMessage());
    return 0;
  }
}
