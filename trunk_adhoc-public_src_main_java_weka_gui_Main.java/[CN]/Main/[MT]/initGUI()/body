{
  m_Self=this;
  try {
    createTitle("");
    this.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
    this.setIconImage(new ImageIcon(getClass().getClassLoader().getResource("weka/gui/weka_icon_new_48.png")).getImage());
    m_FileChooserGraphVisualizer.addChoosableFileFilter(new ExtensionFileFilter(".bif","BIF Files (*.bif)"));
    m_FileChooserGraphVisualizer.addChoosableFileFilter(new ExtensionFileFilter(".xml","XML Files (*.xml)"));
    m_FileChooserPlot.addChoosableFileFilter(new ExtensionFileFilter(Instances.FILE_EXTENSION,"ARFF Files (*" + Instances.FILE_EXTENSION + ")"));
    m_FileChooserPlot.setMultiSelectionEnabled(true);
    m_FileChooserROC.addChoosableFileFilter(new ExtensionFileFilter(Instances.FILE_EXTENSION,"ARFF Files (*" + Instances.FILE_EXTENSION + ")"));
    if (m_GUIType == GUI_MDI) {
      jDesktopPane=new BackgroundDesktopPane("weka/gui/images/weka_background.gif");
      jDesktopPane.setDragMode(JDesktopPane.OUTLINE_DRAG_MODE);
      setContentPane(jDesktopPane);
    }
 else {
      jDesktopPane=null;
    }
    jMenuBar=new JMenuBar();
    setJMenuBar(jMenuBar);
    jMenuProgram=new JMenu();
    jMenuBar.add(jMenuProgram);
    jMenuProgram.setText("Program");
    jMenuProgram.setMnemonic('P');
    jMenuItemProgramLogWindow=new JMenuItem();
    jMenuProgram.add(jMenuItemProgramLogWindow);
    jMenuItemProgramLogWindow.setText("LogWindow");
    jMenuItemProgramLogWindow.setMnemonic('L');
    jMenuItemProgramLogWindow.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent evt){
        m_LogWindow.setVisible(true);
      }
    }
);
    jMenuItemProgramMemoryUsage=new JMenuItem();
    jMenuProgram.add(jMenuItemProgramMemoryUsage);
    jMenuItemProgramMemoryUsage.setText("Memory usage");
    jMenuItemProgramMemoryUsage.setMnemonic('M');
    jMenuItemProgramMemoryUsage.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent evt){
        String title=jMenuItemProgramMemoryUsage.getText();
        if (!containsWindow(title)) {
          final MemoryUsagePanel panel=new MemoryUsagePanel();
          Container c=createFrame(m_Self,title,panel,new BorderLayout(),BorderLayout.CENTER,400,50,null,true,true);
          Dimension size=c.getPreferredSize();
          c.setSize(new Dimension((int)size.getWidth(),(int)size.getHeight()));
          if (m_GUIType == GUI_MDI) {
            final ChildFrameMDI frame=(ChildFrameMDI)c;
            Point l=panel.getFrameLocation();
            if ((l.x != -1) && (l.y != -1))             frame.setLocation(l);
            frame.addInternalFrameListener(new InternalFrameAdapter(){
              public void internalFrameClosing(              InternalFrameEvent e){
                panel.stopMonitoring();
              }
            }
);
          }
 else {
            final ChildFrameSDI frame=(ChildFrameSDI)c;
            Point l=panel.getFrameLocation();
            if ((l.x != -1) && (l.y != -1))             frame.setLocation(l);
            frame.addWindowListener(new WindowAdapter(){
              public void windowClosing(              WindowEvent e){
                panel.stopMonitoring();
              }
            }
);
          }
        }
 else {
          showWindow(getWindow(title));
        }
      }
    }
);
    jMenuProgram.add(new JSeparator());
    jMenuItemProgramExit=new JMenuItem();
    jMenuProgram.add(jMenuItemProgramExit);
    jMenuItemProgramExit.setText("Exit");
    jMenuItemProgramExit.setMnemonic('E');
    jMenuItemProgramExit.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent evt){
        Iterator iter=getWindowList();
        Vector<Container> list=new Vector<Container>();
        while (iter.hasNext())         list.add((Container)iter.next());
        for (int i=0; i < list.size(); i++) {
          Container c=list.get(i);
          if (c instanceof ChildFrameMDI)           ((ChildFrameMDI)c).dispose();
 else           if (c instanceof ChildFrameSDI)           ((ChildFrameSDI)c).dispose();
        }
        m_LogWindow.dispose();
        m_Self.dispose();
        System.exit(0);
      }
    }
);
    jMenuApplications=new JMenu();
    jMenuBar.add(jMenuApplications);
    jMenuApplications.setText("Applications");
    jMenuApplications.setMnemonic('A');
    jMenuItemApplicationsExplorer=new JMenuItem();
    jMenuApplications.add(jMenuItemApplicationsExplorer);
    jMenuItemApplicationsExplorer.setText("Explorer");
    jMenuItemApplicationsExplorer.setMnemonic('E');
    jMenuItemApplicationsExplorer.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent evt){
        String title=jMenuItemApplicationsExplorer.getText();
        if (!containsWindow(title)) {
          createFrame(m_Self,title,new Explorer(),new BorderLayout(),BorderLayout.CENTER,800,600,null,true,true);
        }
 else {
          showWindow(getWindow(title));
        }
      }
    }
);
    jMenuItemApplicationsExperimenter=new JMenuItem();
    jMenuApplications.add(jMenuItemApplicationsExperimenter);
    jMenuItemApplicationsExperimenter.setText("Experimenter");
    jMenuItemApplicationsExperimenter.setMnemonic('X');
    jMenuItemApplicationsExperimenter.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent evt){
        String title=jMenuItemApplicationsExperimenter.getText();
        if (!containsWindow(title)) {
          createFrame(m_Self,title,new Experimenter(false),new BorderLayout(),BorderLayout.CENTER,800,600,null,true,true);
        }
 else {
          showWindow(getWindow(title));
        }
      }
    }
);
    jMenuItemApplicationsKnowledgeFlow=new JMenuItem();
    jMenuApplications.add(jMenuItemApplicationsKnowledgeFlow);
    jMenuItemApplicationsKnowledgeFlow.setText("KnowledgeFlow");
    jMenuItemApplicationsKnowledgeFlow.setMnemonic('K');
    jMenuItemApplicationsKnowledgeFlow.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent evt){
        String title=jMenuItemApplicationsKnowledgeFlow.getText();
        if (!containsWindow(title)) {
          KnowledgeFlowApp.createSingleton(new String[0]);
          createFrame(m_Self,title,KnowledgeFlowApp.getSingleton(),new BorderLayout(),BorderLayout.CENTER,900,600,null,true,true);
        }
 else {
          showWindow(getWindow(title));
        }
      }
    }
);
    jMenuItemApplicationsSimpleCLI=new JMenuItem();
    jMenuApplications.add(jMenuItemApplicationsSimpleCLI);
    jMenuItemApplicationsSimpleCLI.setText("SimpleCLI");
    jMenuItemApplicationsSimpleCLI.setMnemonic('S');
    jMenuItemApplicationsSimpleCLI.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent evt){
        String title=jMenuItemApplicationsSimpleCLI.getText();
        if (!containsWindow(title)) {
          try {
            createFrame(m_Self,title,new SimpleCLIPanel(),new BorderLayout(),BorderLayout.CENTER,600,500,null,true,true);
          }
 catch (          Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(m_Self,"Error instantiating SimpleCLI:\n" + e.getMessage());
            return;
          }
        }
 else {
          showWindow(getWindow(title));
        }
      }
    }
);
    jMenuTools=new JMenu();
    jMenuBar.add(jMenuTools);
    jMenuTools.setText("Tools");
    jMenuTools.setMnemonic('T');
    jMenuItemToolsArffViewer=new JMenuItem();
    jMenuTools.add(jMenuItemToolsArffViewer);
    jMenuItemToolsArffViewer.setText("ArffViewer");
    jMenuItemToolsArffViewer.setMnemonic('A');
    jMenuItemToolsArffViewer.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent evt){
        String title=jMenuItemToolsArffViewer.getText();
        if (!containsWindow(title)) {
          ArffViewerMainPanel panel=new ArffViewerMainPanel(null);
          panel.setConfirmExit(false);
          Container frame=createFrame(m_Self,title,panel,new BorderLayout(),BorderLayout.CENTER,800,600,panel.getMenu(),true,true);
          panel.setParent(frame);
        }
 else {
          showWindow(getWindow(title));
        }
      }
    }
);
    jMenuItemToolsSqlViewer=new JMenuItem();
    jMenuTools.add(jMenuItemToolsSqlViewer);
    jMenuItemToolsSqlViewer.setText("SqlViewer");
    jMenuItemToolsSqlViewer.setMnemonic('S');
    jMenuItemToolsSqlViewer.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent evt){
        String title=jMenuItemToolsSqlViewer.getText();
        if (!containsWindow(title)) {
          final SqlViewer sql=new SqlViewer(null);
          final Container frame=createFrame(m_Self,title,sql,new BorderLayout(),BorderLayout.CENTER,-1,-1,null,false,true);
          if (frame instanceof ChildFrameMDI) {
            ((ChildFrameMDI)frame).addInternalFrameListener(new InternalFrameAdapter(){
              public void internalFrameClosing(              InternalFrameEvent e){
                sql.saveSize();
                ((ChildFrameMDI)frame).dispose();
              }
            }
);
          }
 else           if (frame instanceof ChildFrameSDI) {
            ((ChildFrameSDI)frame).addWindowListener(new WindowAdapter(){
              public void windowClosing(              WindowEvent e){
                sql.saveSize();
                ((ChildFrameSDI)frame).dispose();
              }
            }
);
          }
        }
 else {
          showWindow(getWindow(title));
        }
      }
    }
);
    final JMenuItem jMenuItemBayesNet=new JMenuItem();
    jMenuTools.add(jMenuItemBayesNet);
    jMenuItemBayesNet.setText("Bayes net editor");
    jMenuItemBayesNet.setMnemonic('N');
    jMenuItemBayesNet.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        String title=jMenuItemBayesNet.getText();
        if (!containsWindow(title)) {
          final GUI bayesNetGUI=new GUI();
          final Container frame=createFrame(m_Self,title,bayesNetGUI,new BorderLayout(),BorderLayout.CENTER,800,600,bayesNetGUI.getMenuBar(),false,true);
        }
 else {
          showWindow(getWindow(title));
        }
      }
    }
);
    if (Groovy.isPresent()) {
      jMenuItemToolsGroovyConsole=new JMenuItem();
      jMenuTools.add(jMenuItemToolsGroovyConsole);
      jMenuItemToolsGroovyConsole.setText("Groovy console");
      jMenuItemToolsGroovyConsole.setMnemonic('G');
      jMenuItemToolsGroovyConsole.addActionListener(new ActionListener(){
        public void actionPerformed(        ActionEvent evt){
          String title=jMenuItemToolsGroovyConsole.getText();
          if (!containsWindow(title)) {
            final GroovyPanel panel=new GroovyPanel();
            final Container frame=createFrame(m_Self,title,panel,new BorderLayout(),BorderLayout.CENTER,800,600,panel.getMenuBar(),false,true);
            if (frame instanceof ChildFrameMDI) {
              ((ChildFrameMDI)frame).addInternalFrameListener(new InternalFrameAdapter(){
                public void internalFrameClosing(                InternalFrameEvent e){
                  ((ChildFrameMDI)frame).dispose();
                }
              }
);
            }
 else             if (frame instanceof ChildFrameSDI) {
              ((ChildFrameSDI)frame).addWindowListener(new WindowAdapter(){
                public void windowClosing(                WindowEvent e){
                  ((ChildFrameSDI)frame).dispose();
                }
              }
);
            }
          }
 else {
            showWindow(getWindow(title));
          }
        }
      }
);
    }
    if (Jython.isPresent()) {
      jMenuItemToolsJythonConsole=new JMenuItem();
      jMenuTools.add(jMenuItemToolsJythonConsole);
      jMenuItemToolsJythonConsole.setText("Jython console");
      jMenuItemToolsJythonConsole.setMnemonic('J');
      jMenuItemToolsJythonConsole.addActionListener(new ActionListener(){
        public void actionPerformed(        ActionEvent evt){
          String title=jMenuItemToolsJythonConsole.getText();
          if (!containsWindow(title)) {
            final JythonPanel panel=new JythonPanel();
            final Container frame=createFrame(m_Self,title,panel,new BorderLayout(),BorderLayout.CENTER,800,600,panel.getMenuBar(),false,true);
            if (frame instanceof ChildFrameMDI) {
              ((ChildFrameMDI)frame).addInternalFrameListener(new InternalFrameAdapter(){
                public void internalFrameClosing(                InternalFrameEvent e){
                  ((ChildFrameMDI)frame).dispose();
                }
              }
);
            }
 else             if (frame instanceof ChildFrameSDI) {
              ((ChildFrameSDI)frame).addWindowListener(new WindowAdapter(){
                public void windowClosing(                WindowEvent e){
                  ((ChildFrameSDI)frame).dispose();
                }
              }
);
            }
          }
 else {
            showWindow(getWindow(title));
          }
        }
      }
);
    }
    jMenuVisualization=new JMenu();
    jMenuBar.add(jMenuVisualization);
    jMenuVisualization.setText("Visualization");
    jMenuVisualization.setMnemonic('V');
    jMenuItemVisualizationPlot=new JMenuItem();
    jMenuVisualization.add(jMenuItemVisualizationPlot);
    jMenuItemVisualizationPlot.setText("Plot");
    jMenuItemVisualizationPlot.setMnemonic('P');
    jMenuItemVisualizationPlot.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent evt){
        int retVal=m_FileChooserPlot.showOpenDialog(m_Self);
        if (retVal != JFileChooser.APPROVE_OPTION)         return;
        VisualizePanel panel=new VisualizePanel();
        String filenames="";
        File[] files=m_FileChooserPlot.getSelectedFiles();
        for (int j=0; j < files.length; j++) {
          String filename=files[j].getAbsolutePath();
          if (j > 0)           filenames+=", ";
          filenames+=filename;
          System.err.println("Loading instances from " + filename);
          try {
            Reader r=new java.io.BufferedReader(new FileReader(filename));
            Instances i=new Instances(r);
            i.setClassIndex(i.numAttributes() - 1);
            PlotData2D pd1=new PlotData2D(i);
            if (j == 0) {
              pd1.setPlotName("Master plot");
              panel.setMasterPlot(pd1);
            }
 else {
              pd1.setPlotName("Plot " + (j + 1));
              pd1.m_useCustomColour=true;
              pd1.m_customColour=(j % 2 == 0) ? Color.red : Color.blue;
              panel.addPlot(pd1);
            }
          }
 catch (          Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(m_Self,"Error loading file '" + files[j] + "':\n"+ e.getMessage());
            return;
          }
        }
        createFrame(m_Self,jMenuItemVisualizationPlot.getText() + " - " + filenames,panel,new BorderLayout(),BorderLayout.CENTER,800,600,null,true,true);
      }
    }
);
    jMenuItemVisualizationROC=new JMenuItem();
    jMenuVisualization.add(jMenuItemVisualizationROC);
    jMenuItemVisualizationROC.setText("ROC");
    jMenuItemVisualizationROC.setMnemonic('R');
    jMenuItemVisualizationROC.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent evt){
        int retVal=m_FileChooserROC.showOpenDialog(m_Self);
        if (retVal != JFileChooser.APPROVE_OPTION)         return;
        String filename=m_FileChooserROC.getSelectedFile().getAbsolutePath();
        Instances result=null;
        try {
          result=new Instances(new BufferedReader(new FileReader(filename)));
        }
 catch (        Exception e) {
          e.printStackTrace();
          JOptionPane.showMessageDialog(m_Self,"Error loading file '" + filename + "':\n"+ e.getMessage());
          return;
        }
        result.setClassIndex(result.numAttributes() - 1);
        ThresholdVisualizePanel vmc=new ThresholdVisualizePanel();
        vmc.setROCString("(Area under ROC = " + Utils.doubleToString(ThresholdCurve.getROCArea(result),4) + ")");
        vmc.setName(result.relationName());
        PlotData2D tempd=new PlotData2D(result);
        tempd.setPlotName(result.relationName());
        tempd.addInstanceNumberAttribute();
        try {
          vmc.addPlot(tempd);
        }
 catch (        Exception e) {
          e.printStackTrace();
          JOptionPane.showMessageDialog(m_Self,"Error adding plot:\n" + e.getMessage());
          return;
        }
        createFrame(m_Self,jMenuItemVisualizationROC.getText() + " - " + filename,vmc,new BorderLayout(),BorderLayout.CENTER,800,600,null,true,true);
      }
    }
);
    jMenuItemVisualizationTreeVisualizer=new JMenuItem();
    jMenuVisualization.add(jMenuItemVisualizationTreeVisualizer);
    jMenuItemVisualizationTreeVisualizer.setText("TreeVisualizer");
    jMenuItemVisualizationTreeVisualizer.setMnemonic('T');
    jMenuItemVisualizationTreeVisualizer.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent evt){
        int retVal=m_FileChooserTreeVisualizer.showOpenDialog(m_Self);
        if (retVal != JFileChooser.APPROVE_OPTION)         return;
        String filename=m_FileChooserTreeVisualizer.getSelectedFile().getAbsolutePath();
        TreeBuild builder=new TreeBuild();
        Node top=null;
        NodePlace arrange=new PlaceNode2();
        try {
          top=builder.create(new FileReader(filename));
        }
 catch (        Exception e) {
          e.printStackTrace();
          JOptionPane.showMessageDialog(m_Self,"Error loading file '" + filename + "':\n"+ e.getMessage());
          return;
        }
        createFrame(m_Self,jMenuItemVisualizationTreeVisualizer.getText() + " - " + filename,new TreeVisualizer(null,top,arrange),new BorderLayout(),BorderLayout.CENTER,800,600,null,true,true);
      }
    }
);
    jMenuItemVisualizationGraphVisualizer=new JMenuItem();
    jMenuVisualization.add(jMenuItemVisualizationGraphVisualizer);
    jMenuItemVisualizationGraphVisualizer.setText("GraphVisualizer");
    jMenuItemVisualizationGraphVisualizer.setMnemonic('G');
    jMenuItemVisualizationGraphVisualizer.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent evt){
        int retVal=m_FileChooserGraphVisualizer.showOpenDialog(m_Self);
        if (retVal != JFileChooser.APPROVE_OPTION)         return;
        String filename=m_FileChooserGraphVisualizer.getSelectedFile().getAbsolutePath();
        GraphVisualizer panel=new GraphVisualizer();
        try {
          if (filename.toLowerCase().endsWith(".xml") || filename.toLowerCase().endsWith(".bif")) {
            panel.readBIF(new FileInputStream(filename));
          }
 else {
            panel.readDOT(new FileReader(filename));
          }
        }
 catch (        Exception e) {
          e.printStackTrace();
          JOptionPane.showMessageDialog(m_Self,"Error loading file '" + filename + "':\n"+ e.getMessage());
          return;
        }
        createFrame(m_Self,jMenuItemVisualizationGraphVisualizer.getText() + " - " + filename,panel,new BorderLayout(),BorderLayout.CENTER,800,600,null,true,true);
      }
    }
);
    jMenuItemVisualizationBoundaryVisualizer=new JMenuItem();
    jMenuVisualization.add(jMenuItemVisualizationBoundaryVisualizer);
    jMenuItemVisualizationBoundaryVisualizer.setText("BoundaryVisualizer");
    jMenuItemVisualizationBoundaryVisualizer.setMnemonic('B');
    jMenuItemVisualizationBoundaryVisualizer.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent evt){
        String title=jMenuItemVisualizationBoundaryVisualizer.getText();
        if (!containsWindow(title)) {
          createFrame(m_Self,title,new BoundaryVisualizer(),new BorderLayout(),BorderLayout.CENTER,800,600,null,true,true);
          BoundaryVisualizer.setExitIfNoWindowsOpen(false);
        }
 else {
          showWindow(getWindow(title));
        }
      }
    }
);
    jMenuExtensions=new JMenu("Extensions");
    jMenuExtensions.setMnemonic(java.awt.event.KeyEvent.VK_E);
    jMenuBar.add(jMenuExtensions);
    jMenuExtensions.setVisible(false);
    String extensions=GenericObjectEditor.EDITOR_PROPERTIES.getProperty(MainMenuExtension.class.getName(),"");
    if (extensions.length() > 0) {
      jMenuExtensions.setVisible(true);
      String[] classnames=GenericObjectEditor.EDITOR_PROPERTIES.getProperty(MainMenuExtension.class.getName(),"").split(",");
      Hashtable<String,JMenu> submenus=new Hashtable<String,JMenu>();
      for (int i=0; i < classnames.length; i++) {
        String classname=classnames[i];
        try {
          MainMenuExtension ext=(MainMenuExtension)Class.forName(classname).newInstance();
          JMenu submenu=null;
          if (ext.getSubmenuTitle() != null) {
            submenu=submenus.get(ext.getSubmenuTitle());
            if (submenu == null) {
              submenu=new JMenu(ext.getSubmenuTitle());
              submenus.put(ext.getSubmenuTitle(),submenu);
              insertMenuItem(jMenuExtensions,submenu);
            }
          }
          JMenuItem menuitem=new JMenuItem();
          menuitem.setText(ext.getMenuTitle());
          ActionListener listener=ext.getActionListener(m_Self);
          if (listener != null) {
            menuitem.addActionListener(listener);
          }
 else {
            final JMenuItem finalMenuitem=menuitem;
            final MainMenuExtension finalExt=ext;
            menuitem.addActionListener(new ActionListener(){
              public void actionPerformed(              ActionEvent e){
                Component frame=createFrame(m_Self,finalMenuitem.getText(),null,null,null,-1,-1,null,false,false);
                finalExt.fillFrame(frame);
                frame.setVisible(true);
              }
            }
);
          }
          if (submenu != null)           insertMenuItem(submenu,menuitem);
 else           insertMenuItem(jMenuExtensions,menuitem);
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
    }
    jMenuWindows=new JMenu("Windows");
    jMenuWindows.setMnemonic(java.awt.event.KeyEvent.VK_W);
    jMenuBar.add(jMenuWindows);
    jMenuWindows.setVisible(false);
    jMenuHelp=new JMenu();
    jMenuBar.add(jMenuHelp);
    jMenuHelp.setText("Help");
    jMenuHelp.setMnemonic('H');
    jMenuItemHelpHomepage=new JMenuItem();
    jMenuHelp.add(jMenuItemHelpHomepage);
    jMenuItemHelpHomepage.setText("Weka homepage");
    jMenuItemHelpHomepage.setMnemonic('H');
    jMenuItemHelpHomepage.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent evt){
        BrowserHelper.openURL(m_Self,"http://www.cs.waikato.ac.nz/~ml/weka/");
      }
    }
);
    jMenuHelp.add(new JSeparator());
    jMenuItemHelpWekaWiki=new JMenuItem();
    jMenuHelp.add(jMenuItemHelpWekaWiki);
    jMenuItemHelpWekaWiki.setText("HOWTOs, code snippets, etc.");
    jMenuItemHelpWekaWiki.setMnemonic('W');
    jMenuItemHelpWekaWiki.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent evt){
        BrowserHelper.openURL(m_Self,"http://weka.wikispaces.com/");
      }
    }
);
    jMenuItemHelpSourceforge=new JMenuItem();
    jMenuHelp.add(jMenuItemHelpSourceforge);
    jMenuItemHelpSourceforge.setText("Weka on SourceForge");
    jMenuItemHelpSourceforge.setMnemonic('F');
    jMenuItemHelpSourceforge.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent evt){
        BrowserHelper.openURL(m_Self,"http://sourceforge.net/projects/weka/");
      }
    }
);
    jMenuHelp.add(new JSeparator());
    jMenuItemHelpSystemInfo=new JMenuItem();
    jMenuHelp.add(jMenuItemHelpSystemInfo);
    jMenuItemHelpSystemInfo.setText("SystemInfo");
    jMenuItemHelpHomepage.setMnemonic('S');
    jMenuItemHelpSystemInfo.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent evt){
        String title=jMenuItemHelpSystemInfo.getText();
        if (!containsWindow(title)) {
          Hashtable info=new SystemInfo().getSystemInfo();
          Vector names=new Vector();
          Enumeration enm=info.keys();
          while (enm.hasMoreElements())           names.add(enm.nextElement());
          Collections.sort(names);
          String[][] data=new String[info.size()][2];
          for (int i=0; i < names.size(); i++) {
            data[i][0]=names.get(i).toString();
            data[i][1]=info.get(data[i][0]).toString();
          }
          String[] titles=new String[]{"Key","Value"};
          JTable table=new JTable(data,titles);
          createFrame(m_Self,title,new JScrollPane(table),new BorderLayout(),BorderLayout.CENTER,800,600,null,true,true);
        }
 else {
          showWindow(getWindow(title));
        }
      }
    }
);
    jMenuHelp.add(new JSeparator());
    jMenuItemHelpAbout=new JMenuItem();
    jMenuHelp.add(jMenuItemHelpAbout);
    jMenuItemHelpAbout.setText("About");
    jMenuItemHelpAbout.setMnemonic('A');
    jMenuItemHelpAbout.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent evt){
        String title=jMenuItemHelpAbout.getText();
        if (!containsWindow(title)) {
          JPanel wekaPan=new JPanel();
          wekaPan.setToolTipText("Weka, a native bird of New Zealand");
          ImageIcon wii=new ImageIcon(Toolkit.getDefaultToolkit().getImage(ClassLoader.getSystemResource("weka/gui/weka3.gif")));
          JLabel wekaLab=new JLabel(wii);
          wekaPan.add(wekaLab);
          Container frame=createFrame(m_Self,title,wekaPan,new BorderLayout(),BorderLayout.CENTER,-1,-1,null,true,true);
          JPanel titlePan=new JPanel();
          titlePan.setLayout(new GridLayout(8,1));
          titlePan.setBorder(BorderFactory.createEmptyBorder(10,5,10,5));
          titlePan.add(new JLabel("Waikato Environment for",SwingConstants.CENTER));
          titlePan.add(new JLabel("Knowledge Analysis",SwingConstants.CENTER));
          titlePan.add(new JLabel(""));
          titlePan.add(new JLabel("Version " + Version.VERSION,SwingConstants.CENTER));
          titlePan.add(new JLabel(""));
          titlePan.add(new JLabel("(c) " + Copyright.getFromYear() + " - "+ Copyright.getToYear(),SwingConstants.CENTER));
          titlePan.add(new JLabel(Copyright.getOwner(),SwingConstants.CENTER));
          titlePan.add(new JLabel(Copyright.getAddress(),SwingConstants.CENTER));
          if (frame instanceof ChildFrameMDI) {
            ((ChildFrameMDI)frame).getContentPane().add(titlePan,BorderLayout.NORTH);
            ((ChildFrameMDI)frame).pack();
          }
 else           if (frame instanceof ChildFrameSDI) {
            ((ChildFrameSDI)frame).getContentPane().add(titlePan,BorderLayout.NORTH);
            ((ChildFrameSDI)frame).pack();
          }
        }
 else {
          showWindow(getWindow(title));
        }
      }
    }
);
    int screenHeight=getGraphicsConfiguration().getBounds().height;
    int screenWidth=getGraphicsConfiguration().getBounds().width;
    if (m_GUIType == GUI_MDI) {
      int newHeight=(int)(((double)screenHeight) * 0.75);
      int newWidth=(int)(((double)screenWidth) * 0.75);
      setSize(1000 > newWidth ? newWidth : 1000,800 > newHeight ? newHeight : 800);
      setLocation((screenWidth - getBounds().width) / 2,(screenHeight - getBounds().height) / 2);
    }
 else     if (m_GUIType == GUI_SDI) {
      pack();
      setSize(screenWidth,getHeight());
      setLocation(0,0);
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}
