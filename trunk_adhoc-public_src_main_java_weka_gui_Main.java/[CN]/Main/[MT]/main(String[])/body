{
  weka.core.logging.Logger.log(weka.core.logging.Logger.Level.INFO,"Logging started");
  LookAndFeel.setLookAndFeel();
  try {
    if (Utils.getFlag('h',args)) {
      System.out.println();
      System.out.println("Help requested.");
      System.out.println();
      System.out.println("General options:");
      System.out.println();
      System.out.println("-h");
      System.out.println("\tprints this help screen");
      System.out.println();
      Enumeration enu=new Main().listOptions();
      while (enu.hasMoreElements()) {
        Option option=(Option)enu.nextElement();
        System.out.println(option.synopsis());
        System.out.println(option.description());
      }
      System.out.println();
      System.exit(0);
    }
    Main.addStartupListener(new weka.gui.beans.StartUpListener(){
      public void startUpComplete(){
        m_MainCommandline=Main.getSingleton();
        m_MainCommandline.setVisible(true);
      }
    }
);
    Main.addStartupListener(new StartUpListener(){
      public void startUpComplete(){
        SplashWindow.disposeSplash();
      }
    }
);
    SplashWindow.splash(ClassLoader.getSystemResource("weka/gui/images/weka_splash.gif"));
    final String[] options=(String[])args.clone();
    Thread nt=new Thread(){
      public void run(){
        weka.gui.SplashWindow.invokeMethod(Main.class.getName(),"createSingleton",options);
      }
    }
;
    nt.start();
    Thread memMonitor=new Thread(){
      public void run(){
        while (true) {
          try {
            Thread.sleep(4000);
            System.gc();
            if (m_Memory.isOutOfMemory()) {
              m_MainCommandline=null;
              System.gc();
              m_Memory.stopThreads();
              System.err.println("\ndisplayed message:");
              m_Memory.showOutOfMemory();
              System.err.println("\nexiting");
              System.exit(-1);
            }
          }
 catch (          InterruptedException ex) {
            ex.printStackTrace();
          }
        }
      }
    }
;
    memMonitor.setPriority(Thread.MAX_PRIORITY);
    memMonitor.start();
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    System.err.println(ex.getMessage());
  }
}
