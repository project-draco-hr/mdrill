{
  Instances totalStructure=miningSchema.getFieldsAsInstances();
  String fieldS=setP.getAttribute("field");
  Attribute att=totalStructure.attribute(fieldS);
  if (att == null) {
    throw new Exception("[SimplePredicate] unable to find field " + fieldS + " in the incoming instance structure!");
  }
  int index=-1;
  for (int i=0; i < totalStructure.numAttributes(); i++) {
    if (totalStructure.attribute(i).name().equals(fieldS)) {
      index=i;
      m_fieldName=totalStructure.attribute(i).name();
      break;
    }
  }
  m_fieldIndex=index;
  if (att.isNominal()) {
    m_isNominal=true;
    m_nominalLookup=att;
  }
  NodeList children=setP.getChildNodes();
  for (int i=0; i < children.getLength(); i++) {
    Node child=children.item(i);
    if (child.getNodeType() == Node.ELEMENT_NODE) {
      if (Array.isArray((Element)child)) {
        m_set=Array.create((Element)child);
        break;
      }
    }
  }
  if (m_set == null) {
    throw new Exception("[SimpleSetPredictate] couldn't find an " + "array containing the set values!");
  }
  if (m_set.getType() == Array.ArrayType.STRING && !m_isNominal) {
    throw new Exception("[SimpleSetPredicate] referenced field " + totalStructure.attribute(m_fieldIndex).name() + " is numeric but array type is string!");
  }
 else   if (m_set.getType() != Array.ArrayType.STRING && m_isNominal) {
    throw new Exception("[SimpleSetPredicate] referenced field " + totalStructure.attribute(m_fieldIndex).name() + " is nominal but array type is numeric!");
  }
}
