{
  PlotOrientation orientation=plot.getOrientation();
  StackedXYAreaRendererState areaState=(StackedXYAreaRendererState)state;
  TableXYDataset tdataset=(TableXYDataset)dataset;
  int itemCount=tdataset.getItemCount();
  double x1=dataset.getXValue(series,item);
  double y1=dataset.getYValue(series,item);
  boolean nullPoint=false;
  if (Double.isNaN(y1)) {
    y1=0.0;
    nullPoint=true;
  }
  double ph1=getPreviousHeight(tdataset,series,item);
  double transX1=domainAxis.valueToJava2D(x1,dataArea,plot.getDomainAxisEdge());
  double transY1=rangeAxis.valueToJava2D(y1 + ph1,dataArea,plot.getRangeAxisEdge());
  Paint seriesPaint=getItemPaint(series,item);
  Stroke seriesStroke=getItemStroke(series,item);
  if (pass == 0) {
    if (item == 0) {
      areaState.setSeriesArea(new Polygon());
      areaState.setLastSeriesPoints(areaState.getCurrentSeriesPoints());
      areaState.setCurrentSeriesPoints(new Stack());
      double transY2=rangeAxis.valueToJava2D(ph1,dataArea,plot.getRangeAxisEdge());
      if (orientation == PlotOrientation.VERTICAL) {
        areaState.getSeriesArea().addPoint((int)transX1,(int)transY2);
      }
 else       if (orientation == PlotOrientation.HORIZONTAL) {
        areaState.getSeriesArea().addPoint((int)transY2,(int)transX1);
      }
    }
    if (orientation == PlotOrientation.VERTICAL) {
      Point point=new Point((int)transX1,(int)transY1);
      areaState.getSeriesArea().addPoint((int)point.getX(),(int)point.getY());
      areaState.getCurrentSeriesPoints().push(point);
    }
 else     if (orientation == PlotOrientation.HORIZONTAL) {
      areaState.getSeriesArea().addPoint((int)transY1,(int)transX1);
    }
    if (getPlotLines()) {
      if (item > 0) {
        double x0=dataset.getXValue(series,item - 1);
        double y0=dataset.getYValue(series,item - 1);
        double ph0=getPreviousHeight(tdataset,series,item - 1);
        double transX0=domainAxis.valueToJava2D(x0,dataArea,plot.getDomainAxisEdge());
        double transY0=rangeAxis.valueToJava2D(y0 + ph0,dataArea,plot.getRangeAxisEdge());
        if (orientation == PlotOrientation.VERTICAL) {
          areaState.getLine().setLine(transX0,transY0,transX1,transY1);
        }
 else         if (orientation == PlotOrientation.HORIZONTAL) {
          areaState.getLine().setLine(transY0,transX0,transY1,transX1);
        }
        g2.draw(areaState.getLine());
      }
    }
    if (getPlotArea() && item > 0 && item == (itemCount - 1)) {
      double transY2=rangeAxis.valueToJava2D(ph1,dataArea,plot.getRangeAxisEdge());
      if (orientation == PlotOrientation.VERTICAL) {
        areaState.getSeriesArea().addPoint((int)transX1,(int)transY2);
      }
 else       if (orientation == PlotOrientation.HORIZONTAL) {
        areaState.getSeriesArea().addPoint((int)transY2,(int)transX1);
      }
      if (series != 0) {
        Stack points=areaState.getLastSeriesPoints();
        while (!points.empty()) {
          Point point=(Point)points.pop();
          areaState.getSeriesArea().addPoint((int)point.getX(),(int)point.getY());
        }
      }
      g2.setPaint(seriesPaint);
      g2.setStroke(seriesStroke);
      g2.fill(areaState.getSeriesArea());
      if (isOutline()) {
        g2.setStroke(lookupSeriesOutlineStroke(series));
        g2.setPaint(lookupSeriesOutlinePaint(series));
        g2.draw(areaState.getSeriesArea());
      }
    }
    int domainAxisIndex=plot.getDomainAxisIndex(domainAxis);
    int rangeAxisIndex=plot.getRangeAxisIndex(rangeAxis);
    updateCrosshairValues(crosshairState,x1,ph1 + y1,domainAxisIndex,rangeAxisIndex,transX1,transY1,orientation);
  }
 else   if (pass == 1) {
    Shape shape=null;
    if (getPlotShapes()) {
      shape=getItemShape(series,item);
      if (plot.getOrientation() == PlotOrientation.VERTICAL) {
        shape=ShapeUtilities.createTranslatedShape(shape,transX1,transY1);
      }
 else       if (plot.getOrientation() == PlotOrientation.HORIZONTAL) {
        shape=ShapeUtilities.createTranslatedShape(shape,transY1,transX1);
      }
      if (!nullPoint) {
        if (getShapePaint() != null) {
          g2.setPaint(getShapePaint());
        }
 else {
          g2.setPaint(seriesPaint);
        }
        if (getShapeStroke() != null) {
          g2.setStroke(getShapeStroke());
        }
 else {
          g2.setStroke(seriesStroke);
        }
        g2.draw(shape);
      }
    }
 else {
      if (plot.getOrientation() == PlotOrientation.VERTICAL) {
        shape=new Rectangle2D.Double(transX1 - 3,transY1 - 3,6.0,6.0);
      }
 else       if (plot.getOrientation() == PlotOrientation.HORIZONTAL) {
        shape=new Rectangle2D.Double(transY1 - 3,transX1 - 3,6.0,6.0);
      }
    }
    if (state.getInfo() != null) {
      EntityCollection entities=state.getEntityCollection();
      if (entities != null && shape != null && !nullPoint) {
        String tip=null;
        XYToolTipGenerator generator=getToolTipGenerator(series,item);
        if (generator != null) {
          tip=generator.generateToolTip(dataset,series,item);
        }
        String url=null;
        if (getURLGenerator() != null) {
          url=getURLGenerator().generateURL(dataset,series,item);
        }
        XYItemEntity entity=new XYItemEntity(shape,dataset,series,item,tip,url);
        entities.add(entity);
      }
    }
  }
}
