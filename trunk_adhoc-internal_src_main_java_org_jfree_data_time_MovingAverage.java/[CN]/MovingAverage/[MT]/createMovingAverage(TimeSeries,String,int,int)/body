{
  if (source == null) {
    throw new IllegalArgumentException("Null source.");
  }
  if (periodCount < 1) {
    throw new IllegalArgumentException("periodCount must be greater " + "than or equal to 1.");
  }
  TimeSeries result=new TimeSeries(name);
  if (source.getItemCount() > 0) {
    long firstSerial=source.getDataItem(0).getPeriod().getSerialIndex() + skip;
    for (int i=source.getItemCount() - 1; i >= 0; i--) {
      TimeSeriesDataItem current=source.getDataItem(i);
      RegularTimePeriod period=current.getPeriod();
      long serial=period.getSerialIndex();
      if (serial >= firstSerial) {
        int n=0;
        double sum=0.0;
        long serialLimit=period.getSerialIndex() - periodCount;
        int offset=0;
        boolean finished=false;
        while ((offset < periodCount) && (!finished)) {
          if ((i - offset) >= 0) {
            TimeSeriesDataItem item=source.getDataItem(i - offset);
            RegularTimePeriod p=item.getPeriod();
            Number v=item.getValue();
            long currentIndex=p.getSerialIndex();
            if (currentIndex > serialLimit) {
              if (v != null) {
                sum=sum + v.doubleValue();
                n=n + 1;
              }
            }
 else {
              finished=true;
            }
          }
          offset=offset + 1;
        }
        if (n > 0) {
          result.add(period,sum / n);
        }
 else {
          result.add(period,null);
        }
      }
    }
  }
  return result;
}
