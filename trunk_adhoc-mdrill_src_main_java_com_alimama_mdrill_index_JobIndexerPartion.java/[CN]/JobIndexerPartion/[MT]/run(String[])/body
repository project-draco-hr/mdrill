{
  String split=args[0];
  String submatch=args[1];
  Integer parallel=Integer.parseInt(args[2]);
  String tablemode=args[3];
  Integer rep=Integer.parseInt(args[4]);
  this.cleanTmp();
  while (true) {
    TreeMap<String,HashSet<String>> partions=this.getPartions();
    rebuildPartion runPartion=null;
    for (    Entry<String,HashSet<String>> e : partions.entrySet()) {
      String partion=e.getKey();
      HashSet<String> days=e.getValue();
      String currentvertify=this.getCurrentVertify(partion,days,submatch,tablemode);
      Path indexOtherPath=new Path(this.index,partion);
      Path tmpindexOtherPath=new Path(this.workDir,partion);
      Path otherveritify=new Path(indexOtherPath,"vertify");
      String lastVertify=parse.readFirstLineStr(otherveritify);
      System.out.println("11111111 vertify:>>>last>>>" + lastVertify + ">>current>>"+ currentvertify+ "<<<<");
      if (!currentvertify.equals(lastVertify)) {
        if (days.size() > 0 && MakeIndex.checkPath(fs,this.inputBase,days,submatch)) {
          runPartion=new rebuildPartion();
          runPartion.partion=partion;
          runPartion.days=days;
          runPartion.tmpindexOtherPath=tmpindexOtherPath;
          runPartion.otherveritify=otherveritify;
          runPartion.partionvertify=currentvertify;
          break;
        }
      }
    }
    if (runPartion != null) {
      System.out.println("22222  vertify:" + runPartion.partion + ">>>"+ runPartion.partionvertify+ "<<<<");
      int ret=0;
      try {
        flock.trylock();
        String currentvertify=this.getCurrentVertify(runPartion.partion,runPartion.days,submatch,tablemode);
        Path indexOtherPath=new Path(this.index,runPartion.partion);
        Path otherveritify=new Path(indexOtherPath,"vertify");
        String lastVertify=parse.readFirstLineStr(otherveritify);
        System.out.println("333333 vertify:" + runPartion.partion + ">>>"+ runPartion.partionvertify+ ">>>"+ currentvertify+ ">>>>"+ lastVertify+ "<<<<");
        if (currentvertify.equals(lastVertify)) {
          System.out.println("##########finiesd by other process #########");
          continue;
        }
        ret=this.subRun(runPartion.days,runPartion.tmpindexOtherPath.toString(),split,submatch,parallel,tablemode,rep);
        parse.writeStr(new Path(runPartion.tmpindexOtherPath,"vertify"),runPartion.partionvertify);
      }
  finally {
        flock.unlock();
      }
      if (ret != 0) {
        return ret;
      }
      TreeMap<String,HashSet<String>> partionscomplete=this.getPartions();
      HashSet<String> days=partionscomplete.get(runPartion.partion);
      if (days == null) {
        continue;
      }
      String currentVertify=this.getCurrentVertify(runPartion.partion,days,submatch,tablemode);
      System.out.println("44444 vertify:" + runPartion.partion + ">>>"+ runPartion.partionvertify+ "<<<"+ currentVertify+ "<<<<");
      if (!currentVertify.equals(runPartion.partionvertify)) {
        System.out.println("##########changed#########");
        continue;
      }
      try {
        Path indexOtherPath=new Path(this.index,runPartion.partion);
        if (this.fs.exists(indexOtherPath)) {
          this.fs.delete(indexOtherPath,true);
        }
        this.fs.mkdirs(indexOtherPath.getParent());
        this.fs.rename(runPartion.tmpindexOtherPath,indexOtherPath);
      }
 catch (      Throwable e) {
        e.printStackTrace();
      }
      continue;
    }
    break;
  }
  this.cleanNotUsedPartion();
  this.cleanTmp();
  this.fs.delete(this.workDir,true);
  return 0;
}
