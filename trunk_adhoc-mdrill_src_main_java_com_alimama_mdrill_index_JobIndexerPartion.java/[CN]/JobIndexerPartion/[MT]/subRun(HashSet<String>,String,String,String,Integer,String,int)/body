{
  Path smallindex=this.parse.smallIndex(output);
  Configuration conf=this.getConf();
  conf.set("mdrill.table.mode",tablemode);
  conf.setInt("dfs.replication",rep);
  String hdfsPral="1";
  Pattern mapiPattern=Pattern.compile("@sigment:([0-9]+)@");
  Matcher mat=mapiPattern.matcher(tablemode);
  if (mat.find()) {
    hdfsPral=mat.group(1);
  }
  int sigcount=1;
  try {
    sigcount=Integer.parseInt(hdfsPral);
  }
 catch (  Throwable e) {
  }
  if (sigcount <= 1) {
    return MakeIndex.make(fs,solrHome,conf,this.filetype,this.inputBase,inputs,submatch,output,smallindex,shards,split,true,"",null,parallel);
  }
  int rtn=MakeIndex.make(fs,solrHome,conf,this.filetype,this.inputBase,inputs,submatch,output,smallindex,shards * sigcount,split,true,"",null,parallel);
  if (rtn == 0) {
    Path subdir=new Path(output,"sigment");
    for (int i=0; i < shards * sigcount; i++) {
      String dir=IndexUtils.getHdfsForder(i);
      String sig=IndexUtils.getHdfsForder(i / sigcount);
      if (fs.exists(new Path(output,dir))) {
        Path newname=new Path(subdir,sig);
        fs.mkdirs(newname);
        fs.rename(new Path(output,dir),new Path(newname,dir));
      }
    }
  }
  return rtn;
}
