{
  double left_clip=(double)(-m_viewPos.width - 50) / m_viewSize.width;
  double right_clip=(double)(getSize().width - m_viewPos.width + 50) / m_viewSize.width;
  double top_clip=(double)(-m_viewPos.height - 50) / m_viewSize.height;
  double bottom_clip=(double)(getSize().height - m_viewPos.height + 50) / m_viewSize.height;
  Edge e;
  Node r, s;
  double ncent, ntop;
  int row=0, col=0, pq, cq;
  for (int noa=0; noa < m_numNodes; noa++) {
    r=m_nodes[noa].m_node;
    if (m_nodes[noa].m_change) {
      ntop=r.getTop();
      if (ntop < top_clip) {
        row=8;
      }
 else       if (ntop > bottom_clip) {
        row=32;
      }
 else {
        row=16;
      }
    }
    ncent=r.getCenter();
    if (ncent < left_clip) {
      col=4;
    }
 else     if (ncent > right_clip) {
      col=1;
    }
 else {
      col=2;
    }
    m_nodes[noa].m_quad=row | col;
    if (m_nodes[noa].m_parent >= 0) {
      pq=m_nodes[m_edges[m_nodes[noa].m_parent].m_parent].m_quad;
      cq=m_nodes[noa].m_quad;
      if ((cq & 8) == 8) {
      }
 else       if ((pq & 32) == 32) {
      }
 else       if ((cq & 4) == 4 && (pq & 4) == 4) {
      }
 else       if ((cq & 1) == 1 && (pq & 1) == 1) {
      }
 else {
        drawLine(m_nodes[noa].m_parent,g);
      }
    }
  }
  for (int noa=0; noa < m_numNodes; noa++) {
    if (m_nodes[noa].m_quad == 18) {
      drawNode(noa,g);
    }
  }
  if (m_highlightNode >= 0 && m_highlightNode < m_numNodes) {
    if (m_nodes[m_highlightNode].m_quad == 18) {
      Color acol;
      if (m_NodeColor == null)       acol=m_nodes[m_highlightNode].m_node.getColor();
 else       acol=m_NodeColor;
      g.setColor(new Color((acol.getRed() + 125) % 256,(acol.getGreen() + 125) % 256,(acol.getBlue() + 125) % 256));
      if (m_nodes[m_highlightNode].m_node.getShape() == 1) {
        g.drawRect(m_nodes[m_highlightNode].m_center - m_nodes[m_highlightNode].m_side,m_nodes[m_highlightNode].m_top,m_nodes[m_highlightNode].m_width,m_nodes[m_highlightNode].m_height);
        g.drawRect(m_nodes[m_highlightNode].m_center - m_nodes[m_highlightNode].m_side + 1,m_nodes[m_highlightNode].m_top + 1,m_nodes[m_highlightNode].m_width - 2,m_nodes[m_highlightNode].m_height - 2);
      }
 else       if (m_nodes[m_highlightNode].m_node.getShape() == 2) {
        g.drawOval(m_nodes[m_highlightNode].m_center - m_nodes[m_highlightNode].m_side,m_nodes[m_highlightNode].m_top,m_nodes[m_highlightNode].m_width,m_nodes[m_highlightNode].m_height);
        g.drawOval(m_nodes[m_highlightNode].m_center - m_nodes[m_highlightNode].m_side + 1,m_nodes[m_highlightNode].m_top + 1,m_nodes[m_highlightNode].m_width - 2,m_nodes[m_highlightNode].m_height - 2);
      }
    }
  }
  for (int noa=0; noa < m_numNodes; noa++) {
    m_nodes[noa].m_top=32000;
  }
}
