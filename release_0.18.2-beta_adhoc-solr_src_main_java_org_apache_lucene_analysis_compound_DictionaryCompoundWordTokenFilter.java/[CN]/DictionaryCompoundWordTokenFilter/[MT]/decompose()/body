{
  final int len=termAtt.length();
  for (int i=0; i <= len - this.minSubwordSize; ++i) {
    CompoundToken longestMatchToken=null;
    for (int j=this.minSubwordSize; j <= this.maxSubwordSize; ++j) {
      if (i + j > len) {
        break;
      }
      if (dictionary.contains(termAtt.buffer(),i,j)) {
        if (this.onlyLongestMatch) {
          if (longestMatchToken != null) {
            if (longestMatchToken.txt.length() < j) {
              longestMatchToken=new CompoundToken(i,j);
            }
          }
 else {
            longestMatchToken=new CompoundToken(i,j);
          }
        }
 else {
          tokens.add(new CompoundToken(i,j));
        }
      }
    }
    if (this.onlyLongestMatch && longestMatchToken != null) {
      tokens.add(longestMatchToken);
    }
  }
}
