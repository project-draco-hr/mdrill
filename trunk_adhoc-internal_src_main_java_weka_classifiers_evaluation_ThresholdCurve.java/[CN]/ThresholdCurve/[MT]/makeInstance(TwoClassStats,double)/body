{
  int count=0;
  double[] vals=new double[13];
  vals[count++]=tc.getTruePositive();
  vals[count++]=tc.getFalseNegative();
  vals[count++]=tc.getFalsePositive();
  vals[count++]=tc.getTrueNegative();
  vals[count++]=tc.getFalsePositiveRate();
  vals[count++]=tc.getTruePositiveRate();
  vals[count++]=tc.getPrecision();
  vals[count++]=tc.getRecall();
  vals[count++]=tc.getFallout();
  vals[count++]=tc.getFMeasure();
  double ss=(tc.getTruePositive() + tc.getFalsePositive()) / (tc.getTruePositive() + tc.getFalsePositive() + tc.getTrueNegative()+ tc.getFalseNegative());
  vals[count++]=ss;
  double expectedByChance=(ss * (tc.getTruePositive() + tc.getFalseNegative()));
  if (expectedByChance < 1) {
    vals[count++]=Utils.missingValue();
  }
 else {
    vals[count++]=tc.getTruePositive() / expectedByChance;
  }
  vals[count++]=prob;
  return new DenseInstance(1.0,vals);
}
