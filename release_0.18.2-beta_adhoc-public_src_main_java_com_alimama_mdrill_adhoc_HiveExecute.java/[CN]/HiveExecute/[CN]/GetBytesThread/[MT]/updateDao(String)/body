{
  String result=MATCH_GET.evaluate(line,".*Stage-.*number.*of.*mappers[^\\d]*(\\d+)[^\\d]*number.*of.*reducers",1,"Integer");
  if (!result.equals("-")) {
    this.slotCount+=Integer.parseInt(result);
    this.callback.setSlotCount(this.slotCount);
  }
  result=MATCH_GET.evaluate(line,".*Stage-.*number.*of.*mappers.*number.*of.*reducers[^\\d]*(\\d+)[^\\d]*",1,"Integer");
  if (!result.equals("-")) {
    this.slotCount+=Integer.parseInt(result);
    this.callback.setSlotCount(this.slotCount);
  }
  result=MATCH_GET.evaluate(line,".*Moving.*data.*to:(.*$)",1,"String");
  if (!result.equals("-")) {
    String path=result.trim();
    Configuration conf=new Configuration();
    HadoopBaseUtils.grabConfiguration(confdir,conf);
    long sizekb=0;
    try {
      sizekb=HadoopBaseUtils.size(path,conf) / 1024;
    }
 catch (    IOException e) {
    }
    this.callback.setResultKb(sizekb);
  }
  result=MATCH_GET.evaluate(line,"[^\\d]*(\\d+)[^\\d].*Rows.*loaded.*to.*",1,"Integer");
  if (!result.equals("-")) {
    Long rows=Long.parseLong(result);
    this.callback.setResultRows(rows);
  }
  result=MATCH_GET.evaluate(line,".*(Stage.*map.*reduce.*$)",1,"String");
  if (!result.equals("-")) {
    this.callback.setPercent(result);
  }
  result=MATCH_GET.evaluate(line,".*Launching.*Job.*out.*of(.*$)",1,"String");
  if (!result.equals("-")) {
    this.callback.setStage(result.trim());
  }
  result=MATCH_GET.evaluate(line,".*Total.*MapReduce.*jobs.*=(.*$)",1,"String");
  if (!result.equals("-")) {
    this.callback.setStage(result.trim());
  }
  result=MATCH_GET.evaluate(line,".*Starting.*Job.*=.*(job_\\d+_\\d+),.*Tracking.*URL.*",1,"String");
  if (!result.equals("-")) {
    this.callback.addJobId(result);
  }
  if (line.toLowerCase().indexOf("exception") > 0) {
    this.callback.addException(line);
  }
}
