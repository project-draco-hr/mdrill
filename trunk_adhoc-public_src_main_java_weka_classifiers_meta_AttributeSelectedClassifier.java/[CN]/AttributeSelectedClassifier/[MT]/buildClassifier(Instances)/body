{
  if (m_Classifier == null) {
    throw new Exception("No base classifier has been set!");
  }
  if (m_Evaluator == null) {
    throw new Exception("No attribute evaluator has been set!");
  }
  if (m_Search == null) {
    throw new Exception("No search method has been set!");
  }
  getCapabilities().testWithFail(data);
  Instances newData=new Instances(data);
  newData.deleteWithMissingClass();
  if (newData.numInstances() == 0) {
    m_Classifier.buildClassifier(newData);
    return;
  }
  if (newData.classAttribute().isNominal()) {
    m_numClasses=newData.classAttribute().numValues();
  }
 else {
    m_numClasses=1;
  }
  Instances resampledData=null;
  double weight=newData.instance(0).weight();
  boolean ok=false;
  for (int i=1; i < newData.numInstances(); i++) {
    if (newData.instance(i).weight() != weight) {
      ok=true;
      break;
    }
  }
  if (ok) {
    if (!(m_Evaluator instanceof WeightedInstancesHandler) || !(m_Classifier instanceof WeightedInstancesHandler)) {
      Random r=new Random(1);
      for (int i=0; i < 10; i++) {
        r.nextDouble();
      }
      resampledData=newData.resampleWithWeights(r);
    }
  }
 else {
    resampledData=newData;
  }
  m_AttributeSelection=new AttributeSelection();
  m_AttributeSelection.setEvaluator(m_Evaluator);
  m_AttributeSelection.setSearch(m_Search);
  long start=System.currentTimeMillis();
  m_AttributeSelection.SelectAttributes((m_Evaluator instanceof WeightedInstancesHandler) ? newData : resampledData);
  long end=System.currentTimeMillis();
  if (m_Classifier instanceof WeightedInstancesHandler) {
    newData=m_AttributeSelection.reduceDimensionality(newData);
    m_Classifier.buildClassifier(newData);
  }
 else {
    resampledData=m_AttributeSelection.reduceDimensionality(resampledData);
    m_Classifier.buildClassifier(resampledData);
  }
  long end2=System.currentTimeMillis();
  m_numAttributesSelected=m_AttributeSelection.numberAttributesSelected();
  m_ReducedHeader=new Instances((m_Classifier instanceof WeightedInstancesHandler) ? newData : resampledData,0);
  m_selectionTime=(double)(end - start);
  m_totalTime=(double)(end2 - start);
}
