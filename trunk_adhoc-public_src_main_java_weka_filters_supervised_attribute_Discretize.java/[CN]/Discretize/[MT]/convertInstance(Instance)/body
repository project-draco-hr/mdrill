{
  int index=0;
  double[] vals=new double[outputFormatPeek().numAttributes()];
  for (int i=0; i < getInputFormat().numAttributes(); i++) {
    if (m_DiscretizeCols.isInRange(i) && getInputFormat().attribute(i).isNumeric()) {
      int j;
      double currentVal=instance.value(i);
      if (m_CutPoints[i] == null) {
        if (instance.isMissing(i)) {
          vals[index]=Utils.missingValue();
        }
 else {
          vals[index]=0;
        }
        index++;
      }
 else {
        if (!m_MakeBinary) {
          if (instance.isMissing(i)) {
            vals[index]=Utils.missingValue();
          }
 else {
            for (j=0; j < m_CutPoints[i].length; j++) {
              if (currentVal <= m_CutPoints[i][j]) {
                break;
              }
            }
            vals[index]=j;
          }
          index++;
        }
 else {
          for (j=0; j < m_CutPoints[i].length; j++) {
            if (instance.isMissing(i)) {
              vals[index]=Utils.missingValue();
            }
 else             if (currentVal <= m_CutPoints[i][j]) {
              vals[index]=0;
            }
 else {
              vals[index]=1;
            }
            index++;
          }
        }
      }
    }
 else {
      vals[index]=instance.value(i);
      index++;
    }
  }
  Instance inst=null;
  if (instance instanceof SparseInstance) {
    inst=new SparseInstance(instance.weight(),vals);
  }
 else {
    inst=new DenseInstance(instance.weight(),vals);
  }
  inst.setDataset(getOutputFormat());
  copyValues(inst,false,instance.dataset(),getOutputFormat());
  inst.setDataset(getOutputFormat());
  push(inst);
}
