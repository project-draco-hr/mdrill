{
  weka.core.logging.Logger.log(weka.core.logging.Logger.Level.INFO,"Logging started");
  try {
    establishCacheIfNeeded(System.out);
    checkForNewPackages(System.out);
    if (args.length == 0 || args[0].equalsIgnoreCase("-h") || args[0].equalsIgnoreCase("-help")) {
      printUsage();
      return;
    }
    if (args[0].equals("-package-info")) {
      if (args.length < 3) {
        printUsage();
        return;
      }
      if (args[1].equals("archive")) {
        printPackageArchiveInfo(args[2]);
      }
 else       if (args[1].equals("installed")) {
        printInstalledPackageInfo(args[2]);
      }
 else       if (args[1].equals("repository")) {
        String version="Latest";
        if (args.length == 4) {
          version=args[3];
        }
        try {
          printRepositoryPackageInfo(args[2],version);
        }
 catch (        Exception ex) {
          System.out.println("[WekaPackageManager] Nothing known about package " + args[2] + " at the repository!");
        }
      }
 else {
        System.err.println("[WekaPackageManager] Unknown argument " + args[2]);
        printUsage();
        return;
      }
    }
 else     if (args[0].equals("-install-package")) {
      String targetLowerCase=args[1].toLowerCase();
      if (targetLowerCase.startsWith("http://") || targetLowerCase.startsWith("https://")) {
        URL packageURL=new URL(args[1]);
        installPackageFromURL(packageURL,System.out);
      }
 else       if (targetLowerCase.endsWith(".zip")) {
        installPackageFromArchive(args[1],System.out);
      }
 else {
        String version="Latest";
        if (args.length == 3) {
          version=args[2];
        }
        installPackageFromRepository(args[1],version,false);
      }
    }
 else     if (args[0].equals("-uninstall-package")) {
      if (args.length < 2) {
        printUsage();
        return;
      }
      boolean force=false;
      if (args.length == 3) {
        if (args[2].equals("-force")) {
          force=true;
        }
      }
      removeInstalledPackage(args[1],force,System.out);
      return;
    }
 else     if (args[0].equals("-list-packages")) {
      if (args.length < 2) {
        printUsage();
        return;
      }
      listPackages(args[1]);
    }
 else     if (args[0].equals("-refresh-cache")) {
      refreshCache(System.out);
    }
 else {
      System.err.println("Unknown option: " + args[0]);
      printUsage();
    }
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
}
