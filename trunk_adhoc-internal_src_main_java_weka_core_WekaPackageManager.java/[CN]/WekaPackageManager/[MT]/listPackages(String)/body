{
  List<Package> packageList=null;
  useCacheOrOnlineRepository();
  if (arg.equalsIgnoreCase("all")) {
    packageList=PACKAGE_MANAGER.getAllPackages();
  }
 else   if (arg.equals("installed")) {
    packageList=PACKAGE_MANAGER.getInstalledPackages();
  }
 else   if (arg.equals("available")) {
    packageList=PACKAGE_MANAGER.getAvailablePackages();
  }
 else {
    System.err.println("[WekaPackageManager] Unknown argument " + arg);
    printUsage();
    return;
  }
  StringBuffer result=new StringBuffer();
  result.append("Installed\tRepository\tPackage\n");
  result.append("=========\t==========\t=======\n");
  Iterator<Package> i=packageList.iterator();
  while (i.hasNext()) {
    Package p=i.next();
    String installedV="-----    ";
    String repositoryV="-----     ";
    if (p.isInstalled()) {
      Package installedP=getInstalledPackageInfo(p.getName());
      installedV=installedP.getPackageMetaDataElement("Version").toString() + "    ";
      try {
        Package repP=getRepositoryPackageInfo(p.getName());
        repositoryV=repP.getPackageMetaDataElement("Version").toString() + "     ";
      }
 catch (      Exception ex) {
      }
    }
 else {
      repositoryV=p.getPackageMetaDataElement("Version").toString() + "     ";
    }
    String title=p.getPackageMetaDataElement("Title").toString();
    result.append(installedV + "\t" + repositoryV+ "\t"+ p.getName()+ ": "+ title+ "\n");
  }
  System.out.println(result.toString());
}
