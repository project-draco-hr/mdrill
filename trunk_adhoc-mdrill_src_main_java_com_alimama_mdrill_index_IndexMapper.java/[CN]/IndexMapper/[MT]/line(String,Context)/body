{
  context.getCounter("higo","totalrecord").increment(1);
  String[] values=record.split(split,-1);
  if (!this.validate(values,record,context)) {
    return false;
  }
  HashMap<String,String> res=new HashMap<String,String>(fields.length);
  for (int i=0; i < fields.length; i++) {
    String fieldName=fields[i];
    String string=(i < values.length) ? values[i] : null;
    String val=parseDefault(string);
    if (this.isDate[i]) {
      res.put(fieldName,TdateFormat.ensureTdate(val,fieldName));
    }
 else     if (val != null) {
      res.put(fieldName,val);
    }
 else     if (this.isString[i]) {
      res.put(fieldName,"_");
    }
  }
  if (usedthedate) {
    if (thedate != null) {
      res.put("thedate",thedate);
    }
    res.put("thedate",String.valueOf(res.get("thedate")).replaceAll("-","").replaceAll("_",""));
    if (res.get("thedate").length() != 8) {
      if (debuglines < 100) {
        debuglines++;
        System.out.println("miss thedate values: " + record.replaceAll(split,"#") + "");
      }
      context.getCounter("higo","skiprecords").increment(1);
    }
    context.getCounter("higo","dayrecord_" + String.valueOf(res.get("thedate"))).increment(1);
    CRC32 crc32=new CRC32();
    crc32.update(java.util.UUID.randomUUID().toString().getBytes());
    res.put("higo_uuid",Long.toString(crc32.getValue()));
  }
  if (printlines < 10) {
    printlines++;
    System.out.println("res: " + res.toString() + " arrays,"+ Arrays.toString(values));
  }
  this.doclist.add(res);
  if (this.doclist.size() >= PER) {
    context.write(new Text(String.valueOf(this.Index++)),new DocumentList(this.doclist));
    this.doclist.clear();
  }
  if (this.isuniqcheck && res.containsKey(this.uniqfield)) {
    String notempty=res.get(this.uniqfield);
    if (notempty.length() > 0) {
      context.write(new Text("uniq_" + notempty),new DocumentList());
    }
  }
  return true;
}
