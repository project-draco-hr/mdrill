{
  int i, j, k, ii, jj;
  int ni, nj;
  double sum=0.0;
  double sumi[], sumj[];
  double counts[][];
  Instance inst;
  double corr_measure;
  boolean flag=false;
  double temp=0.0;
  if (att1 == m_classIndex || att2 == m_classIndex) {
    flag=true;
  }
  ni=m_trainInstances.attribute(att1).numValues() + 1;
  nj=m_trainInstances.attribute(att2).numValues() + 1;
  counts=new double[ni][nj];
  sumi=new double[ni];
  sumj=new double[nj];
  for (i=0; i < ni; i++) {
    sumi[i]=0.0;
    for (j=0; j < nj; j++) {
      sumj[j]=0.0;
      counts[i][j]=0.0;
    }
  }
  for (i=0; i < m_numInstances; i++) {
    inst=m_trainInstances.instance(i);
    if (inst.isMissing(att1)) {
      ii=ni - 1;
    }
 else {
      ii=(int)inst.value(att1);
    }
    if (inst.isMissing(att2)) {
      jj=nj - 1;
    }
 else {
      jj=(int)inst.value(att2);
    }
    counts[ii][jj]++;
  }
  for (i=0; i < ni; i++) {
    sumi[i]=0.0;
    for (j=0; j < nj; j++) {
      sumi[i]+=counts[i][j];
      sum+=counts[i][j];
    }
  }
  for (j=0; j < nj; j++) {
    sumj[j]=0.0;
    for (i=0; i < ni; i++) {
      sumj[j]+=counts[i][j];
    }
  }
  if (!m_missingSeparate && (sumi[ni - 1] < m_numInstances) && (sumj[nj - 1] < m_numInstances)) {
    double[] i_copy=new double[sumi.length];
    double[] j_copy=new double[sumj.length];
    double[][] counts_copy=new double[sumi.length][sumj.length];
    for (i=0; i < ni; i++) {
      System.arraycopy(counts[i],0,counts_copy[i],0,sumj.length);
    }
    System.arraycopy(sumi,0,i_copy,0,sumi.length);
    System.arraycopy(sumj,0,j_copy,0,sumj.length);
    double total_missing=(sumi[ni - 1] + sumj[nj - 1] - counts[ni - 1][nj - 1]);
    if (sumi[ni - 1] > 0.0) {
      for (j=0; j < nj - 1; j++) {
        if (counts[ni - 1][j] > 0.0) {
          for (i=0; i < ni - 1; i++) {
            temp=((i_copy[i] / (sum - i_copy[ni - 1])) * counts[ni - 1][j]);
            counts[i][j]+=temp;
            sumi[i]+=temp;
          }
          counts[ni - 1][j]=0.0;
        }
      }
    }
    sumi[ni - 1]=0.0;
    if (sumj[nj - 1] > 0.0) {
      for (i=0; i < ni - 1; i++) {
        if (counts[i][nj - 1] > 0.0) {
          for (j=0; j < nj - 1; j++) {
            temp=((j_copy[j] / (sum - j_copy[nj - 1])) * counts[i][nj - 1]);
            counts[i][j]+=temp;
            sumj[j]+=temp;
          }
          counts[i][nj - 1]=0.0;
        }
      }
    }
    sumj[nj - 1]=0.0;
    if (counts[ni - 1][nj - 1] > 0.0 && total_missing != sum) {
      for (i=0; i < ni - 1; i++) {
        for (j=0; j < nj - 1; j++) {
          temp=(counts_copy[i][j] / (sum - total_missing)) * counts_copy[ni - 1][nj - 1];
          counts[i][j]+=temp;
          sumi[i]+=temp;
          sumj[j]+=temp;
        }
      }
      counts[ni - 1][nj - 1]=0.0;
    }
  }
  corr_measure=ContingencyTables.symmetricalUncertainty(counts);
  if (Utils.eq(corr_measure,0.0)) {
    if (flag == true) {
      return (0.0);
    }
 else {
      return (1.0);
    }
  }
 else {
    return (corr_measure);
  }
}
