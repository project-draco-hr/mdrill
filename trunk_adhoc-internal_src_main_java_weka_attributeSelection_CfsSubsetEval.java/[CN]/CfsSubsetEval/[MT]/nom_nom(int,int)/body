{
  int i, j, ii, jj, z;
  double temp1, temp2;
  Instance inst;
  int mx=(int)m_trainInstances.meanOrMode(m_trainInstances.attribute(att1));
  int my=(int)m_trainInstances.meanOrMode(m_trainInstances.attribute(att2));
  double diff1, diff2;
  double r=0.0, rr;
  int nx=(!m_missingSeparate) ? m_trainInstances.attribute(att1).numValues() : m_trainInstances.attribute(att1).numValues() + 1;
  int ny=(!m_missingSeparate) ? m_trainInstances.attribute(att2).numValues() : m_trainInstances.attribute(att2).numValues() + 1;
  double[][] prior_nom=new double[nx][ny];
  double[] sumx=new double[nx];
  double[] sumy=new double[ny];
  double[] stdvsx=new double[nx];
  double[] stdvsy=new double[ny];
  double[][] covs=new double[nx][ny];
  for (i=0; i < nx; i++) {
    sumx[i]=stdvsx[i]=0.0;
  }
  for (j=0; j < ny; j++) {
    sumy[j]=stdvsy[j]=0.0;
  }
  for (i=0; i < nx; i++) {
    for (j=0; j < ny; j++) {
      covs[i][j]=prior_nom[i][j]=0.0;
    }
  }
  for (i=0; i < m_numInstances; i++) {
    inst=m_trainInstances.instance(i);
    if (inst.isMissing(att1)) {
      if (!m_missingSeparate) {
        ii=mx;
      }
 else {
        ii=nx - 1;
      }
    }
 else {
      ii=(int)inst.value(att1);
    }
    if (inst.isMissing(att2)) {
      if (!m_missingSeparate) {
        jj=my;
      }
 else {
        jj=ny - 1;
      }
    }
 else {
      jj=(int)inst.value(att2);
    }
    prior_nom[ii][jj]++;
    sumx[ii]++;
    sumy[jj]++;
  }
  for (z=0; z < m_numInstances; z++) {
    inst=m_trainInstances.instance(z);
    for (j=0; j < ny; j++) {
      if (inst.isMissing(att2)) {
        if (!m_missingSeparate) {
          temp2=(j == my) ? 1.0 : 0.0;
        }
 else {
          temp2=(j == (ny - 1)) ? 1.0 : 0.0;
        }
      }
 else {
        temp2=(j == inst.value(att2)) ? 1.0 : 0.0;
      }
      diff2=(temp2 - (sumy[j] / m_numInstances));
      stdvsy[j]+=(diff2 * diff2);
    }
    for (i=0; i < nx; i++) {
      if (inst.isMissing(att1)) {
        if (!m_missingSeparate) {
          temp1=(i == mx) ? 1.0 : 0.0;
        }
 else {
          temp1=(i == (nx - 1)) ? 1.0 : 0.0;
        }
      }
 else {
        temp1=(i == inst.value(att1)) ? 1.0 : 0.0;
      }
      diff1=(temp1 - (sumx[i] / m_numInstances));
      stdvsx[i]+=(diff1 * diff1);
      for (j=0; j < ny; j++) {
        if (inst.isMissing(att2)) {
          if (!m_missingSeparate) {
            temp2=(j == my) ? 1.0 : 0.0;
          }
 else {
            temp2=(j == (ny - 1)) ? 1.0 : 0.0;
          }
        }
 else {
          temp2=(j == inst.value(att2)) ? 1.0 : 0.0;
        }
        diff2=(temp2 - (sumy[j] / m_numInstances));
        covs[i][j]+=(diff1 * diff2);
      }
    }
  }
  for (i=0; i < nx; i++) {
    for (j=0; j < ny; j++) {
      if ((stdvsx[i] * stdvsy[j]) > 0.0) {
        rr=(covs[i][j] / (Math.sqrt(stdvsx[i] * stdvsy[j])));
        if (rr < 0.0) {
          rr=-rr;
        }
        r+=((prior_nom[i][j] / m_numInstances) * rr);
      }
 else {
        if (att1 != m_classIndex && att2 != m_classIndex) {
          r+=((prior_nom[i][j] / m_numInstances) * 1.0);
        }
      }
    }
  }
  for (i=0, temp1=0.0; i < nx; i++) {
    temp1+=((sumx[i] / m_numInstances) * (stdvsx[i] / m_numInstances));
  }
  if (temp1 != 0.0) {
    if (m_std_devs[att1] == 1.0) {
      m_std_devs[att1]=Math.sqrt(temp1);
    }
  }
  for (j=0, temp2=0.0; j < ny; j++) {
    temp2+=((sumy[j] / m_numInstances) * (stdvsy[j] / m_numInstances));
  }
  if (temp2 != 0.0) {
    if (m_std_devs[att2] == 1.0) {
      m_std_devs[att2]=Math.sqrt(temp2);
    }
  }
  if (r == 0.0) {
    if (att1 != m_classIndex && att2 != m_classIndex) {
      r=1.0;
    }
  }
  return r;
}
