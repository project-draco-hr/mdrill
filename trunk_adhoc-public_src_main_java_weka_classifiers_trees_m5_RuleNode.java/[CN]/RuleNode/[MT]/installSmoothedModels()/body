{
  if (m_isLeaf) {
    double[] coefficients=new double[m_numAttributes];
    double intercept;
    double[] coeffsUsedByLinearModel=m_nodeModel.coefficients();
    RuleNode current=this;
    for (int i=0; i < coeffsUsedByLinearModel.length; i++) {
      if (i != m_classIndex) {
        coefficients[i]=coeffsUsedByLinearModel[i];
      }
    }
    intercept=m_nodeModel.intercept();
    do {
      if (current.m_parent != null) {
        double n=current.m_numInstances;
        for (int i=0; i < coefficients.length; i++) {
          coefficients[i]=((coefficients[i] * n) / (n + SMOOTHING_CONSTANT));
        }
        intercept=((intercept * n) / (n + SMOOTHING_CONSTANT));
        coeffsUsedByLinearModel=current.m_parent.getModel().coefficients();
        for (int i=0; i < coeffsUsedByLinearModel.length; i++) {
          if (i != m_classIndex) {
            coefficients[i]+=((SMOOTHING_CONSTANT * coeffsUsedByLinearModel[i]) / (n + SMOOTHING_CONSTANT));
          }
        }
        intercept+=((SMOOTHING_CONSTANT * current.m_parent.getModel().intercept()) / (n + SMOOTHING_CONSTANT));
        current=current.m_parent;
      }
    }
 while (current.m_parent != null);
    m_nodeModel=new PreConstructedLinearModel(coefficients,intercept);
    m_nodeModel.buildClassifier(m_instances);
  }
  if (m_left != null) {
    m_left.installSmoothedModels();
  }
  if (m_right != null) {
    m_right.installSmoothedModels();
  }
}
