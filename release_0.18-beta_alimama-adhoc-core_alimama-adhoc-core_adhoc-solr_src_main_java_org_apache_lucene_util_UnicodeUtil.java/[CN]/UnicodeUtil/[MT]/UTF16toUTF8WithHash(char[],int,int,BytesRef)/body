{
  int hash=0;
  int upto=0;
  int i=offset;
  final int end=offset + length;
  byte[] out=result.bytes;
  final int maxLen=length * 4;
  if (out.length < maxLen)   out=result.bytes=new byte[ArrayUtil.oversize(maxLen,1)];
  result.offset=0;
  while (i < end) {
    final int code=(int)source[i++];
    if (code < 0x80) {
      hash=31 * hash + (out[upto++]=(byte)code);
    }
 else     if (code < 0x800) {
      hash=31 * hash + (out[upto++]=(byte)(0xC0 | (code >> 6)));
      hash=31 * hash + (out[upto++]=(byte)(0x80 | (code & 0x3F)));
    }
 else     if (code < 0xD800 || code > 0xDFFF) {
      hash=31 * hash + (out[upto++]=(byte)(0xE0 | (code >> 12)));
      hash=31 * hash + (out[upto++]=(byte)(0x80 | ((code >> 6) & 0x3F)));
      hash=31 * hash + (out[upto++]=(byte)(0x80 | (code & 0x3F)));
    }
 else {
      if (code < 0xDC00 && i < end) {
        int utf32=(int)source[i];
        if (utf32 >= 0xDC00 && utf32 <= 0xDFFF) {
          utf32=(code << 10) + utf32 + SURROGATE_OFFSET;
          i++;
          hash=31 * hash + (out[upto++]=(byte)(0xF0 | (utf32 >> 18)));
          hash=31 * hash + (out[upto++]=(byte)(0x80 | ((utf32 >> 12) & 0x3F)));
          hash=31 * hash + (out[upto++]=(byte)(0x80 | ((utf32 >> 6) & 0x3F)));
          hash=31 * hash + (out[upto++]=(byte)(0x80 | (utf32 & 0x3F)));
          continue;
        }
      }
      hash=31 * hash + (out[upto++]=(byte)0xEF);
      hash=31 * hash + (out[upto++]=(byte)0xBF);
      hash=31 * hash + (out[upto++]=(byte)0xBD);
    }
  }
  result.length=upto;
  return hash;
}
