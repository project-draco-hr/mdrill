{
  String tmpStr;
  String fromToStr;
  int typeCount;
  typeCount=0;
  fromToStr="";
  tmpStr=Utils.getOption('A',options);
  if (tmpStr.length() != 0) {
    fromToStr=tmpStr;
    setClusterType(new SelectedTag(SubspaceCluster.UNIFORM_RANDOM,SubspaceCluster.TAGS_CLUSTERTYPE));
    typeCount++;
  }
  tmpStr=Utils.getOption('U',options);
  if (tmpStr.length() != 0) {
    fromToStr=tmpStr;
    setClusterType(new SelectedTag(SubspaceCluster.TOTAL_UNIFORM,SubspaceCluster.TAGS_CLUSTERTYPE));
    typeCount++;
  }
  tmpStr=Utils.getOption('G',options);
  if (tmpStr.length() != 0) {
    fromToStr=tmpStr;
    setClusterType(new SelectedTag(SubspaceCluster.GAUSSIAN,SubspaceCluster.TAGS_CLUSTERTYPE));
    typeCount++;
  }
  if (typeCount == 0)   setClusterType(new SelectedTag(SubspaceCluster.UNIFORM_RANDOM,SubspaceCluster.TAGS_CLUSTERTYPE));
 else   if (typeCount > 1)   throw new Exception("Only one cluster type can be specified!");
  setAttrIndexRange(fromToStr);
  tmpStr=Utils.getOption('D',options);
  if (isGaussian()) {
    if (tmpStr.length() != 0)     setMeanStddev(tmpStr);
 else     setMeanStddev(defaultMeanStddev());
  }
 else {
    if (tmpStr.length() != 0)     setValuesList(tmpStr);
 else     setValuesList(defaultValuesList());
  }
  tmpStr=Utils.getOption('N',options);
  if (tmpStr.length() != 0)   setInstNums(tmpStr);
 else   setInstNums(defaultMinInstNum() + ".." + defaultMaxInstNum());
  if (Utils.getFlag('I',options))   setClusterSubType(new SelectedTag(SubspaceCluster.INTEGER,SubspaceCluster.TAGS_CLUSTERSUBTYPE));
 else   setClusterSubType(new SelectedTag(SubspaceCluster.CONTINUOUS,SubspaceCluster.TAGS_CLUSTERSUBTYPE));
}
