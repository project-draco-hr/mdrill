{
  m_fi=new double[m_nCardinality];
  int[] values=new int[m_nNodes.length];
  int[] order=new int[bayesNet.getNrOfNodes()];
  for (int iNode=0; iNode < m_nNodes.length; iNode++) {
    order[m_nNodes[iNode]]=iNode;
  }
  boolean[] bIsContained=new boolean[m_nNodes.length];
  for (int iNode=0; iNode < m_nNodes.length; iNode++) {
    int nNode=m_nNodes[iNode];
    bIsContained[iNode]=!bDone[nNode];
    for (int iParent=0; iParent < bayesNet.getNrOfParents(nNode); iParent++) {
      int nParent=bayesNet.getParent(nNode,iParent);
      if (!clique.contains(nParent)) {
        bIsContained[iNode]=false;
      }
    }
    if (bIsContained[iNode]) {
      bDone[nNode]=true;
      if (m_debug) {
        System.out.println("adding node " + nNode);
      }
    }
  }
  for (int iPos=0; iPos < m_nCardinality; iPos++) {
    int iCPT=getCPT(m_nNodes,m_nNodes.length,values,order,bayesNet);
    m_fi[iCPT]=1.0;
    for (int iNode=0; iNode < m_nNodes.length; iNode++) {
      if (bIsContained[iNode]) {
        int nNode=m_nNodes[iNode];
        int[] nNodes=bayesNet.getParentSet(nNode).getParents();
        int iCPT2=getCPT(nNodes,bayesNet.getNrOfParents(nNode),values,order,bayesNet);
        double f=bayesNet.getDistributions()[nNode][iCPT2].getProbability(values[iNode]);
        m_fi[iCPT]*=f;
      }
    }
    int i=0;
    values[i]++;
    while (i < m_nNodes.length && values[i] == bayesNet.getCardinality(m_nNodes[i])) {
      values[i]=0;
      i++;
      if (i < m_nNodes.length) {
        values[i]++;
      }
    }
  }
}
