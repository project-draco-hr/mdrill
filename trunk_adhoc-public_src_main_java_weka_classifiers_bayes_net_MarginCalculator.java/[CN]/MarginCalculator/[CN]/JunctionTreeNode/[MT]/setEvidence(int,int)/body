{
  int[] values=new int[m_nNodes.length];
  int[] order=new int[m_bayesNet.getNrOfNodes()];
  int nNodeIdx=-1;
  for (int iNode=0; iNode < m_nNodes.length; iNode++) {
    order[m_nNodes[iNode]]=iNode;
    if (m_nNodes[iNode] == nNode) {
      nNodeIdx=iNode;
    }
  }
  if (nNodeIdx < 0) {
    throw new Exception("setEvidence: Node " + nNode + " not found in this clique");
  }
  for (int iPos=0; iPos < m_nCardinality; iPos++) {
    if (values[nNodeIdx] != iValue) {
      int iNodeCPT=getCPT(m_nNodes,m_nNodes.length,values,order,m_bayesNet);
      m_P[iNodeCPT]=0;
    }
    int i=0;
    values[i]++;
    while (i < m_nNodes.length && values[i] == m_bayesNet.getCardinality(m_nNodes[i])) {
      values[i]=0;
      i++;
      if (i < m_nNodes.length) {
        values[i]++;
      }
    }
  }
  double sum=0;
  for (int iPos=0; iPos < m_nCardinality; iPos++) {
    sum+=m_P[iPos];
  }
  for (int iPos=0; iPos < m_nCardinality; iPos++) {
    m_P[iPos]/=sum;
  }
  calcMarginalProbabilities();
  updateEvidence(this);
}
