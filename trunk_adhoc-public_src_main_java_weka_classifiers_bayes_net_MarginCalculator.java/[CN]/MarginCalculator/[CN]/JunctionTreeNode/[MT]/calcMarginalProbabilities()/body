{
  int[] values=new int[m_nNodes.length];
  int[] order=new int[m_bayesNet.getNrOfNodes()];
  m_MarginalP=new double[m_nNodes.length][];
  for (int iNode=0; iNode < m_nNodes.length; iNode++) {
    order[m_nNodes[iNode]]=iNode;
    m_MarginalP[iNode]=new double[m_bayesNet.getCardinality(m_nNodes[iNode])];
  }
  for (int iPos=0; iPos < m_nCardinality; iPos++) {
    int iNodeCPT=getCPT(m_nNodes,m_nNodes.length,values,order,m_bayesNet);
    for (int iNode=0; iNode < m_nNodes.length; iNode++) {
      m_MarginalP[iNode][values[iNode]]+=m_P[iNodeCPT];
    }
    int i=0;
    values[i]++;
    while (i < m_nNodes.length && values[i] == m_bayesNet.getCardinality(m_nNodes[i])) {
      values[i]=0;
      i++;
      if (i < m_nNodes.length) {
        values[i]++;
      }
    }
  }
  for (int iNode=0; iNode < m_nNodes.length; iNode++) {
    m_Margins[m_nNodes[iNode]]=m_MarginalP[iNode];
  }
}
