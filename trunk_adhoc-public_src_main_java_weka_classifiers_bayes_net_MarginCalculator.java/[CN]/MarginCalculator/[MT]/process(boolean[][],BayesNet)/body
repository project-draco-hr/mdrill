{
  int[] order=getMaxCardOrder(bAdjacencyMatrix);
  bAdjacencyMatrix=fillIn(order,bAdjacencyMatrix);
  order=getMaxCardOrder(bAdjacencyMatrix);
  Set[] cliques=getCliques(order,bAdjacencyMatrix);
  Set[] separators=getSeparators(order,cliques);
  int[] parentCliques=getCliqueTree(order,cliques,separators);
  int nNodes=bAdjacencyMatrix.length;
  if (m_debug) {
    for (int i=0; i < nNodes; i++) {
      int iNode=order[i];
      if (cliques[iNode] != null) {
        System.out.print("Clique " + iNode + " (");
        Iterator nodes=cliques[iNode].iterator();
        while (nodes.hasNext()) {
          int iNode2=(Integer)nodes.next();
          System.out.print(iNode2 + " " + bayesNet.getNodeName(iNode2));
          if (nodes.hasNext()) {
            System.out.print(",");
          }
        }
        System.out.print(") S(");
        nodes=separators[iNode].iterator();
        while (nodes.hasNext()) {
          int iNode2=(Integer)nodes.next();
          System.out.print(iNode2 + " " + bayesNet.getNodeName(iNode2));
          if (nodes.hasNext()) {
            System.out.print(",");
          }
        }
        System.out.println(") parent clique " + parentCliques[iNode]);
      }
    }
  }
  jtNodes=getJunctionTree(cliques,separators,parentCliques,order,bayesNet);
  m_root=null;
  for (int iNode=0; iNode < nNodes; iNode++) {
    if (parentCliques[iNode] < 0 && jtNodes[iNode] != null) {
      m_root=jtNodes[iNode];
      break;
    }
  }
  m_Margins=new double[nNodes][];
  initialize(jtNodes,order,cliques,separators,parentCliques);
  for (int i=0; i < nNodes; i++) {
    int iNode=order[i];
    if (cliques[iNode] != null) {
      if (parentCliques[iNode] == -1 && separators[iNode].size() > 0) {
        throw new Exception("Something wrong in clique tree");
      }
    }
  }
  if (m_debug) {
  }
}
