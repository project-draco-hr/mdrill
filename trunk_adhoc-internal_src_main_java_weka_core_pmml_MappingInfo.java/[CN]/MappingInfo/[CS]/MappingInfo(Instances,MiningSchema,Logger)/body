{
  m_log=log;
  Instances fieldsI=miningSchema.getMiningSchemaAsInstances();
  m_fieldsMap=new int[fieldsI.numAttributes()];
  m_nominalValueMaps=new int[fieldsI.numAttributes()][];
  for (int i=0; i < fieldsI.numAttributes(); i++) {
    String schemaAttName=fieldsI.attribute(i).name();
    boolean found=false;
    for (int j=0; j < dataSet.numAttributes(); j++) {
      if (dataSet.attribute(j).name().equals(schemaAttName)) {
        Attribute miningSchemaAtt=fieldsI.attribute(i);
        Attribute incomingAtt=dataSet.attribute(j);
        if (miningSchemaAtt.type() != incomingAtt.type()) {
          if (miningSchemaAtt.isString() && incomingAtt.isNominal()) {
          }
 else {
            throw new Exception("[MappingInfo] type mismatch for field " + schemaAttName + ". Mining schema type "+ miningSchemaAtt.toString()+ ". Incoming type "+ incomingAtt.toString()+ ".");
          }
        }
        if (miningSchemaAtt.numValues() != incomingAtt.numValues()) {
          String warningString="[MappingInfo] WARNING: incoming nominal attribute " + incomingAtt.name() + " does not have the same "+ "number of values as the corresponding mining "+ "schema attribute.";
          if (m_log != null) {
            m_log.logMessage(warningString);
          }
 else {
            System.err.println(warningString);
          }
        }
        if (miningSchemaAtt.isNominal() || miningSchemaAtt.isString()) {
          int[] valuesMap=new int[incomingAtt.numValues()];
          for (int k=0; k < incomingAtt.numValues(); k++) {
            String incomingNomVal=incomingAtt.value(k);
            int indexInSchema=miningSchemaAtt.indexOfValue(incomingNomVal);
            if (indexInSchema < 0) {
              String warningString="[MappingInfo] WARNING: incoming nominal attribute " + incomingAtt.name() + " has value "+ incomingNomVal+ " that doesn't occur in the mining schema.";
              if (m_log != null) {
                m_log.logMessage(warningString);
              }
 else {
                System.err.println(warningString);
              }
              valuesMap[k]=UNKNOWN_NOMINAL_VALUE;
            }
 else {
              valuesMap[k]=indexInSchema;
            }
          }
          m_nominalValueMaps[i]=valuesMap;
        }
        found=true;
        m_fieldsMap[i]=j;
      }
    }
    if (!found) {
      throw new Exception("[MappingInfo] Unable to find a match for mining schema " + "attribute " + schemaAttName + " in the "+ "incoming instances!");
    }
  }
  if (fieldsI.classIndex() >= 0) {
    if (dataSet.classIndex() < 0) {
      String className=fieldsI.classAttribute().name();
      Attribute classMatch=dataSet.attribute(className);
      if (classMatch == null) {
        throw new Exception("[MappingInfo] Can't find match for target field " + className + "in incoming instances!");
      }
      dataSet.setClass(classMatch);
    }
 else     if (!fieldsI.classAttribute().name().equals(dataSet.classAttribute().name())) {
      throw new Exception("[MappingInfo] class attribute in mining schema does not match " + "class attribute in incoming instances!");
    }
  }
  fieldsMappingString(fieldsI,dataSet);
}
