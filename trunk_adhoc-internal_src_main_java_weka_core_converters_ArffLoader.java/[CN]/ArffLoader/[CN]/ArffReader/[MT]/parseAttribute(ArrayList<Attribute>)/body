{
  String attributeName;
  ArrayList<String> attributeValues;
  getNextToken();
  attributeName=m_Tokenizer.sval;
  getNextToken();
  if (m_Tokenizer.ttype == StreamTokenizer.TT_WORD) {
    if (m_Tokenizer.sval.equalsIgnoreCase(Attribute.ARFF_ATTRIBUTE_REAL) || m_Tokenizer.sval.equalsIgnoreCase(Attribute.ARFF_ATTRIBUTE_INTEGER) || m_Tokenizer.sval.equalsIgnoreCase(Attribute.ARFF_ATTRIBUTE_NUMERIC)) {
      attributes.add(new Attribute(attributeName,attributes.size()));
      readTillEOL();
    }
 else     if (m_Tokenizer.sval.equalsIgnoreCase(Attribute.ARFF_ATTRIBUTE_STRING)) {
      attributes.add(new Attribute(attributeName,(ArrayList<String>)null,attributes.size()));
      readTillEOL();
    }
 else     if (m_Tokenizer.sval.equalsIgnoreCase(Attribute.ARFF_ATTRIBUTE_DATE)) {
      String format=null;
      if (m_Tokenizer.nextToken() != StreamTokenizer.TT_EOL) {
        if ((m_Tokenizer.ttype != StreamTokenizer.TT_WORD) && (m_Tokenizer.ttype != '\'') && (m_Tokenizer.ttype != '\"')) {
          errorMessage("not a valid date format");
        }
        format=m_Tokenizer.sval;
        readTillEOL();
      }
 else {
        m_Tokenizer.pushBack();
      }
      attributes.add(new Attribute(attributeName,format,attributes.size()));
    }
 else     if (m_Tokenizer.sval.equalsIgnoreCase(Attribute.ARFF_ATTRIBUTE_RELATIONAL)) {
      readTillEOL();
      ArrayList<Attribute> atts=attributes;
      attributes=new ArrayList<Attribute>();
      getFirstToken();
      if (m_Tokenizer.ttype == StreamTokenizer.TT_EOF) {
        errorMessage("premature end of file");
      }
      do {
        if (Attribute.ARFF_ATTRIBUTE.equalsIgnoreCase(m_Tokenizer.sval)) {
          attributes=parseAttribute(attributes);
        }
 else         if (Attribute.ARFF_END_SUBRELATION.equalsIgnoreCase(m_Tokenizer.sval)) {
          getNextToken();
          if (!attributeName.equalsIgnoreCase(m_Tokenizer.sval)) {
            errorMessage("declaration of subrelation " + attributeName + " must be terminated by "+ "@end "+ attributeName);
          }
          break;
        }
 else {
          errorMessage("declaration of subrelation " + attributeName + " must be terminated by "+ "@end "+ attributeName);
        }
      }
 while (true);
      Instances relation=new Instances(attributeName,attributes,0);
      attributes=atts;
      attributes.add(new Attribute(attributeName,relation,attributes.size()));
    }
 else {
      errorMessage("no valid attribute type or invalid " + "enumeration");
    }
  }
 else {
    attributeValues=new ArrayList<String>();
    m_Tokenizer.pushBack();
    if (m_Tokenizer.nextToken() != '{') {
      errorMessage("{ expected at beginning of enumeration");
    }
    while (m_Tokenizer.nextToken() != '}') {
      if (m_Tokenizer.ttype == StreamTokenizer.TT_EOL) {
        errorMessage("} expected at end of enumeration");
      }
 else {
        attributeValues.add(m_Tokenizer.sval);
      }
    }
    attributes.add(new Attribute(attributeName,attributeValues,attributes.size()));
  }
  getLastToken(false);
  getFirstToken();
  if (m_Tokenizer.ttype == StreamTokenizer.TT_EOF)   errorMessage("premature end of file");
  return attributes;
}
