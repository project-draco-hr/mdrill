{
  int valIndex, numValues=0, maxIndex=-1;
  do {
    getIndex();
    if (m_Tokenizer.ttype == '}') {
      break;
    }
    try {
      m_IndicesBuffer[numValues]=Integer.valueOf(m_Tokenizer.sval).intValue();
    }
 catch (    NumberFormatException e) {
      errorMessage("index number expected");
    }
    if (m_IndicesBuffer[numValues] <= maxIndex) {
      errorMessage("indices have to be ordered");
    }
    if ((m_IndicesBuffer[numValues] < 0) || (m_IndicesBuffer[numValues] >= m_Data.numAttributes())) {
      errorMessage("index out of bounds");
    }
    maxIndex=m_IndicesBuffer[numValues];
    getNextToken();
    if (m_Tokenizer.ttype == '?') {
      m_ValueBuffer[numValues]=Utils.missingValue();
    }
 else {
      if (m_Tokenizer.ttype != StreamTokenizer.TT_WORD) {
        errorMessage("not a valid value");
      }
switch (m_Data.attribute(m_IndicesBuffer[numValues]).type()) {
case Attribute.NOMINAL:
        valIndex=m_Data.attribute(m_IndicesBuffer[numValues]).indexOfValue(m_Tokenizer.sval);
      if (valIndex == -1) {
        errorMessage("nominal value not declared in header");
      }
    m_ValueBuffer[numValues]=(double)valIndex;
  break;
case Attribute.NUMERIC:
try {
  m_ValueBuffer[numValues]=Double.valueOf(m_Tokenizer.sval).doubleValue();
}
 catch (NumberFormatException e) {
  errorMessage("number expected");
}
break;
case Attribute.STRING:
if (m_batchMode || m_retainStringValues) {
m_ValueBuffer[numValues]=m_Data.attribute(m_IndicesBuffer[numValues]).addStringValue(m_Tokenizer.sval);
}
 else {
m_ValueBuffer[numValues]=0;
m_Data.attribute(m_IndicesBuffer[numValues]).setStringValue(m_Tokenizer.sval);
}
break;
case Attribute.DATE:
try {
m_ValueBuffer[numValues]=m_Data.attribute(m_IndicesBuffer[numValues]).parseDate(m_Tokenizer.sval);
}
 catch (ParseException e) {
errorMessage("unparseable date: " + m_Tokenizer.sval);
}
break;
case Attribute.RELATIONAL:
try {
ArffReader arff=new ArffReader(new StringReader(m_Tokenizer.sval),m_Data.attribute(m_IndicesBuffer[numValues]).relation(),0);
Instances data=arff.getData();
m_ValueBuffer[numValues]=m_Data.attribute(m_IndicesBuffer[numValues]).addRelation(data);
}
 catch (Exception e) {
throw new IOException(e.toString() + " of line " + getLineNo());
}
break;
default :
errorMessage("unknown attribute type in column " + m_IndicesBuffer[numValues]);
}
}
numValues++;
}
 while (true);
double weight=1.0;
if (flag) {
weight=getInstanceWeight();
if (!Double.isNaN(weight)) {
getLastToken(true);
}
 else {
weight=1.0;
}
}
double[] tempValues=new double[numValues];
int[] tempIndices=new int[numValues];
System.arraycopy(m_ValueBuffer,0,tempValues,0,numValues);
System.arraycopy(m_IndicesBuffer,0,tempIndices,0,numValues);
Instance inst=new SparseInstance(weight,tempValues,tempIndices,m_Data.numAttributes());
inst.setDataset(m_Data);
return inst;
}
