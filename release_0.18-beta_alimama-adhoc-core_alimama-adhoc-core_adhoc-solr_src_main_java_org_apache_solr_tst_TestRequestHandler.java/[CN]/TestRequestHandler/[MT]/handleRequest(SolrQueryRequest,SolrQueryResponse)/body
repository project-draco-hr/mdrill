{
  numRequests++;
  try {
    String sreq=req.getQueryString();
    if (sreq == null)     throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"Missing queryString");
    List<String> commands=StrUtils.splitSmart(sreq,';');
    String qs=commands.size() >= 1 ? commands.get(0) : "";
    Query query=QueryParsing.parseQuery(qs,req.getSchema());
    String fl=req.getParam("fl");
    int flags=0;
    if (fl != null) {
      String[] flst=splitList.split(fl,0);
      if (flst.length > 0 && !(flst.length == 1 && flst[0].length() == 0)) {
        Set<String> set=new HashSet<String>();
        for (        String fname : flst) {
          if ("score".equals(fname))           flags|=SolrIndexSearcher.GET_SCORES;
          set.add(fname);
        }
        rsp.setReturnFields(set);
      }
    }
    Sort sort=null;
    if (commands.size() >= 2) {
      sort=QueryParsing.parseSort(commands.get(1),req);
    }
    SolrIndexSearcher searcher=req.getSearcher();
    int start=req.getStart();
    int limit=req.getLimit();
    Query filterQuery=null;
    DocSet filter=null;
    Filter lfilter=null;
    DocList results=req.getSearcher().getDocList(query,null,sort,req.getStart(),req.getLimit(),flags);
    rsp.add(null,results);
    if (qs.startsWith("values")) {
      rsp.add("testname1","testval1");
      rsp.add("testarr1",new String[]{"my val 1","my val 2"});
      NamedList nl=new NamedList();
      nl.add("myInt",333);
      nl.add("myNullVal",null);
      nl.add("myFloat",1.414213562f);
      nl.add("myDouble",1e100d);
      nl.add("myBool",false);
      nl.add("myLong",999999999999L);
      Document doc=new Document();
      doc.add(new Field("id","55",Field.Store.YES,Field.Index.NOT_ANALYZED));
      nl.add("myDoc",doc);
      nl.add("myResult",results);
      nl.add("myStr","&wow! test escaping: a&b<c&");
      nl.add(null,"this value had a null name...");
      nl.add("myIntArray",new Integer[]{100,5,-10,42});
      nl.add("epoch",new Date(0));
      nl.add("currDate",new Date(System.currentTimeMillis()));
      rsp.add("myNamedList",nl);
    }
 else     if (qs.startsWith("fields")) {
      NamedList nl=new NamedList();
      Collection flst;
      flst=searcher.getReader().getFieldNames(IndexReader.FieldOption.INDEXED);
      nl.add("indexed",flst);
      flst=searcher.getReader().getFieldNames(IndexReader.FieldOption.UNINDEXED);
      nl.add("unindexed",flst);
      rsp.add("fields",nl);
    }
    test(results.size() <= limit);
    test(results.size() <= results.matches());
    test((start == 0 && limit >= results.matches()) ? results.size() == results.matches() : true);
    int numHits;
    ScoreDoc[] scoreDocs;
    if (sort != null) {
      TopFieldDocs hits=searcher.search(query,lfilter,1000,sort);
      numHits=hits.totalHits;
      scoreDocs=hits.scoreDocs;
    }
 else {
      TopDocs hits=searcher.search(query,lfilter,1000);
      numHits=hits.totalHits;
      scoreDocs=hits.scoreDocs;
    }
    test(numHits == results.matches());
    DocList rrr2=results.subset(start,limit);
    test(rrr2 == results);
    DocIterator iter=results.iterator();
    for (int i=0; i < results.size(); i++) {
      test(iter.nextDoc() == scoreDocs[i].doc);
    }
    DocList results2=req.getSearcher().getDocList(query,query,sort,start,limit);
    test(results2.size() == results.size() && results2.matches() == results.matches());
    DocList results3=req.getSearcher().getDocList(query,query,null,start,limit);
    test(results3.size() == results.size() && results3.matches() == results.matches());
    DocListAndSet both=searcher.getDocListAndSet(query,filter,sort,start,limit);
    test(both.docList.equals(results));
    test(both.docList.matches() == both.docSet.size());
    test((start == 0 && both.docSet.size() <= limit) ? both.docSet.equals(both.docList) : true);
    DocListAndSet both2=searcher.getDocListAndSet(query,both.docSet,sort,start,limit);
    test(both2.docList.equals(both.docList));
    test(both2.docSet.equals(both.docSet));
    DocListAndSet both3=searcher.getDocListAndSet(query,query,sort,start,limit);
    test(both3.docList.equals(both.docList));
    test(both3.docSet.equals(both.docSet));
    OpenBitSet bits=both.docSet.getBits();
    OpenBitSet neg=((OpenBitSet)bits.clone());
    neg.flip(0,bits.capacity());
    both2=searcher.getDocListAndSet(query,new BitDocSet(neg),sort,start,limit);
    test(both2.docList.size() == 0);
    test(both2.docList.matches() == 0);
    test(both2.docSet.size() == 0);
    DocSet allResults=searcher.getDocSet(query,filter);
    test(allResults.equals(both.docSet));
    if (filter != null) {
      DocSet res=searcher.getDocSet(query);
      test(res.size() >= results.size());
      test(res.intersection(filter).equals(both.docSet));
      test(res.intersectionSize(filter) == both.docSet.size());
      if (filterQuery != null) {
        test(searcher.numDocs(filterQuery,res) == both.docSet.size());
      }
    }
  }
 catch (  Exception e) {
    rsp.setException(e);
    numErrors++;
    return;
  }
}
