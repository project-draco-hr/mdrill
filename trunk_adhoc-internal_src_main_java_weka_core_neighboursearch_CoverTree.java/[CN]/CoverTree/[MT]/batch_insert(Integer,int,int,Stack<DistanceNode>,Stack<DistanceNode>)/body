{
  if (point_set.length == 0) {
    CoverTreeNode leaf=new_leaf(p);
    leaf.nodeid=m_NumNodes;
    m_NumNodes++;
    m_NumLeaves++;
    return leaf;
  }
 else {
    double max_dist=max_set(point_set);
    int next_scale=Math.min(max_scale - 1,get_scale(max_dist));
    if (next_scale == Integer.MIN_VALUE) {
      Stack<CoverTreeNode> children=new Stack<CoverTreeNode>();
      CoverTreeNode leaf=new_leaf(p);
      leaf.nodeid=m_NumNodes;
      children.push(leaf);
      m_NumLeaves++;
      m_NumNodes++;
      while (point_set.length > 0) {
        DistanceNode tmpnode=point_set.pop();
        leaf=new_leaf(tmpnode.idx);
        leaf.nodeid=m_NumNodes;
        children.push(leaf);
        m_NumLeaves++;
        m_NumNodes++;
        consumed_set.push(tmpnode);
      }
      CoverTreeNode n=new_node(p);
      n.nodeid=m_NumNodes;
      m_NumNodes++;
      n.scale=100;
      n.max_dist=0;
      n.num_children=children.length;
      n.children=children;
      return n;
    }
 else {
      Stack<DistanceNode> far=new Stack<DistanceNode>();
      split(point_set,far,max_scale);
      CoverTreeNode child=batch_insert(p,next_scale,top_scale,point_set,consumed_set);
      if (point_set.length == 0) {
        point_set.replaceAllBy(far);
        return child;
      }
 else {
        CoverTreeNode n=new_node(p);
        n.nodeid=m_NumNodes;
        m_NumNodes++;
        Stack<CoverTreeNode> children=new Stack<CoverTreeNode>();
        children.push(child);
        while (point_set.length != 0) {
          Stack<DistanceNode> new_point_set=new Stack<DistanceNode>();
          Stack<DistanceNode> new_consumed_set=new Stack<DistanceNode>();
          DistanceNode tmpnode=point_set.pop();
          double new_dist=tmpnode.dist.last();
          consumed_set.push(tmpnode);
          dist_split(point_set,new_point_set,tmpnode,max_scale);
          dist_split(far,new_point_set,tmpnode,max_scale);
          CoverTreeNode new_child=batch_insert(tmpnode.idx,next_scale,top_scale,new_point_set,new_consumed_set);
          new_child.parent_dist=new_dist;
          children.push(new_child);
          double fmax=dist_of_scale(max_scale);
          tmpnode=null;
          for (int i=0; i < new_point_set.length; i++) {
            tmpnode=new_point_set.element(i);
            tmpnode.dist.pop();
            if (tmpnode.dist.last() <= fmax)             point_set.push(tmpnode);
 else             far.push(tmpnode);
          }
          tmpnode=null;
          for (int i=0; i < new_consumed_set.length; i++) {
            tmpnode=new_consumed_set.element(i);
            tmpnode.dist.pop();
            consumed_set.push(tmpnode);
          }
        }
        point_set.replaceAllBy(far);
        n.scale=top_scale - max_scale;
        n.max_dist=max_set(consumed_set);
        n.num_children=children.length;
        n.children=children;
        return n;
      }
    }
  }
}
