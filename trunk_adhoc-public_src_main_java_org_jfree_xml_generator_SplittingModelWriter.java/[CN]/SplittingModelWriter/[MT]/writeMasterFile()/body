{
  Log.debug("Writing master file: " + this.targetFile);
  final BufferedWriter writer=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(this.targetFile),"UTF-8"));
  writeXMLHeader(writer);
  writeStandardComment(writer,getModel().getModelComments());
  getWriterSupport().writeTag(writer,ClassModelTags.OBJECTS_TAG);
  for (int i=0; i < this.sources.size(); i++) {
    final String includeFileName=(String)this.sources.get(i);
    if (!includeFileName.equals("")) {
      writeTag(writer,ClassModelTags.INCLUDE_TAG,ClassModelTags.SOURCE_ATTR,includeFileName,getModel().getIncludeComment(includeFileName));
    }
  }
  final Object[] keys=this.classDescriptionByPackage.keySet().toArray();
  Arrays.sort(keys);
  for (int i=0; i < keys.length; i++) {
    final String includeFileName=(String)keys[i];
    if (!includeFileName.equals("")) {
      writeTag(writer,ClassModelTags.INCLUDE_TAG,ClassModelTags.SOURCE_ATTR,includeFileName,getModel().getIncludeComment(includeFileName));
    }
  }
  final Iterator values=this.classDescriptionByPackage.getAll("");
  while (values.hasNext()) {
    final ClassDescription cd=(ClassDescription)values.next();
    writeClassDescription(writer,cd);
  }
  final Iterator manualMappings=this.manualMappingByPackage.getAll("");
  while (manualMappings.hasNext()) {
    final ManualMappingInfo mi=(ManualMappingInfo)manualMappings.next();
    writeManualMapping(writer,mi);
  }
  final Iterator multiplexMappings=this.multiplexMappingByPackage.getAll("");
  while (multiplexMappings.hasNext()) {
    final MultiplexMappingInfo mi=(MultiplexMappingInfo)multiplexMappings.next();
    writeMultiplexMapping(writer,mi);
  }
  writeCloseComment(writer,getModel().getModelComments());
  getWriterSupport().writeCloseTag(writer,ClassModelTags.OBJECTS_TAG);
  writer.close();
}
