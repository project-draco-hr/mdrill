{
  m_bPrintNewick=Utils.getFlag('P',options);
  String optionString=Utils.getOption('N',options);
  if (optionString.length() != 0) {
    Integer temp=new Integer(optionString);
    setNumClusters(temp);
  }
 else {
    setNumClusters(2);
  }
  setDebug(Utils.getFlag('D',options));
  setDistanceIsBranchLength(Utils.getFlag('B',options));
  String sLinkType=Utils.getOption('L',options);
  if (sLinkType.compareTo("SINGLE") == 0) {
    setLinkType(new SelectedTag(SINGLE,TAGS_LINK_TYPE));
  }
  if (sLinkType.compareTo("COMPLETE") == 0) {
    setLinkType(new SelectedTag(COMPLETE,TAGS_LINK_TYPE));
  }
  if (sLinkType.compareTo("AVERAGE") == 0) {
    setLinkType(new SelectedTag(AVERAGE,TAGS_LINK_TYPE));
  }
  if (sLinkType.compareTo("MEAN") == 0) {
    setLinkType(new SelectedTag(MEAN,TAGS_LINK_TYPE));
  }
  if (sLinkType.compareTo("CENTROID") == 0) {
    setLinkType(new SelectedTag(CENTROID,TAGS_LINK_TYPE));
  }
  if (sLinkType.compareTo("WARD") == 0) {
    setLinkType(new SelectedTag(WARD,TAGS_LINK_TYPE));
  }
  if (sLinkType.compareTo("ADJCOMLPETE") == 0) {
    setLinkType(new SelectedTag(ADJCOMLPETE,TAGS_LINK_TYPE));
  }
  if (sLinkType.compareTo("NEIGHBOR_JOINING") == 0) {
    setLinkType(new SelectedTag(NEIGHBOR_JOINING,TAGS_LINK_TYPE));
  }
  String nnSearchClass=Utils.getOption('A',options);
  if (nnSearchClass.length() != 0) {
    String nnSearchClassSpec[]=Utils.splitOptions(nnSearchClass);
    if (nnSearchClassSpec.length == 0) {
      throw new Exception("Invalid DistanceFunction specification string.");
    }
    String className=nnSearchClassSpec[0];
    nnSearchClassSpec[0]="";
    setDistanceFunction((DistanceFunction)Utils.forName(DistanceFunction.class,className,nnSearchClassSpec));
  }
 else {
    setDistanceFunction(new EuclideanDistance());
  }
  Utils.checkForRemainingOptions(options);
}
