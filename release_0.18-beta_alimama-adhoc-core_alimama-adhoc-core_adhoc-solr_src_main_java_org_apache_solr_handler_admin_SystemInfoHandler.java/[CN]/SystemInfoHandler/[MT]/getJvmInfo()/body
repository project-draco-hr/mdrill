{
  SimpleOrderedMap<Object> jvm=new SimpleOrderedMap<Object>();
  jvm.add("version",System.getProperty("java.vm.version"));
  jvm.add("name",System.getProperty("java.vm.name"));
  Runtime runtime=Runtime.getRuntime();
  jvm.add("processors",runtime.availableProcessors());
  long used=runtime.totalMemory() - runtime.freeMemory();
  DecimalFormat df=new DecimalFormat("#.#");
  double percentUsed=((double)(used) / (double)runtime.maxMemory()) * 100;
  SimpleOrderedMap<Object> mem=new SimpleOrderedMap<Object>();
  mem.add("free",humanReadableUnits(runtime.freeMemory(),df));
  mem.add("total",humanReadableUnits(runtime.totalMemory(),df));
  mem.add("max",humanReadableUnits(runtime.maxMemory(),df));
  mem.add("used",humanReadableUnits(used,df) + " (%" + df.format(percentUsed)+ ")");
  jvm.add("memory",mem);
  SimpleOrderedMap<Object> jmx=new SimpleOrderedMap<Object>();
  try {
    RuntimeMXBean mx=ManagementFactory.getRuntimeMXBean();
    jmx.add("bootclasspath",mx.getBootClassPath());
    jmx.add("classpath",mx.getClassPath());
    jmx.add("commandLineArgs",mx.getInputArguments());
    jmx.add("startTime",new Date(mx.getStartTime()));
    jmx.add("upTimeMS",mx.getUptime());
  }
 catch (  Exception e) {
    log.warn("Error getting JMX properties",e);
  }
  jvm.add("jmx",jmx);
  return jvm;
}
