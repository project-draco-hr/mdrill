{
  m_rseed.setText("1");
  m_selAttrib.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent ae){
      final JDialog jd=new JDialog((JFrame)MatrixPanel.this.getTopLevelAncestor(),"Attribute Selection Panel",true);
      JPanel jp=new JPanel();
      JScrollPane js=new JScrollPane(m_attribList);
      JButton okBt=new JButton("OK");
      JButton cancelBt=new JButton("Cancel");
      final int[] savedSelection=m_attribList.getSelectedIndices();
      okBt.addActionListener(new ActionListener(){
        public void actionPerformed(        ActionEvent e){
          jd.dispose();
        }
      }
);
      cancelBt.addActionListener(new ActionListener(){
        public void actionPerformed(        ActionEvent e){
          m_attribList.setSelectedIndices(savedSelection);
          jd.dispose();
        }
      }
);
      jd.addWindowListener(new WindowAdapter(){
        public void windowClosing(        WindowEvent e){
          m_attribList.setSelectedIndices(savedSelection);
          jd.dispose();
        }
      }
);
      jp.add(okBt);
      jp.add(cancelBt);
      jd.getContentPane().add(js,BorderLayout.CENTER);
      jd.getContentPane().add(jp,BorderLayout.SOUTH);
      if (js.getPreferredSize().width < 200)       jd.setSize(250,250);
 else       jd.setSize((int)js.getPreferredSize().width + 10,250);
      jd.setLocation(m_selAttrib.getLocationOnScreen().x,m_selAttrib.getLocationOnScreen().y - jd.getHeight());
      jd.setVisible(true);
    }
  }
);
  m_updateBt.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      initInternalFields();
      Plot a=m_plotsPanel;
      a.setCellSize(m_plotSize.getValue());
      Dimension d=new Dimension((m_selectedAttribs.length) * (a.cellSize + a.extpad) + 2,(m_selectedAttribs.length) * (a.cellSize + a.extpad) + 2);
      a.setPreferredSize(d);
      a.setSize(a.getPreferredSize());
      a.setJitter(m_jitter.getValue());
      if (m_fastScroll.isSelected() && m_clearOSIPlottedCells) {
        m_plottedCells=new boolean[m_selectedAttribs.length][m_selectedAttribs.length];
        m_clearOSIPlottedCells=false;
      }
      if (m_regenerateOSI) {
        m_osi=null;
      }
      m_js.revalidate();
      m_cp.setColours(m_colorList);
      m_cp.setCindex(m_classIndex);
      m_regenerateOSI=false;
      repaint();
    }
  }
);
  m_updateBt.setPreferredSize(m_selAttrib.getPreferredSize());
  m_jitter.addChangeListener(new ChangeListener(){
    public void stateChanged(    ChangeEvent ce){
      if (m_fastScroll.isSelected()) {
        m_clearOSIPlottedCells=true;
      }
    }
  }
);
  m_plotSize.addChangeListener(new ChangeListener(){
    public void stateChanged(    ChangeEvent ce){
      m_plotSizeLb.setText("PlotSize: [" + m_plotSize.getValue() + "]");
      m_plotSizeLb.setPreferredSize(m_plotLBSizeD);
      m_jitter.setMaximum(m_plotSize.getValue() / 5);
      m_regenerateOSI=true;
    }
  }
);
  m_pointSize.addChangeListener(new ChangeListener(){
    public void stateChanged(    ChangeEvent ce){
      m_pointSizeLb.setText("PointSize: [" + m_pointSize.getValue() + "]");
      m_pointSizeLb.setPreferredSize(m_pointLBSizeD);
      datapointSize=m_pointSize.getValue();
      if (m_fastScroll.isSelected()) {
        m_clearOSIPlottedCells=true;
      }
    }
  }
);
  m_resampleBt.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      JLabel rseedLb=new JLabel("Random Seed: ");
      JTextField rseedTxt=m_rseed;
      JLabel percentLb=new JLabel("Subsample as");
      JLabel percent2Lb=new JLabel("% of input: ");
      final JTextField percentTxt=new JTextField(5);
      percentTxt.setText(m_resamplePercent.getText());
      JButton doneBt=new JButton("Done");
      final JDialog jd=new JDialog((JFrame)MatrixPanel.this.getTopLevelAncestor(),"Subsample % Panel",true){
        private static final long serialVersionUID=-269823533147146296L;
        public void dispose(){
          m_resamplePercent.setText(percentTxt.getText());
          super.dispose();
        }
      }
;
      jd.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
      doneBt.addActionListener(new ActionListener(){
        public void actionPerformed(        ActionEvent ae){
          jd.dispose();
        }
      }
);
      GridBagLayout gbl=new GridBagLayout();
      GridBagConstraints gbc=new GridBagConstraints();
      JPanel p1=new JPanel(gbl);
      gbc.anchor=GridBagConstraints.WEST;
      gbc.fill=GridBagConstraints.HORIZONTAL;
      gbc.insets=new Insets(0,2,2,2);
      gbc.gridwidth=GridBagConstraints.RELATIVE;
      p1.add(rseedLb,gbc);
      gbc.weightx=0;
      gbc.gridwidth=GridBagConstraints.REMAINDER;
      gbc.weightx=1;
      p1.add(rseedTxt,gbc);
      gbc.insets=new Insets(8,2,0,2);
      gbc.weightx=0;
      p1.add(percentLb,gbc);
      gbc.insets=new Insets(0,2,2,2);
      gbc.gridwidth=GridBagConstraints.RELATIVE;
      p1.add(percent2Lb,gbc);
      gbc.gridwidth=GridBagConstraints.REMAINDER;
      gbc.weightx=1;
      p1.add(percentTxt,gbc);
      gbc.insets=new Insets(8,2,2,2);
      JPanel p3=new JPanel(gbl);
      gbc.fill=GridBagConstraints.HORIZONTAL;
      gbc.gridwidth=GridBagConstraints.REMAINDER;
      gbc.weightx=1;
      gbc.weighty=0;
      p3.add(p1,gbc);
      gbc.insets=new Insets(8,4,8,4);
      p3.add(doneBt,gbc);
      jd.getContentPane().setLayout(new BorderLayout());
      jd.getContentPane().add(p3,BorderLayout.NORTH);
      jd.pack();
      jd.setLocation(m_resampleBt.getLocationOnScreen().x,m_resampleBt.getLocationOnScreen().y - jd.getHeight());
      jd.setVisible(true);
    }
  }
);
  optionsPanel=new JPanel(new GridBagLayout());
  final JPanel p2=new JPanel(new BorderLayout());
  final JPanel p3=new JPanel(new GridBagLayout());
  final JPanel p4=new JPanel(new GridBagLayout());
  GridBagConstraints gbc=new GridBagConstraints();
  m_plotLBSizeD=m_plotSizeLb.getPreferredSize();
  m_pointLBSizeD=m_pointSizeLb.getPreferredSize();
  m_pointSizeLb.setText("PointSize: [1]");
  m_pointSizeLb.setPreferredSize(m_pointLBSizeD);
  m_resampleBt.setPreferredSize(m_selAttrib.getPreferredSize());
  gbc.fill=GridBagConstraints.HORIZONTAL;
  gbc.anchor=GridBagConstraints.NORTHWEST;
  gbc.insets=new Insets(2,2,2,2);
  p4.add(m_plotSizeLb,gbc);
  gbc.weightx=1;
  gbc.gridwidth=GridBagConstraints.REMAINDER;
  p4.add(m_plotSize,gbc);
  gbc.weightx=0;
  gbc.gridwidth=GridBagConstraints.RELATIVE;
  p4.add(m_pointSizeLb,gbc);
  gbc.weightx=1;
  gbc.gridwidth=GridBagConstraints.REMAINDER;
  p4.add(m_pointSize,gbc);
  gbc.weightx=0;
  gbc.gridwidth=GridBagConstraints.RELATIVE;
  p4.add(new JLabel("Jitter: "),gbc);
  gbc.weightx=1;
  gbc.gridwidth=GridBagConstraints.REMAINDER;
  p4.add(m_jitter,gbc);
  p4.add(m_classAttrib,gbc);
  gbc.gridwidth=GridBagConstraints.REMAINDER;
  gbc.weightx=1;
  gbc.fill=GridBagConstraints.NONE;
  p3.add(m_fastScroll,gbc);
  p3.add(m_updateBt,gbc);
  p3.add(m_selAttrib,gbc);
  gbc.gridwidth=GridBagConstraints.RELATIVE;
  gbc.weightx=0;
  gbc.fill=GridBagConstraints.VERTICAL;
  gbc.anchor=GridBagConstraints.WEST;
  p3.add(m_resampleBt,gbc);
  gbc.gridwidth=GridBagConstraints.REMAINDER;
  p3.add(m_resamplePercent,gbc);
  p2.setBorder(BorderFactory.createTitledBorder("Class Colour"));
  p2.add(m_cp,BorderLayout.SOUTH);
  gbc.insets=new Insets(8,5,2,5);
  gbc.anchor=GridBagConstraints.SOUTHWEST;
  gbc.fill=GridBagConstraints.HORIZONTAL;
  gbc.weightx=1;
  gbc.gridwidth=GridBagConstraints.RELATIVE;
  optionsPanel.add(p4,gbc);
  gbc.gridwidth=GridBagConstraints.REMAINDER;
  optionsPanel.add(p3,gbc);
  optionsPanel.add(p2,gbc);
  m_fastScroll.setSelected(false);
  m_fastScroll.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      if (!m_fastScroll.isSelected()) {
        m_osi=null;
      }
 else {
        m_plottedCells=new boolean[m_selectedAttribs.length][m_selectedAttribs.length];
      }
      MatrixPanel.this.invalidate();
      MatrixPanel.this.repaint();
    }
  }
);
  this.addComponentListener(new ComponentAdapter(){
    public void componentResized(    ComponentEvent cv){
      m_js.setMinimumSize(new Dimension(MatrixPanel.this.getWidth(),MatrixPanel.this.getHeight() - optionsPanel.getPreferredSize().height - 10));
      jp.setDividerLocation(MatrixPanel.this.getHeight() - optionsPanel.getPreferredSize().height - 10);
    }
  }
);
  optionsPanel.setMinimumSize(new Dimension(0,0));
  jp=new JSplitPane(JSplitPane.VERTICAL_SPLIT,m_js,optionsPanel);
  jp.setOneTouchExpandable(true);
  jp.setResizeWeight(1);
  this.setLayout(new BorderLayout());
  this.add(jp,BorderLayout.CENTER);
  for (int i=0; i < m_defaultColors.length - 1; i++)   m_colorList.addElement(m_defaultColors[i]);
  m_selectedAttribs=m_attribList.getSelectedIndices();
  m_plotsPanel=new Plot();
  m_plotsPanel.setLayout(null);
  m_js.getHorizontalScrollBar().setUnitIncrement(10);
  m_js.getVerticalScrollBar().setUnitIncrement(10);
  m_js.setViewportView(m_plotsPanel);
  m_js.setColumnHeaderView(m_plotsPanel.getColHeader());
  m_js.setRowHeaderView(m_plotsPanel.getRowHeader());
  final JLabel lb=new JLabel(" Plot Matrix");
  lb.setFont(f);
  lb.setForeground(fontColor);
  lb.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
  m_js.setCorner(JScrollPane.UPPER_LEFT_CORNER,lb);
  m_cp.setInstances(m_data);
  m_cp.setBorder(BorderFactory.createEmptyBorder(15,10,10,10));
  m_cp.addRepaintNotify(m_plotsPanel);
}
