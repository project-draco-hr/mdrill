{
  Instances inst=m_data;
  m_classIndex=m_classAttrib.getSelectedIndex();
  m_selectedAttribs=m_attribList.getSelectedIndices();
  double minC=0, maxC=0;
  double currentPercent=Double.parseDouble(m_resamplePercent.getText());
  if (currentPercent <= 100) {
    if (currentPercent != m_previousPercent) {
      m_clearOSIPlottedCells=true;
    }
    inst=new Instances(m_data,0,m_data.numInstances());
    inst.randomize(new Random(Integer.parseInt(m_rseed.getText())));
    inst=new Instances(inst,0,(int)Math.round(currentPercent / 100D * inst.numInstances()));
    m_previousPercent=currentPercent;
  }
  m_points=new int[inst.numInstances()][m_selectedAttribs.length];
  m_pointColors=new int[inst.numInstances()];
  m_missing=new boolean[inst.numInstances()][m_selectedAttribs.length + 1];
  m_type=new int[2];
  jitterVals=new int[inst.numInstances()][2];
  if (!(inst.attribute(m_classIndex).isNumeric())) {
    for (int i=m_colorList.size(); i < inst.attribute(m_classIndex).numValues() + 1; i++) {
      Color pc=m_defaultColors[i % 10];
      int ija=i / 10;
      ija*=2;
      for (int j=0; j < ija; j++) {
        pc=pc.darker();
      }
      m_colorList.addElement(pc);
    }
    for (int i=0; i < inst.numInstances(); i++) {
      if (inst.instance(i).isMissing(m_classIndex))       m_pointColors[i]=m_defaultColors.length - 1;
 else       m_pointColors[i]=(int)inst.instance(i).value(m_classIndex);
      jitterVals[i][0]=rnd.nextInt(m_jitter.getValue() + 1) - m_jitter.getValue() / 2;
      jitterVals[i][1]=rnd.nextInt(m_jitter.getValue() + 1) - m_jitter.getValue() / 2;
    }
  }
 else {
    for (int i=0; i < inst.numInstances(); i++) {
      if (!(inst.instance(i).isMissing(m_classIndex))) {
        minC=maxC=inst.instance(i).value(m_classIndex);
        break;
      }
    }
    for (int i=1; i < inst.numInstances(); i++) {
      if (!(inst.instance(i).isMissing(m_classIndex))) {
        if (minC > inst.instance(i).value(m_classIndex))         minC=inst.instance(i).value(m_classIndex);
        if (maxC < inst.instance(i).value(m_classIndex))         maxC=inst.instance(i).value(m_classIndex);
      }
    }
    for (int i=0; i < inst.numInstances(); i++) {
      double r=(inst.instance(i).value(m_classIndex) - minC) / (maxC - minC);
      r=(r * 240) + 15;
      m_pointColors[i]=(int)r;
      jitterVals[i][0]=rnd.nextInt(m_jitter.getValue() + 1) - m_jitter.getValue() / 2;
      jitterVals[i][1]=rnd.nextInt(m_jitter.getValue() + 1) - m_jitter.getValue() / 2;
    }
  }
  double min[]=new double[m_selectedAttribs.length], max=0;
  double ratio[]=new double[m_selectedAttribs.length];
  double cellSize=m_plotSize.getValue(), temp1=0, temp2=0;
  for (int j=0; j < m_selectedAttribs.length; j++) {
    int i;
    for (i=0; i < inst.numInstances(); i++) {
      min[j]=max=0;
      if (!(inst.instance(i).isMissing(m_selectedAttribs[j]))) {
        min[j]=max=inst.instance(i).value(m_selectedAttribs[j]);
        break;
      }
    }
    for (i=i; i < inst.numInstances(); i++) {
      if (!(inst.instance(i).isMissing(m_selectedAttribs[j]))) {
        if (inst.instance(i).value(m_selectedAttribs[j]) < min[j])         min[j]=inst.instance(i).value(m_selectedAttribs[j]);
        if (inst.instance(i).value(m_selectedAttribs[j]) > max)         max=inst.instance(i).value(m_selectedAttribs[j]);
      }
    }
    ratio[j]=cellSize / (max - min[j]);
  }
  boolean classIndexProcessed=false;
  for (int j=0; j < m_selectedAttribs.length; j++) {
    if (inst.attribute(m_selectedAttribs[j]).isNominal() || inst.attribute(m_selectedAttribs[j]).isString()) {
      temp1=cellSize / (double)inst.attribute(m_selectedAttribs[j]).numValues();
      temp2=temp1 / 2;
      for (int i=0; i < inst.numInstances(); i++) {
        m_points[i][j]=(int)Math.round(temp2 + temp1 * inst.instance(i).value(m_selectedAttribs[j]));
        if (inst.instance(i).isMissing(m_selectedAttribs[j])) {
          m_missing[i][j]=true;
          if (m_selectedAttribs[j] == m_classIndex) {
            m_missing[i][m_missing[0].length - 1]=true;
            classIndexProcessed=true;
          }
        }
      }
    }
 else {
      for (int i=0; i < inst.numInstances(); i++) {
        m_points[i][j]=(int)Math.round((inst.instance(i).value(m_selectedAttribs[j]) - min[j]) * ratio[j]);
        if (inst.instance(i).isMissing(m_selectedAttribs[j])) {
          m_missing[i][j]=true;
          if (m_selectedAttribs[j] == m_classIndex) {
            m_missing[i][m_missing[0].length - 1]=true;
            classIndexProcessed=true;
          }
        }
      }
    }
  }
  if (inst.attribute(m_classIndex).isNominal() || inst.attribute(m_classIndex).isString()) {
    m_type[0]=1;
    m_type[1]=inst.attribute(m_classIndex).numValues();
  }
 else   m_type[0]=m_type[1]=0;
  if (classIndexProcessed == false) {
    for (int i=0; i < inst.numInstances(); i++) {
      if (inst.instance(i).isMissing(m_classIndex))       m_missing[i][m_missing[0].length - 1]=true;
    }
  }
  m_cp.setColours(m_colorList);
}
