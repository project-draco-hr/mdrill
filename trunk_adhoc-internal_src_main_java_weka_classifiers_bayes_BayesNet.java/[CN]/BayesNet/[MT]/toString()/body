{
  StringBuffer text=new StringBuffer();
  text.append("Bayes Network Classifier");
  text.append("\n" + (m_bUseADTree ? "Using " : "not using ") + "ADTree");
  if (m_Instances == null) {
    text.append(": No model built yet.");
  }
 else {
    text.append("\n#attributes=");
    text.append(m_Instances.numAttributes());
    text.append(" #classindex=");
    text.append(m_Instances.classIndex());
    text.append("\nNetwork structure (nodes followed by parents)\n");
    for (int iAttribute=0; iAttribute < m_Instances.numAttributes(); iAttribute++) {
      text.append(m_Instances.attribute(iAttribute).name() + "(" + m_Instances.attribute(iAttribute).numValues()+ "): ");
      for (int iParent=0; iParent < m_ParentSets[iAttribute].getNrOfParents(); iParent++) {
        text.append(m_Instances.attribute(m_ParentSets[iAttribute].getParent(iParent)).name() + " ");
      }
      text.append("\n");
    }
    text.append("LogScore Bayes: " + measureBayesScore() + "\n");
    text.append("LogScore BDeu: " + measureBDeuScore() + "\n");
    text.append("LogScore MDL: " + measureMDLScore() + "\n");
    text.append("LogScore ENTROPY: " + measureEntropyScore() + "\n");
    text.append("LogScore AIC: " + measureAICScore() + "\n");
    if (m_otherBayesNet != null) {
      text.append("Missing: " + m_otherBayesNet.missingArcs(this) + " Extra: "+ m_otherBayesNet.extraArcs(this)+ " Reversed: "+ m_otherBayesNet.reversedArcs(this)+ "\n");
      text.append("Divergence: " + m_otherBayesNet.divergence(this) + "\n");
    }
  }
  return text.toString();
}
