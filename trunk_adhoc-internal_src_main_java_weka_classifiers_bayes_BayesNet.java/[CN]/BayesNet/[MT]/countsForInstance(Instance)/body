{
  double[] fCounts=new double[m_NumClasses];
  for (int iClass=0; iClass < m_NumClasses; iClass++) {
    fCounts[iClass]=0.0;
  }
  for (int iClass=0; iClass < m_NumClasses; iClass++) {
    double fCount=0;
    for (int iAttribute=0; iAttribute < m_Instances.numAttributes(); iAttribute++) {
      double iCPT=0;
      for (int iParent=0; iParent < m_ParentSets[iAttribute].getNrOfParents(); iParent++) {
        int nParent=m_ParentSets[iAttribute].getParent(iParent);
        if (nParent == m_Instances.classIndex()) {
          iCPT=iCPT * m_NumClasses + iClass;
        }
 else {
          iCPT=iCPT * m_Instances.attribute(nParent).numValues() + instance.value(nParent);
        }
      }
      if (iAttribute == m_Instances.classIndex()) {
        fCount+=((DiscreteEstimatorBayes)m_Distributions[iAttribute][(int)iCPT]).getCount(iClass);
      }
 else {
        fCount+=((DiscreteEstimatorBayes)m_Distributions[iAttribute][(int)iCPT]).getCount(instance.value(iAttribute));
      }
    }
    fCounts[iClass]+=fCount;
  }
  return fCounts;
}
