{
  if (i1 == i2) {
    return 0;
  }
  double C1=m_C * m_data.instance(i1).weight();
  double C2=m_C * m_data.instance(i2).weight();
  double alpha1=m_alpha[i1];
  double alpha1Star=m_alphaStar[i1];
  double phi1=m_error[i1];
  double k11=m_kernel.eval(i1,i1,m_data.instance(i1));
  double k12=m_kernel.eval(i1,i2,m_data.instance(i1));
  double k22=m_kernel.eval(i2,i2,m_data.instance(i2));
  double eta=-2 * k12 + k11 + k22;
  double gamma=alpha1 - alpha1Star + alpha2 - alpha2Star;
  double alpha1old=alpha1;
  double alpha1Starold=alpha1Star;
  double alpha2old=alpha2;
  double alpha2Starold=alpha2Star;
  double deltaPhi=phi1 - phi2;
  if (findOptimalPointOnLine(i1,alpha1,alpha1Star,C1,i2,alpha2,alpha2Star,C2,gamma,eta,deltaPhi)) {
    alpha1=m_alpha[i1];
    alpha1Star=m_alphaStar[i1];
    alpha2=m_alpha[i2];
    alpha2Star=m_alphaStar[i2];
    double dAlpha1=alpha1 - alpha1old - (alpha1Star - alpha1Starold);
    double dAlpha2=alpha2 - alpha2old - (alpha2Star - alpha2Starold);
    for (int j=m_I0.getNext(-1); j != -1; j=m_I0.getNext(j)) {
      if ((j != i1) && (j != i2)) {
        m_error[j]-=dAlpha1 * m_kernel.eval(i1,j,m_data.instance(i1)) + dAlpha2 * m_kernel.eval(i2,j,m_data.instance(i2));
      }
    }
    m_error[i1]-=dAlpha1 * k11 + dAlpha2 * k12;
    m_error[i2]-=dAlpha1 * k12 + dAlpha2 * k22;
    updateIndexSetFor(i1,C1);
    updateIndexSetFor(i2,C2);
    m_bUp=Double.MAX_VALUE;
    m_bLow=-Double.MAX_VALUE;
    for (int j=m_I0.getNext(-1); j != -1; j=m_I0.getNext(j)) {
      updateBoundaries(j,m_error[j]);
    }
    if (!m_I0.contains(i1)) {
      updateBoundaries(i1,m_error[i1]);
    }
    if (!m_I0.contains(i2)) {
      updateBoundaries(i2,m_error[i2]);
    }
    return 1;
  }
 else {
    return 0;
  }
}
