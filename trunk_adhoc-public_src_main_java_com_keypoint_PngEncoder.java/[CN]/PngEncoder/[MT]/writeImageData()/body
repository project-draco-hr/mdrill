{
  int rowsLeft=this.height;
  int startRow=0;
  int nRows;
  byte[] scanLines;
  int scanPos;
  int startPos;
  byte[] compressedLines;
  int nCompressed;
  PixelGrabber pg;
  this.bytesPerPixel=(this.encodeAlpha) ? 4 : 3;
  Deflater scrunch=new Deflater(this.compressionLevel);
  ByteArrayOutputStream outBytes=new ByteArrayOutputStream(1024);
  DeflaterOutputStream compBytes=new DeflaterOutputStream(outBytes,scrunch);
  try {
    while (rowsLeft > 0) {
      nRows=Math.min(32767 / (this.width * (this.bytesPerPixel + 1)),rowsLeft);
      nRows=Math.max(nRows,1);
      int[] pixels=new int[this.width * nRows];
      pg=new PixelGrabber(this.image,0,startRow,this.width,nRows,pixels,0,this.width);
      try {
        pg.grabPixels();
      }
 catch (      Exception e) {
        System.err.println("interrupted waiting for pixels!");
        return false;
      }
      if ((pg.getStatus() & ImageObserver.ABORT) != 0) {
        System.err.println("image fetch aborted or errored");
        return false;
      }
      scanLines=new byte[this.width * nRows * this.bytesPerPixel + nRows];
      if (this.filter == FILTER_SUB) {
        this.leftBytes=new byte[16];
      }
      if (this.filter == FILTER_UP) {
        this.priorRow=new byte[this.width * this.bytesPerPixel];
      }
      scanPos=0;
      startPos=1;
      for (int i=0; i < this.width * nRows; i++) {
        if (i % this.width == 0) {
          scanLines[scanPos++]=(byte)this.filter;
          startPos=scanPos;
        }
        scanLines[scanPos++]=(byte)((pixels[i] >> 16) & 0xff);
        scanLines[scanPos++]=(byte)((pixels[i] >> 8) & 0xff);
        scanLines[scanPos++]=(byte)((pixels[i]) & 0xff);
        if (this.encodeAlpha) {
          scanLines[scanPos++]=(byte)((pixels[i] >> 24) & 0xff);
        }
        if ((i % this.width == this.width - 1) && (this.filter != FILTER_NONE)) {
          if (this.filter == FILTER_SUB) {
            filterSub(scanLines,startPos,this.width);
          }
          if (this.filter == FILTER_UP) {
            filterUp(scanLines,startPos,this.width);
          }
        }
      }
      compBytes.write(scanLines,0,scanPos);
      startRow+=nRows;
      rowsLeft-=nRows;
    }
    compBytes.close();
    compressedLines=outBytes.toByteArray();
    nCompressed=compressedLines.length;
    this.crc.reset();
    this.bytePos=writeInt4(nCompressed,this.bytePos);
    this.bytePos=writeBytes(IDAT,this.bytePos);
    this.crc.update(IDAT);
    this.bytePos=writeBytes(compressedLines,nCompressed,this.bytePos);
    this.crc.update(compressedLines,0,nCompressed);
    this.crcValue=this.crc.getValue();
    this.bytePos=writeInt4((int)this.crcValue,this.bytePos);
    scrunch.finish();
    scrunch.end();
    return true;
  }
 catch (  IOException e) {
    System.err.println(e.toString());
    return false;
  }
}
