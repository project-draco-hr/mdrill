{
  if (m_filterThread != null) {
    String messg="[Filter] " + statusMessagePrefix() + " is currently batch processing!";
    if (m_log != null) {
      m_log.logMessage(messg);
      m_log.statusMessage(statusMessagePrefix() + "WARNING: Filter is currently batch processing.");
    }
 else {
      System.err.println(messg);
    }
    return;
  }
  if (!(m_Filter instanceof StreamableFilter)) {
    stop();
    if (m_log != null) {
      m_log.logMessage("[Filter] " + statusMessagePrefix() + " ERROR : "+ m_Filter.getClass().getName()+ "can't process streamed instances; can't continue");
      m_log.statusMessage(statusMessagePrefix() + "ERROR: Can't process streamed instances; can't continue.");
    }
    return;
  }
  if (e.getStatus() == InstanceEvent.FORMAT_AVAILABLE) {
    try {
      m_instanceCount=0;
      Instances dataset=e.getStructure();
      if (m_Filter instanceof SupervisedFilter) {
        if (dataset.classIndex() < 0) {
          dataset.setClassIndex(dataset.numAttributes() - 1);
        }
      }
      m_Filter.setInputFormat(dataset);
      m_structurePassedOn=false;
      try {
        if (m_Filter.isOutputFormatDefined()) {
          m_ie.setStructure(m_Filter.getOutputFormat());
          notifyInstanceListeners(m_ie);
          m_structurePassedOn=true;
        }
      }
 catch (      Exception ex) {
        stop();
        if (m_log != null) {
          m_log.logMessage("[Filter] " + statusMessagePrefix() + " Error in obtaining post-filter structure. "+ ex.getMessage());
          m_log.statusMessage(statusMessagePrefix() + "ERROR (See log for details).");
        }
 else {
          System.err.println("[Filter] " + statusMessagePrefix() + " Error in obtaining post-filter structure");
        }
      }
    }
 catch (    Exception ex) {
      ex.printStackTrace();
    }
    return;
  }
  if (e.getStatus() == InstanceEvent.BATCH_FINISHED) {
    try {
      if (m_log != null) {
        m_log.statusMessage(statusMessagePrefix() + "Stream finished.");
      }
      if (m_Filter.input(e.getInstance())) {
        Instance filteredInstance=m_Filter.output();
        if (filteredInstance != null) {
          if (!m_structurePassedOn) {
            m_ie.setStructure(new Instances(filteredInstance.dataset(),0));
            notifyInstanceListeners(m_ie);
            m_structurePassedOn=true;
          }
          m_ie.setInstance(filteredInstance);
          if (m_Filter.batchFinished() && m_Filter.numPendingOutput() > 0) {
            m_ie.setStatus(InstanceEvent.INSTANCE_AVAILABLE);
          }
 else {
            m_ie.setStatus(e.getStatus());
          }
          notifyInstanceListeners(m_ie);
        }
      }
      if (m_log != null) {
        m_log.statusMessage(statusMessagePrefix() + "Done.");
      }
    }
 catch (    Exception ex) {
      stop();
      if (m_log != null) {
        m_log.logMessage("[Filter] " + statusMessagePrefix() + ex.getMessage());
        m_log.statusMessage(statusMessagePrefix() + "ERROR (See log for details).");
      }
      ex.printStackTrace();
    }
    try {
      if (m_Filter.batchFinished() && m_Filter.numPendingOutput() > 0) {
        if (m_log != null) {
          m_log.statusMessage(statusMessagePrefix() + "Passing on pending instances...");
        }
        Instance filteredInstance=m_Filter.output();
        if (filteredInstance != null) {
          if (!m_structurePassedOn) {
            m_ie.setStructure(new Instances(filteredInstance.dataset(),0));
            notifyInstanceListeners(m_ie);
            m_structurePassedOn=true;
          }
          m_ie.setInstance(filteredInstance);
          m_ie.setStatus(InstanceEvent.INSTANCE_AVAILABLE);
          notifyInstanceListeners(m_ie);
        }
        while (m_Filter.numPendingOutput() > 0) {
          filteredInstance=m_Filter.output();
          m_ie.setInstance(filteredInstance);
          if (m_Filter.numPendingOutput() == 0) {
            m_ie.setStatus(InstanceEvent.BATCH_FINISHED);
          }
 else {
            m_ie.setStatus(InstanceEvent.INSTANCE_AVAILABLE);
          }
          notifyInstanceListeners(m_ie);
        }
        if (m_log != null) {
          m_log.statusMessage(statusMessagePrefix() + "Finished.");
        }
      }
    }
 catch (    Exception ex) {
      stop();
      if (m_log != null) {
        m_log.logMessage("[Filter] " + statusMessagePrefix() + ex.toString());
        m_log.statusMessage(statusMessagePrefix() + "ERROR (See log for details.");
      }
      ex.printStackTrace();
    }
  }
 else {
    try {
      if (!m_Filter.input(e.getInstance())) {
        return;
      }
      Instance filteredInstance=m_Filter.output();
      if (filteredInstance == null) {
        return;
      }
      m_instanceCount++;
      if (!m_structurePassedOn) {
        m_ie.setStructure(new Instances(filteredInstance.dataset(),0));
        notifyInstanceListeners(m_ie);
        m_structurePassedOn=true;
      }
      m_ie.setInstance(filteredInstance);
      m_ie.setStatus(e.getStatus());
      if (m_log != null && (m_instanceCount % 10000 == 0)) {
        m_log.statusMessage(statusMessagePrefix() + "Received " + m_instanceCount+ " instances.");
      }
      notifyInstanceListeners(m_ie);
    }
 catch (    Exception ex) {
      stop();
      if (m_log != null) {
        m_log.logMessage("[Filter] " + statusMessagePrefix() + ex.toString());
        m_log.statusMessage(statusMessagePrefix() + "ERROR (See log for details).");
      }
      ex.printStackTrace();
    }
  }
}
