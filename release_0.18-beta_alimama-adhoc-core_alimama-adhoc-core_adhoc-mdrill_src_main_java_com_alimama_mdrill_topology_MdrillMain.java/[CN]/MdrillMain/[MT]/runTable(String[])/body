{
  String tableName=args[1];
  Map stormconf=Utils.readStormConfig();
  ClusterState zkClusterstate=Cluster.mk_distributed_cluster_state(stormconf);
  StormClusterState zkCluster=Cluster.mk_storm_cluster_state(zkClusterstate);
  zkCluster.higo_remove(tableName);
  zkCluster.disconnect();
  Integer shards=StormUtils.parseInt(stormconf.get("higo.shards.count"));
  Integer partions=StormUtils.parseInt(stormconf.get("higo.cache.partions"));
  Integer portbase=StormUtils.parseInt(stormconf.get("higo.solr.ports.begin"));
  String hdfsSolrDir=(String)stormconf.get("higo.table.path");
  String topologyName="adhoc";
  String hadoopConfDir=(String)stormconf.get("hadoop.conf.dir");
  String localWorkDirList=(String)stormconf.get("higo.workdir.list");
  Integer msCount=StormUtils.parseInt(stormconf.get("higo.mergeServer.count"));
  Integer realtimecount=StormUtils.parseInt(stormconf.get("higo.realtime.count"));
  Config conf=new Config();
  conf.setNumWorkers(shards + msCount);
  conf.setNumAckers(1);
  conf.setMaxSpoutPending(100);
  conf.put(CustomAssignment.TOPOLOGY_CUSTOM_ASSIGNMENT,MdrillTaskAssignment.class.getName());
  conf.put(MdrillTaskAssignment.MS_PORTS,(String)stormconf.get("higo.merge.ports"));
  conf.put(MdrillTaskAssignment.REALTIME_PORTS,(String)stormconf.get("higo.realtime.ports"));
  conf.put(MdrillTaskAssignment.MS_NAME,"merge");
  conf.put(MdrillTaskAssignment.SHARD_NAME,"shard");
  conf.put(MdrillTaskAssignment.REALTIME_NAME,"realtime");
  ShardsBolt solr=new ShardsBolt(false,hadoopConfDir,hdfsSolrDir,tableName,localWorkDirList,portbase,shards,partions,topologyName);
  ShardsBolt ms=new ShardsBolt(false,hadoopConfDir,hdfsSolrDir,tableName,localWorkDirList,portbase + shards + 100,0,partions,topologyName);
  ShardsBolt realtime=new ShardsBolt(true,hadoopConfDir,hdfsSolrDir,tableName,localWorkDirList,portbase + shards + 200,0,partions,topologyName);
  TopologyBuilder builder=new TopologyBuilder();
  builder.setSpout("heartbeat",new HeartBeatSpout(),1);
  builder.setBolt("shard",solr,shards).allGrouping("heartbeat");
  builder.setBolt("merge",ms,msCount).allGrouping("heartbeat");
  if (realtimecount > 0) {
    builder.setBolt("realtime",realtime,msCount).allGrouping("heartbeat");
  }
  StormSubmitter.submitTopology(topologyName,conf,builder.createTopology());
  System.out.println("start complete ");
  System.exit(0);
}
