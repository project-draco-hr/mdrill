{
  Instance inst=null;
  if (instance instanceof SparseInstance) {
    double[] vals=new double[instance.numValues()];
    int[] indices=new int[instance.numValues()];
    int num=0;
    for (int j=0; j < instance.numValues(); j++) {
      if (instance.isMissingSparse(j) && (getInputFormat().classIndex() != instance.index(j)) && (instance.attributeSparse(j).isNominal() || instance.attributeSparse(j).isNumeric())) {
        if (m_ModesAndMeans[instance.index(j)] != 0.0) {
          vals[num]=m_ModesAndMeans[instance.index(j)];
          indices[num]=instance.index(j);
          num++;
        }
      }
 else {
        vals[num]=instance.valueSparse(j);
        indices[num]=instance.index(j);
        num++;
      }
    }
    if (num == instance.numValues()) {
      inst=new SparseInstance(instance.weight(),vals,indices,instance.numAttributes());
    }
 else {
      double[] tempVals=new double[num];
      int[] tempInd=new int[num];
      System.arraycopy(vals,0,tempVals,0,num);
      System.arraycopy(indices,0,tempInd,0,num);
      inst=new SparseInstance(instance.weight(),tempVals,tempInd,instance.numAttributes());
    }
  }
 else {
    double[] vals=new double[getInputFormat().numAttributes()];
    for (int j=0; j < instance.numAttributes(); j++) {
      if (instance.isMissing(j) && (getInputFormat().classIndex() != j) && (getInputFormat().attribute(j).isNominal() || getInputFormat().attribute(j).isNumeric())) {
        vals[j]=m_ModesAndMeans[j];
      }
 else {
        vals[j]=instance.value(j);
      }
    }
    inst=new DenseInstance(instance.weight(),vals);
  }
  inst.setDataset(instance.dataset());
  push(inst);
}
