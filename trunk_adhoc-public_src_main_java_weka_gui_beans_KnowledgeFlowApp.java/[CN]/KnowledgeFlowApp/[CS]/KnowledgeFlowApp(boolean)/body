{
  if (BEAN_PROPERTIES == null) {
    loadProperties();
    init();
  }
  m_showFileMenu=showFileMenu;
  JWindow temp=new JWindow();
  temp.setVisible(true);
  temp.getGraphics().setFont(new Font(null,Font.PLAIN,9));
  m_fontM=temp.getGraphics().getFontMetrics();
  temp.setVisible(false);
  try {
    m_ScrollBarIncrementLayout=Integer.parseInt(BEAN_PROPERTIES.getProperty("ScrollBarIncrementLayout","" + m_ScrollBarIncrementLayout));
    m_ScrollBarIncrementComponents=Integer.parseInt(BEAN_PROPERTIES.getProperty("ScrollBarIncrementComponents","" + m_ScrollBarIncrementComponents));
    m_FlowWidth=Integer.parseInt(BEAN_PROPERTIES.getProperty("FlowWidth","" + m_FlowWidth));
    m_FlowHeight=Integer.parseInt(BEAN_PROPERTIES.getProperty("FlowHeight","" + m_FlowHeight));
    m_PreferredExtension=BEAN_PROPERTIES.getProperty("PreferredExtension",m_PreferredExtension);
    m_UserComponentsInXML=Boolean.valueOf(BEAN_PROPERTIES.getProperty("UserComponentsInXML","" + m_UserComponentsInXML)).booleanValue();
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
  m_FileChooser.addChoosableFileFilter(m_KfFilter);
  if (KOML.isPresent()) {
    m_FileChooser.addChoosableFileFilter(m_KOMLFilter);
  }
  if (XStream.isPresent()) {
    m_FileChooser.addChoosableFileFilter(m_XStreamFilter);
  }
  m_FileChooser.addChoosableFileFilter(m_XMLFilter);
  if (m_PreferredExtension.equals(FILE_EXTENSION_XML)) {
    m_FileChooser.setFileFilter(m_XMLFilter);
  }
 else   if (KOML.isPresent() && m_PreferredExtension.equals(KOML.FILE_EXTENSION + "kf")) {
    m_FileChooser.setFileFilter(m_KOMLFilter);
  }
 else   if (XStream.isPresent() && m_PreferredExtension.equals(XStream.FILE_EXTENSION + "kf")) {
    m_FileChooser.setFileFilter(m_XStreamFilter);
  }
 else {
    m_FileChooser.setFileFilter(m_KfFilter);
  }
  m_FileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
  m_bcSupport.setDesignTime(true);
  m_perspectiveHolder=new JPanel();
  m_perspectiveHolder.setLayout(new BorderLayout());
  m_mainKFPerspective=new MainKFPerspective();
  m_perspectives.add(m_mainKFPerspective);
  setLayout(new BorderLayout());
  add(m_perspectiveHolder,BorderLayout.CENTER);
  m_perspectiveHolder.add(m_mainKFPerspective,BorderLayout.CENTER);
  if (m_pluginPerspectiveLookup.size() > 0) {
    String titleM=m_mainKFPerspective.getPerspectiveTitle();
    Icon icon=m_mainKFPerspective.getPerspectiveIcon();
    JToggleButton tBut=new JToggleButton(titleM,icon,true);
    tBut.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        KFPerspective current=(KFPerspective)m_perspectiveHolder.getComponent(0);
        current.setActive(false);
        m_perspectiveHolder.remove(0);
        m_perspectiveHolder.add((JComponent)m_perspectives.get(0),BorderLayout.CENTER);
        m_perspectives.get(0).setActive(true);
        KnowledgeFlowApp.this.revalidate();
        KnowledgeFlowApp.this.repaint();
        notifyIsDirty();
      }
    }
);
    m_perspectiveToolBar.add(tBut);
    m_perspectiveGroup.add(tBut);
    setupUserPerspectives();
  }
  if (m_pluginPerspectiveLookup.size() > 0) {
    m_configAndPerspectives=new JPanel();
    m_configAndPerspectives.setLayout(new BorderLayout());
    m_configAndPerspectives.add(m_perspectiveToolBar,BorderLayout.CENTER);
    try {
      Properties visible=Utils.readProperties(VISIBLE_PERSPECTIVES_PROPERTIES_FILE);
      Enumeration keys=(java.util.Enumeration)visible.propertyNames();
      if (keys.hasMoreElements()) {
        String toolBarIsVisible=visible.getProperty("weka.gui.beans.KnowledgeFlow.PerspectiveToolBarVisisble");
        if (toolBarIsVisible != null && toolBarIsVisible.length() > 0) {
          m_configAndPerspectivesVisible=toolBarIsVisible.equalsIgnoreCase("yes");
        }
      }
    }
 catch (    Exception ex) {
      System.err.println("Problem reading visible perspectives property file");
      ex.printStackTrace();
    }
    if (m_configAndPerspectivesVisible) {
      add(m_configAndPerspectives,BorderLayout.NORTH);
    }
    JButton configB=new JButton(new ImageIcon(loadImage(BeanVisual.ICON_PATH + "cog.png")));
    configB.setBorder(BorderFactory.createEmptyBorder(0,5,0,1));
    configB.setToolTipText("Enable/disable perspectives");
    m_configAndPerspectives.add(configB,BorderLayout.WEST);
    configB.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        if (!Utils.getDontShowDialog("weka.gui.beans.KnowledgeFlow.PerspectiveInfo")) {
          JCheckBox dontShow=new JCheckBox("Do not show this message again");
          Object[] stuff=new Object[2];
          stuff[0]="Perspectives are environments that take over the\n" + "Knowledge Flow UI and provide major additional functionality.\n" + "Many perspectives will operate on a set of instances. Instances\n"+ "Can be sent to a perspective by placing a DataSource on the\n"+ "layout canvas, configuring it and then selecting \"Send to perspective\"\n"+ "from the contextual popup menu that appears when you right-click on\n"+ "it. Several perspectives are built in to the Knowledge Flow, others\n"+ "can be installed via the package manager.\n";
          stuff[1]=dontShow;
          JOptionPane.showMessageDialog(KnowledgeFlowApp.this,stuff,"Perspective information",JOptionPane.OK_OPTION);
          if (dontShow.isSelected()) {
            try {
              Utils.setDontShowDialog("weka.gui.beans.KnowledgeFlow.PerspectiveInfo");
            }
 catch (            Exception ex) {
            }
          }
        }
        popupPerspectiveConfigurer();
      }
    }
);
  }
  for (  String pName : m_perspectiveCache.keySet()) {
    m_perspectiveCache.get(pName).setMainKFPerspective(m_mainKFPerspective);
  }
  loadUserComponents();
  clearLayout();
}
