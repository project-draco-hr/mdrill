{
  int upperLeftX=Integer.MAX_VALUE;
  int upperLeftY=Integer.MAX_VALUE;
  int lowerRightX=Integer.MIN_VALUE;
  int lowerRightY=Integer.MIN_VALUE;
  for (int i=0; i < selected.size(); i++) {
    BeanInstance b=(BeanInstance)selected.get(i);
    if (b.getX() < upperLeftX) {
      upperLeftX=b.getX();
    }
    if (b.getY() < upperLeftY) {
      upperLeftY=b.getY();
    }
    if (b.getX() > lowerRightX) {
      lowerRightX=b.getX();
    }
    if (b.getY() > lowerRightY) {
      lowerRightY=b.getY();
    }
  }
  int bx=upperLeftX + ((lowerRightX - upperLeftX) / 2);
  int by=upperLeftY + ((lowerRightY - upperLeftY) / 2);
  java.awt.Rectangle r=new java.awt.Rectangle(upperLeftX,upperLeftY,lowerRightX,lowerRightY);
  int result=JOptionPane.showConfirmDialog(KnowledgeFlowApp.this,"Group this sub-flow?","Group Components",JOptionPane.YES_NO_OPTION);
  if (result == JOptionPane.YES_OPTION) {
    Vector associatedConnections=BeanConnection.associatedConnections(selected,m_mainKFPerspective.getCurrentTabIndex());
    String name=JOptionPane.showInputDialog(KnowledgeFlowApp.this,"Enter a name for this group","MyGroup");
    if (name != null) {
      MetaBean group=new MetaBean();
      group.setSubFlow(selected);
      group.setAssociatedConnections(associatedConnections);
      group.setInputs(inputs);
      group.setOutputs(outputs);
      if (name.length() > 0) {
        group.setCustomName(name);
      }
      if (group instanceof BeanContextChild) {
        m_bcSupport.add(group);
      }
      Dimension d=group.getPreferredSize();
      ;
      int dx=(int)(d.getWidth() / 2);
      int dy=(int)(d.getHeight() / 2);
      BeanInstance bi=new BeanInstance(m_beanLayout,group,bx + dx,by + dy,m_mainKFPerspective.getCurrentTabIndex());
      for (int i=0; i < selected.size(); i++) {
        BeanInstance temp=(BeanInstance)selected.elementAt(i);
        temp.removeBean(m_beanLayout,m_mainKFPerspective.getCurrentTabIndex());
        if (temp.getBean() instanceof Visible) {
          ((Visible)temp.getBean()).getVisual().removePropertyChangeListener(this);
        }
      }
      for (int i=0; i < associatedConnections.size(); i++) {
        BeanConnection temp=(BeanConnection)associatedConnections.elementAt(i);
        temp.setHidden(true);
      }
      group.shiftBeans(bi,true);
      addComponent(bi,true);
    }
  }
  for (int i=0; i < selected.size(); i++) {
    BeanInstance temp=(BeanInstance)selected.elementAt(i);
    if (temp.getBean() instanceof Visible) {
      ((Visible)temp.getBean()).getVisual().setDisplayConnectors(false);
    }
  }
  m_mainKFPerspective.setSelectedBeans(new Vector());
  revalidate();
  notifyIsDirty();
}
