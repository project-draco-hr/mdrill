{
  if (addUndoPoint) {
    addUndoPoint();
  }
  java.io.StringReader sr=new java.io.StringReader(pasteBuffer.toString());
  try {
    XMLBeans xml=new XMLBeans(m_beanLayout,m_bcSupport,m_mainKFPerspective.getCurrentTabIndex());
    Vector v=(Vector)xml.read(sr);
    Vector beans=(Vector)v.get(XMLBeans.INDEX_BEANINSTANCES);
    Vector connections=(Vector)v.get(XMLBeans.INDEX_BEANCONNECTIONS);
    for (int i=0; i < beans.size(); i++) {
      BeanInstance b=(BeanInstance)beans.get(i);
      if (b.getBean() instanceof MetaBean) {
        Vector subFlow=((MetaBean)b.getBean()).getSubFlow();
        for (int j=0; j < subFlow.size(); j++) {
          BeanInstance subB=(BeanInstance)subFlow.get(j);
          subB.removeBean(m_beanLayout,m_mainKFPerspective.getCurrentTabIndex());
          if (subB.getBean() instanceof Visible) {
            ((Visible)subB.getBean()).getVisual().removePropertyChangeListener(this);
          }
        }
      }
    }
    int minX=Integer.MAX_VALUE;
    int minY=Integer.MAX_VALUE;
    boolean adjust=false;
    for (int i=0; i < beans.size(); i++) {
      BeanInstance b=(BeanInstance)beans.get(i);
      if (b.getX() < minX) {
        minX=b.getX();
        adjust=true;
      }
      if (b.getY() < minY) {
        minY=b.getY();
        adjust=true;
      }
    }
    if (adjust) {
      int deltaX=x - minX;
      int deltaY=y - minY;
      for (int i=0; i < beans.size(); i++) {
        BeanInstance b=(BeanInstance)beans.get(i);
        b.setXY(b.getX() + deltaX,b.getY() + deltaY);
      }
    }
    integrateFlow(beans,connections,false,false);
    for (int i=0; i < beans.size(); i++) {
      checkForDuplicateName((BeanInstance)beans.get(i));
    }
    setEnvironment();
    notifyIsDirty();
    m_mainKFPerspective.setSelectedBeans(beans);
  }
 catch (  Exception e) {
    m_logPanel.logMessage("[KnowledgeFlow] problem pasting beans: " + e.getMessage());
    e.printStackTrace();
  }
  revalidate();
  notifyIsDirty();
  return true;
}
