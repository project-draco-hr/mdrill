{
  if (XMLStreamConstants.START_ELEMENT != parser.getEventType()) {
    throw new RuntimeException("must be start element, not: " + parser.getEventType());
  }
  if (!"doc".equals(parser.getLocalName().toLowerCase(Locale.ENGLISH))) {
    throw new RuntimeException("must be 'lst', not: " + parser.getLocalName());
  }
  SolrDocument doc=new SolrDocument();
  StringBuilder builder=new StringBuilder();
  KnownType type=null;
  String name=null;
  int depth=0;
  while (true) {
switch (parser.next()) {
case XMLStreamConstants.START_ELEMENT:
      depth++;
    builder.setLength(0);
  type=KnownType.get(parser.getLocalName());
if (type == null) {
  throw new RuntimeException("this must be known type! not: " + parser.getLocalName());
}
name=null;
int cnt=parser.getAttributeCount();
for (int i=0; i < cnt; i++) {
if ("name".equals(parser.getAttributeLocalName(i))) {
name=parser.getAttributeValue(i);
break;
}
}
if (name == null) {
throw new XMLStreamException("requires 'name' attribute: " + parser.getLocalName(),parser.getLocation());
}
if (type == KnownType.ARR) {
for (Object val : readArray(parser)) {
doc.addField(name,val);
}
depth--;
}
 else if (!type.isLeaf) {
throw new XMLStreamException("must be value or array",parser.getLocation());
}
break;
case XMLStreamConstants.END_ELEMENT:
if (--depth < 0) {
return doc;
}
Object val=type.read(builder.toString().trim());
if (val == null) {
throw new XMLStreamException("error reading value:" + type,parser.getLocation());
}
doc.addField(name,val);
break;
case XMLStreamConstants.SPACE:
case XMLStreamConstants.CDATA:
case XMLStreamConstants.CHARACTERS:
builder.append(parser.getText());
break;
}
}
}
