{
  if (XMLStreamConstants.START_ELEMENT != parser.getEventType()) {
    throw new RuntimeException("must be start element, not: " + parser.getEventType());
  }
  StringBuilder builder=new StringBuilder();
  NamedList<Object> nl=new SimpleOrderedMap<Object>();
  KnownType type=null;
  String name=null;
  int depth=0;
  while (true) {
switch (parser.next()) {
case XMLStreamConstants.START_ELEMENT:
      depth++;
    builder.setLength(0);
  type=KnownType.get(parser.getLocalName());
if (type == null) {
  throw new RuntimeException("this must be known type! not: " + parser.getLocalName());
}
name=null;
int cnt=parser.getAttributeCount();
for (int i=0; i < cnt; i++) {
if ("name".equals(parser.getAttributeLocalName(i))) {
name=parser.getAttributeValue(i);
break;
}
}
if (!type.isLeaf) {
switch (type) {
case LST:
nl.add(name,readNamedList(parser));
depth--;
continue;
case ARR:
nl.add(name,readArray(parser));
depth--;
continue;
case RESULT:
nl.add(name,readDocuments(parser));
depth--;
continue;
case DOC:
nl.add(name,readDocument(parser));
depth--;
continue;
}
throw new XMLStreamException("branch element not handled!",parser.getLocation());
}
break;
case XMLStreamConstants.END_ELEMENT:
if (--depth < 0) {
return nl;
}
nl.add(name,type.read(builder.toString().trim()));
break;
case XMLStreamConstants.SPACE:
case XMLStreamConstants.CDATA:
case XMLStreamConstants.CHARACTERS:
builder.append(parser.getText());
break;
}
}
}
