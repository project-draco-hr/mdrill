{
  FileSystem fs=FileSystem.get(output.toUri(),conf);
  Path outFile=new Path(output,"part-randomSeed");
  fs.mkdirs(outFile);
  Path inputPathPattern;
  System.out.println(input);
  if (fs.getFileStatus(input).isDir()) {
    inputPathPattern=new Path(input,"*");
  }
 else {
    inputPathPattern=input;
  }
  System.out.println("######" + k);
  FileStatus[] inputFiles=fs.globStatus(inputPathPattern,KmeansPublic.FILTER);
  SequenceFile.Writer writer=SequenceFile.createWriter(fs,conf,new Path(outFile,"random"),Text.class,Cluster.class);
  List<Cluster> chosenClusters=new ArrayList<Cluster>(k);
  int nextClusterId=0;
  int fileMaxReadCount=50000;
  if (fileMaxReadCount <= k) {
    fileMaxReadCount=k;
  }
  if (inputFiles.length > 0) {
    fileMaxReadCount=fileMaxReadCount / inputFiles.length;
  }
  if (fileMaxReadCount <= 10) {
    fileMaxReadCount=10;
  }
  System.out.println("#####" + k + "@"+ fileMaxReadCount);
  int number=0;
  for (  FileStatus fileStatus : inputFiles) {
    if (fileStatus.isDir()) {
      continue;
    }
    int filehasread=0;
    FSDataInputStream in=fs.open(fileStatus.getPath());
    BufferedReader bf=new BufferedReader(new InputStreamReader(in));
    String line;
    while ((line=bf.readLine()) != null) {
      Vector vec=parse.parseVector(line);
      if (vec == null) {
        continue;
      }
      number++;
      filehasread++;
      int currentSize=chosenClusters.size();
      if (currentSize < k) {
        Cluster newCluster=new Cluster(vec,nextClusterId++);
        chosenClusters.add(newCluster);
      }
 else {
        int randIndex=(int)(Math.random() * currentSize);
        chosenClusters.get(randIndex).getCenter().merger(vec);
      }
      if (filehasread > fileMaxReadCount) {
        break;
      }
    }
    bf.close();
    in.close();
  }
  for (int i=0; i < k; i++) {
    Cluster closter=chosenClusters.get(i);
    closter.setId(i);
    writer.append(new Text(String.valueOf(i)),closter);
  }
  writer.close();
  return outFile;
}
