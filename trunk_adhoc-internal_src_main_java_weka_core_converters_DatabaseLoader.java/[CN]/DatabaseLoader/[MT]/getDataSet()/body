{
  if (m_DataBaseConnection == null) {
    throw new IOException("No source database has been specified");
  }
  if (getRetrieval() == INCREMENTAL) {
    throw new IOException("Cannot mix getting Instances in both incremental and batch modes");
  }
  setRetrieval(BATCH);
  Instances result=null;
  checkEnv();
  try {
    InstanceQuery iq=new InstanceQuery();
    iq.initialize(m_CustomPropsFile);
    String realURL=m_URL;
    try {
      realURL=m_env.substitute(realURL);
    }
 catch (    Exception ex) {
    }
    iq.setDatabaseURL(realURL);
    String realUser=m_User;
    try {
      realUser=m_env.substitute(realUser);
    }
 catch (    Exception ex) {
    }
    iq.setUsername(realUser);
    String realPass=m_Password;
    try {
      realPass=m_env.substitute(realPass);
    }
 catch (    Exception ex) {
    }
    iq.setPassword(realPass);
    String realQuery=m_query;
    try {
      realQuery=m_env.substitute(realQuery);
    }
 catch (    Exception ex) {
    }
    iq.setQuery(realQuery);
    iq.setSparseData(m_CreateSparseData);
    result=iq.retrieveInstances();
    if (m_DataBaseConnection.getUpperCase()) {
      m_idColumn=m_idColumn.toUpperCase();
    }
    if (result.attribute(0).name().equals(m_idColumn)) {
      result.deleteAttributeAt(0);
    }
    m_structure=new Instances(result,0);
  }
 catch (  Exception ex) {
    printException(ex);
    StringBuffer text=new StringBuffer();
    if (m_query.equals("Select * from Results0")) {
      text.append("\n\nDatabaseLoader options:\n");
      Enumeration enumi=listOptions();
      while (enumi.hasMoreElements()) {
        Option option=(Option)enumi.nextElement();
        text.append(option.synopsis() + '\n');
        text.append(option.description() + '\n');
      }
      System.out.println(text);
    }
  }
  return result;
}
