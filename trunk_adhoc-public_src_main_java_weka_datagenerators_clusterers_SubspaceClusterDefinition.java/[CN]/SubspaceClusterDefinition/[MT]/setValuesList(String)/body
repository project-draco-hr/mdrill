{
  m_minValue=new double[m_numClusterAttributes];
  m_maxValue=new double[m_numClusterAttributes];
  setValuesList(fromToList,m_minValue,m_maxValue,"D");
  SubspaceCluster parent=(SubspaceCluster)getParent();
  for (int i=0; i < m_numClusterAttributes; i++) {
    if (m_minValue[i] > m_maxValue[i])     throw new Exception("Min must be smaller than max.");
    if (getParent() != null) {
      if (parent.isBoolean(m_attrIndices[i])) {
        parent.getNumValues()[m_attrIndices[i]]=2;
        if (((m_minValue[i] != 0.0) && (m_minValue[i] != 1.0)) || ((m_maxValue[i] != 0.0) && (m_maxValue[i] != 1.0)))         throw new Exception("Ranges for boolean must be 0 or 1 only.");
      }
      if (parent.isNominal(m_attrIndices[i])) {
        double rest=m_minValue[i] - Math.rint(m_minValue[i]);
        if (rest != 0.0)         throw new Exception(" Ranges for nominal must be integer");
        rest=m_maxValue[i] - Math.rint(m_maxValue[i]);
        if (rest != 0.0)         throw new Exception("Ranges for nominal must be integer");
        if (m_minValue[i] < 0.0)         throw new Exception("Range for nominal must start with number 0.0 or higher");
        if (m_maxValue[i] + 1 > parent.getNumValues()[m_attrIndices[i]]) {
          parent.getNumValues()[m_attrIndices[i]]=(int)m_maxValue[i] + 1;
        }
      }
    }
  }
}
