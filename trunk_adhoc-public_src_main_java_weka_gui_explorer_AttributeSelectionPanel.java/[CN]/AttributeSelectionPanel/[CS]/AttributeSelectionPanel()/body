{
  m_OutText.setEditable(false);
  m_OutText.setFont(new Font("Monospaced",Font.PLAIN,12));
  m_OutText.setBorder(BorderFactory.createEmptyBorder(5,5,5,5));
  m_OutText.addMouseListener(new MouseAdapter(){
    public void mouseClicked(    MouseEvent e){
      if ((e.getModifiers() & InputEvent.BUTTON1_MASK) != InputEvent.BUTTON1_MASK) {
        m_OutText.selectAll();
      }
    }
  }
);
  m_History.setBorder(BorderFactory.createTitledBorder("Result list (right-click for options)"));
  m_AttributeEvaluatorEditor.setClassType(ASEvaluation.class);
  m_AttributeEvaluatorEditor.setValue(ExplorerDefaults.getASEvaluator());
  m_AttributeEvaluatorEditor.addPropertyChangeListener(new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent e){
      if (m_AttributeEvaluatorEditor.getValue() instanceof AttributeEvaluator) {
        if (!(m_AttributeSearchEditor.getValue() instanceof Ranker)) {
          Object backup=m_AttributeEvaluatorEditor.getBackup();
          int result=JOptionPane.showConfirmDialog(null,"You must use use the Ranker search method " + "in order to use\n" + m_AttributeEvaluatorEditor.getValue().getClass().getName() + ".\nShould I select the Ranker search method for you?","Alert!",JOptionPane.YES_NO_OPTION);
          if (result == JOptionPane.YES_OPTION) {
            m_AttributeSearchEditor.setValue(new Ranker());
          }
 else {
            if (backup != null) {
              m_AttributeEvaluatorEditor.setValue(backup);
            }
          }
        }
      }
 else {
        if (m_AttributeSearchEditor.getValue() instanceof Ranker) {
          Object backup=m_AttributeEvaluatorEditor.getBackup();
          int result=JOptionPane.showConfirmDialog(null,"You must use use a search method that explores \n" + "the space of attribute subsets (such as GreedyStepwise) in " + "order to use\n" + m_AttributeEvaluatorEditor.getValue().getClass().getName() + ".\nShould I select the GreedyStepwise search method for "+ "you?\n(you can always switch to a different method afterwards)","Alert!",JOptionPane.YES_NO_OPTION);
          if (result == JOptionPane.YES_OPTION) {
            m_AttributeSearchEditor.setValue(new weka.attributeSelection.GreedyStepwise());
          }
 else {
            if (backup != null) {
              m_AttributeEvaluatorEditor.setValue(backup);
            }
          }
        }
      }
      updateRadioLinks();
      m_StartBut.setEnabled(true);
      Capabilities currentFilter=m_AttributeEvaluatorEditor.getCapabilitiesFilter();
      ASEvaluation evaluator=(ASEvaluation)m_AttributeEvaluatorEditor.getValue();
      Capabilities currentSchemeCapabilities=null;
      if (evaluator != null && currentFilter != null && (evaluator instanceof CapabilitiesHandler)) {
        currentSchemeCapabilities=((CapabilitiesHandler)evaluator).getCapabilities();
        if (!currentSchemeCapabilities.supportsMaybe(currentFilter) && !currentSchemeCapabilities.supports(currentFilter)) {
          m_StartBut.setEnabled(false);
        }
      }
      repaint();
    }
  }
);
  m_AttributeSearchEditor.setClassType(ASSearch.class);
  m_AttributeSearchEditor.setValue(ExplorerDefaults.getASSearch());
  m_AttributeSearchEditor.addPropertyChangeListener(new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent e){
      if (m_AttributeSearchEditor.getValue() instanceof Ranker) {
        if (!(m_AttributeEvaluatorEditor.getValue() instanceof AttributeEvaluator)) {
          Object backup=m_AttributeSearchEditor.getBackup();
          int result=JOptionPane.showConfirmDialog(null,"You must use use an evaluator that evaluates\n" + "single attributes (such as InfoGain) in order to use\n" + "the Ranker. Should I select the InfoGain evaluator "+ "for you?\n"+ "(You can always switch to a different method afterwards)","Alert!",JOptionPane.YES_NO_OPTION);
          if (result == JOptionPane.YES_OPTION) {
            m_AttributeEvaluatorEditor.setValue(new weka.attributeSelection.InfoGainAttributeEval());
          }
 else {
            if (backup != null) {
              m_AttributeSearchEditor.setValue(backup);
            }
          }
        }
      }
 else {
        if (m_AttributeEvaluatorEditor.getValue() instanceof AttributeEvaluator) {
          Object backup=m_AttributeSearchEditor.getBackup();
          int result=JOptionPane.showConfirmDialog(null,"You must use use an evaluator that evaluates\n" + "subsets of attributes (such as CFS) in order to use\n" + m_AttributeEvaluatorEditor.getValue().getClass().getName() + ".\nShould I select the CFS subset evaluator for you?"+ "\n(you can always switch to a different method afterwards)","Alert!",JOptionPane.YES_NO_OPTION);
          if (result == JOptionPane.YES_OPTION) {
            m_AttributeEvaluatorEditor.setValue(new weka.attributeSelection.CfsSubsetEval());
          }
 else {
            if (backup != null) {
              m_AttributeSearchEditor.setValue(backup);
            }
          }
        }
      }
      repaint();
    }
  }
);
  m_ClassCombo.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      updateCapabilitiesFilter(m_AttributeEvaluatorEditor.getCapabilitiesFilter());
    }
  }
);
  m_ClassCombo.setToolTipText("Select the attribute to use as the class");
  m_TrainBut.setToolTipText("select attributes using the full training " + "dataset");
  m_CVBut.setToolTipText("Perform a n-fold cross-validation");
  m_StartBut.setToolTipText("Starts attribute selection");
  m_StopBut.setToolTipText("Stops a attribute selection task");
  m_ClassCombo.setPreferredSize(COMBO_SIZE);
  m_ClassCombo.setMaximumSize(COMBO_SIZE);
  m_ClassCombo.setMinimumSize(COMBO_SIZE);
  m_History.setPreferredSize(COMBO_SIZE);
  m_History.setMaximumSize(COMBO_SIZE);
  m_History.setMinimumSize(COMBO_SIZE);
  m_ClassCombo.setEnabled(false);
  m_TrainBut.setSelected(ExplorerDefaults.getASTestMode() == 0);
  m_CVBut.setSelected(ExplorerDefaults.getASTestMode() == 1);
  updateRadioLinks();
  ButtonGroup bg=new ButtonGroup();
  bg.add(m_TrainBut);
  bg.add(m_CVBut);
  m_TrainBut.addActionListener(m_RadioListener);
  m_CVBut.addActionListener(m_RadioListener);
  m_CVText.setText("" + ExplorerDefaults.getASCrossvalidationFolds());
  m_SeedText.setText("" + ExplorerDefaults.getASRandomSeed());
  m_StartBut.setEnabled(false);
  m_StopBut.setEnabled(false);
  m_StartBut.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      startAttributeSelection();
    }
  }
);
  m_StopBut.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      stopAttributeSelection();
    }
  }
);
  m_History.setHandleRightClicks(false);
  m_History.getList().addMouseListener(new MouseAdapter(){
    public void mouseClicked(    MouseEvent e){
      if (((e.getModifiers() & InputEvent.BUTTON1_MASK) != InputEvent.BUTTON1_MASK) || e.isAltDown()) {
        int index=m_History.getList().locationToIndex(e.getPoint());
        if (index != -1) {
          String name=m_History.getNameAtIndex(index);
          visualize(name,e.getX(),e.getY());
        }
 else {
          visualize(null,e.getX(),e.getY());
        }
      }
    }
  }
);
  JPanel p1=new JPanel();
  p1.setBorder(BorderFactory.createCompoundBorder(BorderFactory.createTitledBorder("Attribute Evaluator"),BorderFactory.createEmptyBorder(0,5,5,5)));
  p1.setLayout(new BorderLayout());
  p1.add(m_AEEPanel,BorderLayout.NORTH);
  JPanel p1_1=new JPanel();
  p1_1.setBorder(BorderFactory.createCompoundBorder(BorderFactory.createTitledBorder("Search Method"),BorderFactory.createEmptyBorder(0,5,5,5)));
  p1_1.setLayout(new BorderLayout());
  p1_1.add(m_ASEPanel,BorderLayout.NORTH);
  JPanel p_new=new JPanel();
  p_new.setLayout(new BorderLayout());
  p_new.add(p1,BorderLayout.NORTH);
  p_new.add(p1_1,BorderLayout.CENTER);
  JPanel p2=new JPanel();
  GridBagLayout gbL=new GridBagLayout();
  p2.setLayout(gbL);
  p2.setBorder(BorderFactory.createCompoundBorder(BorderFactory.createTitledBorder("Attribute Selection Mode"),BorderFactory.createEmptyBorder(0,5,5,5)));
  GridBagConstraints gbC=new GridBagConstraints();
  gbC.anchor=GridBagConstraints.WEST;
  gbC.gridy=2;
  gbC.gridx=0;
  gbL.setConstraints(m_TrainBut,gbC);
  p2.add(m_TrainBut);
  gbC=new GridBagConstraints();
  gbC.anchor=GridBagConstraints.WEST;
  gbC.gridy=4;
  gbC.gridx=0;
  gbL.setConstraints(m_CVBut,gbC);
  p2.add(m_CVBut);
  gbC=new GridBagConstraints();
  gbC.anchor=GridBagConstraints.EAST;
  gbC.fill=GridBagConstraints.HORIZONTAL;
  gbC.gridy=4;
  gbC.gridx=1;
  gbC.insets=new Insets(2,10,2,10);
  gbL.setConstraints(m_CVLab,gbC);
  p2.add(m_CVLab);
  gbC=new GridBagConstraints();
  gbC.anchor=GridBagConstraints.EAST;
  gbC.fill=GridBagConstraints.HORIZONTAL;
  gbC.gridy=4;
  gbC.gridx=2;
  gbC.weightx=100;
  gbC.ipadx=20;
  gbL.setConstraints(m_CVText,gbC);
  p2.add(m_CVText);
  gbC=new GridBagConstraints();
  gbC.anchor=GridBagConstraints.EAST;
  gbC.fill=GridBagConstraints.HORIZONTAL;
  gbC.gridy=6;
  gbC.gridx=1;
  gbC.insets=new Insets(2,10,2,10);
  gbL.setConstraints(m_SeedLab,gbC);
  p2.add(m_SeedLab);
  gbC=new GridBagConstraints();
  gbC.anchor=GridBagConstraints.EAST;
  gbC.fill=GridBagConstraints.HORIZONTAL;
  gbC.gridy=6;
  gbC.gridx=2;
  gbC.weightx=100;
  gbC.ipadx=20;
  gbL.setConstraints(m_SeedText,gbC);
  p2.add(m_SeedText);
  JPanel buttons=new JPanel();
  buttons.setLayout(new GridLayout(2,2));
  buttons.add(m_ClassCombo);
  m_ClassCombo.setBorder(BorderFactory.createEmptyBorder(5,5,5,5));
  JPanel ssButs=new JPanel();
  ssButs.setBorder(BorderFactory.createEmptyBorder(5,5,5,5));
  ssButs.setLayout(new GridLayout(1,2,5,5));
  ssButs.add(m_StartBut);
  ssButs.add(m_StopBut);
  buttons.add(ssButs);
  JPanel p3=new JPanel();
  p3.setBorder(BorderFactory.createTitledBorder("Attribute selection output"));
  p3.setLayout(new BorderLayout());
  final JScrollPane js=new JScrollPane(m_OutText);
  p3.add(js,BorderLayout.CENTER);
  js.getViewport().addChangeListener(new ChangeListener(){
    private int lastHeight;
    public void stateChanged(    ChangeEvent e){
      JViewport vp=(JViewport)e.getSource();
      int h=vp.getViewSize().height;
      if (h != lastHeight) {
        lastHeight=h;
        int x=h - vp.getExtentSize().height;
        vp.setViewPosition(new Point(0,x));
      }
    }
  }
);
  JPanel mondo=new JPanel();
  gbL=new GridBagLayout();
  mondo.setLayout(gbL);
  gbC=new GridBagConstraints();
  gbC.fill=GridBagConstraints.HORIZONTAL;
  gbC.gridy=0;
  gbC.gridx=0;
  gbC.weightx=0;
  gbL.setConstraints(p2,gbC);
  mondo.add(p2);
  gbC=new GridBagConstraints();
  gbC.anchor=GridBagConstraints.NORTH;
  gbC.fill=GridBagConstraints.HORIZONTAL;
  gbC.gridy=1;
  gbC.gridx=0;
  gbC.weightx=0;
  gbL.setConstraints(buttons,gbC);
  mondo.add(buttons);
  gbC=new GridBagConstraints();
  gbC.fill=GridBagConstraints.BOTH;
  gbC.gridy=2;
  gbC.gridx=0;
  gbC.weightx=0;
  gbC.weighty=100;
  gbL.setConstraints(m_History,gbC);
  mondo.add(m_History);
  gbC=new GridBagConstraints();
  gbC.fill=GridBagConstraints.BOTH;
  gbC.gridy=0;
  gbC.gridx=1;
  gbC.gridheight=3;
  gbC.weightx=100;
  gbC.weighty=100;
  gbL.setConstraints(p3,gbC);
  mondo.add(p3);
  setLayout(new BorderLayout());
  add(p_new,BorderLayout.NORTH);
  add(mondo,BorderLayout.CENTER);
}
