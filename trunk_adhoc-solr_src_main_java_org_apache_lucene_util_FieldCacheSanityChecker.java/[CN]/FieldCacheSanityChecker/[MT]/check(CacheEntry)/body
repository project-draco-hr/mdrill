{
  if (null == cacheEntries || 0 == cacheEntries.length)   return new Insanity[0];
  if (null != ramCalc) {
    for (int i=0; i < cacheEntries.length; i++) {
      cacheEntries[i].estimateSize(ramCalc);
    }
  }
  final MapOfSets<Integer,CacheEntry> valIdToItems=new MapOfSets<Integer,CacheEntry>(new HashMap<Integer,Set<CacheEntry>>(17));
  final MapOfSets<ReaderField,Integer> readerFieldToValIds=new MapOfSets<ReaderField,Integer>(new HashMap<ReaderField,Set<Integer>>(17));
  final Set<ReaderField> valMismatchKeys=new HashSet<ReaderField>();
  for (int i=0; i < cacheEntries.length; i++) {
    final CacheEntry item=cacheEntries[i];
    final Object val=item.getValue();
    if (val instanceof Bits) {
      continue;
    }
    if (val instanceof FieldCache.CreationPlaceholder)     continue;
    final ReaderField rf=new ReaderField(item.getReaderKey(),item.getFieldName());
    final Integer valId=Integer.valueOf(System.identityHashCode(val));
    valIdToItems.put(valId,item);
    if (1 < readerFieldToValIds.put(rf,valId)) {
      valMismatchKeys.add(rf);
    }
  }
  final List<Insanity> insanity=new ArrayList<Insanity>(valMismatchKeys.size() * 3);
  insanity.addAll(checkValueMismatch(valIdToItems,readerFieldToValIds,valMismatchKeys));
  insanity.addAll(checkSubreaders(valIdToItems,readerFieldToValIds));
  return insanity.toArray(new Insanity[insanity.size()]);
}
