{
  m_evaluation=new Evaluation(m_theInstances);
  int i;
  int[] fs=new int[num_atts];
  double[] instA=new double[num_atts];
  int classI=m_theInstances.classIndex();
  int index=0;
  for (i=0; i < m_numAttributes; i++) {
    if (feature_set.get(i)) {
      fs[index++]=i;
    }
  }
  m_entries=new Hashtable((int)(m_theInstances.numInstances() * 1.5));
  for (i=0; i < m_numInstances; i++) {
    Instance inst=m_theInstances.instance(i);
    for (int j=0; j < fs.length; j++) {
      if (fs[j] == classI) {
        instA[j]=Double.MAX_VALUE;
      }
 else       if (inst.isMissing(fs[j])) {
        instA[j]=Double.MAX_VALUE;
      }
 else {
        instA[j]=inst.value(fs[j]);
      }
    }
    insertIntoTable(inst,instA);
  }
  if (m_CVFolds == 1) {
    for (i=0; i < m_numInstances; i++) {
      Instance inst=m_theInstances.instance(i);
      for (int j=0; j < fs.length; j++) {
        if (fs[j] == classI) {
          instA[j]=Double.MAX_VALUE;
        }
 else         if (inst.isMissing(fs[j])) {
          instA[j]=Double.MAX_VALUE;
        }
 else {
          instA[j]=inst.value(fs[j]);
        }
      }
      evaluateInstanceLeaveOneOut(inst,instA);
    }
  }
 else {
    m_theInstances.randomize(m_rr);
    m_theInstances.stratify(m_CVFolds);
    for (i=0; i < m_CVFolds; i++) {
      Instances insts=m_theInstances.testCV(m_CVFolds,i);
      evaluateFoldCV(insts,fs);
    }
  }
switch (m_evaluationMeasure) {
case EVAL_DEFAULT:
    if (m_classIsNominal) {
      return m_evaluation.pctCorrect();
    }
  return -m_evaluation.rootMeanSquaredError();
case EVAL_ACCURACY:
return m_evaluation.pctCorrect();
case EVAL_RMSE:
return -m_evaluation.rootMeanSquaredError();
case EVAL_MAE:
return -m_evaluation.meanAbsoluteError();
case EVAL_AUC:
double[] classPriors=m_evaluation.getClassPriors();
Utils.normalize(classPriors);
double weightedAUC=0;
for (i=0; i < m_theInstances.classAttribute().numValues(); i++) {
double tempAUC=m_evaluation.areaUnderROC(i);
if (!Utils.isMissingValue(tempAUC)) {
weightedAUC+=(classPriors[i] * tempAUC);
}
 else {
System.err.println("Undefined AUC!!");
}
}
return weightedAUC;
}
return 0.0;
}
