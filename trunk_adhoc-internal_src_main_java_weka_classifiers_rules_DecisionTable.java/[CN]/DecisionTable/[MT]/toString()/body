{
  if (m_entries == null) {
    return "Decision Table: No model built yet.";
  }
 else {
    StringBuffer text=new StringBuffer();
    text.append("Decision Table:" + "\n\nNumber of training instances: " + m_numInstances + "\nNumber of Rules : "+ m_entries.size()+ "\n");
    if (m_useIBk) {
      text.append("Non matches covered by IB1.\n");
    }
 else {
      text.append("Non matches covered by Majority class.\n");
    }
    text.append(m_search.toString());
    text.append("Evaluation (for feature selection): CV ");
    if (m_CVFolds > 1) {
      text.append("(" + m_CVFolds + " fold) ");
    }
 else {
      text.append("(leave one out) ");
    }
    text.append("\nFeature set: " + printFeatures());
    if (m_displayRules) {
      int maxColWidth=0;
      for (int i=0; i < m_dtInstances.numAttributes(); i++) {
        if (m_dtInstances.attribute(i).name().length() > maxColWidth) {
          maxColWidth=m_dtInstances.attribute(i).name().length();
        }
        if (m_classIsNominal || (i != m_dtInstances.classIndex())) {
          Enumeration e=m_dtInstances.attribute(i).enumerateValues();
          while (e.hasMoreElements()) {
            String ss=(String)e.nextElement();
            if (ss.length() > maxColWidth) {
              maxColWidth=ss.length();
            }
          }
        }
      }
      text.append("\n\nRules:\n");
      StringBuffer tm=new StringBuffer();
      for (int i=0; i < m_dtInstances.numAttributes(); i++) {
        if (m_dtInstances.classIndex() != i) {
          int d=maxColWidth - m_dtInstances.attribute(i).name().length();
          tm.append(m_dtInstances.attribute(i).name());
          for (int j=0; j < d + 1; j++) {
            tm.append(" ");
          }
        }
      }
      tm.append(m_dtInstances.attribute(m_dtInstances.classIndex()).name() + "  ");
      for (int i=0; i < tm.length() + 10; i++) {
        text.append("=");
      }
      text.append("\n");
      text.append(tm);
      text.append("\n");
      for (int i=0; i < tm.length() + 10; i++) {
        text.append("=");
      }
      text.append("\n");
      Enumeration e=m_entries.keys();
      while (e.hasMoreElements()) {
        DecisionTableHashKey tt=(DecisionTableHashKey)e.nextElement();
        text.append(tt.toString(m_dtInstances,maxColWidth));
        double[] ClassDist=(double[])m_entries.get(tt);
        if (m_classIsNominal) {
          int m=Utils.maxIndex(ClassDist);
          try {
            text.append(m_dtInstances.classAttribute().value(m) + "\n");
          }
 catch (          Exception ee) {
            System.out.println(ee.getMessage());
          }
        }
 else {
          text.append((ClassDist[0] / ClassDist[1]) + "\n");
        }
      }
      for (int i=0; i < tm.length() + 10; i++) {
        text.append("=");
      }
      text.append("\n");
      text.append("\n");
    }
    return text.toString();
  }
}
