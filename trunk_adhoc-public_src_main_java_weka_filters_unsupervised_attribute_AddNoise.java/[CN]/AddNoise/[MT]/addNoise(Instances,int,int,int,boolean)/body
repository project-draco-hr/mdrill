{
  int indexList[];
  int partition_count[];
  int partition_max[];
  double splitPercent=(double)percent;
  indexList=new int[instances.numInstances()];
  for (int i=0; i < instances.numInstances(); i++) {
    indexList[i]=i;
  }
  Random random=new Random(seed);
  for (int i=instances.numInstances() - 1; i >= 0; i--) {
    int hValue=indexList[i];
    int hIndex=(int)(random.nextDouble() * (double)i);
    indexList[i]=indexList[hIndex];
    indexList[hIndex]=hValue;
  }
  int numValues=instances.attribute(attIndex).numValues();
  partition_count=new int[numValues];
  partition_max=new int[numValues];
  int missing_count=0;
  ;
  int missing_max=0;
  ;
  for (int i=0; i < numValues; i++) {
    partition_count[i]=0;
    partition_max[i]=0;
  }
  for (Enumeration e=instances.enumerateInstances(); e.hasMoreElements(); ) {
    Instance instance=(Instance)e.nextElement();
    if (instance.isMissing(attIndex)) {
      missing_max++;
    }
 else {
      int j=(int)instance.value(attIndex);
      partition_max[(int)instance.value(attIndex)]++;
    }
  }
  if (!useMissing) {
    missing_max=missing_count;
  }
 else {
    missing_max=(int)(((double)missing_max / 100) * splitPercent + 0.5);
  }
  int sum_max=missing_max;
  for (int i=0; i < numValues; i++) {
    partition_max[i]=(int)(((double)partition_max[i] / 100) * splitPercent + 0.5);
    sum_max=sum_max + partition_max[i];
  }
  int sum_count=0;
  Random randomValue=new Random(seed);
  int numOfValues=instances.attribute(attIndex).numValues();
  for (int i=0; i < instances.numInstances(); i++) {
    if (sum_count >= sum_max) {
      break;
    }
    Instance currInstance=instances.instance(indexList[i]);
    if (currInstance.isMissing(attIndex)) {
      if (missing_count < missing_max) {
        changeValueRandomly(randomValue,numOfValues,attIndex,currInstance,useMissing);
        missing_count++;
        sum_count++;
      }
    }
 else {
      int vIndex=(int)currInstance.value(attIndex);
      if (partition_count[vIndex] < partition_max[vIndex]) {
        changeValueRandomly(randomValue,numOfValues,attIndex,currInstance,useMissing);
        partition_count[vIndex]++;
        sum_count++;
      }
    }
  }
}
