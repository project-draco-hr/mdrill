{
  if (entries.size() == 0)   return null;
  final Comparator<Entry> comp=new Comparator<Entry>(){
    public int compare(    Entry o1,    Entry o2){
      char[] ch1=o1.term;
      char[] ch2=o2.term;
      int len1=ch1.length;
      int len2=ch2.length;
      int max=Math.min(len1,len2);
      for (int i=0; i < max; i++) {
        int v=ch1[i] - ch2[i];
        if (v != 0)         return v;
      }
      return len1 - len2;
    }
  }
;
  Collections.sort(entries,comp);
  int len=entries.size();
  int j=0;
  for (int i=1; i < len; i++) {
    if (comp.compare(entries.get(j),entries.get(i)) != 0) {
      entries.set(++j,entries.get(i));
    }
  }
  entries=entries.subList(0,j + 1);
  final Outputs<Object> outputs=NoOutputs.getSingleton();
  final Object empty=outputs.getNoOutput();
  final Builder<Object> builder=new Builder<Object>(FST.INPUT_TYPE.BYTE4,outputs);
  final IntsRef scratchIntsRef=new IntsRef(10);
  for (  Entry e : entries) {
    final int termLength=scratchIntsRef.length=e.term.length;
    scratchIntsRef.grow(termLength);
    final int[] ints=scratchIntsRef.ints;
    final char[] chars=e.term;
    for (int i=termLength; --i >= 0; ) {
      ints[i]=chars[i];
    }
    builder.add(scratchIntsRef,empty);
  }
  return builder.finish();
}
