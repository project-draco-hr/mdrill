{
  int p=patternIdx;
  for (int s=stringIdx; ; ++p, ++s) {
    boolean sEnd=(s >= string.length());
    boolean pEnd=(p >= pattern.length());
    if (sEnd) {
      boolean justWildcardsLeft=true;
      int wildcardSearchPos=p;
      while (wildcardSearchPos < pattern.length() && justWildcardsLeft) {
        char wildchar=pattern.charAt(wildcardSearchPos);
        if (wildchar != WILDCARD_CHAR && wildchar != WILDCARD_STRING) {
          justWildcardsLeft=false;
        }
 else {
          if (wildchar == WILDCARD_CHAR) {
            return false;
          }
          wildcardSearchPos++;
        }
      }
      if (justWildcardsLeft) {
        return true;
      }
    }
    if (sEnd || pEnd) {
      break;
    }
    if (pattern.charAt(p) == WILDCARD_CHAR) {
      continue;
    }
    if (pattern.charAt(p) == WILDCARD_STRING) {
      while (p < pattern.length() && pattern.charAt(p) == WILDCARD_STRING)       ++p;
      for (int i=string.length(); i >= s; --i) {
        if (wildcardEquals(pattern,p,string,i)) {
          return true;
        }
      }
      break;
    }
    if (pattern.charAt(p) != string.charAt(s)) {
      break;
    }
  }
  return false;
}
