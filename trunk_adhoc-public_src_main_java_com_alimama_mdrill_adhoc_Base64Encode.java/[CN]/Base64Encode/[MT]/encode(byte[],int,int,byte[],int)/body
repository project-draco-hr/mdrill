{
  if (src == null || dest == null || srcOffset < 0 || destOffset < 0 || srcLength < 1 || srcOffset + srcLength > src.length) {
    return -1;
  }
  int destLength=(srcLength + 2) / 3 * 4;
  if (destOffset + destLength > dest.length) {
    return -1;
  }
  int round=srcLength / 3, remain=srcLength % 3;
  int srcIndex=srcOffset, destIndex=destOffset, b1, b2, b3;
  for (int j=0; j < round; j++) {
    b1=src[srcIndex++] & 0xFF;
    b2=src[srcIndex++] & 0xFF;
    b3=src[srcIndex++] & 0xFF;
    dest[destIndex++]=BYTE_TABLE[b1 >> 2];
    dest[destIndex++]=BYTE_TABLE[b1 << 4 & 0x3F | b2 >> 4];
    dest[destIndex++]=BYTE_TABLE[b2 << 2 & 0x3F | b3 >> 6];
    dest[destIndex++]=BYTE_TABLE[b3 & 0x3F];
  }
  if (remain > 0) {
    b1=src[srcIndex++] & 0xFF;
    dest[destIndex++]=BYTE_TABLE[b1 >> 2];
    if (remain == 1) {
      dest[destIndex++]=BYTE_TABLE[b1 << 4 & 0x3F];
      dest[destIndex++]='=';
      dest[destIndex++]='=';
    }
 else {
      b2=src[srcIndex++] & 0xFF;
      dest[destIndex++]=BYTE_TABLE[b1 << 4 & 0x3F | b2 >> 4];
      dest[destIndex++]=BYTE_TABLE[b2 << 2 & 0x3F];
      dest[destIndex++]='=';
    }
  }
  return destIndex;
}
