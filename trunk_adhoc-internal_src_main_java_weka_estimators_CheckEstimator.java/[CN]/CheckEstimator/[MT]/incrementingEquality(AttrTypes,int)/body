{
  print("incremental training produces the same results" + " as batch training");
  printAttributeSummary(attrTypes,classType);
  print("...");
  int numTrain=getNumInstances(), numTest=getNumInstances(), numClasses=2, missingLevel=0;
  boolean attributeMissing=false, classMissing=false;
  boolean[] result=new boolean[2];
  Instances train=null;
  Estimator[] estimators=null;
  boolean built=false;
  int attrIndex=0;
  Vector test;
  try {
    train=makeTestDataset(42,numTrain,1,attrTypes,numClasses,classType);
    test=makeTestValueList(24,numTest,train,attrIndex,attrTypes.getSetType());
    if (missingLevel > 0) {
      addMissing(train,missingLevel,attributeMissing,classMissing,attrIndex);
    }
    estimators=Estimator.makeCopies(getEstimator(),2);
    estimators[0].addValues(train,attrIndex);
  }
 catch (  Exception ex) {
    throw new Error("Error setting up for tests: " + ex.getMessage());
  }
  try {
    for (int i=0; i < train.numInstances(); i++) {
      ((IncrementalEstimator)estimators[1]).addValue(train.instance(i).value(attrIndex),1.0);
    }
    built=true;
    if (!estimators[0].equals(estimators[1])) {
      println("no");
      result[0]=false;
      if (m_Debug) {
        println("\n=== Full Report ===");
        println("Results differ between batch and " + "incrementally built models.\n" + "Depending on the estimator, this may be OK");
        println("Here are the results:\n");
        println("batch built results\n" + estimators[0].toString());
        println("incrementally built results\n" + estimators[1].toString());
        println("Here are the datasets:\n");
        println("=== Train Dataset ===\n" + train.toString() + "\n");
        println("=== Test Dataset ===\n" + test.toString() + "\n\n");
      }
    }
 else {
      println("yes");
      result[0]=true;
    }
  }
 catch (  Exception ex) {
    result[0]=false;
    print("Problem during");
    if (built)     print(" testing");
 else     print(" training");
    println(": " + ex.getMessage() + "\n");
  }
  return result;
}
