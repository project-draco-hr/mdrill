{
  AttrTypes attrTypes=new AttrTypes();
  AttrTypes at=new AttrTypes(Attribute.NOMINAL);
  attrTypes.nominal=canEstimate(at,estTypes.supervised,classType)[0];
  at=new AttrTypes(Attribute.NUMERIC);
  attrTypes.numeric=canEstimate(at,estTypes.supervised,classType)[0];
  attrTypes.string=false;
  attrTypes.date=false;
  attrTypes.relational=false;
  if (attrTypes.oneIsSet()) {
    Vector attributesSet=attrTypes.getVectorOfAttrTypes();
    for (int i=0; i < attributesSet.size(); i++) {
      AttrTypes workAttrTypes=new AttrTypes(((Integer)attributesSet.elementAt(i)).intValue());
      if (estTypes.weighted)       instanceWeights(workAttrTypes,classType);
      if (classType == Attribute.NOMINAL) {
        int numClasses=4;
        canHandleNClasses(workAttrTypes,numClasses);
      }
      int numAtt=4;
      canHandleClassAsNthAttribute(workAttrTypes,numAtt,0,classType,1);
      canHandleZeroTraining(workAttrTypes,classType);
      boolean handleMissingAttributes=canHandleMissing(workAttrTypes,classType,true,false,20)[0];
      if (handleMissingAttributes)       canHandleMissing(workAttrTypes,classType,true,false,100);
      boolean handleMissingClass=canHandleMissing(workAttrTypes,classType,false,true,20)[0];
      if (handleMissingClass)       canHandleMissing(workAttrTypes,classType,false,true,100);
      correctBuildInitialisation(workAttrTypes,classType);
      datasetIntegrity(workAttrTypes,classType,handleMissingAttributes,handleMissingClass);
      if (estTypes.incremental)       incrementingEquality(workAttrTypes,classType);
    }
  }
  return attrTypes;
}
