{
  this.columnWidths[1]=Math.max(this.columnWidths[1],this.columns1and2Width - this.columnGaps[1] - this.columnWidths[2]);
  this.columnWidths[4]=Math.max(this.columnWidths[4],Math.max(this.columns4and5Width - this.columnGaps[4] - this.columnWidths[5],Math.max(this.columns1to4Width - this.columnGaps[1] - this.columnGaps[2]- this.columnGaps[3]- this.columnWidths[1]- this.columnWidths[2]- this.columnWidths[3],this.columns1to5Width - this.columnGaps[1] - this.columnGaps[2]- this.columnGaps[3]- this.columnWidths[1]- this.columnWidths[2]- this.columnWidths[3]- this.columnGaps[4])));
  int leftWidth=this.columnWidths[0] + this.columnGaps[0] + this.columnWidths[1]+ this.columnGaps[1]+ this.columnWidths[2];
  int rightWidth=this.columnWidths[3] + this.columnGaps[3] + this.columnWidths[4]+ this.columnGaps[4]+ this.columnWidths[5];
  if (splitLayout()) {
    if (leftWidth > rightWidth) {
      final int mismatch=leftWidth - rightWidth;
      this.columnWidths[4]=this.columnWidths[4] + mismatch;
      rightWidth=rightWidth + mismatch;
    }
 else {
      final int mismatch=rightWidth - leftWidth;
      this.columnWidths[1]=this.columnWidths[1] + mismatch;
      leftWidth=leftWidth + mismatch;
    }
  }
  this.totalWidth=leftWidth + this.columnGaps[2] + rightWidth;
  if (this.columns0to5Width > this.totalWidth) {
    final int spaceToAdd=(this.columns0to5Width - this.totalWidth);
    if (splitLayout()) {
      final int halfSpaceToAdd=spaceToAdd / 2;
      this.columnWidths[1]=this.columnWidths[1] + halfSpaceToAdd;
      this.columnWidths[4]=this.columnWidths[4] + spaceToAdd - halfSpaceToAdd;
      this.totalWidth=this.totalWidth + spaceToAdd;
    }
 else {
      this.columnWidths[1]=this.columnWidths[1] + spaceToAdd;
      this.totalWidth=this.totalWidth + spaceToAdd;
    }
  }
}
