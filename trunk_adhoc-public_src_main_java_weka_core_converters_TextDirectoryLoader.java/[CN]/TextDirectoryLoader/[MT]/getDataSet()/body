{
  if (getDirectory() == null)   throw new IOException("No directory/source has been specified");
  String directoryPath=getDirectory().getAbsolutePath();
  ArrayList<String> classes=new ArrayList<String>();
  Enumeration enm=getStructure().classAttribute().enumerateValues();
  while (enm.hasMoreElements())   classes.add((String)enm.nextElement());
  Instances data=getStructure();
  int fileCount=0;
  for (int k=0; k < classes.size(); k++) {
    String subdirPath=(String)classes.get(k);
    File subdir=new File(directoryPath + File.separator + subdirPath);
    String[] files=subdir.list();
    for (int j=0; j < files.length; j++) {
      try {
        fileCount++;
        if (getDebug())         System.err.println("processing " + fileCount + " : "+ subdirPath+ " : "+ files[j]);
        double[] newInst=null;
        if (m_OutputFilename)         newInst=new double[3];
 else         newInst=new double[2];
        File txt=new File(directoryPath + File.separator + subdirPath+ File.separator+ files[j]);
        BufferedReader is;
        if (m_charSet == null || m_charSet.length() == 0) {
          is=new BufferedReader(new InputStreamReader(new FileInputStream(txt)));
        }
 else {
          is=new BufferedReader(new InputStreamReader(new FileInputStream(txt),m_charSet));
        }
        StringBuffer txtStr=new StringBuffer();
        int c;
        while ((c=is.read()) != -1) {
          txtStr.append((char)c);
        }
        newInst[0]=(double)data.attribute(0).addStringValue(txtStr.toString());
        if (m_OutputFilename)         newInst[1]=(double)data.attribute(1).addStringValue(subdirPath + File.separator + files[j]);
        newInst[data.classIndex()]=(double)k;
        data.add(new DenseInstance(1.0,newInst));
        is.close();
      }
 catch (      Exception e) {
        System.err.println("failed to convert file: " + directoryPath + File.separator+ subdirPath+ File.separator+ files[j]);
      }
    }
  }
  return data;
}
