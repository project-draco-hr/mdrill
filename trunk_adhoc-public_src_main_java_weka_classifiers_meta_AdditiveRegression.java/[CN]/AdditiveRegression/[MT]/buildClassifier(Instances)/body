{
  super.buildClassifier(data);
  getCapabilities().testWithFail(data);
  Instances newData=new Instances(data);
  newData.deleteWithMissingClass();
  double sum=0;
  double temp_sum=0;
  m_zeroR=new ZeroR();
  m_zeroR.buildClassifier(newData);
  if (newData.numAttributes() == 1) {
    System.err.println("Cannot build model (only class attribute present in data!), " + "using ZeroR model instead!");
    m_SuitableData=false;
    return;
  }
 else {
    m_SuitableData=true;
  }
  newData=residualReplace(newData,m_zeroR,false);
  for (int i=0; i < newData.numInstances(); i++) {
    sum+=newData.instance(i).weight() * newData.instance(i).classValue() * newData.instance(i).classValue();
  }
  if (m_Debug) {
    System.err.println("Sum of squared residuals " + "(predicting the mean) : " + sum);
  }
  m_NumIterationsPerformed=0;
  do {
    temp_sum=sum;
    m_Classifiers[m_NumIterationsPerformed].buildClassifier(newData);
    newData=residualReplace(newData,m_Classifiers[m_NumIterationsPerformed],true);
    sum=0;
    for (int i=0; i < newData.numInstances(); i++) {
      sum+=newData.instance(i).weight() * newData.instance(i).classValue() * newData.instance(i).classValue();
    }
    if (m_Debug) {
      System.err.println("Sum of squared residuals : " + sum);
    }
    m_NumIterationsPerformed++;
  }
 while (((temp_sum - sum) > Utils.SMALL) && (m_NumIterationsPerformed < m_Classifiers.length));
}
