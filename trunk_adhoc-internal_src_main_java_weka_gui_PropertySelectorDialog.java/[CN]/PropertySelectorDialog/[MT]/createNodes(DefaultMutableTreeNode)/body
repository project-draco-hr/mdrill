{
  PropertyNode pNode=(PropertyNode)localNode.getUserObject();
  Object localObject=pNode.value;
  PropertyDescriptor localProperties[];
  try {
    BeanInfo bi=Introspector.getBeanInfo(localObject.getClass());
    localProperties=bi.getPropertyDescriptors();
  }
 catch (  IntrospectionException ex) {
    System.err.println("PropertySelectorDialog: Couldn't introspect");
    return;
  }
  for (int i=0; i < localProperties.length; i++) {
    if (localProperties[i].isHidden() || localProperties[i].isExpert()) {
      continue;
    }
    String name=localProperties[i].getDisplayName();
    Class type=localProperties[i].getPropertyType();
    Method getter=localProperties[i].getReadMethod();
    Method setter=localProperties[i].getWriteMethod();
    Object value=null;
    if (getter == null || setter == null) {
      continue;
    }
    try {
      Object args[]={};
      value=getter.invoke(localObject,args);
      PropertyEditor editor=null;
      Class pec=localProperties[i].getPropertyEditorClass();
      if (pec != null) {
        try {
          editor=(PropertyEditor)pec.newInstance();
        }
 catch (        Exception ex) {
        }
      }
      if (editor == null) {
        editor=PropertyEditorManager.findEditor(type);
      }
      if ((editor == null) || (value == null)) {
        continue;
      }
    }
 catch (    InvocationTargetException ex) {
      System.err.println("Skipping property " + name + " ; exception on target: "+ ex.getTargetException());
      ex.getTargetException().printStackTrace();
      continue;
    }
catch (    Exception ex) {
      System.err.println("Skipping property " + name + " ; exception: "+ ex);
      ex.printStackTrace();
      continue;
    }
    DefaultMutableTreeNode child=new DefaultMutableTreeNode(new PropertyNode(value,localProperties[i],localObject.getClass()));
    localNode.add(child);
    createNodes(child);
  }
}
