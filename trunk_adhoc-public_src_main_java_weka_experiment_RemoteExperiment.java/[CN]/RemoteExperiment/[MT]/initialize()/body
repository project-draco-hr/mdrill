{
  if (m_baseExperiment == null) {
    throw new Exception("No base experiment specified!");
  }
  m_experimentAborted=false;
  m_finishedCount=0;
  m_failedCount=0;
  m_RunNumber=getRunLower();
  m_DatasetNumber=0;
  m_PropertyNumber=0;
  m_CurrentProperty=-1;
  m_CurrentInstances=null;
  m_Finished=false;
  if (m_remoteHosts.size() == 0) {
    throw new Exception("No hosts specified!");
  }
  m_remoteHostsStatus=new int[m_remoteHosts.size()];
  m_remoteHostFailureCounts=new int[m_remoteHosts.size()];
  m_remoteHostsQueue=new Queue();
  for (int i=0; i < m_remoteHosts.size(); i++) {
    m_remoteHostsQueue.push(new Integer(i));
  }
  m_subExpQueue=new Queue();
  int numExps;
  if (getSplitByDataSet()) {
    numExps=m_baseExperiment.getDatasets().size();
  }
 else {
    numExps=getRunUpper() - getRunLower() + 1;
  }
  m_subExperiments=new Experiment[numExps];
  m_subExpComplete=new int[numExps];
  SerializedObject so=new SerializedObject(m_baseExperiment);
  if (getSplitByDataSet()) {
    for (int i=0; i < m_baseExperiment.getDatasets().size(); i++) {
      m_subExperiments[i]=(Experiment)so.getObject();
      DefaultListModel temp=new DefaultListModel();
      temp.addElement(m_baseExperiment.getDatasets().elementAt(i));
      m_subExperiments[i].setDatasets(temp);
      m_subExpQueue.push(new Integer(i));
    }
  }
 else {
    for (int i=getRunLower(); i <= getRunUpper(); i++) {
      m_subExperiments[i - getRunLower()]=(Experiment)so.getObject();
      m_subExperiments[i - getRunLower()].setRunLower(i);
      m_subExperiments[i - getRunLower()].setRunUpper(i);
      m_subExpQueue.push(new Integer(i - getRunLower()));
    }
  }
}
