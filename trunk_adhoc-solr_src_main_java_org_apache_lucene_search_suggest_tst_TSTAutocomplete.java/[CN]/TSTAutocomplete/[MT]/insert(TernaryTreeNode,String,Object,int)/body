{
  if (s == null || s.length() <= x) {
    return currentNode;
  }
  if (currentNode == null) {
    TernaryTreeNode newNode=new TernaryTreeNode();
    newNode.splitchar=s.charAt(x);
    currentNode=newNode;
    if (x < s.length() - 1) {
      currentNode.eqKid=insert(currentNode.eqKid,s,val,x + 1);
    }
 else {
      currentNode.token=s;
      currentNode.val=val;
      return currentNode;
    }
  }
 else   if (currentNode.splitchar > s.charAt(x)) {
    currentNode.loKid=insert(currentNode.loKid,s,val,x);
  }
 else   if (currentNode.splitchar == s.charAt(x)) {
    if (x < s.length() - 1) {
      currentNode.eqKid=insert(currentNode.eqKid,s,val,x + 1);
    }
 else {
      currentNode.token=s;
      currentNode.val=val;
      return currentNode;
    }
  }
 else {
    currentNode.hiKid=insert(currentNode.hiKid,s,val,x);
  }
  return currentNode;
}
