{
  if (verbose()) {
    message("findMerges: " + infos.size() + " segments");
  }
  if (infos.size() == 0) {
    return null;
  }
  final Collection<SegmentInfo> merging=writer.get().getMergingSegments();
  final Collection<SegmentInfo> toBeMerged=new HashSet<SegmentInfo>();
  final List<SegmentInfo> infosSorted=new ArrayList<SegmentInfo>(infos.asList());
  Collections.sort(infosSorted,segmentByteSizeDescending);
  long totIndexBytes=0;
  long minSegmentBytes=Long.MAX_VALUE;
  for (  SegmentInfo info : infosSorted) {
    final long segBytes=size(info);
    if (verbose()) {
      String extra=merging.contains(info) ? " [merging]" : "";
      if (segBytes >= maxMergedSegmentBytes / 2.0) {
        extra+=" [skip: too large]";
      }
 else       if (segBytes < floorSegmentBytes) {
        extra+=" [floored]";
      }
      message("  seg=" + writer.get().segString(info) + " size="+ String.format("%.3f",segBytes / 1024 / 1024.)+ " MB"+ extra);
    }
    minSegmentBytes=Math.min(segBytes,minSegmentBytes);
    totIndexBytes+=segBytes;
  }
  int tooBigCount=0;
  while (tooBigCount < infosSorted.size() && size(infosSorted.get(tooBigCount)) >= maxMergedSegmentBytes / 2.0) {
    totIndexBytes-=size(infosSorted.get(tooBigCount));
    tooBigCount++;
  }
  minSegmentBytes=floorSize(minSegmentBytes);
  long levelSize=minSegmentBytes;
  long bytesLeft=totIndexBytes;
  double allowedSegCount=0;
  while (true) {
    final double segCountLevel=bytesLeft / (double)levelSize;
    if (segCountLevel < segsPerTier) {
      allowedSegCount+=Math.ceil(segCountLevel);
      break;
    }
    allowedSegCount+=segsPerTier;
    bytesLeft-=segsPerTier * levelSize;
    levelSize*=maxMergeAtOnce;
  }
  int allowedSegCountInt=(int)allowedSegCount;
  MergeSpecification spec=null;
  while (true) {
    long mergingBytes=0;
    final List<SegmentInfo> eligible=new ArrayList<SegmentInfo>();
    for (int idx=tooBigCount; idx < infosSorted.size(); idx++) {
      final SegmentInfo info=infosSorted.get(idx);
      if (merging.contains(info)) {
        mergingBytes+=info.sizeInBytes(true);
      }
 else       if (!toBeMerged.contains(info)) {
        eligible.add(info);
      }
    }
    final boolean maxMergeIsRunning=mergingBytes >= maxMergedSegmentBytes;
    message("  allowedSegmentCount=" + allowedSegCountInt + " vs count="+ infosSorted.size()+ " (eligible count="+ eligible.size()+ ") tooBigCount="+ tooBigCount);
    if (eligible.size() == 0) {
      return spec;
    }
    if (eligible.size() >= allowedSegCountInt) {
      MergeScore bestScore=null;
      List<SegmentInfo> best=null;
      boolean bestTooLarge=false;
      long bestMergeBytes=0;
      for (int startIdx=0; startIdx <= eligible.size() - maxMergeAtOnce; startIdx++) {
        long totAfterMergeBytes=0;
        final List<SegmentInfo> candidate=new ArrayList<SegmentInfo>();
        boolean hitTooLarge=false;
        for (int idx=startIdx; idx < eligible.size() && candidate.size() < maxMergeAtOnce; idx++) {
          final SegmentInfo info=eligible.get(idx);
          final long segBytes=size(info);
          if (totAfterMergeBytes + segBytes > maxMergedSegmentBytes) {
            hitTooLarge=true;
            continue;
          }
          candidate.add(info);
          totAfterMergeBytes+=segBytes;
        }
        final MergeScore score=score(candidate,hitTooLarge,mergingBytes);
        message("  maybe=" + writer.get().segString(candidate) + " score="+ score.getScore()+ " "+ score.getExplanation()+ " tooLarge="+ hitTooLarge+ " size="+ String.format("%.3f MB",totAfterMergeBytes / 1024. / 1024.));
        if ((bestScore == null || score.getScore() < bestScore.getScore()) && (!hitTooLarge || !maxMergeIsRunning)) {
          best=candidate;
          bestScore=score;
          bestTooLarge=hitTooLarge;
          bestMergeBytes=totAfterMergeBytes;
        }
      }
      if (best != null) {
        if (spec == null) {
          spec=new MergeSpecification();
        }
        final OneMerge merge=new OneMerge(best);
        spec.add(merge);
        for (        SegmentInfo info : merge.segments) {
          toBeMerged.add(info);
        }
        if (verbose()) {
          message("  add merge=" + writer.get().segString(merge.segments) + " size="+ String.format("%.3f MB",bestMergeBytes / 1024. / 1024.)+ " score="+ String.format("%.3f",bestScore.getScore())+ " "+ bestScore.getExplanation()+ (bestTooLarge ? " [max merge]" : ""));
        }
      }
 else {
        return spec;
      }
    }
 else {
      return spec;
    }
  }
}
