{
  RectangleInsets i1=new RectangleInsets(UnitType.ABSOLUTE,1.0,2.0,3.0,4.0);
  RectangleInsets i2=new RectangleInsets(UnitType.ABSOLUTE,1.0,2.0,3.0,4.0);
  assertTrue(i1.equals(i2));
  assertTrue(i2.equals(i1));
  i1=new RectangleInsets(UnitType.RELATIVE,1.0,2.0,3.0,4.0);
  assertFalse(i1.equals(i2));
  i2=new RectangleInsets(UnitType.RELATIVE,1.0,2.0,3.0,4.0);
  assertTrue(i1.equals(i2));
  i1=new RectangleInsets(UnitType.RELATIVE,0.0,2.0,3.0,4.0);
  assertFalse(i1.equals(i2));
  i2=new RectangleInsets(UnitType.RELATIVE,0.0,2.0,3.0,4.0);
  assertTrue(i1.equals(i2));
  i1=new RectangleInsets(UnitType.RELATIVE,0.0,0.0,3.0,4.0);
  assertFalse(i1.equals(i2));
  i2=new RectangleInsets(UnitType.RELATIVE,0.0,0.0,3.0,4.0);
  assertTrue(i1.equals(i2));
  i1=new RectangleInsets(UnitType.RELATIVE,0.0,0.0,0.0,4.0);
  assertFalse(i1.equals(i2));
  i2=new RectangleInsets(UnitType.RELATIVE,0.0,0.0,0.0,4.0);
  assertTrue(i1.equals(i2));
  i1=new RectangleInsets(UnitType.RELATIVE,0.0,0.0,0.0,0.0);
  assertFalse(i1.equals(i2));
  i2=new RectangleInsets(UnitType.RELATIVE,0.0,0.0,0.0,0.0);
  assertTrue(i1.equals(i2));
}
