{
  EstablishCache ec=new EstablishCache();
  ec.execute();
  while (!m_cacheEstablished) {
    try {
      Thread.sleep(1000);
    }
 catch (    InterruptedException e1) {
      e1.printStackTrace();
    }
  }
  getAllPackages();
  setLayout(new BorderLayout());
  ButtonGroup bGroup=new ButtonGroup();
  bGroup.add(m_installedBut);
  bGroup.add(m_availableBut);
  bGroup.add(m_allBut);
  JPanel butPanel=new JPanel();
  butPanel.setLayout(new BorderLayout());
  JPanel packageDisplayP=new JPanel();
  packageDisplayP.setLayout(new BorderLayout());
  JPanel packageDHolder=new JPanel();
  packageDHolder.setLayout(new FlowLayout());
  packageDHolder.add(m_installedBut);
  packageDHolder.add(m_availableBut);
  packageDHolder.add(m_allBut);
  packageDisplayP.add(packageDHolder,BorderLayout.SOUTH);
  packageDisplayP.add(m_refreshCacheBut,BorderLayout.NORTH);
  JPanel officialHolder=new JPanel();
  officialHolder.setLayout(new BorderLayout());
  officialHolder.setBorder(BorderFactory.createTitledBorder("Official"));
  officialHolder.add(packageDisplayP,BorderLayout.WEST);
  butPanel.add(officialHolder,BorderLayout.WEST);
  m_refreshCacheBut.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      RefreshCache r=new RefreshCache();
      r.execute();
    }
  }
);
  JPanel unofficialHolder=new JPanel();
  unofficialHolder.setLayout(new BorderLayout());
  unofficialHolder.setBorder(BorderFactory.createTitledBorder("Unofficial"));
  unofficialHolder.add(m_unofficialBut,BorderLayout.NORTH);
  butPanel.add(unofficialHolder,BorderLayout.EAST);
  JPanel installP=new JPanel();
  JPanel buttP=new JPanel();
  buttP.setLayout(new GridLayout(1,2));
  installP.setLayout(new BorderLayout());
  buttP.add(m_installBut);
  buttP.add(m_uninstallBut);
  m_installBut.setEnabled(false);
  m_uninstallBut.setEnabled(false);
  installP.add(buttP,BorderLayout.NORTH);
  installP.add(m_forceBut,BorderLayout.SOUTH);
  m_forceBut.setEnabled(false);
  officialHolder.add(installP,BorderLayout.EAST);
  m_installBut.setToolTipText("Install the selected official package(s) " + "from the list");
  m_uninstallBut.setToolTipText("Uninstall the selected package(s) from the list");
  m_unofficialBut.setToolTipText("Install an unofficial package from a file or URL");
  m_unofficialChooser.resetFileFilters();
  m_unofficialChooser.addFileFilter(new ExtensionFileFilter(".zip","Package archive file"));
  m_unofficialBut.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      if (m_unofficialFrame == null) {
        final JFrame jf=new JFrame("Unofficial package install");
        jf.addWindowListener(new WindowAdapter(){
          public void windowClosing(          WindowEvent e){
            jf.dispose();
            m_unofficialBut.setEnabled(true);
            m_unofficialFrame=null;
          }
        }
);
        jf.setLayout(new BorderLayout());
        JButton okBut=new JButton("OK");
        JButton cancelBut=new JButton("Cancel");
        JPanel butHolder=new JPanel();
        butHolder.setLayout(new GridLayout(1,2));
        butHolder.add(okBut);
        butHolder.add(cancelBut);
        jf.add(m_unofficialChooser,BorderLayout.CENTER);
        jf.add(butHolder,BorderLayout.SOUTH);
        jf.pack();
        jf.setVisible(true);
        m_unofficialFrame=jf;
        m_unofficialBut.setEnabled(false);
        cancelBut.addActionListener(new ActionListener(){
          public void actionPerformed(          ActionEvent e){
            if (m_unofficialFrame != null) {
              jf.dispose();
              m_unofficialBut.setEnabled(true);
              m_unofficialFrame=null;
            }
          }
        }
);
        okBut.addActionListener(new ActionListener(){
          public void actionPerformed(          ActionEvent e){
            String target=m_unofficialChooser.getText();
            UnofficialInstallTask t=new UnofficialInstallTask();
            t.setTargetToInstall(target);
            t.execute();
            if (m_unofficialFrame != null) {
              jf.dispose();
              m_unofficialBut.setEnabled(true);
              m_unofficialFrame=null;
            }
          }
        }
);
      }
    }
  }
);
  m_installBut.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      int[] selectedRows=m_table.getSelectedRows();
      if (selectedRows.length > 0) {
        List<String> packageNames=new ArrayList<String>();
        List<Object> versions=new ArrayList<Object>();
        StringBuffer confirmList=new StringBuffer();
        for (int i=0; i < selectedRows.length; i++) {
          String packageName=m_table.getValueAt(selectedRows[i],getColumnIndex(PACKAGE_COLUMN)).toString();
          packageNames.add(packageName);
          Object packageVersion=m_table.getValueAt(selectedRows[i],getColumnIndex(REPOSITORY_COLUMN));
          versions.add(packageVersion);
          confirmList.append(packageName + " " + packageVersion.toString()+ "\n");
        }
        JTextArea jt=new JTextArea("The following packages will be " + "installed/upgraded:\n\n" + confirmList.toString(),10,40);
        int result=JOptionPane.showConfirmDialog(PackageManager.this,new JScrollPane(jt),"Weka Package Manager",JOptionPane.YES_NO_OPTION);
        if (result == JOptionPane.YES_OPTION) {
          pleaseCloseAppWindowsPopUp();
          InstallTask task=new InstallTask();
          task.setPackages(packageNames);
          task.setVersions(versions);
          task.execute();
        }
      }
    }
  }
);
  m_uninstallBut.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      int[] selectedRows=m_table.getSelectedRows();
      if (selectedRows.length > 0) {
        List<String> packageNames=new ArrayList<String>();
        StringBuffer confirmList=new StringBuffer();
        for (int i=0; i < selectedRows.length; i++) {
          String packageName=m_table.getValueAt(selectedRows[i],getColumnIndex(PACKAGE_COLUMN)).toString();
          Package p=null;
          try {
            p=WekaPackageManager.getRepositoryPackageInfo(packageName);
          }
 catch (          Exception e1) {
            try {
              p=WekaPackageManager.getInstalledPackageInfo(packageName);
            }
 catch (            Exception e2) {
              e2.printStackTrace();
              continue;
            }
          }
          if (p.isInstalled()) {
            packageNames.add(packageName);
            confirmList.append(packageName + "\n");
          }
        }
        if (packageNames.size() > 0) {
          JTextArea jt=new JTextArea("The following packages will be " + "uninstalled:\n" + confirmList.toString(),10,40);
          int result=JOptionPane.showConfirmDialog(PackageManager.this,new JScrollPane(jt),"Weka Package Manager",JOptionPane.YES_NO_OPTION);
          if (result == JOptionPane.YES_OPTION) {
            pleaseCloseAppWindowsPopUp();
            UninstallTask task=new UninstallTask();
            task.setPackages(packageNames);
            task.execute();
          }
        }
      }
    }
  }
);
  JPanel progressP=new JPanel();
  progressP.setLayout(new BorderLayout());
  progressP.setBorder(BorderFactory.createTitledBorder("Install/Uninstall/Refresh progress"));
  progressP.add(m_progress,BorderLayout.NORTH);
  progressP.add(m_detailLabel,BorderLayout.CENTER);
  butPanel.add(progressP,BorderLayout.CENTER);
  JPanel topPanel=new JPanel();
  topPanel.setLayout(new BorderLayout());
  topPanel.add(butPanel,BorderLayout.NORTH);
  m_allBut.setSelected(true);
  m_allBut.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      m_table.clearSelection();
      updateTable();
      updateInstallUninstallButtonEnablement();
    }
  }
);
  m_availableBut.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      m_table.clearSelection();
      updateTable();
      updateInstallUninstallButtonEnablement();
    }
  }
);
  m_installedBut.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      m_table.clearSelection();
      updateTable();
      updateInstallUninstallButtonEnablement();
    }
  }
);
  m_model=new DefaultTableModel(new String[]{PACKAGE_COLUMN,CATEGORY_COLUMN,INSTALLED_COLUMN,REPOSITORY_COLUMN,LOADED_COLUMN},15){
    private static final long serialVersionUID=-2886328542412471039L;
    public boolean isCellEditable(    int row,    int col){
      if (col != 3) {
        return false;
      }
 else {
        return true;
      }
    }
  }
;
  m_table.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
  m_table.setColumnSelectionAllowed(false);
  m_table.setPreferredScrollableViewportSize(new Dimension(550,200));
  m_table.setModel(m_model);
  if (System.getProperty("os.name").contains("Mac")) {
    m_table.setShowVerticalLines(true);
  }
 else {
    m_table.setShowVerticalLines(false);
  }
  m_table.setShowHorizontalLines(false);
  m_table.getColumn("Repository version").setCellEditor(new ComboBoxEditor());
  m_table.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
    public void valueChanged(    ListSelectionEvent e){
      if (!e.getValueIsAdjusting() && !m_cacheRefreshInProgress) {
        ListSelectionModel lm=(ListSelectionModel)e.getSource();
        boolean infoDisplayed=false;
        for (int i=e.getFirstIndex(); i <= e.getLastIndex(); i++) {
          if (lm.isSelectedIndex(i)) {
            if (!infoDisplayed) {
              displayPackageInfo(i);
              infoDisplayed=true;
              break;
            }
          }
        }
        updateInstallUninstallButtonEnablement();
      }
    }
  }
);
  JTableHeader header=m_table.getTableHeader();
  header.addMouseListener(new MouseAdapter(){
    public void mouseClicked(    MouseEvent evt){
      TableColumnModel colModel=m_table.getColumnModel();
      int vColIndex=colModel.getColumnIndexAtX(evt.getX());
      if (vColIndex == -1 || vColIndex > 1) {
        return;
      }
      if (vColIndex == m_sortColumn) {
        m_reverseSort=!m_reverseSort;
      }
 else {
        m_reverseSort=false;
      }
      m_sortColumn=vColIndex;
      updateTable();
    }
  }
);
  topPanel.add(new JScrollPane(m_table),BorderLayout.CENTER);
  try {
    String initialPage=initialPage();
    m_infoPane=new JEditorPane("text/html",initialPage);
  }
 catch (  Exception ex) {
    m_infoPane=new JEditorPane();
  }
  m_infoPane.setEditable(false);
  m_infoPane.addHyperlinkListener(new HyperlinkListener(){
    public void hyperlinkUpdate(    HyperlinkEvent event){
      if (event.getEventType() == HyperlinkEvent.EventType.ACTIVATED) {
        try {
          if (event.getURL().toExternalForm().endsWith(".zip") || event.getURL().toExternalForm().endsWith(".jar")) {
          }
 else {
            if (m_browserHistory.size() == 0) {
              m_backB.setEnabled(true);
            }
            m_browserHistory.add(m_infoPane.getPage());
            m_infoPane.setPage(event.getURL());
          }
        }
 catch (        IOException ioe) {
        }
      }
    }
  }
);
  JPanel browserP=new JPanel();
  browserP.setLayout(new BorderLayout());
  m_backB=new JButton(new ImageIcon(loadImage("weka/gui/images/back.gif")));
  m_backB.setToolTipText("Back");
  m_backB.setEnabled(false);
  m_backB.setBorder(BorderFactory.createEmptyBorder(0,4,0,4));
  m_homeB=new JButton(new ImageIcon(loadImage("weka/gui/images/home.gif")));
  m_homeB.setBorder(BorderFactory.createEmptyBorder(0,4,0,4));
  m_homeB.setToolTipText("Home");
  m_browserTools=new JToolBar();
  m_browserTools.add(m_backB);
  m_browserTools.add(m_homeB);
  m_browserTools.setFloatable(false);
  m_newPackagesAvailableL=new JLabel(new ImageIcon(loadImage("weka/gui/images/information.gif")));
  Thread homePageThread=new HomePageThread();
  homePageThread.setPriority(Thread.MIN_PRIORITY);
  homePageThread.start();
  m_backB.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      URL previous=m_browserHistory.removeLast();
      try {
        m_infoPane.setPage(previous);
        if (m_browserHistory.size() == 0) {
          m_backB.setEnabled(false);
        }
      }
 catch (      IOException ex) {
      }
    }
  }
);
  m_homeB.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      try {
        URL back=m_infoPane.getPage();
        if (back != null) {
          m_browserHistory.add(back);
        }
        String initialPage=initialPage();
        m_infoPane.setContentType("text/html");
        m_infoPane.setText(initialPage);
        HomePageThread hp=new HomePageThread();
        hp.setPriority(Thread.MIN_PRIORITY);
        hp.start();
      }
 catch (      Exception ex) {
      }
    }
  }
);
  browserP.add(m_browserTools,BorderLayout.NORTH);
  browserP.add(new JScrollPane(m_infoPane),BorderLayout.CENTER);
  m_splitP=new JSplitPane(JSplitPane.VERTICAL_SPLIT,topPanel,browserP);
  m_splitP.setOneTouchExpandable(true);
  add(m_splitP,BorderLayout.CENTER);
  updateTable();
  CheckForNewPackages cp=new CheckForNewPackages();
  cp.execute();
}
