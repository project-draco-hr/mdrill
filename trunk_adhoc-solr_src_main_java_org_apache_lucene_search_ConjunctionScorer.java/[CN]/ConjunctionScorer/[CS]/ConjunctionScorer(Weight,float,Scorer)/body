{
  super(weight);
  this.scorers=scorers;
  this.coord=coord;
  for (int i=0; i < scorers.length; i++) {
    if (scorers[i].nextDoc() == NO_MORE_DOCS) {
      lastDoc=NO_MORE_DOCS;
      return;
    }
  }
  ArrayUtil.mergeSort(scorers,new Comparator<Scorer>(){
    public int compare(    Scorer o1,    Scorer o2){
      return o1.docID() - o2.docID();
    }
  }
);
  if (doNext() == NO_MORE_DOCS) {
    lastDoc=NO_MORE_DOCS;
    return;
  }
  int end=scorers.length - 1;
  int max=end >> 1;
  for (int i=0; i < max; i++) {
    Scorer tmp=scorers[i];
    int idx=end - i - 1;
    scorers[i]=scorers[idx];
    scorers[idx]=tmp;
  }
}
