{
  CommonsHttpSolrServer server=WebServiceParams.makeServer(shard);
  SolrQuery query=WebServiceParams.makeSolrQuery(shard);
  JSONObject jsonObj=new JSONObject();
  if (groupbyFields.size() == 0 && joins.length > 0) {
    if (commonStatMap.size() > 0 || distStatFieldMap.size() > 0) {
      groupbyFields.add("higoempty_groupby_forjoin_l");
    }
    showFields.add("higoempty_groupby_forjoin_l");
  }
  try {
    if (groupbyFields.size() > 0) {
      int minstart=start;
      int maxEend=rows;
      if (sortType.isStatNum) {
        minstart=start - 100;
        if (minstart < 0) {
          minstart=0;
        }
        maxEend=Math.min(rows + 100,UniqConfig.defaultCrossMaxLimit());
      }
      WebServiceParams.setGroupByQuery(query,fqList,groupbyFields,minstart,maxEend,distStatFieldMap,commonStatMap,sortType,joins,null);
      LOG.info("queryinfo:" + shard.urlMain + "/select/?"+ query.toString());
      QueryResponse qr=server.query(query,SolrRequest.METHOD.POST);
      LinkedHashMap<String,Count> groupValueCache=WebServiceParams.setGroupByResult(jsonObj,qr,groupbyFields,showFields,joins,null);
      if (jsonObj.getLong("total") > (UniqConfig.defaultCrossMaxLimit() - 10) && groupValueCache.size() <= UniqConfig.defaultCrossMaxLimit() && jsonObj.getString("code").equals("1")) {
        try {
          query=WebServiceParams.makeSolrQuery(shard);
          WebServiceParams.setGroupByQuery(query,fqList,groupbyFields,0,Math.min(groupValueCache.size() * 10,UniqConfig.defaultCrossMaxLimit()),distStatFieldMap,commonStatMap,sortType,joins,groupValueCache);
          LOG.info("queryinfo_pre:" + shard.urlMain + "/select/?"+ query.toString());
          QueryResponse qr2=server.query(query,SolrRequest.METHOD.POST);
          WebServiceParams.setGroupByResult(jsonObj,qr2,groupbyFields,showFields,joins,groupValueCache);
        }
 catch (        Exception e2) {
          LOG.error("queryinfo_pre_exception",e2);
        }
      }
      if (jsonObj.getString("code").equals("1") && sortType.isStatNum) {
        JSONArray jsonArray=jsonObj.getJSONObject("data").getJSONArray("docs");
        ArrayList<JSONObject> results=new ArrayList<JSONObject>();
        boolean iscontains=true;
        for (int i=0; i < jsonArray.length(); i++) {
          JSONObject obj=jsonArray.getJSONObject(i);
          if (!obj.has(sortType.sortRow)) {
            iscontains=false;
          }
          results.add(obj);
        }
        final boolean isdesc=sortType.order.toLowerCase().equals("true");
        if (sortType.isStatNum && iscontains && jsonObj.getLong("total") > (UniqConfig.defaultCrossMaxLimit() - 10)) {
          Collections.sort(results,new Comparator<JSONObject>(){
            @Override public int compare(            JSONObject o1,            JSONObject o2){
              int rtn=0;
              try {
                rtn=Double.compare(ParseDouble(o1.get(sortType.sortRow)),ParseDouble(o2.get(sortType.sortRow)));
              }
 catch (              JSONException e) {
              }
              if (isdesc) {
                rtn*=-1;
              }
              return rtn;
            }
          }
);
        }
        JSONArray rtnarr=new JSONArray();
        int actualstart=start - minstart;
        int actualend=rows + actualstart;
        for (int i=actualstart; i < results.size() && i < actualend; i++) {
          rtnarr.put(results.get(i));
        }
        jsonObj.getJSONObject("data").put("docs",rtnarr);
      }
    }
 else     if (commonStatMap.size() > 0 || distStatFieldMap.size() > 0) {
      ArrayList<String> groupFieldsEmpty=WebServiceParams.groupFields("higoempty_groupby_l");
      WebServiceParams.setGroupByQuery(query,fqList,groupFieldsEmpty,start,rows,distStatFieldMap,commonStatMap,sortType,joins,null);
      LOG.info("queryinfo:" + shard.urlMain + "/select/?"+ query.toString());
      QueryResponse qr=server.query(query,SolrRequest.METHOD.POST);
      WebServiceParams.setGroupByResult(jsonObj,qr,groupbyFields,showFields,joins,null);
    }
 else {
      WebServiceParams.setDetailByQuery(query,fqList,showFields,start,rows,sortType,joins);
      LOG.info("queryinfo:" + shard.urlMain + "/select/?"+ query.toString());
      QueryResponse qr=server.query(query,SolrRequest.METHOD.POST);
      WebServiceParams.setDetailResult(jsonObj,qr,showFields,joins);
    }
  }
 catch (  Exception e) {
    SolrInfoList infolist=GetShards.getSolrInfoList(part.name);
    infolist.run();
    LOG.error("higocall,exceptin",e);
    jsonObj.put("code","0");
    jsonObj.put("message",WebServiceParams.errorToString(e));
  }
  jsonObj.put("____debugurl",shard.urlMain + "/select/?" + query.toString());
  if (callback != null && callback.length() > 0) {
    return callback + "(" + jsonObj.toString()+ ")";
  }
 else {
    return jsonObj.toString();
  }
}
