{
  if (localip == null) {
    localip=java.net.InetAddress.getLocalHost().getHostAddress();
  }
  TablePartion part=GetPartions.partion(projectName);
  MdrillPartionsInterface drillpart=MdrillPartions.INSTANCE(part.parttype);
  ShardsList[] cores=coresfortest;
  if (cores == null) {
    cores=GetShards.get(part.name,false);
    for (int i=0; i < 10; i++) {
      if (cores == null || cores.length <= 0) {
        if (i > 5) {
          throw new Exception("core.size<=0");
        }
        SolrInfoList infolist=GetShards.getSolrInfoList(part.name);
        infolist.run();
        cores=GetShards.get(part.name,false);
        LOG.info("core.size=" + cores.length);
        Thread.sleep(1000);
      }
 else {
        break;
      }
    }
  }
  for (  SolrInputDocument doc : docs) {
    doc.setField("mdrill_uuid",uuid());
    if (!doc.containsKey("mdrillPartion")) {
      String partion=drillpart.InsertPartion(doc);
      doc.setField("mdrillPartion",partion);
    }
    if (tp != null) {
      if (tp.equals(FlushType.sync)) {
        doc.setField("mdrillCmd","sync");
      }
 else       if (tp.equals(FlushType.syncHdfs)) {
        doc.setField("mdrillCmd","syncHdfs");
      }
 else {
        doc.setField("mdrillCmd","add");
      }
    }
  }
  long index=InsertIndex.getAndIncrement();
  if (index > 100000000) {
    index=0l;
    InsertIndex.set(index);
  }
  JSONObject rtn=new JSONObject();
  if (tp == null || tp.equals(FlushType.buffer)) {
    ShardsList write=null;
    if (islocal) {
      ArrayList<ShardsList> list=new ArrayList<GetShards.ShardsList>(cores.length);
      for (      ShardsList shard : cores) {
        if (shard.containsIp(localip)) {
          list.add(shard);
        }
      }
      if (list.size() > 0) {
        write=list.get((int)(index % list.size()));
      }
    }
    if (write == null) {
      write=cores[(int)(index % cores.length)];
    }
    for (    String s : write.list) {
      String url="http://" + s + "/solr/"+ projectName;
      CommonsHttpSolrServer server=new CommonsHttpSolrServer(url);
      server.setConnectionManagerTimeout(60000l);
      server.setSoTimeout(60000);
      server.setConnectionTimeout(10000);
      server.setDefaultMaxConnectionsPerHost(100);
      server.setMaxTotalConnections(100);
      server.setFollowRedirects(false);
      server.setAllowCompression(false);
      server.setMaxRetries(4);
      server.setRequestWriter(new BinaryRequestWriter());
      UpdateRequest req=new UpdateRequest();
      req.add(docs);
      UpdateResponse rsp=req.process(server);
      rtn.put(s,rsp.toString());
    }
  }
 else   if (tp.equals(FlushType.sync) || tp.equals(FlushType.syncHdfs)) {
    for (    ShardsList write : cores) {
      for (      String s : write.list) {
        String url="http://" + s + "/solr/"+ projectName;
        CommonsHttpSolrServer server=new CommonsHttpSolrServer(url);
        server.setConnectionManagerTimeout(60000l);
        server.setSoTimeout(60000);
        server.setConnectionTimeout(10000);
        server.setDefaultMaxConnectionsPerHost(100);
        server.setMaxTotalConnections(100);
        server.setFollowRedirects(false);
        server.setAllowCompression(false);
        server.setMaxRetries(4);
        server.setRequestWriter(new BinaryRequestWriter());
        UpdateRequest req=new UpdateRequest();
        req.add(docs);
        UpdateResponse rsp=req.process(server);
        rtn.put(s,rsp.toString());
      }
    }
  }
  rtn.put("code","1");
  rtn.put("message","success");
  return rtn.toString();
}
