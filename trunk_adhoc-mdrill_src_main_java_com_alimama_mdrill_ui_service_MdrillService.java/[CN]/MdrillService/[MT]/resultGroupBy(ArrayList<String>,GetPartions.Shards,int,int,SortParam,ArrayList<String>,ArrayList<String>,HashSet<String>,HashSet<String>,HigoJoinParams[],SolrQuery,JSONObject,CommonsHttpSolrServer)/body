{
  int extandRows=100;
  if (distStatFieldMap.size() > 0) {
    extandRows=50;
  }
  int minstart=start;
  int maxEend=rows;
  if (sortType.isStatNum) {
    minstart=start - extandRows;
    if (minstart < 0) {
      minstart=0;
    }
    maxEend=Math.min(rows + extandRows,UniqConfig.defaultCrossMaxLimit());
  }
  WebServiceParams.setGroupByQuery(query,fqList,groupbyFields,minstart,maxEend,distStatFieldMap,commonStatMap,sortType,joins,null);
  LOG.info("queryinfo:" + shard.urlMain + "/select/?"+ cutString(query.toString()));
  query.set("mdrill.isRestat",false);
  QueryResponse qr=WebServiceParams.fetchGroupCrcQr(query,server);
  LinkedHashMap<String,GroupbyRow> groupValueCache=WebServiceParams.setGroupByResult(query,jsonObj,qr,groupbyFields,showFields,joins,null);
  boolean isUseRefetch=jsonObj.getLong("total") > (UniqConfig.defaultCrossMaxLimit() - 10) && groupValueCache.size() <= UniqConfig.defaultCrossMaxLimit() && jsonObj.getString("code").equals("1");
  if ((distStatFieldMap.size() > 0) || isUseRefetch) {
    try {
      query=WebServiceParams.makeSolrQuery(shard);
      WebServiceParams.setGroupByQuery(query,fqList,groupbyFields,0,Math.min(groupValueCache.size() * 10,UniqConfig.defaultCrossMaxLimit()),distStatFieldMap,commonStatMap,sortType,joins,groupValueCache);
      LOG.info("queryinfo_pre:" + shard.urlMain + "/select/?"+ cutString(query.toString()));
      query.set("mdrill.isRestat",true);
      QueryResponse qr2=server.query(query,SolrRequest.METHOD.POST);
      WebServiceParams.setGroupByResult(query,jsonObj,qr2,groupbyFields,showFields,joins,groupValueCache);
    }
 catch (    Exception e2) {
      LOG.error("queryinfo_pre_exception",e2);
    }
  }
  if (jsonObj.getString("code").equals("1") && sortType.isStatNum) {
    JSONArray jsonArray=jsonObj.getJSONObject("data").getJSONArray("docs");
    ArrayList<JSONObject> results=new ArrayList<JSONObject>();
    boolean iscontains=true;
    for (int i=0; i < jsonArray.length(); i++) {
      JSONObject obj=jsonArray.getJSONObject(i);
      if (!obj.has(sortType.sortRow)) {
        iscontains=false;
      }
      results.add(obj);
    }
    final boolean isdesc=sortType.order.toLowerCase().equals("true");
    if (sortType.isStatNum && iscontains && jsonObj.getLong("total") > (UniqConfig.defaultCrossMaxLimit() - 10)) {
      Collections.sort(results,new Comparator<JSONObject>(){
        @Override public int compare(        JSONObject o1,        JSONObject o2){
          int rtn=0;
          try {
            rtn=Double.compare(ParseDouble(o1.get(sortType.sortRow)),ParseDouble(o2.get(sortType.sortRow)));
          }
 catch (          JSONException e) {
          }
          if (isdesc) {
            rtn*=-1;
          }
          return rtn;
        }
      }
);
    }
    JSONArray rtnarr=new JSONArray();
    int actualstart=start - minstart;
    int actualend=rows + actualstart;
    for (int i=actualstart; i < results.size() && i < actualend; i++) {
      rtnarr.put(results.get(i));
    }
    jsonObj.getJSONObject("data").put("docs",rtnarr);
  }
}
