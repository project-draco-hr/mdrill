{
  final String selectedName=name;
  JPopupMenu resultListMenu=new JPopupMenu();
  JMenuItem visMainBuffer=new JMenuItem("View in main window");
  if (selectedName != null) {
    visMainBuffer.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        m_History.setSingle(selectedName);
      }
    }
);
  }
 else {
    visMainBuffer.setEnabled(false);
  }
  resultListMenu.add(visMainBuffer);
  JMenuItem visSepBuffer=new JMenuItem("View in separate window");
  if (selectedName != null) {
    visSepBuffer.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        m_History.openFrame(selectedName);
      }
    }
);
  }
 else {
    visSepBuffer.setEnabled(false);
  }
  resultListMenu.add(visSepBuffer);
  JMenuItem saveOutput=new JMenuItem("Save result buffer");
  if (selectedName != null) {
    saveOutput.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        saveBuffer(selectedName);
      }
    }
);
  }
 else {
    saveOutput.setEnabled(false);
  }
  resultListMenu.add(saveOutput);
  JMenuItem deleteOutput=new JMenuItem("Delete result buffer");
  if (selectedName != null) {
    deleteOutput.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        m_History.removeResult(selectedName);
      }
    }
);
  }
 else {
    deleteOutput.setEnabled(false);
  }
  resultListMenu.add(deleteOutput);
  Vector<Object> visVect=null;
  if (selectedName != null) {
    visVect=(Vector)m_History.getNamedObject(selectedName);
  }
  JMenu visPlugins=new JMenu("Plugins");
  boolean availablePlugins=false;
  if (visVect != null) {
    for (    Object o : visVect) {
      if (o instanceof AssociationRules) {
        Vector pluginsVector=GenericObjectEditor.getClassnames(AssociationRuleVisualizePlugin.class.getName());
        for (int i=0; i < pluginsVector.size(); i++) {
          String className=(String)(pluginsVector.elementAt(i));
          try {
            AssociationRuleVisualizePlugin plugin=(AssociationRuleVisualizePlugin)Class.forName(className).newInstance();
            if (plugin == null) {
              continue;
            }
            availablePlugins=true;
            JMenuItem pluginMenuItem=plugin.getVisualizeMenuItem((AssociationRules)o,selectedName);
            if (pluginMenuItem != null) {
              visPlugins.add(pluginMenuItem);
            }
          }
 catch (          Exception ex) {
          }
        }
      }
 else       if (o instanceof String) {
        Vector pluginsVector=GenericObjectEditor.getClassnames(TreeVisualizePlugin.class.getName());
        for (int i=0; i < pluginsVector.size(); i++) {
          String className=(String)(pluginsVector.elementAt(i));
          try {
            TreeVisualizePlugin plugin=(TreeVisualizePlugin)Class.forName(className).newInstance();
            if (plugin == null)             continue;
            availablePlugins=true;
            JMenuItem pluginMenuItem=plugin.getVisualizeMenuItem((String)o,selectedName);
            if (pluginMenuItem != null) {
              visPlugins.add(pluginMenuItem);
            }
          }
 catch (          Exception e) {
          }
        }
      }
    }
  }
  if (availablePlugins) {
    resultListMenu.add(visPlugins);
  }
  resultListMenu.show(m_History.getList(),x,y);
}
