{
  print("clusterer uses instance weights");
  printAttributeSummary(nominalPredictor,numericPredictor,stringPredictor,datePredictor,relationalPredictor,multiInstance);
  print("...");
  int numTrain=2 * getNumInstances(), missingLevel=0;
  boolean predictorMissing=false;
  boolean[] result=new boolean[2];
  Instances train=null;
  Clusterer[] clusterers=null;
  ClusterEvaluation evaluationB=null;
  ClusterEvaluation evaluationI=null;
  boolean built=false;
  boolean evalFail=false;
  try {
    train=makeTestDataset(42,numTrain,nominalPredictor ? getNumNominal() + 1 : 0,numericPredictor ? getNumNumeric() + 1 : 0,stringPredictor ? getNumString() : 0,datePredictor ? getNumDate() : 0,relationalPredictor ? getNumRelational() : 0,multiInstance);
    if (nominalPredictor && !multiInstance)     train.deleteAttributeAt(0);
    if (missingLevel > 0)     addMissing(train,missingLevel,predictorMissing);
    clusterers=AbstractClusterer.makeCopies(getClusterer(),2);
    evaluationB=new ClusterEvaluation();
    evaluationI=new ClusterEvaluation();
    clusterers[0].buildClusterer(train);
    evaluationB.setClusterer(clusterers[0]);
  }
 catch (  Exception ex) {
    throw new Error("Error setting up for tests: " + ex.getMessage());
  }
  try {
    for (int i=0; i < train.numInstances(); i++) {
      train.instance(i).setWeight(0);
    }
    Random random=new Random(1);
    for (int i=0; i < train.numInstances() / 2; i++) {
      int inst=Math.abs(random.nextInt()) % train.numInstances();
      int weight=Math.abs(random.nextInt()) % 10 + 1;
      train.instance(inst).setWeight(weight);
    }
    clusterers[1].buildClusterer(train);
    built=true;
    evaluationI.setClusterer(clusterers[1]);
    if (evaluationB.equals(evaluationI)) {
      evalFail=true;
      throw new Exception("evalFail");
    }
    println("yes");
    result[0]=true;
  }
 catch (  Exception ex) {
    println("no");
    result[0]=false;
    if (m_Debug) {
      println("\n=== Full Report ===");
      if (evalFail) {
        println("Results don't differ between non-weighted and " + "weighted instance models.");
        println("Here are the results:\n");
        println("\nboth methods\n");
        println(evaluationB.clusterResultsToString());
      }
 else {
        print("Problem during");
        if (built) {
          print(" testing");
        }
 else {
          print(" training");
        }
        println(": " + ex.getMessage() + "\n");
      }
      println("Here is the dataset:\n");
      println("=== Train Dataset ===\n" + train.toString() + "\n");
      println("=== Train Weights ===\n");
      for (int i=0; i < train.numInstances(); i++) {
        println(" " + (i + 1) + "    "+ train.instance(i).weight());
      }
    }
  }
  return result;
}
