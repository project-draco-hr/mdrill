{
  LOG.info("####mergerRam####" + this.extaLog());
  DirectoryInfo m1=expire;
  if (m1 == null) {
    m1=RamDirector.remove(RAM_KEY);
  }
  if (m1 == null) {
    return;
  }
  try {
    DirectoryInfo dinfo=null;
    Pair lastPair=null;
    if (this.diskDirector.size() > UniqConfig.RealTimeRam2localFactory()) {
      ArrayList<Pair> list=this.getSortList();
      lastPair=list.get(0);
      dinfo=lastPair.value;
    }
    DirectoryInfo d=new DirectoryInfo();
    String path=this.mallocPath();
    d.d=FSDirectory.open(new File(path));
    d.tp=DirectoryInfo.DirTpe.file;
    this.merger(m1,dinfo,d);
    String lastkey="";
    if (lastPair != null) {
      this.maybeDelayClear(diskDirector.remove(lastPair.key));
      lastkey=String.valueOf(lastPair.key);
    }
    diskDirector.put(path,d);
    LOG.info("####mergerRam####put =>" + String.valueOf(path) + ",remove:"+ String.valueOf(lastkey));
  }
 catch (  Throwable e) {
    LOG.error("####mergerRam_error####" + this.extaLog(),e);
    this.RamDirector.put(RAM_KEY,m1);
  }
 finally {
    this.remakeLinkFs();
    this.purger();
  }
}
