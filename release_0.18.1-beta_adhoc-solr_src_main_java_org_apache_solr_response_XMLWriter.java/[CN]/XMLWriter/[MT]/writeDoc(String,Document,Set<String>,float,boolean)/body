{
  startTag("doc",name,false);
  incLevel();
  if (includeScore) {
    writeFloat("score",score);
  }
  tlst.clear();
  for (  Object obj : doc.getFields()) {
    Fieldable ff=(Fieldable)obj;
    if (returnFields != null && !returnFields.contains(ff.name())) {
      continue;
    }
    tlst.add(ff);
  }
  Collections.sort(tlst,fieldnameComparator);
  int sz=tlst.size();
  int fidx1=0, fidx2=0;
  while (fidx1 < sz) {
    Fieldable f1=(Fieldable)tlst.get(fidx1);
    String fname=f1.name();
    fidx2=fidx1 + 1;
    while (fidx2 < sz && fname.equals(((Fieldable)tlst.get(fidx2)).name())) {
      fidx2++;
    }
    SchemaField sf=schema.getFieldOrNull(fname);
    if (sf == null) {
      sf=new SchemaField(fname,new TextField());
    }
    if (fidx1 + 1 == fidx2) {
      if (version >= 2100 && sf.multiValued()) {
        startTag("arr",fname,false);
        doIndent=false;
        sf.write(this,null,f1);
        writer.write("</arr>");
        doIndent=defaultIndent;
      }
 else {
        sf.write(this,f1.name(),f1);
      }
    }
 else {
      startTag("arr",fname,false);
      incLevel();
      doIndent=false;
      int cnt=0;
      for (int i=fidx1; i < fidx2; i++) {
        if (defaultIndent && ++cnt == 4) {
          indent();
          cnt=0;
        }
        sf.write(this,null,(Fieldable)tlst.get(i));
      }
      decLevel();
      writer.write("</arr>");
      doIndent=defaultIndent;
    }
    fidx1=fidx2;
  }
  decLevel();
  if (doIndent)   indent();
  writer.write("</doc>");
}
