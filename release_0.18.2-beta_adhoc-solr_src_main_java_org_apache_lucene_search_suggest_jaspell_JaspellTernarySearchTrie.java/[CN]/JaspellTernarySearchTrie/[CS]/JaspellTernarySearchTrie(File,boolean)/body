{
  this();
  BufferedReader in;
  if (compression)   in=new BufferedReader(new InputStreamReader(new GZIPInputStream(new FileInputStream(file))));
 else   in=new BufferedReader(new InputStreamReader((new FileInputStream(file))));
  String word;
  int pos;
  Float occur, one=new Float(1);
  int numWords=0;
  while ((word=in.readLine()) != null) {
    numWords++;
    pos=word.indexOf("\t");
    occur=one;
    if (pos != -1) {
      occur=Float.parseFloat(word.substring(pos + 1).trim());
      word=word.substring(0,pos);
    }
    String key=word.toLowerCase();
    if (rootNode == null) {
      rootNode=new TSTNode(key.charAt(0),null);
    }
    TSTNode node=null;
    if (key.length() > 0 && rootNode != null) {
      TSTNode currentNode=rootNode;
      int charIndex=0;
      while (true) {
        if (currentNode == null)         break;
        int charComp=compareCharsAlphabetically(key.charAt(charIndex),currentNode.splitchar);
        if (charComp == 0) {
          charIndex++;
          if (charIndex == key.length()) {
            node=currentNode;
            break;
          }
          currentNode=currentNode.relatives[TSTNode.EQKID];
        }
 else         if (charComp < 0) {
          currentNode=currentNode.relatives[TSTNode.LOKID];
        }
 else {
          currentNode=currentNode.relatives[TSTNode.HIKID];
        }
      }
      Float occur2=null;
      if (node != null)       occur2=((Float)(node.data));
      if (occur2 != null) {
        occur+=occur2.floatValue();
      }
      currentNode=getOrCreateNode(word.trim().toLowerCase());
      currentNode.data=occur;
    }
  }
  in.close();
}
