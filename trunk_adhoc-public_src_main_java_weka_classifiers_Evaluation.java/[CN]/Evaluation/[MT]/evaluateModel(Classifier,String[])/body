{
  Instances train=null, tempTrain, test=null, template=null;
  int seed=1, folds=10, classIndex=-1;
  boolean noCrossValidation=false;
  String trainFileName, testFileName, sourceClass, classIndexString, seedString, foldsString, objectInputFileName, objectOutputFileName;
  boolean noOutput=false, trainStatistics=true, printMargins=false, printComplexityStatistics=false, printGraph=false, classStatistics=false, printSource=false;
  StringBuffer text=new StringBuffer();
  DataSource trainSource=null, testSource=null;
  ObjectInputStream objectInputStream=null;
  BufferedInputStream xmlInputStream=null;
  CostMatrix costMatrix=null;
  StringBuffer schemeOptionsText=null;
  long trainTimeStart=0, trainTimeElapsed=0, testTimeStart=0, testTimeElapsed=0;
  String xml="";
  String[] optionsTmp=null;
  Classifier classifierBackup;
  Classifier classifierClassifications=null;
  int actualClassIndex=-1;
  String splitPercentageString="";
  double splitPercentage=-1;
  boolean preserveOrder=false;
  boolean trainSetPresent=false;
  boolean testSetPresent=false;
  boolean discardPredictions=false;
  String thresholdFile;
  String thresholdLabel;
  StringBuffer predsBuff=null;
  AbstractOutput classificationOutput=null;
  if (Utils.getFlag("h",options) || Utils.getFlag("help",options)) {
    boolean globalInfo=Utils.getFlag("synopsis",options) || Utils.getFlag("info",options);
    throw new Exception("\nHelp requested." + makeOptionString(classifier,globalInfo));
  }
  try {
    xml=Utils.getOption("xml",options);
    if (!xml.equals(""))     options=new XMLOptions(xml).toArray();
    optionsTmp=new String[options.length];
    for (int i=0; i < options.length; i++)     optionsTmp[i]=options[i];
    String tmpO=Utils.getOption('l',optionsTmp);
    if (tmpO.endsWith(".xml")) {
      boolean success=false;
      try {
        PMMLModel pmmlModel=PMMLFactory.getPMMLModel(tmpO);
        if (pmmlModel instanceof PMMLClassifier) {
          classifier=((PMMLClassifier)pmmlModel);
          success=true;
        }
      }
 catch (      IllegalArgumentException ex) {
        success=false;
      }
      if (!success) {
        XMLClassifier xmlserial=new XMLClassifier();
        OptionHandler cl=(OptionHandler)xmlserial.read(Utils.getOption('l',options));
        optionsTmp=new String[options.length + cl.getOptions().length];
        System.arraycopy(cl.getOptions(),0,optionsTmp,0,cl.getOptions().length);
        System.arraycopy(options,0,optionsTmp,cl.getOptions().length,options.length);
        options=optionsTmp;
      }
    }
    noCrossValidation=Utils.getFlag("no-cv",options);
    classIndexString=Utils.getOption('c',options);
    if (classIndexString.length() != 0) {
      if (classIndexString.equals("first"))       classIndex=1;
 else       if (classIndexString.equals("last"))       classIndex=-1;
 else       classIndex=Integer.parseInt(classIndexString);
    }
    trainFileName=Utils.getOption('t',options);
    objectInputFileName=Utils.getOption('l',options);
    objectOutputFileName=Utils.getOption('d',options);
    testFileName=Utils.getOption('T',options);
    foldsString=Utils.getOption('x',options);
    if (foldsString.length() != 0) {
      folds=Integer.parseInt(foldsString);
    }
    seedString=Utils.getOption('s',options);
    if (seedString.length() != 0) {
      seed=Integer.parseInt(seedString);
    }
    if (trainFileName.length() == 0) {
      if (objectInputFileName.length() == 0) {
        throw new Exception("No training file and no object input file given.");
      }
      if (testFileName.length() == 0) {
        throw new Exception("No training file and no test file given.");
      }
    }
 else     if ((objectInputFileName.length() != 0) && ((!(classifier instanceof UpdateableClassifier)) || (testFileName.length() == 0))) {
      throw new Exception("Classifier not incremental, or no " + "test file provided: can't " + "use both train and model file.");
    }
    try {
      if (trainFileName.length() != 0) {
        trainSetPresent=true;
        trainSource=new DataSource(trainFileName);
      }
      if (testFileName.length() != 0) {
        testSetPresent=true;
        testSource=new DataSource(testFileName);
      }
      if (objectInputFileName.length() != 0) {
        if (objectInputFileName.endsWith(".xml")) {
          objectInputStream=null;
          xmlInputStream=null;
        }
 else {
          InputStream is=new FileInputStream(objectInputFileName);
          if (objectInputFileName.endsWith(".gz")) {
            is=new GZIPInputStream(is);
          }
          if (!(objectInputFileName.endsWith(".koml") && KOML.isPresent())) {
            objectInputStream=new ObjectInputStream(is);
            xmlInputStream=null;
          }
 else {
            objectInputStream=null;
            xmlInputStream=new BufferedInputStream(is);
          }
        }
      }
    }
 catch (    Exception e) {
      throw new Exception("Can't open file " + e.getMessage() + '.');
    }
    if (testSetPresent) {
      template=test=testSource.getStructure();
      if (classIndex != -1) {
        test.setClassIndex(classIndex - 1);
      }
 else {
        if ((test.classIndex() == -1) || (classIndexString.length() != 0))         test.setClassIndex(test.numAttributes() - 1);
      }
      actualClassIndex=test.classIndex();
    }
 else {
      splitPercentageString=Utils.getOption("split-percentage",options);
      if (splitPercentageString.length() != 0) {
        if (foldsString.length() != 0)         throw new Exception("Percentage split cannot be used in conjunction with " + "cross-validation ('-x').");
        splitPercentage=Double.parseDouble(splitPercentageString);
        if ((splitPercentage <= 0) || (splitPercentage >= 100))         throw new Exception("Percentage split value needs be >0 and <100.");
      }
 else {
        splitPercentage=-1;
      }
      preserveOrder=Utils.getFlag("preserve-order",options);
      if (preserveOrder) {
        if (splitPercentage == -1)         throw new Exception("Percentage split ('-percentage-split') is missing.");
      }
      if (splitPercentage > 0) {
        testSetPresent=true;
        Instances tmpInst=trainSource.getDataSet(actualClassIndex);
        if (!preserveOrder)         tmpInst.randomize(new Random(seed));
        int trainSize=(int)Math.round(tmpInst.numInstances() * splitPercentage / 100);
        int testSize=tmpInst.numInstances() - trainSize;
        Instances trainInst=new Instances(tmpInst,0,trainSize);
        Instances testInst=new Instances(tmpInst,trainSize,testSize);
        trainSource=new DataSource(trainInst);
        testSource=new DataSource(testInst);
        template=test=testSource.getStructure();
        if (classIndex != -1) {
          test.setClassIndex(classIndex - 1);
        }
 else {
          if ((test.classIndex() == -1) || (classIndexString.length() != 0))           test.setClassIndex(test.numAttributes() - 1);
        }
        actualClassIndex=test.classIndex();
      }
    }
    if (trainSetPresent) {
      template=train=trainSource.getStructure();
      if (classIndex != -1) {
        train.setClassIndex(classIndex - 1);
      }
 else {
        if ((train.classIndex() == -1) || (classIndexString.length() != 0))         train.setClassIndex(train.numAttributes() - 1);
      }
      actualClassIndex=train.classIndex();
      if (!(classifier instanceof weka.classifiers.misc.InputMappedClassifier)) {
        if ((testSetPresent) && !test.equalHeaders(train)) {
          throw new IllegalArgumentException("Train and test file not compatible!\n" + test.equalHeadersMsg(train));
        }
      }
    }
    if (template == null) {
      throw new Exception("No actual dataset provided to use as template");
    }
    costMatrix=handleCostOption(Utils.getOption('m',options),template.numClasses());
    classStatistics=Utils.getFlag('i',options);
    noOutput=Utils.getFlag('o',options);
    trainStatistics=!Utils.getFlag('v',options);
    printComplexityStatistics=Utils.getFlag('k',options);
    printMargins=Utils.getFlag('r',options);
    printGraph=Utils.getFlag('g',options);
    sourceClass=Utils.getOption('z',options);
    printSource=(sourceClass.length() != 0);
    thresholdFile=Utils.getOption("threshold-file",options);
    thresholdLabel=Utils.getOption("threshold-label",options);
    String classifications=Utils.getOption("classifications",options);
    String classificationsOld=Utils.getOption("p",options);
    if (classifications.length() > 0) {
      noOutput=true;
      classificationOutput=AbstractOutput.fromCommandline(classifications);
      if (classificationOutput == null)       throw new Exception("Failed to instantiate class for classification output: " + classifications);
      classificationOutput.setHeader(template);
    }
 else     if (classificationsOld.length() > 0) {
      noOutput=true;
      classificationOutput=new PlainText();
      classificationOutput.setHeader(template);
      if (!classificationsOld.equals("0"))       classificationOutput.setAttributes(classificationsOld);
      classificationOutput.setOutputDistribution(Utils.getFlag("distribution",options));
    }
 else {
      if (Utils.getFlag("distribution",options))       throw new Exception("Cannot print distribution without '-p' option!");
    }
    discardPredictions=Utils.getFlag("no-predictions",options);
    if (discardPredictions && (classificationOutput != null))     throw new Exception("Cannot discard predictions ('-no-predictions') and output predictions at the same time ('-classifications/-p')!");
    if ((!trainSetPresent) && (printComplexityStatistics))     throw new Exception("Cannot print complexity statistics ('-k') without training file ('-t')!");
    if (objectInputFileName.length() != 0) {
      Utils.checkForRemainingOptions(options);
    }
 else {
      if (classifier instanceof OptionHandler) {
        for (int i=0; i < options.length; i++) {
          if (options[i].length() != 0) {
            if (schemeOptionsText == null) {
              schemeOptionsText=new StringBuffer();
            }
            if (options[i].indexOf(' ') != -1) {
              schemeOptionsText.append('"' + options[i] + "\" ");
            }
 else {
              schemeOptionsText.append(options[i] + " ");
            }
          }
        }
        ((OptionHandler)classifier).setOptions(options);
      }
    }
    Utils.checkForRemainingOptions(options);
  }
 catch (  Exception e) {
    throw new Exception("\nWeka exception: " + e.getMessage() + makeOptionString(classifier,false));
  }
  if (objectInputFileName.length() != 0) {
    if (objectInputStream != null) {
      classifier=(Classifier)objectInputStream.readObject();
      Instances savedStructure=null;
      try {
        savedStructure=(Instances)objectInputStream.readObject();
      }
 catch (      Exception ex) {
      }
      if (savedStructure != null) {
        if (!template.equalHeaders(savedStructure)) {
          throw new Exception("training and test set are not compatible\n" + template.equalHeadersMsg(savedStructure));
        }
      }
      objectInputStream.close();
    }
 else     if (xmlInputStream != null) {
      classifier=(Classifier)KOML.read(xmlInputStream);
      xmlInputStream.close();
    }
  }
  Evaluation trainingEvaluation=new Evaluation(new Instances(template,0),costMatrix);
  Evaluation testingEvaluation=new Evaluation(new Instances(template,0),costMatrix);
  if (classifier instanceof weka.classifiers.misc.InputMappedClassifier) {
    Instances mappedClassifierHeader=((weka.classifiers.misc.InputMappedClassifier)classifier).getModelHeader(new Instances(template,0));
    trainingEvaluation=new Evaluation(new Instances(mappedClassifierHeader,0),costMatrix);
    testingEvaluation=new Evaluation(new Instances(mappedClassifierHeader,0),costMatrix);
  }
  trainingEvaluation.setDiscardPredictions(discardPredictions);
  testingEvaluation.setDiscardPredictions(discardPredictions);
  if (!trainSetPresent)   testingEvaluation.useNoPriors();
  classifierBackup=AbstractClassifier.makeCopy(classifier);
  if ((classifier instanceof UpdateableClassifier) && (testSetPresent || noCrossValidation) && (costMatrix == null)&& (trainSetPresent)) {
    trainingEvaluation.setPriors(train);
    testingEvaluation.setPriors(train);
    trainTimeStart=System.currentTimeMillis();
    if (objectInputFileName.length() == 0) {
      classifier.buildClassifier(train);
    }
    Instance trainInst;
    while (trainSource.hasMoreElements(train)) {
      trainInst=trainSource.nextElement(train);
      trainingEvaluation.updatePriors(trainInst);
      testingEvaluation.updatePriors(trainInst);
      ((UpdateableClassifier)classifier).updateClassifier(trainInst);
    }
    trainTimeElapsed=System.currentTimeMillis() - trainTimeStart;
  }
 else   if (objectInputFileName.length() == 0) {
    tempTrain=trainSource.getDataSet(actualClassIndex);
    if (classifier instanceof weka.classifiers.misc.InputMappedClassifier && !trainingEvaluation.getHeader().equalHeaders(tempTrain)) {
      Instances mappedClassifierDataset=((weka.classifiers.misc.InputMappedClassifier)classifier).getModelHeader(new Instances(template,0));
      for (int zz=0; zz < tempTrain.numInstances(); zz++) {
        Instance mapped=((weka.classifiers.misc.InputMappedClassifier)classifier).constructMappedInstance(tempTrain.instance(zz));
        mappedClassifierDataset.add(mapped);
      }
      tempTrain=mappedClassifierDataset;
    }
    trainingEvaluation.setPriors(tempTrain);
    testingEvaluation.setPriors(tempTrain);
    trainTimeStart=System.currentTimeMillis();
    classifier.buildClassifier(tempTrain);
    trainTimeElapsed=System.currentTimeMillis() - trainTimeStart;
  }
  if (classificationOutput != null) {
    classifierClassifications=AbstractClassifier.makeCopy(classifier);
    if (classifier instanceof weka.classifiers.misc.InputMappedClassifier) {
      classificationOutput.setHeader(trainingEvaluation.getHeader());
    }
  }
  if (objectOutputFileName.length() != 0) {
    OutputStream os=new FileOutputStream(objectOutputFileName);
    if (!(objectOutputFileName.endsWith(".xml") || (objectOutputFileName.endsWith(".koml") && KOML.isPresent()))) {
      if (objectOutputFileName.endsWith(".gz")) {
        os=new GZIPOutputStream(os);
      }
      ObjectOutputStream objectOutputStream=new ObjectOutputStream(os);
      objectOutputStream.writeObject(classifier);
      if (template != null) {
        objectOutputStream.writeObject(template);
      }
      objectOutputStream.flush();
      objectOutputStream.close();
    }
 else {
      BufferedOutputStream xmlOutputStream=new BufferedOutputStream(os);
      if (objectOutputFileName.endsWith(".xml")) {
        XMLSerialization xmlSerial=new XMLClassifier();
        xmlSerial.write(xmlOutputStream,classifier);
      }
 else       if (objectOutputFileName.endsWith(".koml")) {
        KOML.write(xmlOutputStream,classifier);
      }
      xmlOutputStream.close();
    }
  }
  if ((classifier instanceof Drawable) && (printGraph)) {
    return ((Drawable)classifier).graph();
  }
  if ((classifier instanceof Sourcable) && (printSource)) {
    return wekaStaticWrapper((Sourcable)classifier,sourceClass);
  }
  if (!(noOutput || printMargins)) {
    if (classifier instanceof OptionHandler) {
      if (schemeOptionsText != null) {
        text.append("\nOptions: " + schemeOptionsText);
        text.append("\n");
      }
    }
    text.append("\n" + classifier.toString() + "\n");
  }
  if (!printMargins && (costMatrix != null)) {
    text.append("\n=== Evaluation Cost Matrix ===\n\n");
    text.append(costMatrix.toString());
  }
  if (classificationOutput != null) {
    DataSource source=testSource;
    predsBuff=new StringBuffer();
    classificationOutput.setBuffer(predsBuff);
    if (source == null && noCrossValidation) {
      source=trainSource;
      predsBuff.append("\n=== Predictions on training data ===\n\n");
    }
 else {
      predsBuff.append("\n=== Predictions on test data ===\n\n");
    }
    if (source != null)     classificationOutput.print(classifierClassifications,source);
  }
  if ((trainStatistics) && (trainSetPresent)) {
    if ((classifier instanceof UpdateableClassifier) && (testSetPresent) && (costMatrix == null)) {
      trainSource.reset();
      train=trainSource.getStructure(actualClassIndex);
      testTimeStart=System.currentTimeMillis();
      Instance trainInst;
      while (trainSource.hasMoreElements(train)) {
        trainInst=trainSource.nextElement(train);
        trainingEvaluation.evaluateModelOnce((Classifier)classifier,trainInst);
      }
      testTimeElapsed=System.currentTimeMillis() - testTimeStart;
    }
 else {
      testTimeStart=System.currentTimeMillis();
      trainingEvaluation.evaluateModel(classifier,trainSource.getDataSet(actualClassIndex));
      testTimeElapsed=System.currentTimeMillis() - testTimeStart;
    }
    if (printMargins) {
      return trainingEvaluation.toCumulativeMarginDistributionString();
    }
 else {
      if (classificationOutput == null) {
        text.append("\nTime taken to build model: " + Utils.doubleToString(trainTimeElapsed / 1000.0,2) + " seconds");
        if (splitPercentage > 0)         text.append("\nTime taken to test model on training split: ");
 else         text.append("\nTime taken to test model on training data: ");
        text.append(Utils.doubleToString(testTimeElapsed / 1000.0,2) + " seconds");
        if (splitPercentage > 0)         text.append(trainingEvaluation.toSummaryString("\n\n=== Error on training" + " split ===\n",printComplexityStatistics));
 else         text.append(trainingEvaluation.toSummaryString("\n\n=== Error on training" + " data ===\n",printComplexityStatistics));
        if (template.classAttribute().isNominal()) {
          if (classStatistics) {
            text.append("\n\n" + trainingEvaluation.toClassDetailsString());
          }
          if (!noCrossValidation)           text.append("\n\n" + trainingEvaluation.toMatrixString());
        }
      }
    }
  }
  if (testSource != null) {
    testSource.reset();
    test=testSource.getStructure(test.classIndex());
    Instance testInst;
    while (testSource.hasMoreElements(test)) {
      testInst=testSource.nextElement(test);
      testingEvaluation.evaluateModelOnceAndRecordPrediction((Classifier)classifier,testInst);
    }
    if (splitPercentage > 0) {
      if (classificationOutput == null) {
        text.append("\n\n" + testingEvaluation.toSummaryString("=== Error on test split ===\n",printComplexityStatistics));
      }
    }
 else {
      if (classificationOutput == null) {
        text.append("\n\n" + testingEvaluation.toSummaryString("=== Error on test data ===\n",printComplexityStatistics));
      }
    }
  }
 else   if (trainSource != null) {
    if (!noCrossValidation) {
      Random random=new Random(seed);
      classifier=AbstractClassifier.makeCopy(classifierBackup);
      if (classificationOutput == null) {
        testingEvaluation.crossValidateModel(classifier,trainSource.getDataSet(actualClassIndex),folds,random);
        if (template.classAttribute().isNumeric()) {
          text.append("\n\n\n" + testingEvaluation.toSummaryString("=== Cross-validation ===\n",printComplexityStatistics));
        }
 else {
          text.append("\n\n\n" + testingEvaluation.toSummaryString("=== Stratified " + "cross-validation ===\n",printComplexityStatistics));
        }
      }
 else {
        predsBuff=new StringBuffer();
        classificationOutput.setBuffer(predsBuff);
        predsBuff.append("\n=== Predictions under cross-validation ===\n\n");
        testingEvaluation.crossValidateModel(classifier,trainSource.getDataSet(actualClassIndex),folds,random,classificationOutput);
      }
    }
  }
  if (template.classAttribute().isNominal()) {
    if (classStatistics && !noCrossValidation && (classificationOutput == null)) {
      text.append("\n\n" + testingEvaluation.toClassDetailsString());
    }
    if (!noCrossValidation && (classificationOutput == null))     text.append("\n\n" + testingEvaluation.toMatrixString());
  }
  if (predsBuff != null) {
    text.append("\n" + predsBuff);
  }
  if ((thresholdFile.length() != 0) && template.classAttribute().isNominal()) {
    int labelIndex=0;
    if (thresholdLabel.length() != 0)     labelIndex=template.classAttribute().indexOfValue(thresholdLabel);
    if (labelIndex == -1)     throw new IllegalArgumentException("Class label '" + thresholdLabel + "' is unknown!");
    ThresholdCurve tc=new ThresholdCurve();
    Instances result=tc.getCurve(testingEvaluation.predictions(),labelIndex);
    DataSink.write(thresholdFile,result);
  }
  return text.toString();
}
