{
  StringBuffer result=new StringBuffer();
  String staticClassifier=classifier.toSource(className);
  result.append("// Generated with Weka " + Version.VERSION + "\n");
  result.append("//\n");
  result.append("// This code is public domain and comes with no warranty.\n");
  result.append("//\n");
  result.append("// Timestamp: " + new Date() + "\n");
  result.append("\n");
  result.append("package weka.classifiers;\n");
  result.append("\n");
  result.append("import weka.core.Attribute;\n");
  result.append("import weka.core.Capabilities;\n");
  result.append("import weka.core.Capabilities.Capability;\n");
  result.append("import weka.core.Instance;\n");
  result.append("import weka.core.Instances;\n");
  result.append("import weka.core.RevisionUtils;\n");
  result.append("import weka.classifiers.Classifier;\nimport weka.classifiers.AbstractClassifier;\n");
  result.append("\n");
  result.append("public class WekaWrapper\n");
  result.append("  extends AbstractClassifier {\n");
  result.append("\n");
  result.append("  /**\n");
  result.append("   * Returns only the toString() method.\n");
  result.append("   *\n");
  result.append("   * @return a string describing the classifier\n");
  result.append("   */\n");
  result.append("  public String globalInfo() {\n");
  result.append("    return toString();\n");
  result.append("  }\n");
  result.append("\n");
  result.append("  /**\n");
  result.append("   * Returns the capabilities of this classifier.\n");
  result.append("   *\n");
  result.append("   * @return the capabilities\n");
  result.append("   */\n");
  result.append("  public Capabilities getCapabilities() {\n");
  result.append(((Classifier)classifier).getCapabilities().toSource("result",4));
  result.append("    return result;\n");
  result.append("  }\n");
  result.append("\n");
  result.append("  /**\n");
  result.append("   * only checks the data against its capabilities.\n");
  result.append("   *\n");
  result.append("   * @param i the training data\n");
  result.append("   */\n");
  result.append("  public void buildClassifier(Instances i) throws Exception {\n");
  result.append("    // can classifier handle the data?\n");
  result.append("    getCapabilities().testWithFail(i);\n");
  result.append("  }\n");
  result.append("\n");
  result.append("  /**\n");
  result.append("   * Classifies the given instance.\n");
  result.append("   *\n");
  result.append("   * @param i the instance to classify\n");
  result.append("   * @return the classification result\n");
  result.append("   */\n");
  result.append("  public double classifyInstance(Instance i) throws Exception {\n");
  result.append("    Object[] s = new Object[i.numAttributes()];\n");
  result.append("    \n");
  result.append("    for (int j = 0; j < s.length; j++) {\n");
  result.append("      if (!i.isMissing(j)) {\n");
  result.append("        if (i.attribute(j).isNominal())\n");
  result.append("          s[j] = new String(i.stringValue(j));\n");
  result.append("        else if (i.attribute(j).isNumeric())\n");
  result.append("          s[j] = new Double(i.value(j));\n");
  result.append("      }\n");
  result.append("    }\n");
  result.append("    \n");
  result.append("    // set class value to missing\n");
  result.append("    s[i.classIndex()] = null;\n");
  result.append("    \n");
  result.append("    return " + className + ".classify(s);\n");
  result.append("  }\n");
  result.append("\n");
  result.append("  /**\n");
  result.append("   * Returns the revision string.\n");
  result.append("   * \n");
  result.append("   * @return        the revision\n");
  result.append("   */\n");
  result.append("  public String getRevision() {\n");
  result.append("    return RevisionUtils.extract(\"1.0\");\n");
  result.append("  }\n");
  result.append("\n");
  result.append("  /**\n");
  result.append("   * Returns only the classnames and what classifier it is based on.\n");
  result.append("   *\n");
  result.append("   * @return a short description\n");
  result.append("   */\n");
  result.append("  public String toString() {\n");
  result.append("    return \"Auto-generated classifier wrapper, based on " + classifier.getClass().getName() + " (generated with Weka "+ Version.VERSION+ ").\\n"+ "\" + this.getClass().getName() + \"/"+ className+ "\";\n");
  result.append("  }\n");
  result.append("\n");
  result.append("  /**\n");
  result.append("   * Runs the classfier from commandline.\n");
  result.append("   *\n");
  result.append("   * @param args the commandline arguments\n");
  result.append("   */\n");
  result.append("  public static void main(String args[]) {\n");
  result.append("    runClassifier(new WekaWrapper(), args);\n");
  result.append("  }\n");
  result.append("}\n");
  result.append("\n");
  result.append(staticClassifier);
  return result.toString();
}
