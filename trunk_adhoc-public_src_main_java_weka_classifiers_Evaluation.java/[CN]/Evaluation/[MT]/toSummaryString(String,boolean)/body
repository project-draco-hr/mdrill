{
  StringBuffer text=new StringBuffer();
  if (printComplexityStatistics && m_NoPriors) {
    printComplexityStatistics=false;
    System.err.println("Priors disabled, cannot print complexity statistics!");
  }
  text.append(title + "\n");
  try {
    if (m_WithClass > 0) {
      if (m_ClassIsNominal) {
        text.append("Correctly Classified Instances     ");
        text.append(Utils.doubleToString(correct(),12,4) + "     " + Utils.doubleToString(pctCorrect(),12,4)+ " %\n");
        text.append("Incorrectly Classified Instances   ");
        text.append(Utils.doubleToString(incorrect(),12,4) + "     " + Utils.doubleToString(pctIncorrect(),12,4)+ " %\n");
        text.append("Kappa statistic                    ");
        text.append(Utils.doubleToString(kappa(),12,4) + "\n");
        if (m_CostMatrix != null) {
          text.append("Total Cost                         ");
          text.append(Utils.doubleToString(totalCost(),12,4) + "\n");
          text.append("Average Cost                       ");
          text.append(Utils.doubleToString(avgCost(),12,4) + "\n");
        }
        if (printComplexityStatistics) {
          text.append("K&B Relative Info Score            ");
          text.append(Utils.doubleToString(KBRelativeInformation(),12,4) + " %\n");
          text.append("K&B Information Score              ");
          text.append(Utils.doubleToString(KBInformation(),12,4) + " bits");
          text.append(Utils.doubleToString(KBMeanInformation(),12,4) + " bits/instance\n");
        }
      }
 else {
        text.append("Correlation coefficient            ");
        text.append(Utils.doubleToString(correlationCoefficient(),12,4) + "\n");
      }
      if (printComplexityStatistics && m_ComplexityStatisticsAvailable) {
        text.append("Class complexity | order 0         ");
        text.append(Utils.doubleToString(SFPriorEntropy(),12,4) + " bits");
        text.append(Utils.doubleToString(SFMeanPriorEntropy(),12,4) + " bits/instance\n");
        text.append("Class complexity | scheme          ");
        text.append(Utils.doubleToString(SFSchemeEntropy(),12,4) + " bits");
        text.append(Utils.doubleToString(SFMeanSchemeEntropy(),12,4) + " bits/instance\n");
        text.append("Complexity improvement     (Sf)    ");
        text.append(Utils.doubleToString(SFEntropyGain(),12,4) + " bits");
        text.append(Utils.doubleToString(SFMeanEntropyGain(),12,4) + " bits/instance\n");
      }
      text.append("Mean absolute error                ");
      text.append(Utils.doubleToString(meanAbsoluteError(),12,4) + "\n");
      text.append("Root mean squared error            ");
      text.append(Utils.doubleToString(rootMeanSquaredError(),12,4) + "\n");
      if (!m_NoPriors) {
        text.append("Relative absolute error            ");
        text.append(Utils.doubleToString(relativeAbsoluteError(),12,4) + " %\n");
        text.append("Root relative squared error        ");
        text.append(Utils.doubleToString(rootRelativeSquaredError(),12,4) + " %\n");
      }
      if (m_CoverageStatisticsAvailable) {
        text.append("Coverage of cases (" + Utils.doubleToString(m_ConfLevel,4,2) + " level)     ");
        text.append(Utils.doubleToString(coverageOfTestCasesByPredictedRegions(),12,4) + " %\n");
        if (!m_NoPriors) {
          text.append("Mean rel. region size (" + Utils.doubleToString(m_ConfLevel,4,2) + " level) ");
          text.append(Utils.doubleToString(sizeOfPredictedRegions(),12,4) + " %\n");
        }
      }
    }
    if (Utils.gr(unclassified(),0)) {
      text.append("UnClassified Instances             ");
      text.append(Utils.doubleToString(unclassified(),12,4) + "     " + Utils.doubleToString(pctUnclassified(),12,4)+ " %\n");
    }
    text.append("Total Number of Instances          ");
    text.append(Utils.doubleToString(m_WithClass,12,4) + "\n");
    if (m_MissingClass > 0) {
      text.append("Ignored Class Unknown Instances            ");
      text.append(Utils.doubleToString(m_MissingClass,12,4) + "\n");
    }
  }
 catch (  Exception ex) {
    System.err.println("Arggh - Must be a bug in Evaluation class");
  }
  return text.toString();
}
