{
  StringBuffer optionsText=new StringBuffer("");
  optionsText.append("\n\nGeneral options:\n\n");
  optionsText.append("-h or -help\n");
  optionsText.append("\tOutput help information.\n");
  optionsText.append("-synopsis or -info\n");
  optionsText.append("\tOutput synopsis for classifier (use in conjunction " + " with -h)\n");
  optionsText.append("-t <name of training file>\n");
  optionsText.append("\tSets training file.\n");
  optionsText.append("-T <name of test file>\n");
  optionsText.append("\tSets test file. If missing, a cross-validation will be performed\n");
  optionsText.append("\ton the training data.\n");
  optionsText.append("-c <class index>\n");
  optionsText.append("\tSets index of class attribute (default: last).\n");
  optionsText.append("-x <number of folds>\n");
  optionsText.append("\tSets number of folds for cross-validation (default: 10).\n");
  optionsText.append("-no-cv\n");
  optionsText.append("\tDo not perform any cross validation.\n");
  optionsText.append("-split-percentage <percentage>\n");
  optionsText.append("\tSets the percentage for the train/test set split, e.g., 66.\n");
  optionsText.append("-preserve-order\n");
  optionsText.append("\tPreserves the order in the percentage split.\n");
  optionsText.append("-s <random number seed>\n");
  optionsText.append("\tSets random number seed for cross-validation or percentage split\n");
  optionsText.append("\t(default: 1).\n");
  optionsText.append("-m <name of file with cost matrix>\n");
  optionsText.append("\tSets file with cost matrix.\n");
  optionsText.append("-l <name of input file>\n");
  optionsText.append("\tSets model input file. In case the filename ends with '.xml',\n");
  optionsText.append("\ta PMML file is loaded or, if that fails, options are loaded\n");
  optionsText.append("\tfrom the XML file.\n");
  optionsText.append("-d <name of output file>\n");
  optionsText.append("\tSets model output file. In case the filename ends with '.xml',\n");
  optionsText.append("\tonly the options are saved to the XML file, not the model.\n");
  optionsText.append("-v\n");
  optionsText.append("\tOutputs no statistics for training data.\n");
  optionsText.append("-o\n");
  optionsText.append("\tOutputs statistics only, not the classifier.\n");
  optionsText.append("-i\n");
  optionsText.append("\tOutputs detailed information-retrieval");
  optionsText.append(" statistics for each class.\n");
  optionsText.append("-k\n");
  optionsText.append("\tOutputs information-theoretic statistics.\n");
  optionsText.append("-classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"\n");
  optionsText.append("\tUses the specified class for generating the classification output.\n");
  optionsText.append("\tE.g.: " + PlainText.class.getName() + "\n");
  optionsText.append("-p range\n");
  optionsText.append("\tOutputs predictions for test instances (or the train instances if\n");
  optionsText.append("\tno test instances provided and -no-cv is used), along with the \n");
  optionsText.append("\tattributes in the specified range (and nothing else). \n");
  optionsText.append("\tUse '-p 0' if no attributes are desired.\n");
  optionsText.append("\tDeprecated: use \"-classifications ...\" instead.\n");
  optionsText.append("-distribution\n");
  optionsText.append("\tOutputs the distribution instead of only the prediction\n");
  optionsText.append("\tin conjunction with the '-p' option (only nominal classes).\n");
  optionsText.append("\tDeprecated: use \"-classifications ...\" instead.\n");
  optionsText.append("-r\n");
  optionsText.append("\tOnly outputs cumulative margin distribution.\n");
  if (classifier instanceof Sourcable) {
    optionsText.append("-z <class name>\n");
    optionsText.append("\tOnly outputs the source representation" + " of the classifier,\n\tgiving it the supplied" + " name.\n");
  }
  if (classifier instanceof Drawable) {
    optionsText.append("-g\n");
    optionsText.append("\tOnly outputs the graph representation" + " of the classifier.\n");
  }
  optionsText.append("-xml filename | xml-string\n");
  optionsText.append("\tRetrieves the options from the XML-data instead of the " + "command line.\n");
  optionsText.append("-threshold-file <file>\n");
  optionsText.append("\tThe file to save the threshold data to.\n" + "\tThe format is determined by the extensions, e.g., '.arff' for ARFF \n" + "\tformat or '.csv' for CSV.\n");
  optionsText.append("-threshold-label <label>\n");
  optionsText.append("\tThe class label to determine the threshold data for\n" + "\t(default is the first label)\n");
  if (classifier instanceof OptionHandler) {
    optionsText.append("\nOptions specific to " + classifier.getClass().getName() + ":\n\n");
    Enumeration enu=((OptionHandler)classifier).listOptions();
    while (enu.hasMoreElements()) {
      Option option=(Option)enu.nextElement();
      optionsText.append(option.synopsis() + '\n');
      optionsText.append(option.description() + "\n");
    }
  }
  if (globalInfo) {
    try {
      String gi=getGlobalInfo(classifier);
      optionsText.append(gi);
    }
 catch (    Exception ex) {
    }
  }
  return optionsText.toString();
}
