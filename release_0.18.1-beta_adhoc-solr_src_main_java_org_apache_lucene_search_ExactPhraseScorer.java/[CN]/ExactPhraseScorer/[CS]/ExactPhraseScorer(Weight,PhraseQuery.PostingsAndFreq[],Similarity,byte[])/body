{
  super(similarity,weight);
  this.norms=norms;
  this.value=weight.getValue();
  chunkStates=new ChunkState[postings.length];
  endMinus1=postings.length - 1;
  for (int i=0; i < postings.length; i++) {
    final boolean useAdvance=postings[i].docFreq > 5 * postings[0].docFreq;
    chunkStates[i]=new ChunkState(postings[i].postings,-postings[i].position,useAdvance);
    if (i > 0 && !postings[i].postings.next()) {
      noDocs=true;
      return;
    }
  }
  for (int i=0; i < SCORE_CACHE_SIZE; i++) {
    scoreCache[i]=getSimilarity().tf((float)i) * value;
  }
}
