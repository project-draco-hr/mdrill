{
  m_Info=header;
  m_Debug=debug;
  m_MinNum=minNum;
  m_AllowUnclassifiedInstances=allow;
  if (data.numInstances() == 0) {
    m_Attribute=-1;
    m_ClassDistribution=null;
    m_Prop=null;
    return;
  }
  m_ClassDistribution=(double[])classProbs.clone();
  if (Utils.sum(m_ClassDistribution) < 2 * m_MinNum || Utils.eq(m_ClassDistribution[Utils.maxIndex(m_ClassDistribution)],Utils.sum(m_ClassDistribution)) || ((getMaxDepth() > 0) && (depth >= getMaxDepth()))) {
    m_Attribute=-1;
    m_Prop=null;
    return;
  }
  double[] vals=new double[data.numAttributes()];
  double[][][] dists=new double[data.numAttributes()][0][0];
  double[][] props=new double[data.numAttributes()][0];
  double[] splits=new double[data.numAttributes()];
  int attIndex=0;
  int windowSize=attIndicesWindow.length;
  int k=m_KValue;
  boolean gainFound=false;
  while ((windowSize > 0) && (k-- > 0 || !gainFound)) {
    int chosenIndex=random.nextInt(windowSize);
    attIndex=attIndicesWindow[chosenIndex];
    attIndicesWindow[chosenIndex]=attIndicesWindow[windowSize - 1];
    attIndicesWindow[windowSize - 1]=attIndex;
    windowSize--;
    splits[attIndex]=distribution(props,dists,attIndex,data);
    vals[attIndex]=gain(dists[attIndex],priorVal(dists[attIndex]));
    if (Utils.gr(vals[attIndex],0))     gainFound=true;
  }
  m_Attribute=Utils.maxIndex(vals);
  double[][] distribution=dists[m_Attribute];
  if (Utils.gr(vals[m_Attribute],0)) {
    m_SplitPoint=splits[m_Attribute];
    m_Prop=props[m_Attribute];
    Instances[] subsets=splitData(data);
    m_Successors=new RandomTree[distribution.length];
    for (int i=0; i < distribution.length; i++) {
      m_Successors[i]=new RandomTree();
      m_Successors[i].setKValue(m_KValue);
      m_Successors[i].setMaxDepth(getMaxDepth());
      m_Successors[i].buildTree(subsets[i],distribution[i],header,m_MinNum,m_Debug,attIndicesWindow,random,depth + 1,allow);
    }
    boolean emptySuccessor=false;
    for (int i=0; i < subsets.length; i++) {
      if (m_Successors[i].m_ClassDistribution == null) {
        emptySuccessor=true;
        break;
      }
    }
    if (!emptySuccessor) {
      m_ClassDistribution=null;
    }
  }
 else {
    m_Attribute=-1;
  }
}
