{
  setupLayout();
  m_forecaster=(TimeSeriesForecasting)object;
  m_sheetPanel.setTarget(m_forecaster);
  String loadFilename=m_forecaster.getFilename();
  if (!TimeSeriesForecasting.isEmpty(loadFilename) && !loadFilename.equals("-NONE-")) {
    m_filenameField.setText(loadFilename);
    loadModel();
  }
 else {
    String encodedForecaster=m_forecaster.getEncodedForecaster();
    if (!TimeSeriesForecasting.isEmpty(encodedForecaster) && !encodedForecaster.equals("-NONE-")) {
      try {
        List<Object> model=TimeSeriesForecasting.getForecaster(encodedForecaster);
        if (model != null) {
          m_forecastingModel=(WekaForecaster)model.get(0);
          m_header=(Instances)model.get(1);
          m_modelDisplay.setText(m_forecastingModel.toString());
        }
      }
 catch (      Exception ex) {
        ex.printStackTrace();
      }
    }
  }
  if (!TimeSeriesForecasting.isEmpty(m_forecaster.getSaveFilename())) {
    m_saveFilenameField.setText(m_forecaster.getSaveFilename());
  }
  m_numStepsToForecast.setText(m_forecaster.getNumStepsToForecast());
  m_artificialOffset.setText(m_forecaster.getArtificialTimeStartOffset());
  m_rebuildForecasterCheck.setSelected(m_forecaster.getRebuildForecaster());
  m_saveLab.setEnabled(m_rebuildForecasterCheck.isSelected());
  m_saveFilenameField.setEnabled(m_rebuildForecasterCheck.isSelected());
  checkIfModelIsUsingArtificialTimeStamp();
  checkIfModelIsUsingOverlayData();
}
