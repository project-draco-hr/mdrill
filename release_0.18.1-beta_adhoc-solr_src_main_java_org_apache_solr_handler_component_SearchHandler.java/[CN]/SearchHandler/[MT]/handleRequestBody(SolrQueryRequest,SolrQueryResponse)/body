{
  ResponseBuilder rb=new ResponseBuilder();
  rb.req=req;
  rb.rsp=rsp;
  rb.components=components;
  rb.setDebug(false);
  for (  SearchComponent c : components) {
    c.prepare(rb);
  }
  if (rb.shards == null) {
    for (    SearchComponent c : components) {
      c.process(rb);
    }
  }
 else {
    int depth=req.getParams().getInt("__higo_ms_depth__",0);
    HttpCommComponent comm=new HttpCommComponent(depth);
    if (rb.outgoing == null) {
      rb.outgoing=new LinkedList<ShardRequest>();
    }
    rb.finished=new ArrayList<ShardRequest>();
    int nextStage=0;
    do {
      rb.stage=nextStage;
      nextStage=ResponseBuilder.STAGE_DONE;
      for (      SearchComponent c : components) {
        nextStage=Math.min(nextStage,c.distributedProcess(rb));
      }
      while (rb.outgoing.size() > 0) {
        while (rb.outgoing.size() > 0) {
          ShardRequest sreq=rb.outgoing.remove(0);
          sreq.actualShards=sreq.shards;
          if (sreq.actualShards == ShardRequest.ALL_SHARDS) {
            sreq.actualShards=rb.shards;
          }
          sreq.responses=new ArrayList<ShardResponse>();
          for (int i=0; i < sreq.actualShards.length; i++) {
            String shard=sreq.actualShards[i];
            ModifiableSolrParams params=new ModifiableSolrParams(sreq.params);
            params.remove(ShardParams.SHARDS);
            params.remove("indent");
            params.remove(CommonParams.HEADER_ECHO_PARAMS);
            params.set(ShardParams.IS_SHARD,true);
            params.set("higolockCount",rb.lockCnt);
            if (rb.issubshard) {
              params.set(ShardParams.SHARDS,rb.subShards[i]);
              params.set(FacetParams.IS_SUB_SHARDS,true);
              params.set(FacetParams.FACET_CROSS_OFFSET,0);
              int maxlimit=MdrillGroupBy.MAX_CROSS_ROWS;
              params.set(FacetParams.FACET_CROSS_LIMIT,maxlimit);
            }
            String shardHandler=req.getParams().get(ShardParams.SHARDS_QT);
            if (shardHandler == null) {
              params.remove(CommonParams.QT);
            }
 else {
              params.set(CommonParams.QT,shardHandler);
            }
            comm.submit(sreq,shard,params,depth);
          }
        }
        while (rb.outgoing.size() == 0) {
          ShardResponse srsp=comm.takeCompletedOrError();
          if (srsp == null)           break;
          if (srsp.getException() != null) {
            comm.cancelAll();
            if (srsp.getException() instanceof SolrException) {
              throw (SolrException)srsp.getException();
            }
 else {
              throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,srsp.getException());
            }
          }
          rb.finished.add(srsp.getShardRequest());
          for (          SearchComponent c : components) {
            c.handleResponses(rb,srsp.getShardRequest());
          }
        }
      }
      for (      SearchComponent c : components) {
        c.finishStage(rb);
      }
    }
 while (nextStage != Integer.MAX_VALUE);
  }
}
