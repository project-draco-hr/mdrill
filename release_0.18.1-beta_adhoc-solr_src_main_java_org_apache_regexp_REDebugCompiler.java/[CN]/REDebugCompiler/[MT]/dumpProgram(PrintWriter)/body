{
  for (int i=0; i < lenInstruction; ) {
    char opcode=instruction[i + RE.offsetOpcode];
    char opdata=instruction[i + RE.offsetOpdata];
    short next=(short)instruction[i + RE.offsetNext];
    p.print(i + ". " + nodeToString(i)+ ", next = ");
    if (next == 0) {
      p.print("none");
    }
 else {
      p.print(i + next);
    }
    i+=RE.nodeSize;
    if (opcode == RE.OP_ANYOF) {
      p.print(", [");
      int rangeCount=opdata;
      for (int r=0; r < rangeCount; r++) {
        char charFirst=instruction[i++];
        char charLast=instruction[i++];
        if (charFirst == charLast) {
          p.print(charToString(charFirst));
        }
 else {
          p.print(charToString(charFirst) + "-" + charToString(charLast));
        }
      }
      p.print("]");
    }
    if (opcode == RE.OP_ATOM) {
      p.print(", \"");
      for (int len=opdata; len-- != 0; ) {
        p.print(charToString(instruction[i++]));
      }
      p.print("\"");
    }
    p.println("");
  }
}
