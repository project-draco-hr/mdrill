{
  int upto=0;
  int i=offset;
  final int end=offset + length;
  byte[] out=result.bytes;
  final int maxLen=length * 4;
  if (out.length < maxLen)   out=result.bytes=new byte[maxLen];
  result.offset=0;
  while (i < end) {
    final int code=(int)source[i++];
    if (code < 0x80)     out[upto++]=(byte)code;
 else     if (code < 0x800) {
      out[upto++]=(byte)(0xC0 | (code >> 6));
      out[upto++]=(byte)(0x80 | (code & 0x3F));
    }
 else     if (code < 0xD800 || code > 0xDFFF) {
      out[upto++]=(byte)(0xE0 | (code >> 12));
      out[upto++]=(byte)(0x80 | ((code >> 6) & 0x3F));
      out[upto++]=(byte)(0x80 | (code & 0x3F));
    }
 else {
      if (code < 0xDC00 && i < end) {
        int utf32=(int)source[i];
        if (utf32 >= 0xDC00 && utf32 <= 0xDFFF) {
          utf32=(code << 10) + utf32 + SURROGATE_OFFSET;
          i++;
          out[upto++]=(byte)(0xF0 | (utf32 >> 18));
          out[upto++]=(byte)(0x80 | ((utf32 >> 12) & 0x3F));
          out[upto++]=(byte)(0x80 | ((utf32 >> 6) & 0x3F));
          out[upto++]=(byte)(0x80 | (utf32 & 0x3F));
          continue;
        }
      }
      out[upto++]=(byte)0xEF;
      out[upto++]=(byte)0xBF;
      out[upto++]=(byte)0xBD;
    }
  }
  result.length=upto;
}
