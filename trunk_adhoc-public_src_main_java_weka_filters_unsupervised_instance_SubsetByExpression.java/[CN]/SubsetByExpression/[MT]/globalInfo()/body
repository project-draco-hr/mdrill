{
  return "Filters instances according to a user-specified expression.\n\n" + "Grammar:\n\n" + "boolexpr_list ::= boolexpr_list boolexpr_part | boolexpr_part;\n"+ "\n"+ "boolexpr_part ::= boolexpr:e {: parser.setResult(e); :} ;\n"+ "\n"+ "boolexpr ::=    BOOLEAN \n"+ "              | true\n"+ "              | false\n"+ "              | expr < expr\n"+ "              | expr <= expr\n"+ "              | expr > expr\n"+ "              | expr >= expr\n"+ "              | expr = expr\n"+ "              | ( boolexpr )\n"+ "              | not boolexpr\n"+ "              | boolexpr and boolexpr\n"+ "              | boolexpr or boolexpr\n"+ "              | ATTRIBUTE is STRING\n"+ "              ;\n"+ "\n"+ "expr      ::=   NUMBER\n"+ "              | ATTRIBUTE\n"+ "              | ( expr )\n"+ "              | opexpr\n"+ "              | funcexpr\n"+ "              ;\n"+ "\n"+ "opexpr    ::=   expr + expr\n"+ "              | expr - expr\n"+ "              | expr * expr\n"+ "              | expr / expr\n"+ "              ;\n"+ "\n"+ "funcexpr ::=    abs ( expr )\n"+ "              | sqrt ( expr )\n"+ "              | log ( expr )\n"+ "              | exp ( expr )\n"+ "              | sin ( expr )\n"+ "              | cos ( expr )\n"+ "              | tan ( expr )\n"+ "              | rint ( expr )\n"+ "              | floor ( expr )\n"+ "              | pow ( expr for base , expr for exponent )\n"+ "              | ceil ( expr )\n"+ "              ;\n"+ "\n"+ "Notes:\n"+ "- NUMBER\n"+ "  any integer or floating point number \n"+ "  (but not in scientific notation!)\n"+ "- STRING\n"+ "  any string surrounded by single quotes; \n"+ "  the string may not contain a single quote though.\n"+ "- ATTRIBUTE\n"+ "  the following placeholders are recognized for \n"+ "  attribute values:\n"+ "  - CLASS for the class value in case a class attribute is set.\n"+ "  - ATTxyz with xyz a number from 1 to # of attributes in the\n"+ "    dataset, representing the value of indexed attribute.\n"+ "\n"+ "Examples:\n"+ "- extracting only mammals and birds from the 'zoo' UCI dataset:\n"+ "  (CLASS is 'mammal') or (CLASS is 'bird')\n"+ "- extracting only animals with at least 2 legs from the 'zoo' UCI dataset:\n"+ "  (ATT14 >= 2)\n"+ "- extracting only instances with non-missing 'wage-increase-second-year'\n"+ "  from the 'labor' UCI dataset:\n"+ "  not ismissing(ATT3)\n";
}
