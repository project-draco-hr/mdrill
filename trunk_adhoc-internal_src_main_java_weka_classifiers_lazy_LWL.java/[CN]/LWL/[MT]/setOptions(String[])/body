{
  String knnString=Utils.getOption('K',options);
  if (knnString.length() != 0) {
    setKNN(Integer.parseInt(knnString));
  }
 else {
    setKNN(-1);
  }
  String weightString=Utils.getOption('U',options);
  if (weightString.length() != 0) {
    setWeightingKernel(Integer.parseInt(weightString));
  }
 else {
    setWeightingKernel(LINEAR);
  }
  String nnSearchClass=Utils.getOption('A',options);
  if (nnSearchClass.length() != 0) {
    String nnSearchClassSpec[]=Utils.splitOptions(nnSearchClass);
    if (nnSearchClassSpec.length == 0) {
      throw new Exception("Invalid NearestNeighbourSearch algorithm " + "specification string.");
    }
    String className=nnSearchClassSpec[0];
    nnSearchClassSpec[0]="";
    setNearestNeighbourSearchAlgorithm((NearestNeighbourSearch)Utils.forName(NearestNeighbourSearch.class,className,nnSearchClassSpec));
  }
 else   this.setNearestNeighbourSearchAlgorithm(new LinearNNSearch());
  super.setOptions(options);
}
