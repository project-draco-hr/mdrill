{
  if (m_ZeroR != null) {
    StringBuffer buf=new StringBuffer();
    buf.append(this.getClass().getName().replaceAll(".*\\.","") + "\n");
    buf.append(this.getClass().getName().replaceAll(".*\\.","").replaceAll(".","=") + "\n\n");
    buf.append("Warning: No model could be built, hence ZeroR model is used:\n\n");
    buf.append(m_ZeroR.toString());
    return buf.toString();
  }
  if (m_Train == null) {
    return "Locally weighted learning: No model built yet.";
  }
  String result="Locally weighted learning\n" + "===========================\n";
  result+="Using classifier: " + m_Classifier.getClass().getName() + "\n";
switch (m_WeightKernel) {
case LINEAR:
    result+="Using linear weighting kernels\n";
  break;
case EPANECHNIKOV:
result+="Using epanechnikov weighting kernels\n";
break;
case TRICUBE:
result+="Using tricube weighting kernels\n";
break;
case INVERSE:
result+="Using inverse-distance weighting kernels\n";
break;
case GAUSS:
result+="Using gaussian weighting kernels\n";
break;
case CONSTANT:
result+="Using constant weighting kernels\n";
break;
}
result+="Using " + (m_UseAllK ? "all" : "" + m_kNN) + " neighbours";
return result;
}
