{
  if (m_beans == null) {
    throw new Exception("Don't seem to have any beans I can execute.");
  }
  for (int i=0; i < m_beans.size(); i++) {
    BeanInstance tempB=(BeanInstance)m_beans.elementAt(i);
    if (m_log != null && m_registerLog) {
      if (tempB.getBean() instanceof BeanCommon) {
        ((BeanCommon)tempB.getBean()).setLog(m_log);
      }
    }
    if (tempB.getBean() instanceof EnvironmentHandler) {
      ((EnvironmentHandler)tempB.getBean()).setEnvironment(m_env);
    }
  }
  int numFlows=1;
  if (m_log != null) {
    if (m_startSequentially) {
      m_log.logMessage("[FlowRunner] launching flow start points sequentially...");
    }
 else {
      m_log.logMessage("[FlowRunner] launching flow start points in parallel...");
    }
  }
  TreeMap<Integer,Startable> startables=new TreeMap<Integer,Startable>();
  for (int i=0; i < m_beans.size(); i++) {
    BeanInstance tempB=(BeanInstance)m_beans.elementAt(i);
    boolean launch=true;
    if (tempB.getBean() instanceof Startable) {
      Startable s=(Startable)tempB.getBean();
      String beanName=s.getClass().getName();
      String customName=beanName;
      if (s instanceof BeanCommon) {
        customName=((BeanCommon)s).getCustomName();
        beanName=customName;
        if (customName.indexOf(':') > 0) {
          if (customName.substring(0,customName.indexOf(':')).startsWith("!")) {
            launch=false;
          }
        }
      }
      if (!m_startSequentially) {
        if (s.getStartMessage().charAt(0) != '$') {
          if (launch) {
            if (m_log != null) {
              m_log.logMessage("[FlowRunner] Launching flow " + numFlows + "...");
            }
 else {
              System.out.println("[FlowRunner] Launching flow " + numFlows + "...");
            }
            launchThread(s,numFlows);
            numFlows++;
          }
        }
 else {
          if (m_log != null) {
            m_log.logMessage("[FlowRunner] WARNING: Can't start " + beanName + " at this time.");
          }
 else {
            System.out.println("[FlowRunner] WARNING: Can't start " + beanName + " at this time.");
          }
        }
      }
 else {
        boolean ok=false;
        Integer position=null;
        if (s instanceof BeanCommon) {
          if (customName.indexOf(':') > 0) {
            if (customName.substring(0,customName.indexOf(':')).startsWith("!")) {
              launch=false;
            }
 else {
              String startPos=customName.substring(0,customName.indexOf(':'));
              try {
                position=new Integer(startPos);
                ok=true;
              }
 catch (              NumberFormatException n) {
              }
            }
          }
        }
        if (!ok && launch) {
          if (startables.size() == 0) {
            position=new Integer(0);
          }
 else {
            int newPos=startables.lastKey().intValue();
            newPos++;
            position=new Integer(newPos);
          }
        }
        if (s.getStartMessage().charAt(0) != '$') {
          if (launch) {
            if (m_log != null) {
              m_log.logMessage("[FlowRunner] adding start point " + beanName + " to the execution list (position "+ position+ ")");
            }
 else {
              System.out.println("[FlowRunner] adding start point " + beanName + " to the execution list (position "+ position+ ")");
            }
            startables.put(position,s);
          }
        }
 else {
          if (m_log != null) {
            m_log.logMessage("[FlowRunner] WARNING: Can't start " + beanName + " at this time.");
          }
 else {
            System.out.println("[FlowRunner] WARNING: Can't start " + beanName + " at this time.");
          }
        }
      }
      if (!launch) {
        if (m_log != null) {
          m_log.logMessage("[FlowRunner] start point " + beanName + " will not be launched.");
        }
 else {
          System.out.println("[FlowRunner] start point " + beanName + " will not be launched.");
        }
      }
    }
  }
  if (m_startSequentially) {
    runSequentially(startables);
  }
}
