{
  final Cache<ILruMemSizeKey,ILruMemSizeCache> cache=GrobalCache.fieldValueCache;
  final SolrIndexSearcher searcher=reader.getSearcher();
  final ILruMemSizeKey key=new GrobalCache.StringKey(searcher.getPartionKey() + "@@" + field+ "@@"+ LuceneUtils.crcKey(reader));
  UnInvertedField uif=(UnInvertedField)cache.get(key);
  if (uif == null) {
    ExecutorCompletionService<UnivertPool> serv=new ExecutorCompletionService<UnivertPool>(pool);
    Callable<UnivertPool> task=new Callable<UnivertPool>(){
      public UnivertPool call() throws Exception {
        UnivertPool rtnuif=new UnivertPool();
        try {
          rtnuif.uni=(UnInvertedField)cache.get(key);
          if (rtnuif.uni == null) {
            rtnuif.uni=new UnInvertedField(field,searcher,searcher.getReader());
            cache.put(key,rtnuif.uni);
          }
        }
 catch (        IOException e) {
          rtnuif.e=e;
        }
 finally {
          rtnuif.isfinish.set(true);
        }
        return rtnuif;
      }
    }
;
    serv.submit(task);
    try {
      UnivertPool rtnuif=serv.take().get();
      if (rtnuif.e != null) {
        throw rtnuif.e;
      }
      uif=rtnuif.uni;
    }
 catch (    Throwable e) {
      throw new IOException(e);
    }
  }
  uif.refCnt.incrementAndGet();
  return uif;
}
