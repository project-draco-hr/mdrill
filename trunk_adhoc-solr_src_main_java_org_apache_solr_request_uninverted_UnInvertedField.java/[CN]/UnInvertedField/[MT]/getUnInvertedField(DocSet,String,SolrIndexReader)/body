{
  final SolrIndexSearcher searcher=reader.getSearcher();
  final ILruMemSizeKey key=new GrobalCache.StringKey(searcher.getPartionKey() + "@@" + field+ "@@"+ LuceneUtils.crcKey(reader));
  final long t0=System.currentTimeMillis();
  ExecutorCompletionService<UnivertPool> submit=new ExecutorCompletionService<UnivertPool>(SUBMIT_POOL);
  Callable<UnivertPool> task=new Callable<UnivertPool>(){
    public UnivertPool call() throws Exception {
      UnivertPool rtnuif=new UnivertPool();
      try {
        final Cache<ILruMemSizeKey,ILruMemSizeCache> cache=GrobalCache.fieldValueCache;
        final Object lockthr=UnInvertedFieldUtils.getLock(key);
synchronized (lockthr) {
          long t1=System.currentTimeMillis();
          rtnuif.uni=(UnInvertedField)cache.get(key);
          SolrIndexReader reader=searcher.getReader();
          BitDocSet clonebitset=cloneBitset(baseAdvanceDocs,reader);
          if (rtnuif.uni == null || rtnuif.uni.isShutDown()) {
            rtnuif.uni=new UnInvertedField();
            MakeUnivertedFieldByIndex forjoin=new MakeUnivertedFieldByIndex(rtnuif.uni);
            forjoin.makeInit(clonebitset,field,searcher.getSchema(),reader);
            cache.put(key,rtnuif.uni);
          }
 else {
            MakeUnivertedFieldByIndex forjoin=new MakeUnivertedFieldByIndex(rtnuif.uni);
            forjoin.addDoclist(clonebitset,field,reader);
          }
          long t2=System.currentTimeMillis();
          log.info("timetaken by index:" + (t2 - t1) + "@"+ (t1 - t0)+ ","+ String.valueOf(rtnuif.uni));
        }
      }
 catch (      IOException e) {
        rtnuif.e=e;
      }
      return rtnuif;
    }
  }
;
  submit.submit(task);
  UnInvertedField uif=UnInvertedFieldUtils.takeUnf(submit);
  uif.refCnt.incrementAndGet();
  return uif;
}
