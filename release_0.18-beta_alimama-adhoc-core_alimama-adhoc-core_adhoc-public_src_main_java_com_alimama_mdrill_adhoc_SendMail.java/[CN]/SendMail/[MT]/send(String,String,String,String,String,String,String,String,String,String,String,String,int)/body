{
  try {
    String boundary="=======ThisIsBoundary=======";
    socket=new Socket();
    socket.setSoTimeout(10000);
    socket.connect(new InetSocketAddress(smtpAddress,port));
    input=new BufferedReader(new InputStreamReader(socket.getInputStream()));
    output=new PrintStream(socket.getOutputStream());
    getResponse("220","Failed to connect to: " + smtpHost,true);
    sendCommand("HELO " + smtpHost + CRLF);
    getResponse("250","Failed to get HELO response from server.",true);
    if (user != null && !user.isEmpty() && pass != null && !pass.isEmpty()) {
      sendCommand("AUTH LOGIN" + CRLF);
      getResponse("334","Failed to get USERNAME request from server.",true);
      sendCommand(getBase64String(user) + CRLF);
      getResponse("334","Failed to get PASSWORD request from server.",true);
      sendCommand(getBase64String(pass) + CRLF);
      getResponse("235","Failed to send AUTH LOGIN username and password to server.",true);
    }
    sendCommand("MAIL FROM: <" + from + ">"+ CRLF);
    getResponse("250","Failed to get MAIL FROM response from server.",true);
    String[] toList=to.split("[,|;]+");
    for (    String tostr : toList) {
      sendCommand("RCPT TO: <" + tostr + ">"+ CRLF);
      getResponse("250","Failed to get RCPT TO response from server.",false);
    }
    if (replyTO == null || replyTO.isEmpty()) {
      replyTO=to;
    }
    sendCommand("DATA" + CRLF);
    getResponse("354","Failed to get DATA response from server.",true);
    sendCommand("Subject: " + getBase64Subject(subject,charset) + CRLF);
    sendCommand("Date: " + getDateString() + CRLF);
    sendCommand("From: " + "" + formName + "<"+ from+ ">"+ CRLF);
    sendCommand("To: " + replyTO + CRLF);
    sendCommand("MIME-Version: 1.0" + CRLF);
    sendCommand("Content-Type: multipart/mixed; boundary=\"" + boundary + "\""+ CRLF);
    sendCommand("Content-Transfer-Encoding: 7bit" + CRLF + CRLF);
    sendCommand("This is a multi-part message in MIME format." + CRLF + CRLF);
    sendCommand(BOUNDARY_PREFIX + boundary + CRLF);
    sendCommand("Content-Type: text/html;" + CRLF);
    sendCommand("Content-Transfer-Encoding: base64" + CRLF + CRLF);
    sendCommand(getBase64String(content,charset) + CRLF + CRLF);
    String[] fileList=attachment.split("[ |\t|,]+");
    for (    String eachFile : fileList) {
      if (eachFile.trim().isEmpty()) {
        continue;
      }
      sendCommand(BOUNDARY_PREFIX + boundary + CRLF);
      String[] filenamesplit=eachFile.split("[\\\\|/]+");
      String filename=filenamesplit[filenamesplit.length - 1];
      if (eachFile.startsWith("hdfs@") && filename.indexOf(".") < 0) {
        filename+=".txt";
      }
      sendCommand("Content-Type: application/octet-stream; name=\"" + filename + "\""+ CRLF);
      sendCommand("Content-Transfer-Encoding: base64" + CRLF);
      sendCommand("Content-Disposition: attachment; filename=\"" + filename + "\""+ CRLF+ CRLF);
      sendAttachment(eachFile);
    }
    sendCommand(CRLF + "." + CRLF);
    getResponse("250","Failed to send DATA content to server.",true);
    sendCommand("QUIT" + CRLF);
    getResponse("221","Failed to get QUIT response from server.",true);
    LOG.info("succ " + from + " to "+ to+ "    "+ smtpAddress);
    return true;
  }
 catch (  Exception e) {
    e.printStackTrace();
    LOG.info("fail " + from + " to "+ to+ "    "+ smtpAddress);
    return false;
  }
 finally {
    try {
      output.close();
      input.close();
      socket.close();
    }
 catch (    Exception e) {
    }
  }
}
