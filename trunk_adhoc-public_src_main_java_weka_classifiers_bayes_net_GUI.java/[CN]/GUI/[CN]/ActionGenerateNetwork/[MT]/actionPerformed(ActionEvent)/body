{
  if (dlg == null) {
    dlg=new JDialog();
    dlg.setTitle("Generate Random Bayesian Network Options");
    final JLabel jLbNrOfNodes=new JLabel("Nr of nodes");
    final JTextField jTfNrOfNodes=new JTextField(3);
    jTfNrOfNodes.setHorizontalAlignment(JTextField.CENTER);
    jTfNrOfNodes.setText("" + m_nNrOfNodes);
    final JLabel jLbNrOfArcs=new JLabel("Nr of arcs");
    final JTextField jTfNrOfArcs=new JTextField(3);
    jTfNrOfArcs.setHorizontalAlignment(JTextField.CENTER);
    jTfNrOfArcs.setText("" + m_nNrOfArcs);
    final JLabel jLbCardinality=new JLabel("Cardinality");
    final JTextField jTfCardinality=new JTextField(3);
    jTfCardinality.setHorizontalAlignment(JTextField.CENTER);
    jTfCardinality.setText("" + m_nCardinality);
    final JLabel jLbSeed=new JLabel("Random seed");
    final JTextField jTfSeed=new JTextField(3);
    jTfSeed.setHorizontalAlignment(JTextField.CENTER);
    jTfSeed.setText("" + m_nSeed);
    JButton jBtGo;
    jBtGo=new JButton("Generate Network");
    jBtGo.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent ae){
        try {
          BayesNetGenerator generator=new BayesNetGenerator();
          m_BayesNet=generator;
          m_BayesNet.clearUndoStack();
          String[] options=new String[8];
          options[0]="-N";
          options[1]="" + jTfNrOfNodes.getText();
          options[2]="-A";
          options[3]="" + jTfNrOfArcs.getText();
          options[4]="-C";
          options[5]="" + jTfCardinality.getText();
          options[6]="-S";
          options[7]="" + jTfSeed.getText();
          generator.setOptions(options);
          generator.generateRandomNetwork();
          BIFReader bifReader=new BIFReader();
          bifReader.processString(m_BayesNet.toXMLBIF03());
          m_BayesNet=new EditableBayesNet(bifReader);
          updateStatus();
          layoutGraph();
          a_datagenerator.setEnabled(true);
          m_Instances=null;
          ;
          a_learn.setEnabled(false);
          a_learnCPT.setEnabled(false);
          dlg.setVisible(false);
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
    }
);
    JButton jBtCancel;
    jBtCancel=new JButton("Cancel");
    jBtCancel.setMnemonic('C');
    jBtCancel.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent ae){
        dlg.setVisible(false);
      }
    }
);
    GridBagConstraints gbc=new GridBagConstraints();
    dlg.setLayout(new GridBagLayout());
    Container c=new Container();
    c.setLayout(new GridBagLayout());
    gbc.gridwidth=2;
    gbc.insets=new Insets(8,0,0,0);
    gbc.anchor=GridBagConstraints.NORTHWEST;
    gbc.gridwidth=GridBagConstraints.RELATIVE;
    gbc.fill=GridBagConstraints.HORIZONTAL;
    c.add(jLbNrOfNodes,gbc);
    gbc.gridwidth=GridBagConstraints.REMAINDER;
    c.add(jTfNrOfNodes,gbc);
    gbc.gridwidth=GridBagConstraints.RELATIVE;
    c.add(jLbNrOfArcs,gbc);
    gbc.gridwidth=GridBagConstraints.REMAINDER;
    c.add(jTfNrOfArcs,gbc);
    gbc.gridwidth=GridBagConstraints.RELATIVE;
    c.add(jLbCardinality,gbc);
    gbc.gridwidth=GridBagConstraints.REMAINDER;
    c.add(jTfCardinality,gbc);
    gbc.gridwidth=GridBagConstraints.RELATIVE;
    c.add(jLbSeed,gbc);
    gbc.gridwidth=GridBagConstraints.REMAINDER;
    c.add(jTfSeed,gbc);
    gbc.fill=GridBagConstraints.HORIZONTAL;
    dlg.add(c,gbc);
    dlg.add(jBtGo);
    gbc.gridwidth=GridBagConstraints.REMAINDER;
    dlg.add(jBtCancel);
  }
  dlg.pack();
  dlg.setLocation(100,100);
  dlg.setVisible(true);
  dlg.setSize(dlg.getPreferredSize());
  dlg.setVisible(false);
  dlg.setVisible(true);
  dlg.repaint();
}
