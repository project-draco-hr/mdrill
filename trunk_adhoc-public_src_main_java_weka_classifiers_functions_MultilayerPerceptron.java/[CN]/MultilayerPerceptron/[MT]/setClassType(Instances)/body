{
  if (inst != null) {
    double min=Double.POSITIVE_INFINITY;
    double max=Double.NEGATIVE_INFINITY;
    double value;
    m_attributeRanges=new double[inst.numAttributes()];
    m_attributeBases=new double[inst.numAttributes()];
    for (int noa=0; noa < inst.numAttributes(); noa++) {
      min=Double.POSITIVE_INFINITY;
      max=Double.NEGATIVE_INFINITY;
      for (int i=0; i < inst.numInstances(); i++) {
        if (!inst.instance(i).isMissing(noa)) {
          value=inst.instance(i).value(noa);
          if (value < min) {
            min=value;
          }
          if (value > max) {
            max=value;
          }
        }
      }
      m_attributeRanges[noa]=(max - min) / 2;
      m_attributeBases[noa]=(max + min) / 2;
      if (noa != inst.classIndex() && m_normalizeAttributes) {
        for (int i=0; i < inst.numInstances(); i++) {
          if (m_attributeRanges[noa] != 0) {
            inst.instance(i).setValue(noa,(inst.instance(i).value(noa) - m_attributeBases[noa]) / m_attributeRanges[noa]);
          }
 else {
            inst.instance(i).setValue(noa,inst.instance(i).value(noa) - m_attributeBases[noa]);
          }
        }
      }
    }
    if (inst.classAttribute().isNumeric()) {
      m_numeric=true;
    }
 else {
      m_numeric=false;
    }
  }
  return inst;
}
