{
  if (!Double.isNaN(m_unitValue) && Double.isNaN(m_unitError) && calculate) {
    if (m_input) {
      m_unitError=0;
      for (int noa=0; noa < m_numOutputs; noa++) {
        m_unitError+=m_outputList[noa].errorValue(true);
      }
    }
 else {
      if (m_currentInstance.classIsMissing()) {
        m_unitError=.1;
      }
 else       if (m_instances.classAttribute().isNominal()) {
        if (m_currentInstance.classValue() == m_link) {
          m_unitError=1 - m_unitValue;
        }
 else {
          m_unitError=0 - m_unitValue;
        }
      }
 else       if (m_numeric) {
        if (m_normalizeClass) {
          if (m_attributeRanges[m_instances.classIndex()] == 0) {
            m_unitError=0;
          }
 else {
            m_unitError=(m_currentInstance.classValue() - m_unitValue) / m_attributeRanges[m_instances.classIndex()];
          }
        }
 else {
          m_unitError=m_currentInstance.classValue() - m_unitValue;
        }
      }
    }
  }
  return m_unitError;
}
