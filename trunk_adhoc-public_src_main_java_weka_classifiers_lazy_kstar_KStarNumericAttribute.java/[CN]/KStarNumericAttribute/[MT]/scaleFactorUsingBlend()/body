{
  String debug="(KStarNumericAttribute.scaleFactorUsingBlend)";
  int i, j, lowestcount=0, count=0;
  double lowest=-1.0, nextlowest=-1.0;
  double root, broot, up, bot;
  double aimfor, min_val=9e300, scale=1.0;
  double avgprob=0.0, minprob=0.0, min_pos=0.0;
  KStarWrapper botvals=new KStarWrapper();
  KStarWrapper upvals=new KStarWrapper();
  KStarWrapper vals=new KStarWrapper();
  m_Distances=new double[m_NumInstances];
  for (j=0; j < m_NumInstances; j++) {
    if (m_TrainSet.instance(j).isMissing(m_AttrIndex)) {
      m_Distances[j]=-1.0;
    }
 else {
      m_Distances[j]=Math.abs(m_TrainSet.instance(j).value(m_AttrIndex) - m_Test.value(m_AttrIndex));
      if ((m_Distances[j] + 1e-5) < nextlowest || nextlowest == -1.0) {
        if ((m_Distances[j] + 1e-5) < lowest || lowest == -1.0) {
          nextlowest=lowest;
          lowest=m_Distances[j];
          lowestcount=1;
        }
 else         if (Math.abs(m_Distances[j] - lowest) < 1e-5) {
          lowestcount++;
        }
 else {
          nextlowest=m_Distances[j];
        }
      }
      m_ActualCount++;
    }
  }
  if (nextlowest == -1 || lowest == -1) {
    scale=1.0;
    m_SmallestProb=m_AverageProb=1.0;
    return scale;
  }
 else {
    root=1.0 / (nextlowest - lowest);
    i=0;
    aimfor=(m_ActualCount - lowestcount) * (double)m_BlendFactor / 100.0 + lowestcount;
    if (m_BlendFactor == 0) {
      aimfor+=1.0;
    }
    bot=0.0 + ROOT_FINDER_ACCURACY / 2.0;
    up=root * 16;
    calculateSphereSize(bot,botvals);
    botvals.sphere-=aimfor;
    calculateSphereSize(up,upvals);
    upvals.sphere-=aimfor;
    if (botvals.sphere < 0) {
      min_pos=bot;
      avgprob=botvals.avgProb;
      minprob=botvals.minProb;
    }
 else     if (upvals.sphere > 0) {
      min_pos=up;
      avgprob=upvals.avgProb;
      minprob=upvals.minProb;
    }
 else {
      for (; ; ) {
        calculateSphereSize(root,vals);
        vals.sphere-=aimfor;
        if (Math.abs(vals.sphere) < min_val) {
          min_val=Math.abs(vals.sphere);
          min_pos=root;
          avgprob=vals.avgProb;
          minprob=vals.minProb;
        }
        if (Math.abs(vals.sphere) <= ROOT_FINDER_ACCURACY) {
          break;
        }
        if (vals.sphere > 0.0) {
          broot=(root + up) / 2.0;
          bot=root;
          root=broot;
        }
 else {
          broot=(root + bot) / 2.0;
          up=root;
          root=broot;
        }
        i++;
        if (i > ROOT_FINDER_MAX_ITER) {
          root=min_pos;
          break;
        }
      }
    }
    m_SmallestProb=minprob;
    m_AverageProb=avgprob;
switch (m_MissingMode) {
case M_DELETE:
      m_MissingProb=0.0;
    break;
case M_NORMAL:
  m_MissingProb=1.0;
break;
case M_MAXDIFF:
m_MissingProb=m_SmallestProb;
break;
case M_AVERAGE:
m_MissingProb=m_AverageProb;
break;
}
scale=min_pos;
return scale;
}
}
