{
  DefaultPieDataset result=new DefaultPieDataset();
  double total=DatasetUtilities.calculatePieDatasetTotal(source);
  List keys=source.getKeys();
  ArrayList otherKeys=new ArrayList();
  Iterator iterator=keys.iterator();
  while (iterator.hasNext()) {
    Comparable currentKey=(Comparable)iterator.next();
    Number dataValue=source.getValue(currentKey);
    if (dataValue != null) {
      double value=dataValue.doubleValue();
      if (value / total < minimumPercent) {
        otherKeys.add(currentKey);
      }
    }
  }
  iterator=keys.iterator();
  double otherValue=0;
  while (iterator.hasNext()) {
    Comparable currentKey=(Comparable)iterator.next();
    Number dataValue=source.getValue(currentKey);
    if (dataValue != null) {
      if (otherKeys.contains(currentKey) && otherKeys.size() >= minItems) {
        otherValue+=dataValue.doubleValue();
      }
 else {
        result.setValue(currentKey,dataValue);
      }
    }
  }
  if (otherKeys.size() >= minItems) {
    result.setValue(key,otherValue);
  }
  return result;
}
