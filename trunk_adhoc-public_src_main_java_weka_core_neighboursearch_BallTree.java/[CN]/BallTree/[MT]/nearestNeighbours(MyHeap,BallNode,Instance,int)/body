{
  double distance=Double.NEGATIVE_INFINITY;
  if (heap.totalSize() >= k)   distance=m_DistanceFunction.distance(target,node.getPivot());
  if (distance > -0.000001 && Math.sqrt(heap.peek().distance) < distance - node.getRadius()) {
    return;
  }
 else   if (node.m_Left != null && node.m_Right != null) {
    if (m_TreeStats != null) {
      m_TreeStats.incrIntNodeCount();
    }
    double leftPivotDist=Math.sqrt(m_DistanceFunction.distance(target,node.m_Left.getPivot(),Double.POSITIVE_INFINITY));
    double rightPivotDist=Math.sqrt(m_DistanceFunction.distance(target,node.m_Right.getPivot(),Double.POSITIVE_INFINITY));
    double leftBallDist=leftPivotDist - node.m_Left.getRadius();
    double rightBallDist=rightPivotDist - node.m_Right.getRadius();
    if (leftBallDist < 0 && rightBallDist < 0) {
      if (leftPivotDist < rightPivotDist) {
        nearestNeighbours(heap,node.m_Left,target,k);
        nearestNeighbours(heap,node.m_Right,target,k);
      }
 else {
        nearestNeighbours(heap,node.m_Right,target,k);
        nearestNeighbours(heap,node.m_Left,target,k);
      }
    }
 else {
      if (leftBallDist < rightBallDist) {
        nearestNeighbours(heap,node.m_Left,target,k);
        nearestNeighbours(heap,node.m_Right,target,k);
      }
 else {
        nearestNeighbours(heap,node.m_Right,target,k);
        nearestNeighbours(heap,node.m_Left,target,k);
      }
    }
  }
 else   if (node.m_Left != null || node.m_Right != null) {
    throw new Exception("Error: Only one leaf of the built ball tree is " + "assigned. Please check code.");
  }
 else   if (node.m_Left == null && node.m_Right == null) {
    if (m_TreeStats != null) {
      m_TreeStats.updatePointCount(node.numInstances());
      m_TreeStats.incrLeafCount();
    }
    for (int i=node.m_Start; i <= node.m_End; i++) {
      if (target == m_Instances.instance(m_InstList[i]))       continue;
      if (heap.totalSize() < k) {
        distance=m_DistanceFunction.distance(target,m_Instances.instance(m_InstList[i]),Double.POSITIVE_INFINITY,m_Stats);
        heap.put(m_InstList[i],distance);
      }
 else {
        MyHeapElement head=heap.peek();
        distance=m_DistanceFunction.distance(target,m_Instances.instance(m_InstList[i]),head.distance,m_Stats);
        if (distance < head.distance) {
          heap.putBySubstitute(m_InstList[i],distance);
        }
 else         if (distance == head.distance) {
          heap.putKthNearest(m_InstList[i],distance);
        }
      }
    }
  }
}
