{
  int hash, probe, index, length;
  final byte[] states=_states;
  final char[] set=_set;
  length=states.length;
  hash=HashFunctions.hash(key) & 0x7fffffff;
  index=hash % length;
  byte state=states[index];
  consumeFreeSlot=false;
  if (state == FREE) {
    consumeFreeSlot=true;
    set[index]=key;
    states[index]=FULL;
    return index;
  }
 else   if (state == FULL && set[index] == key) {
    return -index - 1;
  }
 else {
    probe=1 + (hash % (length - 2));
    if (state != REMOVED) {
      do {
        index-=probe;
        if (index < 0) {
          index+=length;
        }
        state=states[index];
      }
 while (state == FULL && set[index] != key);
    }
    if (state == REMOVED) {
      int firstRemoved=index;
      while (state != FREE && (state == REMOVED || set[index] != key)) {
        index-=probe;
        if (index < 0) {
          index+=length;
        }
        state=states[index];
      }
      if (state == FULL) {
        return -index - 1;
      }
 else {
        set[index]=key;
        states[index]=FULL;
        return firstRemoved;
      }
    }
    if (state == FULL) {
      return -index - 1;
    }
 else {
      consumeFreeSlot=true;
      set[index]=key;
      states[index]=FULL;
      return index;
    }
  }
}
