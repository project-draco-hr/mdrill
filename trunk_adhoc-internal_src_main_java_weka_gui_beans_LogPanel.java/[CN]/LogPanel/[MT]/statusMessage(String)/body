{
  boolean hasDelimiters=(message.indexOf('|') > 0);
  String stepName="";
  String stepHash="";
  String stepParameters="";
  String stepStatus="";
  if (!hasDelimiters) {
    stepName="Unknown";
    stepHash="Unknown";
    stepStatus=message;
  }
 else {
    stepHash=message.substring(0,message.indexOf('|'));
    message=message.substring(message.indexOf('|') + 1,message.length());
    if (stepHash.indexOf('$') > 0) {
      stepName=stepHash.substring(0,stepHash.indexOf('$'));
    }
 else {
      stepName=stepHash;
    }
    if (message.indexOf('|') >= 0) {
      stepParameters=message.substring(0,message.indexOf('|'));
      stepStatus=message.substring(message.indexOf('|') + 1,message.length());
    }
 else {
      stepStatus=message;
    }
  }
  if (m_tableIndexes.containsKey(stepHash)) {
    final Integer rowNum=m_tableIndexes.get(stepHash);
    if (stepStatus.equalsIgnoreCase("remove") || stepStatus.equalsIgnoreCase("remove.")) {
      m_tableIndexes.remove(stepHash);
      m_timers.get(stepHash).stop();
      m_timers.remove(stepHash);
      Iterator<String> i=m_tableIndexes.keySet().iterator();
      while (i.hasNext()) {
        String nextKey=i.next();
        int index=m_tableIndexes.get(nextKey).intValue();
        if (index > rowNum.intValue()) {
          index--;
          m_tableIndexes.put(nextKey,index);
        }
      }
      if (!SwingUtilities.isEventDispatchThread()) {
        try {
          SwingUtilities.invokeLater(new Runnable(){
            public void run(){
              m_tableModel.removeRow(rowNum);
            }
          }
);
        }
 catch (        Exception ex) {
          ex.printStackTrace();
        }
      }
 else {
        m_tableModel.removeRow(rowNum);
      }
    }
 else {
      final String stepNameCopy=stepName;
      final String stepStatusCopy=stepStatus;
      final String stepParametersCopy=stepParameters;
      if (!SwingUtilities.isEventDispatchThread()) {
        try {
          SwingUtilities.invokeLater(new Runnable(){
            public void run(){
              if (!(stepStatusCopy.startsWith("INTERRUPTED") && ((String)m_tableModel.getValueAt(rowNum.intValue(),3)).startsWith("ERROR"))) {
                m_tableModel.setValueAt(stepNameCopy,rowNum.intValue(),0);
                m_tableModel.setValueAt(stepParametersCopy,rowNum.intValue(),1);
                m_tableModel.setValueAt(m_table.getValueAt(rowNum.intValue(),2),rowNum.intValue(),2);
                m_tableModel.setValueAt(stepStatusCopy,rowNum.intValue(),3);
              }
            }
          }
);
        }
 catch (        Exception ex) {
          ex.printStackTrace();
        }
      }
 else {
        if (!(stepStatusCopy.startsWith("INTERRUPTED") && ((String)m_tableModel.getValueAt(rowNum.intValue(),3)).startsWith("ERROR"))) {
          m_tableModel.setValueAt(stepNameCopy,rowNum.intValue(),0);
          m_tableModel.setValueAt(stepParametersCopy,rowNum.intValue(),1);
          m_tableModel.setValueAt(m_table.getValueAt(rowNum.intValue(),2),rowNum.intValue(),2);
          m_tableModel.setValueAt(stepStatusCopy,rowNum.intValue(),3);
        }
      }
      if (stepStatus.startsWith("ERROR") || stepStatus.startsWith("INTERRUPTED") || stepStatus.equalsIgnoreCase("finished")|| stepStatus.equalsIgnoreCase("finished.")|| stepStatus.equalsIgnoreCase("done")|| stepStatus.equalsIgnoreCase("done.")|| stepStatus.equalsIgnoreCase("stopped")|| stepStatus.equalsIgnoreCase("stopped.")) {
        m_timers.get(stepHash).stop();
      }
 else       if (!m_timers.get(stepHash).isRunning()) {
        installTimer(stepHash);
      }
    }
  }
 else   if (!stepStatus.equalsIgnoreCase("Remove") && !stepStatus.equalsIgnoreCase("Remove.")) {
    int numKeys=m_tableIndexes.keySet().size();
    m_tableIndexes.put(stepHash,numKeys);
    final Object[] newRow=new Object[4];
    newRow[0]=stepName;
    newRow[1]=stepParameters;
    newRow[2]="-";
    newRow[3]=stepStatus;
    final String stepHashCopy=stepHash;
    try {
      if (!SwingUtilities.isEventDispatchThread()) {
        SwingUtilities.invokeLater(new Runnable(){
          public void run(){
            m_tableModel.addRow(newRow);
          }
        }
);
      }
 else {
        m_tableModel.addRow(newRow);
      }
      installTimer(stepHashCopy);
    }
 catch (    Exception ex) {
      ex.printStackTrace();
    }
  }
}
