{
  if (m_as != null && m_as.nominalWeights != null) {
    float intervalWidth=this.getWidth() / (float)m_as.nominalWeights.length;
    double heightRatio;
    int barWidth, x=0, y=0;
    if (intervalWidth > 5)     barWidth=(int)Math.floor(intervalWidth * 0.8F);
 else     barWidth=1;
    x=x + (int)((Math.floor(intervalWidth * 0.1F)) < 1 ? 1 : (Math.floor(intervalWidth * 0.1F)));
    if (this.getWidth() - (m_as.nominalWeights.length * barWidth + (int)((Math.floor(intervalWidth * 0.2F)) < 1 ? 1 : (Math.floor(intervalWidth * 0.2F))) * m_as.nominalWeights.length) > 2) {
      x+=(this.getWidth() - (m_as.nominalWeights.length * barWidth + (int)((Math.floor(intervalWidth * 0.2F)) < 1 ? 1 : (Math.floor(intervalWidth * 0.2F))) * m_as.nominalWeights.length)) / 2;
    }
    for (int i=0; i < m_as.nominalWeights.length; i++) {
      heightRatio=(this.getHeight() - (double)m_fm.getHeight()) / m_maxValue;
      y=(int)(this.getHeight() - Math.round(m_as.nominalWeights[i] * heightRatio));
      if (ev.getX() >= x && ev.getX() <= x + barWidth && ev.getY() >= this.getHeight() - Math.round(m_as.nominalWeights[i] * heightRatio))       return (m_data.attribute(m_attribIndex).value(i) + " [" + Utils.doubleToString(m_as.nominalWeights[i],3)+ "]");
      x=x + barWidth + (int)((Math.floor(intervalWidth * 0.2F)) < 1 ? 1 : (Math.floor(intervalWidth * 0.2F)));
    }
  }
 else   if (m_threadRun == false && (m_histBarCounts != null || m_histBarClassCounts != null)) {
    double heightRatio, intervalWidth;
    int x=0, y=0, barWidth;
    double bar=m_as.numericStats.min;
    if ((m_classIndex >= 0) && (m_data.attribute(m_classIndex).isNominal())) {
      barWidth=((this.getWidth() - 6) / m_histBarClassCounts.length) < 1 ? 1 : ((this.getWidth() - 6) / m_histBarClassCounts.length);
      x=3;
      if ((this.getWidth() - (x + m_histBarClassCounts.length * barWidth)) > 5)       x+=(this.getWidth() - (x + m_histBarClassCounts.length * barWidth)) / 2;
      heightRatio=(this.getHeight() - (double)m_fm.getHeight()) / m_maxValue;
      if (ev.getX() - x >= 0) {
        int temp=(int)((ev.getX() - x) / (barWidth + 0.0000000001));
        if (temp == 0) {
          double sum=0;
          for (int k=0; k < m_histBarClassCounts[0].numValues(); k++)           sum+=m_histBarClassCounts[0].valueSparse(k);
          return ("<html><center><font face=Dialog size=-1>" + Utils.doubleToString(sum,3) + "<br>"+ "["+ Utils.doubleToString(bar + m_barRange * temp,3)+ ", "+ Utils.doubleToString((bar + m_barRange * (temp + 1)),3)+ "]"+ "</font></center></html>");
        }
 else         if (temp < m_histBarClassCounts.length) {
          double sum=0;
          for (int k=0; k < m_histBarClassCounts[temp].numValues(); k++)           sum+=m_histBarClassCounts[temp].valueSparse(k);
          return ("<html><center><font face=Dialog size=-1>" + Utils.doubleToString(sum,3) + "<br>("+ Utils.doubleToString(bar + m_barRange * temp,3)+ ", "+ Utils.doubleToString((bar + m_barRange * (temp + 1)),3)+ "]</font></center></html>");
        }
      }
    }
 else {
      barWidth=((this.getWidth() - 6) / m_histBarCounts.length) < 1 ? 1 : ((this.getWidth() - 6) / m_histBarCounts.length);
      x=3;
      if ((this.getWidth() - (x + m_histBarCounts.length * barWidth)) > 5)       x+=(this.getWidth() - (x + m_histBarCounts.length * barWidth)) / 2;
      heightRatio=(this.getHeight() - (float)m_fm.getHeight()) / m_maxValue;
      if (ev.getX() - x >= 0) {
        int temp=(int)((ev.getX() - x) / (barWidth + 0.0000000001));
        if (temp == 0)         return ("<html><center><font face=Dialog size=-1>" + m_histBarCounts[0] + "<br>"+ "["+ Utils.doubleToString(bar + m_barRange * temp,3)+ ", "+ Utils.doubleToString((bar + m_barRange * (temp + 1)),3)+ "]"+ "</font></center></html>");
 else         if (temp < m_histBarCounts.length)         return ("<html><center><font face=Dialog size=-1>" + m_histBarCounts[temp] + "<br>"+ "("+ Utils.doubleToString(bar + m_barRange * temp,3)+ ", "+ Utils.doubleToString((bar + m_barRange * (temp + 1)),3)+ "]"+ "</font></center></html>");
      }
    }
  }
  return PrintableComponent.getToolTipText(m_Printer);
}
