{
  double[] vals=new double[members.numAttributes()];
  Instances sortedMembers=null;
  int middle=0;
  boolean dataIsEven=false;
  if (m_DistanceFunction instanceof ManhattanDistance) {
    middle=(members.numInstances() - 1) / 2;
    dataIsEven=((members.numInstances() % 2) == 0);
    if (m_PreserveOrder) {
      sortedMembers=members;
    }
 else {
      sortedMembers=new Instances(members);
    }
  }
  for (int j=0; j < members.numAttributes(); j++) {
    if (m_DistanceFunction instanceof EuclideanDistance || members.attribute(j).isNominal()) {
      vals[j]=members.meanOrMode(j);
    }
 else     if (m_DistanceFunction instanceof ManhattanDistance) {
      if (members.numInstances() == 1) {
        vals[j]=members.instance(0).value(j);
      }
 else {
        sortedMembers.kthSmallestValue(j,middle + 1);
        vals[j]=sortedMembers.instance(middle).value(j);
        if (dataIsEven) {
          sortedMembers.kthSmallestValue(j,middle + 2);
          vals[j]=(vals[j] + sortedMembers.instance(middle + 1).value(j)) / 2;
        }
      }
    }
    if (updateClusterInfo) {
      m_ClusterMissingCounts[centroidIndex][j]=members.attributeStats(j).missingCount;
      m_ClusterNominalCounts[centroidIndex][j]=members.attributeStats(j).nominalCounts;
      if (members.attribute(j).isNominal()) {
        if (m_ClusterMissingCounts[centroidIndex][j] > m_ClusterNominalCounts[centroidIndex][j][Utils.maxIndex(m_ClusterNominalCounts[centroidIndex][j])]) {
          vals[j]=Utils.missingValue();
        }
      }
 else {
        if (m_ClusterMissingCounts[centroidIndex][j] == members.numInstances()) {
          vals[j]=Utils.missingValue();
        }
      }
    }
  }
  if (updateClusterInfo)   m_ClusterCentroids.add(new DenseInstance(1.0,vals));
  return vals;
}
