{
  m_displayStdDevs=Utils.getFlag("V",options);
  m_dontReplaceMissing=Utils.getFlag("M",options);
  m_initializeWithKMeansPlusPlus=Utils.getFlag('P',options);
  String optionString=Utils.getOption('N',options);
  if (optionString.length() != 0) {
    setNumClusters(Integer.parseInt(optionString));
  }
  optionString=Utils.getOption("I",options);
  if (optionString.length() != 0) {
    setMaxIterations(Integer.parseInt(optionString));
  }
  String distFunctionClass=Utils.getOption('A',options);
  if (distFunctionClass.length() != 0) {
    String distFunctionClassSpec[]=Utils.splitOptions(distFunctionClass);
    if (distFunctionClassSpec.length == 0) {
      throw new Exception("Invalid DistanceFunction specification string.");
    }
    String className=distFunctionClassSpec[0];
    distFunctionClassSpec[0]="";
    setDistanceFunction((DistanceFunction)Utils.forName(DistanceFunction.class,className,distFunctionClassSpec));
  }
 else {
    setDistanceFunction(new EuclideanDistance());
  }
  m_PreserveOrder=Utils.getFlag("O",options);
  m_FastDistanceCalc=Utils.getFlag("fast",options);
  super.setOptions(options);
}
