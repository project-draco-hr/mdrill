{
  if (cluster_state_spec instanceof ClusterState) {
    solo=false;
    cluster_state=(ClusterState)cluster_state_spec;
  }
 else {
    solo=true;
    cluster_state=new DistributedClusterState((Map)cluster_state_spec);
  }
  assignment_info_callback=new ConcurrentHashMap<String,RunnableCallback>();
  supervisors_callback=new AtomicReference<RunnableCallback>(null);
  drpcs_callback=new AtomicReference<RunnableCallback>(null);
  assignments_callback=new AtomicReference<RunnableCallback>(null);
  storm_base_callback=new ConcurrentHashMap<String,RunnableCallback>();
  higo_base_callback=new ConcurrentHashMap<String,RunnableCallback>();
  state_id=cluster_state.register(new ClusterStateCallback(){
    @Override public <T>Object execute(    T... args){
      if (args != null && args.length == 2) {
        EventType zkEventTypes=(EventType)args[0];
        String path=(String)args[1];
        List<String> toks=PathUtils.tokenize_path(path);
        int size=toks.size();
        if (size >= 1) {
          String params=null;
          String root=toks.get(0);
          RunnableCallback fn=null;
          if (root.equals(Cluster.ASSIGNMENTS_ROOT)) {
            if (size == 1) {
              fn=assignments_callback.getAndSet(null);
            }
 else {
              params=toks.get(1);
              fn=assignment_info_callback.remove(params);
            }
          }
 else           if (root.equals(Cluster.SUPERVISORS_ROOT)) {
            fn=supervisors_callback.getAndSet(null);
          }
 else           if (root.equals(Cluster.DRPCS_ROOT)) {
            fn=drpcs_callback.getAndSet(null);
          }
 else           if (root.equals(Cluster.STORMS_ROOT) && size > 1) {
            params=toks.get(1);
            fn=storm_base_callback.remove(params);
          }
 else           if (root.equals(Cluster.HIGO_ROOT) && size > 1) {
            params=toks.get(1);
            fn=higo_base_callback.remove(params);
          }
 else {
            StormUtils.halt_process(30,"Unknown callback for subtree " + path);
          }
          if (fn != null) {
            fn.run();
          }
        }
      }
 else {
        LOG.error("the size of param is not 2");
      }
      return null;
    }
  }
);
  String[] pathlist=StormUtils.mk_arr(Cluster.ASSIGNMENTS_SUBTREE,Cluster.TASKS_SUBTREE,Cluster.STORMS_SUBTREE,Cluster.SUPERVISORS_SUBTREE,Cluster.TASKBEATS_SUBTREE,Cluster.TASKERRORS_SUBTREE);
  for (  String path : pathlist) {
    cluster_state.mkdirs(path);
  }
}
