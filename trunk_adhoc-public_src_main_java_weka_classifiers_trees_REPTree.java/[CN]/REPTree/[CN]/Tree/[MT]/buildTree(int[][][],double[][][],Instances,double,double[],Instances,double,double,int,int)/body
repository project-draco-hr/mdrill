{
  m_Info=header;
  if (data.classAttribute().isNumeric()) {
    m_HoldOutDist=new double[2];
  }
 else {
    m_HoldOutDist=new double[data.numClasses()];
  }
  int helpIndex=0;
  if (data.classIndex() == 0) {
    helpIndex=1;
  }
  if (sortedIndices[0][helpIndex].length == 0) {
    if (data.classAttribute().isNumeric()) {
      m_Distribution=new double[2];
    }
 else {
      m_Distribution=new double[data.numClasses()];
    }
    m_ClassProbs=null;
    sortedIndices[0]=null;
    weights[0]=null;
    return;
  }
  double priorVar=0;
  if (data.classAttribute().isNumeric()) {
    double totalSum=0, totalSumSquared=0, totalSumOfWeights=0;
    for (int i=0; i < sortedIndices[0][helpIndex].length; i++) {
      Instance inst=data.instance(sortedIndices[0][helpIndex][i]);
      totalSum+=inst.classValue() * weights[0][helpIndex][i];
      totalSumSquared+=inst.classValue() * inst.classValue() * weights[0][helpIndex][i];
      totalSumOfWeights+=weights[0][helpIndex][i];
    }
    priorVar=singleVariance(totalSum,totalSumSquared,totalSumOfWeights);
  }
  m_ClassProbs=new double[classProbs.length];
  System.arraycopy(classProbs,0,m_ClassProbs,0,classProbs.length);
  if ((totalWeight < (2 * minNum)) || (data.classAttribute().isNominal() && Utils.eq(m_ClassProbs[Utils.maxIndex(m_ClassProbs)],Utils.sum(m_ClassProbs))) || (data.classAttribute().isNumeric() && ((priorVar / totalWeight) < minVariance))|| ((m_MaxDepth >= 0) && (depth >= maxDepth))) {
    m_Attribute=-1;
    if (data.classAttribute().isNominal()) {
      m_Distribution=new double[m_ClassProbs.length];
      for (int i=0; i < m_ClassProbs.length; i++) {
        m_Distribution[i]=m_ClassProbs[i];
      }
      doSmoothing();
      Utils.normalize(m_ClassProbs);
    }
 else {
      m_Distribution=new double[2];
      m_Distribution[0]=priorVar;
      m_Distribution[1]=totalWeight;
    }
    sortedIndices[0]=null;
    weights[0]=null;
    return;
  }
  double[] vals=new double[data.numAttributes()];
  double[][][] dists=new double[data.numAttributes()][0][0];
  double[][] props=new double[data.numAttributes()][0];
  double[][] totalSubsetWeights=new double[data.numAttributes()][0];
  double[] splits=new double[data.numAttributes()];
  if (data.classAttribute().isNominal()) {
    for (int i=0; i < data.numAttributes(); i++) {
      if (i != data.classIndex()) {
        splits[i]=distribution(props,dists,i,sortedIndices[0][i],weights[0][i],totalSubsetWeights,data);
        vals[i]=gain(dists[i],priorVal(dists[i]));
      }
    }
  }
 else {
    for (int i=0; i < data.numAttributes(); i++) {
      if (i != data.classIndex()) {
        splits[i]=numericDistribution(props,dists,i,sortedIndices[0][i],weights[0][i],totalSubsetWeights,data,vals);
      }
    }
  }
  m_Attribute=Utils.maxIndex(vals);
  int numAttVals=dists[m_Attribute].length;
  int count=0;
  for (int i=0; i < numAttVals; i++) {
    if (totalSubsetWeights[m_Attribute][i] >= minNum) {
      count++;
    }
    if (count > 1) {
      break;
    }
  }
  if (Utils.gr(vals[m_Attribute],0) && (count > 1)) {
    m_SplitPoint=splits[m_Attribute];
    m_Prop=props[m_Attribute];
    double[][] attSubsetDists=dists[m_Attribute];
    double[] attTotalSubsetWeights=totalSubsetWeights[m_Attribute];
    vals=null;
    dists=null;
    props=null;
    totalSubsetWeights=null;
    splits=null;
    int[][][][] subsetIndices=new int[numAttVals][1][data.numAttributes()][0];
    double[][][][] subsetWeights=new double[numAttVals][1][data.numAttributes()][0];
    splitData(subsetIndices,subsetWeights,m_Attribute,m_SplitPoint,sortedIndices[0],weights[0],data);
    sortedIndices[0]=null;
    weights[0]=null;
    m_Successors=new Tree[numAttVals];
    for (int i=0; i < numAttVals; i++) {
      m_Successors[i]=new Tree();
      m_Successors[i].buildTree(subsetIndices[i],subsetWeights[i],data,attTotalSubsetWeights[i],attSubsetDists[i],header,minNum,minVariance,depth + 1,maxDepth);
      attSubsetDists[i]=null;
    }
  }
 else {
    m_Attribute=-1;
    sortedIndices[0]=null;
    weights[0]=null;
  }
  if (data.classAttribute().isNominal()) {
    m_Distribution=new double[m_ClassProbs.length];
    for (int i=0; i < m_ClassProbs.length; i++) {
      m_Distribution[i]=m_ClassProbs[i];
    }
    doSmoothing();
    Utils.normalize(m_ClassProbs);
  }
 else {
    m_Distribution=new double[2];
    m_Distribution[0]=priorVar;
    m_Distribution[1]=totalWeight;
  }
}
