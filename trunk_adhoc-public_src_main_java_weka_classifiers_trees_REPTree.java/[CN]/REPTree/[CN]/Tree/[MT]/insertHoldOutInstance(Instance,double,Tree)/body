{
  if (inst.classAttribute().isNominal()) {
    m_HoldOutDist[(int)inst.classValue()]+=weight;
    int predictedClass=0;
    if (m_ClassProbs == null) {
      predictedClass=Utils.maxIndex(parent.m_ClassProbs);
    }
 else {
      predictedClass=Utils.maxIndex(m_ClassProbs);
    }
    if (predictedClass != (int)inst.classValue()) {
      m_HoldOutError+=weight;
    }
  }
 else {
    m_HoldOutDist[0]+=weight;
    m_HoldOutDist[1]+=weight * inst.classValue();
    double diff=0;
    if (m_ClassProbs == null) {
      diff=parent.m_ClassProbs[0] - inst.classValue();
    }
 else {
      diff=m_ClassProbs[0] - inst.classValue();
    }
    m_HoldOutError+=diff * diff * weight;
  }
  if (m_Attribute != -1) {
    if (inst.isMissing(m_Attribute)) {
      for (int i=0; i < m_Successors.length; i++) {
        if (m_Prop[i] > 0) {
          m_Successors[i].insertHoldOutInstance(inst,weight * m_Prop[i],this);
        }
      }
    }
 else {
      if (m_Info.attribute(m_Attribute).isNominal()) {
        m_Successors[(int)inst.value(m_Attribute)].insertHoldOutInstance(inst,weight,this);
      }
 else {
        if (inst.value(m_Attribute) < m_SplitPoint) {
          m_Successors[0].insertHoldOutInstance(inst,weight,this);
        }
 else {
          m_Successors[1].insertHoldOutInstance(inst,weight,this);
        }
      }
    }
  }
}
