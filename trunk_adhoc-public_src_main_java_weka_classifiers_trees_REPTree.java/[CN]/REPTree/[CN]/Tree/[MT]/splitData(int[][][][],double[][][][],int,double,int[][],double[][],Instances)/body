{
  int j;
  int[] num;
  for (int i=0; i < data.numAttributes(); i++) {
    if (i != data.classIndex()) {
      if (data.attribute(att).isNominal()) {
        num=new int[data.attribute(att).numValues()];
        for (int k=0; k < num.length; k++) {
          subsetIndices[k][0][i]=new int[sortedIndices[i].length];
          subsetWeights[k][0][i]=new double[sortedIndices[i].length];
        }
        for (j=0; j < sortedIndices[i].length; j++) {
          Instance inst=data.instance(sortedIndices[i][j]);
          if (inst.isMissing(att)) {
            for (int k=0; k < num.length; k++) {
              if (m_Prop[k] > 0) {
                subsetIndices[k][0][i][num[k]]=sortedIndices[i][j];
                subsetWeights[k][0][i][num[k]]=m_Prop[k] * weights[i][j];
                num[k]++;
              }
            }
          }
 else {
            int subset=(int)inst.value(att);
            subsetIndices[subset][0][i][num[subset]]=sortedIndices[i][j];
            subsetWeights[subset][0][i][num[subset]]=weights[i][j];
            num[subset]++;
          }
        }
      }
 else {
        num=new int[2];
        for (int k=0; k < 2; k++) {
          subsetIndices[k][0][i]=new int[sortedIndices[i].length];
          subsetWeights[k][0][i]=new double[weights[i].length];
        }
        for (j=0; j < sortedIndices[i].length; j++) {
          Instance inst=data.instance(sortedIndices[i][j]);
          if (inst.isMissing(att)) {
            for (int k=0; k < num.length; k++) {
              if (m_Prop[k] > 0) {
                subsetIndices[k][0][i][num[k]]=sortedIndices[i][j];
                subsetWeights[k][0][i][num[k]]=m_Prop[k] * weights[i][j];
                num[k]++;
              }
            }
          }
 else {
            int subset=(inst.value(att) < splitPoint) ? 0 : 1;
            subsetIndices[subset][0][i][num[subset]]=sortedIndices[i][j];
            subsetWeights[subset][0][i][num[subset]]=weights[i][j];
            num[subset]++;
          }
        }
      }
      for (int k=0; k < num.length; k++) {
        int[] copy=new int[num[k]];
        System.arraycopy(subsetIndices[k][0][i],0,copy,0,num[k]);
        subsetIndices[k][0][i]=copy;
        double[] copyWeights=new double[num[k]];
        System.arraycopy(subsetWeights[k][0][i],0,copyWeights,0,num[k]);
        subsetWeights[k][0][i]=copyWeights;
      }
    }
  }
}
