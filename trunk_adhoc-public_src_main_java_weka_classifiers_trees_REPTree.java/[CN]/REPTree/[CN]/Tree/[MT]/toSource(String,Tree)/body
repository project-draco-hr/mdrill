{
  StringBuffer[] result=new StringBuffer[2];
  double[] currentProbs;
  if (m_ClassProbs == null)   currentProbs=parent.m_ClassProbs;
 else   currentProbs=m_ClassProbs;
  long printID=nextID();
  if (m_Attribute == -1) {
    result[0]=new StringBuffer("	p = ");
    if (m_Info.classAttribute().isNumeric())     result[0].append(currentProbs[0]);
 else {
      result[0].append(Utils.maxIndex(currentProbs));
    }
    result[0].append(";\n");
    result[1]=new StringBuffer("");
  }
 else {
    StringBuffer text=new StringBuffer("");
    StringBuffer atEnd=new StringBuffer("");
    text.append("  static double N").append(Integer.toHexString(this.hashCode()) + printID).append("(Object []i) {\n").append("    double p = Double.NaN;\n");
    text.append("    /* " + m_Info.attribute(m_Attribute).name() + " */\n");
    text.append("    if (" + this.sourceExpression(-1) + ") {\n").append("      p = ");
    if (m_Info.classAttribute().isNumeric())     text.append(currentProbs[0] + ";\n");
 else     text.append(Utils.maxIndex(currentProbs) + ";\n");
    text.append("    } ");
    for (int i=0; i < m_Successors.length; i++) {
      text.append("else if (" + this.sourceExpression(i) + ") {\n");
      if (m_Successors[i].m_Attribute == -1) {
        double[] successorProbs=m_Successors[i].m_ClassProbs;
        if (successorProbs == null)         successorProbs=m_ClassProbs;
        text.append("      p = ");
        if (m_Info.classAttribute().isNumeric()) {
          text.append(successorProbs[0] + ";\n");
        }
 else {
          text.append(Utils.maxIndex(successorProbs) + ";\n");
        }
      }
 else {
        StringBuffer[] sub=m_Successors[i].toSource(className,this);
        text.append("" + sub[0]);
        atEnd.append("" + sub[1]);
      }
      text.append("    } ");
      if (i == m_Successors.length - 1) {
        text.append("\n");
      }
    }
    text.append("    return p;\n  }\n");
    result[0]=new StringBuffer("    p = " + className + ".N");
    result[0].append(Integer.toHexString(this.hashCode()) + printID).append("(i);\n");
    result[1]=text.append("" + atEnd);
  }
  return result;
}
