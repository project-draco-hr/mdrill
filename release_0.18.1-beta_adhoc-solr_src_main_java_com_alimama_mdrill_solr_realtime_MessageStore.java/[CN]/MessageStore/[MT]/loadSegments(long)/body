{
  final List<Segment> accum=new ArrayList<Segment>();
  final File[] ls=this.partitionDir.listFiles();
  if (ls != null) {
    for (    final File file : ls) {
      if (file.isFile() && file.toString().endsWith(FILE_SUFFIX)) {
        if (!file.canRead()) {
          throw new IOException("Could not read file " + file);
        }
        final String filename=file.getName();
        final long start=Long.parseLong(filename.substring(0,filename.length() - FILE_SUFFIX.length()));
        accum.add(new Segment(start,file,false));
      }
    }
  }
  if (accum.size() == 0) {
    final File newFile=new File(this.partitionDir,this.nameFromOffset(offsetIfCreate));
    accum.add(new Segment(offsetIfCreate,newFile,true));
  }
 else {
    Collections.sort(accum,new Comparator<Segment>(){
      @Override public int compare(      final Segment o1,      final Segment o2){
        if (o1.start == o2.start) {
          return 0;
        }
 else         if (o1.start > o2.start) {
          return 1;
        }
 else {
          return -1;
        }
      }
    }
);
    final Segment last=accum.remove(accum.size() - 1);
    last.fileMessageSet.close();
    log.info("Loading the last segment in mutable mode and running recover on " + last.file.getAbsolutePath());
    final Segment mutable=new Segment(last.start,last.file,true);
    accum.add(mutable);
    log.info("Loaded " + accum.size() + " segments...");
  }
  this.segments=new SegmentList(accum.toArray(new Segment[accum.size()]));
}
