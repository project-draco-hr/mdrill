{
  NamedList result=new NamedList();
  Map<Token,LinkedHashMap<String,Integer>> suggestions=spellingResult.getSuggestions();
  boolean hasFreqInfo=spellingResult.hasTokenFrequencyInfo();
  boolean isCorrectlySpelled=false;
  int numSuggestions=0;
  for (  LinkedHashMap<String,Integer> theSuggestion : suggestions.values()) {
    if (theSuggestion.size() > 0) {
      numSuggestions++;
    }
  }
  if (numSuggestions > 0) {
    isCorrectlySpelled=true;
  }
  for (  Map.Entry<Token,LinkedHashMap<String,Integer>> entry : suggestions.entrySet()) {
    Token inputToken=entry.getKey();
    Map<String,Integer> theSuggestions=entry.getValue();
    if (theSuggestions != null && (theSuggestions.size() > 0 || shardRequest)) {
      SimpleOrderedMap suggestionList=new SimpleOrderedMap();
      suggestionList.add("numFound",theSuggestions.size());
      suggestionList.add("startOffset",inputToken.startOffset());
      suggestionList.add("endOffset",inputToken.endOffset());
      if (extendedResults && hasFreqInfo) {
        suggestionList.add("origFreq",spellingResult.getTokenFrequency(inputToken));
        ArrayList<SimpleOrderedMap> sugs=new ArrayList<SimpleOrderedMap>();
        suggestionList.add("suggestion",sugs);
        for (        Map.Entry<String,Integer> suggEntry : theSuggestions.entrySet()) {
          SimpleOrderedMap sugEntry=new SimpleOrderedMap();
          sugEntry.add("word",suggEntry.getKey());
          sugEntry.add("freq",suggEntry.getValue());
          sugs.add(sugEntry);
        }
      }
 else {
        suggestionList.add("suggestion",theSuggestions.keySet());
      }
      if (hasFreqInfo) {
        isCorrectlySpelled=isCorrectlySpelled && spellingResult.getTokenFrequency(inputToken) > 0;
      }
      result.add(new String(inputToken.buffer(),0,inputToken.length()),suggestionList);
    }
  }
  if (hasFreqInfo) {
    result.add("correctlySpelled",isCorrectlySpelled);
  }
 else   if (extendedResults && suggestions.size() == 0) {
    result.add("correctlySpelled",true);
  }
  return result;
}
