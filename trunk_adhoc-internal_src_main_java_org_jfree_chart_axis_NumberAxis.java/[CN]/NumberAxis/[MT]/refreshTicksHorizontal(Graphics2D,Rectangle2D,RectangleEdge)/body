{
  List result=new java.util.ArrayList();
  Font tickLabelFont=getTickLabelFont();
  g2.setFont(tickLabelFont);
  if (isAutoTickUnitSelection()) {
    selectAutoTickUnit(g2,dataArea,edge);
  }
  TickUnit tu=getTickUnit();
  double size=tu.getSize();
  int count=calculateVisibleTickCount();
  double lowestTickValue=calculateLowestVisibleTickValue();
  if (count <= ValueAxis.MAXIMUM_TICK_COUNT) {
    int minorTickSpaces=getMinorTickCount();
    if (minorTickSpaces <= 0) {
      minorTickSpaces=tu.getMinorTickCount();
    }
    for (int minorTick=1; minorTick < minorTickSpaces; minorTick++) {
      double minorTickValue=lowestTickValue - size * minorTick / minorTickSpaces;
      if (getRange().contains(minorTickValue)) {
        result.add(new NumberTick(TickType.MINOR,minorTickValue,"",TextAnchor.TOP_CENTER,TextAnchor.CENTER,0.0));
      }
    }
    for (int i=0; i < count; i++) {
      double currentTickValue=lowestTickValue + (i * size);
      String tickLabel;
      NumberFormat formatter=getNumberFormatOverride();
      if (formatter != null) {
        tickLabel=formatter.format(currentTickValue);
      }
 else {
        tickLabel=getTickUnit().valueToString(currentTickValue);
      }
      TextAnchor anchor=null;
      TextAnchor rotationAnchor=null;
      double angle=0.0;
      if (isVerticalTickLabels()) {
        anchor=TextAnchor.CENTER_RIGHT;
        rotationAnchor=TextAnchor.CENTER_RIGHT;
        if (edge == RectangleEdge.TOP) {
          angle=Math.PI / 2.0;
        }
 else {
          angle=-Math.PI / 2.0;
        }
      }
 else {
        if (edge == RectangleEdge.TOP) {
          anchor=TextAnchor.BOTTOM_CENTER;
          rotationAnchor=TextAnchor.BOTTOM_CENTER;
        }
 else {
          anchor=TextAnchor.TOP_CENTER;
          rotationAnchor=TextAnchor.TOP_CENTER;
        }
      }
      Tick tick=new NumberTick(new Double(currentTickValue),tickLabel,anchor,rotationAnchor,angle);
      result.add(tick);
      double nextTickValue=lowestTickValue + ((i + 1) * size);
      for (int minorTick=1; minorTick < minorTickSpaces; minorTick++) {
        double minorTickValue=currentTickValue + (nextTickValue - currentTickValue) * minorTick / minorTickSpaces;
        if (getRange().contains(minorTickValue)) {
          result.add(new NumberTick(TickType.MINOR,minorTickValue,"",TextAnchor.TOP_CENTER,TextAnchor.CENTER,0.0));
        }
      }
    }
  }
  return result;
}
