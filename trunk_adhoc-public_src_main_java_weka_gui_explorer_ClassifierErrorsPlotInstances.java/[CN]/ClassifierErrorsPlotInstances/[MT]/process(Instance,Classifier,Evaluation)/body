{
  double pred;
  double[] values;
  int i;
  try {
    pred=eval.evaluateModelOnceAndRecordPrediction(classifier,toPredict);
    if (classifier instanceof weka.classifiers.misc.InputMappedClassifier) {
      toPredict=((weka.classifiers.misc.InputMappedClassifier)classifier).constructMappedInstance(toPredict);
    }
    if (!m_SaveForVisualization)     return;
    if (m_PlotInstances != null) {
      values=new double[m_PlotInstances.numAttributes()];
      for (i=0; i < m_PlotInstances.numAttributes(); i++) {
        if (i < toPredict.classIndex()) {
          values[i]=toPredict.value(i);
        }
 else         if (i == toPredict.classIndex()) {
          values[i]=pred;
          values[i + 1]=toPredict.value(i);
          i++;
        }
 else {
          values[i]=toPredict.value(i - 1);
        }
      }
      m_PlotInstances.add(new DenseInstance(1.0,values));
      if (toPredict.classAttribute().isNominal()) {
        if (toPredict.isMissing(toPredict.classIndex()) || Utils.isMissingValue(pred)) {
          m_PlotShapes.addElement(new Integer(Plot2D.MISSING_SHAPE));
        }
 else         if (pred != toPredict.classValue()) {
          m_PlotShapes.addElement(new Integer(Plot2D.ERROR_SHAPE));
        }
 else {
          m_PlotShapes.addElement(new Integer(Plot2D.CONST_AUTOMATIC_SHAPE));
        }
        m_PlotSizes.addElement(new Integer(Plot2D.DEFAULT_SHAPE_SIZE));
      }
 else {
        Double errd=null;
        if (!toPredict.isMissing(toPredict.classIndex()) && !Utils.isMissingValue(pred)) {
          errd=new Double(pred - toPredict.classValue());
          m_PlotShapes.addElement(new Integer(Plot2D.CONST_AUTOMATIC_SHAPE));
        }
 else {
          m_PlotShapes.addElement(new Integer(Plot2D.MISSING_SHAPE));
        }
        m_PlotSizes.addElement(errd);
      }
    }
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
}
