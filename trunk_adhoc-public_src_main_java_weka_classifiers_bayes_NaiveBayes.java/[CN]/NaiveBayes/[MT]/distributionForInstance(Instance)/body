{
  if (m_UseDiscretization) {
    m_Disc.input(instance);
    instance=m_Disc.output();
  }
  double[] probs=new double[m_NumClasses];
  for (int j=0; j < m_NumClasses; j++) {
    probs[j]=m_ClassDistribution.getProbability(j);
  }
  Enumeration enumAtts=instance.enumerateAttributes();
  int attIndex=0;
  while (enumAtts.hasMoreElements()) {
    Attribute attribute=(Attribute)enumAtts.nextElement();
    if (!instance.isMissing(attribute)) {
      double temp, max=0;
      for (int j=0; j < m_NumClasses; j++) {
        temp=Math.max(1e-75,Math.pow(m_Distributions[attIndex][j].getProbability(instance.value(attribute)),m_Instances.attribute(attIndex).weight()));
        probs[j]*=temp;
        if (probs[j] > max) {
          max=probs[j];
        }
        if (Double.isNaN(probs[j])) {
          throw new Exception("NaN returned from estimator for attribute " + attribute.name() + ":\n"+ m_Distributions[attIndex][j].toString());
        }
      }
      if ((max > 0) && (max < 1e-75)) {
        for (int j=0; j < m_NumClasses; j++) {
          probs[j]*=1e75;
        }
      }
    }
    attIndex++;
  }
  Utils.normalize(probs);
  return probs;
}
