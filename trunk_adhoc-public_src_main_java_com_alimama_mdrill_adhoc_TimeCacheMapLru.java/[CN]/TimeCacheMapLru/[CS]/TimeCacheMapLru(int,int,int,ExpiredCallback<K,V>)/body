{
  this.lursize=lrusize;
  this.numBuckets=numBuckets;
  if (numBuckets < 2) {
    throw new IllegalArgumentException("numBuckets must be >= 2");
  }
  _buckets=new LinkedList<Map<K,V>>();
  for (int i=0; i < numBuckets; i++) {
    _buckets.add(this.CreateMap());
  }
  _callback=callback;
  final long expirationMillis=expirationSecs * 1000L;
  final long sleepTime=expirationMillis / (numBuckets - 1);
  _cleaner=new Thread(new Runnable(){
    public void run(){
      try {
        while (true) {
          Map<K,V> dead=null;
          Thread.currentThread().sleep(sleepTime);
synchronized (_lock) {
            dead=_buckets.removeLast();
            _buckets.addFirst(TimeCacheMapLru.this.CreateMap());
          }
          if (_callback != null) {
            for (            Entry<K,V> entry : dead.entrySet()) {
              _callback.expire(entry.getKey(),entry.getValue());
            }
            _callback.commit();
          }
        }
      }
 catch (      InterruptedException ex) {
      }
    }
  }
);
  _cleaner.setDaemon(true);
  _cleaner.start();
}
