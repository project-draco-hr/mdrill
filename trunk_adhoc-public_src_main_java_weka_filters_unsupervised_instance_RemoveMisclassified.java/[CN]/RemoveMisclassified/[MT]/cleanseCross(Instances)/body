{
  Instance inst;
  Instances crossSet=new Instances(data);
  Instances temp=new Instances(data,data.numInstances());
  Instances inverseSet=new Instances(data,data.numInstances());
  int count=0;
  double ans;
  int iterations=0;
  int classIndex=m_classIndex;
  if (classIndex < 0)   classIndex=data.classIndex();
  if (classIndex < 0)   classIndex=data.numAttributes() - 1;
  while (count != crossSet.numInstances() && crossSet.numInstances() >= m_numOfCrossValidationFolds) {
    count=crossSet.numInstances();
    iterations++;
    if (m_numOfCleansingIterations > 0 && iterations > m_numOfCleansingIterations)     break;
    crossSet.setClassIndex(classIndex);
    if (crossSet.classAttribute().isNominal()) {
      crossSet.stratify(m_numOfCrossValidationFolds);
    }
    temp=new Instances(crossSet,crossSet.numInstances());
    for (int fold=0; fold < m_numOfCrossValidationFolds; fold++) {
      Instances train=crossSet.trainCV(m_numOfCrossValidationFolds,fold);
      m_cleansingClassifier.buildClassifier(train);
      Instances test=crossSet.testCV(m_numOfCrossValidationFolds,fold);
      for (int i=0; i < test.numInstances(); i++) {
        inst=test.instance(i);
        ans=m_cleansingClassifier.classifyInstance(inst);
        if (crossSet.classAttribute().isNumeric()) {
          if (ans >= inst.classValue() - m_numericClassifyThreshold && ans <= inst.classValue() + m_numericClassifyThreshold) {
            temp.add(inst);
          }
 else           if (m_invertMatching) {
            inverseSet.add(inst);
          }
        }
 else {
          if (ans == inst.classValue()) {
            temp.add(inst);
          }
 else           if (m_invertMatching) {
            inverseSet.add(inst);
          }
        }
      }
    }
    crossSet=temp;
  }
  if (m_invertMatching) {
    inverseSet.setClassIndex(data.classIndex());
    return inverseSet;
  }
 else {
    crossSet.setClassIndex(data.classIndex());
    return crossSet;
  }
}
