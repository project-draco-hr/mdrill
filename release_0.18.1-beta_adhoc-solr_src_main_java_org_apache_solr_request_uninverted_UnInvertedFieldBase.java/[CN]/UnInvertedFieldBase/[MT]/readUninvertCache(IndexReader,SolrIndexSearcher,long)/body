{
  String key=LuceneUtils.crcKey(reader);
  Directory cachedir=searcher.getFieldcacheDir();
  ti.setCacheDir(cachedir,key);
  String filename=field + ".fv" + CacheVersion+ "."+ key;
  if (cachedir.fileExists(filename)) {
    try {
      IndexInput input=cachedir.openInput(filename,10240);
      this.nullTermNum=input.readInt();
      this.maxTermNum=input.readInt();
      this.numTermsInField=input.readInt();
      this.termsInverted=input.readInt();
      this.termInstances=input.readLong();
      int index_len=input.readInt();
      if (index_len <= 0) {
        index=null;
      }
 else {
        index=INT_BUFFER.calloc(index_len,BigReUsedBuffer.INT_CREATE,-1);
        for (int i=0; i < index_len; i++) {
          index.set(i,input.readInt());
        }
      }
      index_len=input.readInt();
      if (index_len <= 0) {
        indexshort=null;
      }
 else {
        indexshort=SHORT_BUFFER.calloc(index_len,BigReUsedBuffer.SHORT_CREATE,(short)-1);
        for (int i=0; i < index_len; i++) {
          indexshort.set(i,(short)input.readInt());
        }
      }
      index_len=input.readInt();
      if (index_len <= 0) {
        indexbyte=null;
      }
 else {
        indexbyte=BYTE_BUFFER.calloc(index_len,BigReUsedBuffer.BYTE_CREATE,(byte)-1);
        for (int i=0; i < index_len; i++) {
          indexbyte.set(i,(byte)input.readInt());
        }
      }
      this.indexDatatype=UnInvertedFieldUtils.IntToTypeIndex(input.readInt());
      this.dataType=UnInvertedFieldUtils.IntToDatatype(input.readInt());
      index_len=input.readInt();
      if (index_len <= 0) {
        termValueLong=null;
      }
 else {
        termValueLong=LONG_BUFFER.calloc(index_len,BigReUsedBuffer.LONG_CREATE,0l);
        for (int i=0; i < index_len; i++) {
          termValueLong.set(i,input.readLong());
        }
      }
      index_len=input.readInt();
      if (index_len <= 0) {
        termValueDouble=null;
      }
 else {
        termValueDouble=DOUBLE_BUFFER.calloc(index_len,BigReUsedBuffer.DOUBLE_CREATE,0d);
        for (int i=0; i < index_len; i++) {
          termValueDouble.set(i,Double.longBitsToDouble(input.readLong()));
        }
      }
      int tnums_len=input.readInt();
      if (tnums_len <= 0) {
        tnums=null;
      }
 else {
        tnums=new byte[tnums_len][];
        for (int i=0; i < tnums.length; i++) {
          int bytelen=input.readInt();
          if (bytelen > 0) {
            tnums[i]=new byte[bytelen];
            input.readBytes(tnums[i],0,tnums[i].length);
          }
 else {
            tnums[i]=new byte[0];
          }
        }
      }
      input.close();
      long endTime=System.currentTimeMillis();
      total_time=(int)(endTime - startTime);
      ti.setCache(reader,cachedir,key);
      endTime=System.currentTimeMillis();
      total_time=(int)(endTime - startTime);
      SolrCore.log.info("facet read success from field '" + field + "' time="+ total_time);
      return true;
    }
 catch (    Exception e) {
      cachedir.deleteFile(filename);
      SolrCore.log.info("facet read fail from file '" + field + "'",e);
    }
  }
  return false;
}
