{
  List result=new java.util.ArrayList();
  Font tickLabelFont=getTickLabelFont();
  g2.setFont(tickLabelFont);
  if (isAutoTickUnitSelection()) {
    selectAutoTickUnit(g2,dataArea,edge);
  }
  DateTickUnit unit=getTickUnit();
  Date tickDate=calculateLowestVisibleTickValue(unit);
  Date upperDate=getMaximumDate();
  while (tickDate.before(upperDate)) {
    tickDate=correctTickDateForPosition(tickDate,unit,this.tickMarkPosition);
    long lowestTickTime=tickDate.getTime();
    long distance=unit.addToDate(tickDate,this.timeZone).getTime() - lowestTickTime;
    int minorTickSpaces=getMinorTickCount();
    if (minorTickSpaces <= 0) {
      minorTickSpaces=unit.getMinorTickCount();
    }
    for (int minorTick=1; minorTick < minorTickSpaces; minorTick++) {
      long minorTickTime=lowestTickTime - distance * minorTick / minorTickSpaces;
      if (minorTickTime > 0 && getRange().contains(minorTickTime) && (!isHiddenValue(minorTickTime))) {
        result.add(new DateTick(TickType.MINOR,new Date(minorTickTime),"",TextAnchor.TOP_CENTER,TextAnchor.CENTER,0.0));
      }
    }
    if (!isHiddenValue(tickDate.getTime())) {
      String tickLabel;
      DateFormat formatter=getDateFormatOverride();
      if (formatter != null) {
        tickLabel=formatter.format(tickDate);
      }
 else {
        tickLabel=this.tickUnit.dateToString(tickDate);
      }
      TextAnchor anchor=null;
      TextAnchor rotationAnchor=null;
      double angle=0.0;
      if (isVerticalTickLabels()) {
        anchor=TextAnchor.CENTER_RIGHT;
        rotationAnchor=TextAnchor.CENTER_RIGHT;
        if (edge == RectangleEdge.TOP) {
          angle=Math.PI / 2.0;
        }
 else {
          angle=-Math.PI / 2.0;
        }
      }
 else {
        if (edge == RectangleEdge.TOP) {
          anchor=TextAnchor.BOTTOM_CENTER;
          rotationAnchor=TextAnchor.BOTTOM_CENTER;
        }
 else {
          anchor=TextAnchor.TOP_CENTER;
          rotationAnchor=TextAnchor.TOP_CENTER;
        }
      }
      Tick tick=new DateTick(tickDate,tickLabel,anchor,rotationAnchor,angle);
      result.add(tick);
      long currentTickTime=tickDate.getTime();
      tickDate=unit.addToDate(tickDate,this.timeZone);
      long nextTickTime=tickDate.getTime();
      for (int minorTick=1; minorTick < minorTickSpaces; minorTick++) {
        long minorTickTime=currentTickTime + (nextTickTime - currentTickTime) * minorTick / minorTickSpaces;
        if (getRange().contains(minorTickTime) && (!isHiddenValue(minorTickTime))) {
          result.add(new DateTick(TickType.MINOR,new Date(minorTickTime),"",TextAnchor.TOP_CENTER,TextAnchor.CENTER,0.0));
        }
      }
    }
 else {
      tickDate=unit.rollDate(tickDate,this.timeZone);
      continue;
    }
  }
  return result;
}
