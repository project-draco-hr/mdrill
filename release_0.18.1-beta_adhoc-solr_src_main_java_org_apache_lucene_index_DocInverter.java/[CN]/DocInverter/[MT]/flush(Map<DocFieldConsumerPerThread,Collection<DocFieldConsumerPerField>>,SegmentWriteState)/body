{
  Map<InvertedDocConsumerPerThread,Collection<InvertedDocConsumerPerField>> childThreadsAndFields=new HashMap<InvertedDocConsumerPerThread,Collection<InvertedDocConsumerPerField>>();
  Map<InvertedDocEndConsumerPerThread,Collection<InvertedDocEndConsumerPerField>> endChildThreadsAndFields=new HashMap<InvertedDocEndConsumerPerThread,Collection<InvertedDocEndConsumerPerField>>();
  for (  Map.Entry<DocFieldConsumerPerThread,Collection<DocFieldConsumerPerField>> entry : threadsAndFields.entrySet()) {
    DocInverterPerThread perThread=(DocInverterPerThread)entry.getKey();
    Collection<InvertedDocConsumerPerField> childFields=new HashSet<InvertedDocConsumerPerField>();
    Collection<InvertedDocEndConsumerPerField> endChildFields=new HashSet<InvertedDocEndConsumerPerField>();
    for (    final DocFieldConsumerPerField field : entry.getValue()) {
      DocInverterPerField perField=(DocInverterPerField)field;
      childFields.add(perField.consumer);
      endChildFields.add(perField.endConsumer);
    }
    childThreadsAndFields.put(perThread.consumer,childFields);
    endChildThreadsAndFields.put(perThread.endConsumer,endChildFields);
  }
  consumer.flush(childThreadsAndFields,state);
  endConsumer.flush(endChildThreadsAndFields,state);
}
