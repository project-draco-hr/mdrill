{
  if (m_KValue > data.numAttributes() - 1)   m_KValue=data.numAttributes() - 1;
  if (m_KValue < 1)   m_KValue=(int)Utils.log2(data.numAttributes()) + 1;
  getCapabilities().testWithFail(data);
  data=new Instances(data);
  data.deleteWithMissingClass();
  if (data.numAttributes() == 1) {
    System.err.println("Cannot build model (only class attribute present in data!), " + "using ZeroR model instead!");
    m_ZeroR=new weka.classifiers.rules.ZeroR();
    m_ZeroR.buildClassifier(data);
    return;
  }
 else {
    m_ZeroR=null;
  }
  Instances train=null;
  Instances backfit=null;
  Random rand=data.getRandomNumberGenerator(m_randomSeed);
  if (m_NumFolds <= 0) {
    train=data;
  }
 else {
    data.randomize(rand);
    data.stratify(m_NumFolds);
    train=data.trainCV(m_NumFolds,1,rand);
    backfit=data.testCV(m_NumFolds,1);
  }
  int[] attIndicesWindow=new int[data.numAttributes() - 1];
  int j=0;
  for (int i=0; i < attIndicesWindow.length; i++) {
    if (j == data.classIndex())     j++;
    attIndicesWindow[i]=j++;
  }
  double[] classProbs=new double[train.numClasses()];
  for (int i=0; i < train.numInstances(); i++) {
    Instance inst=train.instance(i);
    classProbs[(int)inst.classValue()]+=inst.weight();
  }
  buildTree(train,classProbs,new Instances(data,0),m_MinNum,m_Debug,attIndicesWindow,rand,0,getAllowUnclassifiedInstances());
  if (backfit != null) {
    backfitData(backfit);
  }
}
