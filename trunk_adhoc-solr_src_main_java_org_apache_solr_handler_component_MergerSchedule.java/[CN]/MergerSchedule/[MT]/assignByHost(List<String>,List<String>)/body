{
  HashMap<String,ArrayList<String>> listByHost=MergeShards.getByHost(lst);
  HashMap<String,ArrayList<String>> mslistByHost=MergeShards.getByHost(mslist);
  HashMap<String,AssginShard> assign=new HashMap<String,AssginShard>();
  ArrayList<String> allmsHost=new ArrayList<String>();
  for (  Entry<String,ArrayList<String>> e : mslistByHost.entrySet()) {
    String host=e.getKey();
    allmsHost.add(host);
    ArrayList<String> list=listByHost.remove(host);
    if (list == null || list.size() <= 0) {
      continue;
    }
    AssginShard assignlist=assign.get(host);
    if (assignlist == null) {
      ArrayList<String> localMergerList=e.getValue();
      assignlist=new AssginShard(localMergerList,new ArrayList<String>());
      assign.put(host,assignlist);
    }
    assignlist.shards.addAll(list);
  }
  Collections.sort(allmsHost);
  int mshostlength=allmsHost.size();
  for (  Entry<String,ArrayList<String>> e : listByHost.entrySet()) {
    for (    String s : e.getValue()) {
      int hashcode=absHashcode(s.hashCode());
      int index=hashcode % mshostlength;
      String host=allmsHost.get(index);
      AssginShard assignlist=assign.get(host);
      if (assignlist == null) {
        List<String> val=mslistByHost.get(host);
        assignlist=new AssginShard(val,new ArrayList<String>());
        assign.put(host,assignlist);
      }
      assignlist.shards.add(s);
    }
  }
  return assign;
}
