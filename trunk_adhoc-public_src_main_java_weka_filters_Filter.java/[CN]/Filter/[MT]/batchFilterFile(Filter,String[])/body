{
  Instances firstData=null;
  Instances secondData=null;
  DataSource firstInput=null;
  DataSource secondInput=null;
  PrintWriter firstOutput=null;
  PrintWriter secondOutput=null;
  boolean helpRequest;
  String sourceCode="";
  try {
    helpRequest=Utils.getFlag('h',options);
    String fileName=Utils.getOption('i',options);
    if (fileName.length() != 0) {
      firstInput=new DataSource(fileName);
    }
 else {
      throw new Exception("No first input file given.\n");
    }
    fileName=Utils.getOption('r',options);
    if (fileName.length() != 0) {
      secondInput=new DataSource(fileName);
    }
 else {
      throw new Exception("No second input file given.\n");
    }
    fileName=Utils.getOption('o',options);
    if (fileName.length() != 0) {
      firstOutput=new PrintWriter(new FileOutputStream(fileName));
    }
 else {
      firstOutput=new PrintWriter(System.out);
    }
    fileName=Utils.getOption('s',options);
    if (fileName.length() != 0) {
      secondOutput=new PrintWriter(new FileOutputStream(fileName));
    }
 else {
      secondOutput=new PrintWriter(System.out);
    }
    String classIndex=Utils.getOption('c',options);
    if (filter instanceof Sourcable)     sourceCode=Utils.getOption('z',options);
    if (filter instanceof OptionHandler) {
      ((OptionHandler)filter).setOptions(options);
    }
    Utils.checkForRemainingOptions(options);
    if (helpRequest) {
      throw new Exception("Help requested.\n");
    }
    firstData=firstInput.getStructure();
    secondData=secondInput.getStructure();
    if (!secondData.equalHeaders(firstData)) {
      throw new Exception("Input file formats differ.\n" + secondData.equalHeadersMsg(firstData) + "\n");
    }
    if (classIndex.length() != 0) {
      if (classIndex.equals("first")) {
        firstData.setClassIndex(0);
        secondData.setClassIndex(0);
      }
 else       if (classIndex.equals("last")) {
        firstData.setClassIndex(firstData.numAttributes() - 1);
        secondData.setClassIndex(secondData.numAttributes() - 1);
      }
 else {
        firstData.setClassIndex(Integer.parseInt(classIndex) - 1);
        secondData.setClassIndex(Integer.parseInt(classIndex) - 1);
      }
    }
  }
 catch (  Exception ex) {
    String filterOptions="";
    if (filter instanceof OptionHandler) {
      filterOptions+="\nFilter options:\n\n";
      Enumeration enu=((OptionHandler)filter).listOptions();
      while (enu.hasMoreElements()) {
        Option option=(Option)enu.nextElement();
        filterOptions+=option.synopsis() + '\n' + option.description()+ "\n";
      }
    }
    String genericOptions="\nGeneral options:\n\n" + "-h\n" + "\tGet help on available options.\n"+ "-i <filename>\n"+ "\tThe file containing first input instances.\n"+ "-o <filename>\n"+ "\tThe file first output instances will be written to.\n"+ "-r <filename>\n"+ "\tThe file containing second input instances.\n"+ "-s <filename>\n"+ "\tThe file second output instances will be written to.\n"+ "-c <class index>\n"+ "\tThe number of the attribute to use as the class.\n"+ "\t\"first\" and \"last\" are also valid entries.\n"+ "\tIf not supplied then no class is assigned.\n";
    if (filter instanceof Sourcable) {
      genericOptions+="-z <class name>\n" + "\tOutputs the source code representing the trained filter.\n";
    }
    throw new Exception('\n' + ex.getMessage() + filterOptions+ genericOptions);
  }
  boolean printedHeader=false;
  if (filter.setInputFormat(firstData)) {
    firstOutput.println(filter.getOutputFormat().toString());
    printedHeader=true;
  }
  Instance inst;
  while (firstInput.hasMoreElements(firstData)) {
    inst=firstInput.nextElement(firstData);
    if (filter.input(inst)) {
      if (!printedHeader) {
        throw new Error("Filter didn't return true from setInputFormat() " + "earlier!");
      }
      firstOutput.println(filter.output().toString());
    }
  }
  if (filter.batchFinished()) {
    if (!printedHeader) {
      firstOutput.println(filter.getOutputFormat().toString());
    }
    while (filter.numPendingOutput() > 0) {
      firstOutput.println(filter.output().toString());
    }
  }
  if (firstOutput != null) {
    firstOutput.close();
  }
  printedHeader=false;
  if (filter.isOutputFormatDefined()) {
    secondOutput.println(filter.getOutputFormat().toString());
    printedHeader=true;
  }
  while (secondInput.hasMoreElements(secondData)) {
    inst=secondInput.nextElement(secondData);
    if (filter.input(inst)) {
      if (!printedHeader) {
        throw new Error("Filter didn't return true from" + " isOutputFormatDefined() earlier!");
      }
      secondOutput.println(filter.output().toString());
    }
  }
  if (filter.batchFinished()) {
    if (!printedHeader) {
      secondOutput.println(filter.getOutputFormat().toString());
    }
    while (filter.numPendingOutput() > 0) {
      secondOutput.println(filter.output().toString());
    }
  }
  if (secondOutput != null) {
    secondOutput.close();
  }
  if (sourceCode.length() != 0)   System.out.println(wekaStaticWrapper((Sourcable)filter,sourceCode,firstData,filter.getOutputFormat()));
}
