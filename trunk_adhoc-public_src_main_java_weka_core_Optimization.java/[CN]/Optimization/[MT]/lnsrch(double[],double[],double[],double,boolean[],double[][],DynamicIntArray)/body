{
  int i, k, len=xold.length, fixedOne=-1;
  double alam, alamin;
  double temp, test, alpha=Double.POSITIVE_INFINITY, fold=m_f, sum;
  double a, alam2=0, b, disc=0, maxalam=1.0, rhs1, rhs2, tmplam;
  double[] x=new double[len];
  for (sum=0.0, i=0; i < len; i++) {
    if (!isFixed[i])     sum+=direct[i] * direct[i];
  }
  sum=Math.sqrt(sum);
  if (m_Debug)   System.err.println("fold:  " + Utils.doubleToString(fold,10,7) + "\n"+ "sum:  "+ Utils.doubleToString(sum,10,7)+ "\n"+ "stpmax:  "+ Utils.doubleToString(stpmax,10,7));
  if (sum > stpmax) {
    for (i=0; i < len; i++)     if (!isFixed[i])     direct[i]*=stpmax / sum;
  }
 else   maxalam=stpmax / sum;
  m_Slope=0.0;
  for (i=0; i < len; i++) {
    x[i]=xold[i];
    if (!isFixed[i])     m_Slope+=gradient[i] * direct[i];
  }
  if (m_Debug)   System.err.print("slope:  " + Utils.doubleToString(m_Slope,10,7) + "\n");
  if (Math.abs(m_Slope) <= m_Zero) {
    if (m_Debug)     System.err.println("Gradient and direction orthogonal -- " + "Min. found with current fixed variables" + " (or all variables fixed). Try to release"+ " some variables now.");
    return x;
  }
  if (m_Slope > m_Zero) {
    if (m_Debug)     for (int h=0; h < x.length; h++)     System.err.println(h + ": isFixed=" + isFixed[h]+ ", x="+ x[h]+ ", grad="+ gradient[h]+ ", direct="+ direct[h]);
    throw new Exception("g'*p positive! -- Try to debug from here: line 327.");
  }
  test=0.0;
  for (i=0; i < len; i++) {
    if (!isFixed[i]) {
      temp=Math.abs(direct[i]) / Math.max(Math.abs(x[i]),1.0);
      if (temp > test)       test=temp;
    }
  }
  if (test > m_Zero)   alamin=m_TOLX / test;
 else {
    if (m_Debug)     System.err.println("Zero directions for all free variables -- " + "Min. found with current fixed variables" + " (or all variables fixed). Try to release"+ " some variables now.");
    return x;
  }
  for (i=0; i < len; i++) {
    if (!isFixed[i]) {
      double alpi;
      if ((direct[i] < -m_Epsilon) && !Double.isNaN(nwsBounds[0][i])) {
        alpi=(nwsBounds[0][i] - xold[i]) / direct[i];
        if (alpi <= m_Zero) {
          if (m_Debug)           System.err.println("Fix variable " + i + " to lower bound "+ nwsBounds[0][i]+ " from value "+ xold[i]);
          x[i]=nwsBounds[0][i];
          isFixed[i]=true;
          alpha=0.0;
          nwsBounds[0][i]=Double.NaN;
          wsBdsIndx.addElement(i);
        }
 else         if (alpha > alpi) {
          alpha=alpi;
          fixedOne=i;
        }
      }
 else       if ((direct[i] > m_Epsilon) && !Double.isNaN(nwsBounds[1][i])) {
        alpi=(nwsBounds[1][i] - xold[i]) / direct[i];
        if (alpi <= m_Zero) {
          if (m_Debug)           System.err.println("Fix variable " + i + " to upper bound "+ nwsBounds[1][i]+ " from value "+ xold[i]);
          x[i]=nwsBounds[1][i];
          isFixed[i]=true;
          alpha=0.0;
          nwsBounds[1][i]=Double.NaN;
          wsBdsIndx.addElement(i);
        }
 else         if (alpha > alpi) {
          alpha=alpi;
          fixedOne=i;
        }
      }
    }
  }
  if (m_Debug) {
    System.err.println("alamin: " + Utils.doubleToString(alamin,10,7));
    System.err.println("alpha: " + Utils.doubleToString(alpha,10,7));
  }
  if (alpha <= m_Zero) {
    m_IsZeroStep=true;
    if (m_Debug)     System.err.println("Alpha too small, try again");
    return x;
  }
  alam=alpha;
  if (alam > 1.0)   alam=1.0;
  double initF=fold, hi=alam, lo=alam, newSlope=0, fhi=m_f, flo=m_f;
  double[] newGrad;
  kloop:   for (k=0; ; k++) {
    if (m_Debug)     System.err.println("\nLine search iteration: " + k);
    for (i=0; i < len; i++) {
      if (!isFixed[i]) {
        x[i]=xold[i] + alam * direct[i];
        if (!Double.isNaN(nwsBounds[0][i]) && (x[i] < nwsBounds[0][i])) {
          x[i]=nwsBounds[0][i];
        }
 else         if (!Double.isNaN(nwsBounds[1][i]) && (x[i] > nwsBounds[1][i])) {
          x[i]=nwsBounds[1][i];
        }
      }
    }
    m_f=objectiveFunction(x);
    if (Double.isNaN(m_f))     throw new Exception("Objective function value is NaN!");
    while (Double.isInfinite(m_f)) {
      if (m_Debug)       System.err.println("Too large m_f.  Shrink step by half.");
      alam*=0.5;
      if (alam <= m_Epsilon) {
        if (m_Debug)         System.err.println("Wrong starting points, change them!");
        return x;
      }
      for (i=0; i < len; i++)       if (!isFixed[i])       x[i]=xold[i] + alam * direct[i];
      m_f=objectiveFunction(x);
      if (Double.isNaN(m_f))       throw new Exception("Objective function value is NaN!");
      initF=Double.POSITIVE_INFINITY;
    }
    if (m_Debug) {
      System.err.println("obj. function: " + Utils.doubleToString(m_f,10,7));
      System.err.println("threshold: " + Utils.doubleToString(fold + m_ALF * alam * m_Slope,10,7));
    }
    if (m_f <= fold + m_ALF * alam * m_Slope) {
      if (m_Debug)       System.err.println("Sufficient function decrease (alpha condition): ");
      newGrad=evaluateGradient(x);
      for (newSlope=0.0, i=0; i < len; i++)       if (!isFixed[i])       newSlope+=newGrad[i] * direct[i];
      if (newSlope >= m_BETA * m_Slope) {
        if (m_Debug)         System.err.println("Increasing derivatives (beta condition): ");
        if ((fixedOne != -1) && (alam >= alpha)) {
          if (direct[fixedOne] > 0) {
            x[fixedOne]=nwsBounds[1][fixedOne];
            nwsBounds[1][fixedOne]=Double.NaN;
          }
 else {
            x[fixedOne]=nwsBounds[0][fixedOne];
            nwsBounds[0][fixedOne]=Double.NaN;
          }
          if (m_Debug)           System.err.println("Fix variable " + fixedOne + " to bound "+ x[fixedOne]+ " from value "+ xold[fixedOne]);
          isFixed[fixedOne]=true;
          wsBdsIndx.addElement(fixedOne);
        }
        return x;
      }
 else       if (k == 0) {
        double upper=Math.min(alpha,maxalam);
        if (m_Debug)         System.err.println("Alpha condition holds, increase alpha... ");
        while (!((alam >= upper) || (m_f > fold + m_ALF * alam * m_Slope))) {
          lo=alam;
          flo=m_f;
          alam*=2.0;
          if (alam >= upper)           alam=upper;
          for (i=0; i < len; i++)           if (!isFixed[i])           x[i]=xold[i] + alam * direct[i];
          m_f=objectiveFunction(x);
          if (Double.isNaN(m_f))           throw new Exception("Objective function value is NaN!");
          newGrad=evaluateGradient(x);
          for (newSlope=0.0, i=0; i < len; i++)           if (!isFixed[i])           newSlope+=newGrad[i] * direct[i];
          if (newSlope >= m_BETA * m_Slope) {
            if (m_Debug)             System.err.println("Increasing derivatives (beta condition): \n" + "newSlope = " + Utils.doubleToString(newSlope,10,7));
            if ((fixedOne != -1) && (alam >= alpha)) {
              if (direct[fixedOne] > 0) {
                x[fixedOne]=nwsBounds[1][fixedOne];
                nwsBounds[1][fixedOne]=Double.NaN;
              }
 else {
                x[fixedOne]=nwsBounds[0][fixedOne];
                nwsBounds[0][fixedOne]=Double.NaN;
              }
              if (m_Debug)               System.err.println("Fix variable " + fixedOne + " to bound "+ x[fixedOne]+ " from value "+ xold[fixedOne]);
              isFixed[fixedOne]=true;
              wsBdsIndx.addElement(fixedOne);
            }
            return x;
          }
        }
        hi=alam;
        fhi=m_f;
        break kloop;
      }
 else {
        if (m_Debug)         System.err.println("Alpha condition holds.");
        hi=alam2;
        lo=alam;
        flo=m_f;
        break kloop;
      }
    }
 else     if (alam < alamin) {
      if (initF < fold) {
        alam=Math.min(1.0,alpha);
        for (i=0; i < len; i++)         if (!isFixed[i])         x[i]=xold[i] + alam * direct[i];
        if (m_Debug)         System.err.println("No feasible lambda: still take" + " alpha=" + alam);
        if ((fixedOne != -1) && (alam >= alpha)) {
          if (direct[fixedOne] > 0) {
            x[fixedOne]=nwsBounds[1][fixedOne];
            nwsBounds[1][fixedOne]=Double.NaN;
          }
 else {
            x[fixedOne]=nwsBounds[0][fixedOne];
            nwsBounds[0][fixedOne]=Double.NaN;
          }
          if (m_Debug)           System.err.println("Fix variable " + fixedOne + " to bound "+ x[fixedOne]+ " from value "+ xold[fixedOne]);
          isFixed[fixedOne]=true;
          wsBdsIndx.addElement(fixedOne);
        }
      }
 else {
        for (i=0; i < len; i++)         x[i]=xold[i];
        m_f=fold;
        if (m_Debug)         System.err.println("Cannot find feasible lambda");
      }
      return x;
    }
 else {
      if (k == 0) {
        if (!Double.isInfinite(initF))         initF=m_f;
        tmplam=-0.5 * alam * m_Slope / ((m_f - fold) / alam - m_Slope);
      }
 else {
        rhs1=m_f - fold - alam * m_Slope;
        rhs2=fhi - fold - alam2 * m_Slope;
        a=(rhs1 / (alam * alam) - rhs2 / (alam2 * alam2)) / (alam - alam2);
        b=(-alam2 * rhs1 / (alam * alam) + alam * rhs2 / (alam2 * alam2)) / (alam - alam2);
        if (a == 0.0)         tmplam=-m_Slope / (2.0 * b);
 else {
          disc=b * b - 3.0 * a * m_Slope;
          if (disc < 0.0)           disc=0.0;
          double numerator=-b + Math.sqrt(disc);
          if (numerator >= Double.MAX_VALUE) {
            numerator=Double.MAX_VALUE;
            if (m_Debug)             System.err.print("-b+sqrt(disc) too large! Set it to MAX_VALUE.");
          }
          tmplam=numerator / (3.0 * a);
        }
        if (m_Debug)         System.err.print("Cubic interpolation: \n" + "a:   " + Utils.doubleToString(a,10,7) + "\n"+ "b:   "+ Utils.doubleToString(b,10,7)+ "\n"+ "disc:   "+ Utils.doubleToString(disc,10,7)+ "\n"+ "tmplam:   "+ tmplam+ "\n"+ "alam:   "+ Utils.doubleToString(alam,10,7)+ "\n");
        if (tmplam > 0.5 * alam)         tmplam=0.5 * alam;
      }
    }
    alam2=alam;
    fhi=m_f;
    alam=Math.max(tmplam,0.1 * alam);
    if (alam > alpha) {
      throw new Exception("Sth. wrong in lnsrch:" + "Lambda infeasible!(lambda=" + alam + ", alpha="+ alpha+ ", upper="+ tmplam+ "|"+ (-alpha * m_Slope / (2.0 * ((m_f - fold) / alpha - m_Slope)))+ ", m_f="+ m_f+ ", fold="+ fold+ ", slope="+ m_Slope);
    }
  }
  double ldiff=hi - lo, lincr;
  if (m_Debug)   System.err.println("Last stage of searching for beta condition (alam between " + Utils.doubleToString(lo,10,7) + " and "+ Utils.doubleToString(hi,10,7)+ ")...\n"+ "Quadratic Interpolation(QI):\n"+ "Last newSlope = "+ Utils.doubleToString(newSlope,10,7));
  while ((newSlope < m_BETA * m_Slope) && (ldiff >= alamin)) {
    lincr=-0.5 * newSlope * ldiff* ldiff / (fhi - flo - newSlope * ldiff);
    if (m_Debug)     System.err.println("fhi = " + fhi + "\n"+ "flo = "+ flo+ "\n"+ "ldiff = "+ ldiff+ "\n"+ "lincr (using QI) = "+ lincr+ "\n");
    if (lincr < 0.2 * ldiff)     lincr=0.2 * ldiff;
    alam=lo + lincr;
    if (alam >= hi) {
      alam=hi;
      lincr=ldiff;
    }
    for (i=0; i < len; i++)     if (!isFixed[i])     x[i]=xold[i] + alam * direct[i];
    m_f=objectiveFunction(x);
    if (Double.isNaN(m_f))     throw new Exception("Objective function value is NaN!");
    if (m_f > fold + m_ALF * alam * m_Slope) {
      ldiff=lincr;
      fhi=m_f;
    }
 else {
      newGrad=evaluateGradient(x);
      for (newSlope=0.0, i=0; i < len; i++)       if (!isFixed[i])       newSlope+=newGrad[i] * direct[i];
      if (newSlope < m_BETA * m_Slope) {
        lo=alam;
        ldiff-=lincr;
        flo=m_f;
      }
    }
  }
  if (newSlope < m_BETA * m_Slope) {
    if (m_Debug)     System.err.println("Beta condition cannot be satisfied, take alpha condition");
    alam=lo;
    for (i=0; i < len; i++)     if (!isFixed[i])     x[i]=xold[i] + alam * direct[i];
    m_f=flo;
  }
 else   if (m_Debug)   System.err.println("Both alpha and beta conditions are satisfied. alam=" + Utils.doubleToString(alam,10,7));
  if ((fixedOne != -1) && (alam >= alpha)) {
    if (direct[fixedOne] > 0) {
      x[fixedOne]=nwsBounds[1][fixedOne];
      nwsBounds[1][fixedOne]=Double.NaN;
    }
 else {
      x[fixedOne]=nwsBounds[0][fixedOne];
      nwsBounds[0][fixedOne]=Double.NaN;
    }
    if (m_Debug)     System.err.println("Fix variable " + fixedOne + " to bound "+ x[fixedOne]+ " from value "+ xold[fixedOne]);
    isFixed[fixedOne]=true;
    wsBdsIndx.addElement(fixedOne);
  }
  return x;
}
