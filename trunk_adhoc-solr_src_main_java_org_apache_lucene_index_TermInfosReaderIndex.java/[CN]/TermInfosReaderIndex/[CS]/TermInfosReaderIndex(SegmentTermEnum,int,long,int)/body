{
  this.totalIndexInterval=totalIndexInterval;
  indexSize=1 + ((int)indexEnum.size - 1) / indexDivisor;
  skipInterval=indexEnum.skipInterval;
  long initialSize=(long)(tiiFileLength * 1.5) / indexDivisor;
  PagedBytes dataPagedBytes=new PagedBytes(estimatePageBits(initialSize));
  PagedBytesDataOutput dataOutput=dataPagedBytes.getDataOutput();
  GrowableWriter indexToTerms=new GrowableWriter(4,indexSize,false);
  String currentField=null;
  List<String> fieldStrs=new ArrayList<String>();
  int fieldCounter=-1;
  for (int i=0; indexEnum.next(); i++) {
    Term term=indexEnum.term();
    if (currentField != term.field) {
      currentField=term.field;
      fieldStrs.add(currentField);
      fieldCounter++;
    }
    TermInfo termInfo=indexEnum.termInfo();
    indexToTerms.set(i,dataOutput.getPosition());
    dataOutput.writeVInt(fieldCounter);
    dataOutput.writeString(term.text());
    dataOutput.writeVInt(termInfo.docFreq);
    if (termInfo.docFreq >= skipInterval) {
      dataOutput.writeVInt(termInfo.skipOffset);
    }
    dataOutput.writeVLong(termInfo.freqPointer);
    dataOutput.writeVLong(termInfo.proxPointer);
    dataOutput.writeVLong(indexEnum.indexPointer);
    for (int j=1; j < indexDivisor; j++) {
      if (!indexEnum.next()) {
        break;
      }
    }
  }
  fields=new Term[fieldStrs.size()];
  for (int i=0; i < fields.length; i++) {
    fields[i]=new Term(fieldStrs.get(i));
  }
  dataPagedBytes.freeze(true);
  dataInput=dataPagedBytes.getDataInput();
  indexToDataOffset=indexToTerms.getMutable();
}
