{
  int i, j, k;
  int cl;
  double temp_diff, w_norm=1.0;
  double[] tempDistClass;
  int[] tempSortedClass=null;
  double distNormClass=1.0;
  double[] tempDistAtt;
  int[][] tempSortedAtt=null;
  double[] distNormAtt=null;
  int firstI, secondI;
  Instance inst=m_trainInstances.instance(instNum);
  cl=(int)m_trainInstances.instance(instNum).value(m_classIndex);
  if (m_weightByDistance) {
    tempDistClass=new double[m_stored[cl]];
    for (j=0, distNormClass=0; j < m_stored[cl]; j++) {
      tempDistClass[j]=m_karray[cl][j][0];
      distNormClass+=m_weightsByRank[j];
    }
    tempSortedClass=Utils.sort(tempDistClass);
    tempSortedAtt=new int[m_numClasses][1];
    distNormAtt=new double[m_numClasses];
    for (k=0; k < m_numClasses; k++) {
      if (k != cl) {
        tempDistAtt=new double[m_stored[k]];
        for (j=0, distNormAtt[k]=0; j < m_stored[k]; j++) {
          tempDistAtt[j]=m_karray[k][j][0];
          distNormAtt[k]+=m_weightsByRank[j];
        }
        tempSortedAtt[k]=Utils.sort(tempDistAtt);
      }
    }
  }
  if (m_numClasses > 2) {
    w_norm=(1.0 - m_classProbs[cl]);
  }
  for (j=0, temp_diff=0.0; j < m_stored[cl]; j++) {
    Instance cmp;
    cmp=(m_weightByDistance) ? m_trainInstances.instance((int)m_karray[cl][tempSortedClass[j]][1]) : m_trainInstances.instance((int)m_karray[cl][j][1]);
    for (int p1=0, p2=0; p1 < inst.numValues() || p2 < cmp.numValues(); ) {
      if (p1 >= inst.numValues()) {
        firstI=m_trainInstances.numAttributes();
      }
 else {
        firstI=inst.index(p1);
      }
      if (p2 >= cmp.numValues()) {
        secondI=m_trainInstances.numAttributes();
      }
 else {
        secondI=cmp.index(p2);
      }
      if (firstI == m_trainInstances.classIndex()) {
        p1++;
        continue;
      }
      if (secondI == m_trainInstances.classIndex()) {
        p2++;
        continue;
      }
      if (firstI == secondI) {
        i=firstI;
        temp_diff=difference(i,inst.valueSparse(p1),cmp.valueSparse(p2));
        p1++;
        p2++;
      }
 else       if (firstI > secondI) {
        i=secondI;
        temp_diff=difference(i,0,cmp.valueSparse(p2));
        p2++;
      }
 else {
        i=firstI;
        temp_diff=difference(i,inst.valueSparse(p1),0);
        p1++;
      }
      if (m_weightByDistance) {
        temp_diff*=(m_weightsByRank[j] / distNormClass);
      }
 else {
        if (m_stored[cl] > 0) {
          temp_diff/=(double)m_stored[cl];
        }
      }
      m_weights[i]-=temp_diff;
    }
  }
  temp_diff=0.0;
  for (k=0; k < m_numClasses; k++) {
    if (k != cl) {
      for (j=0; j < m_stored[k]; j++) {
        Instance cmp;
        cmp=(m_weightByDistance) ? m_trainInstances.instance((int)m_karray[k][tempSortedAtt[k][j]][1]) : m_trainInstances.instance((int)m_karray[k][j][1]);
        for (int p1=0, p2=0; p1 < inst.numValues() || p2 < cmp.numValues(); ) {
          if (p1 >= inst.numValues()) {
            firstI=m_trainInstances.numAttributes();
          }
 else {
            firstI=inst.index(p1);
          }
          if (p2 >= cmp.numValues()) {
            secondI=m_trainInstances.numAttributes();
          }
 else {
            secondI=cmp.index(p2);
          }
          if (firstI == m_trainInstances.classIndex()) {
            p1++;
            continue;
          }
          if (secondI == m_trainInstances.classIndex()) {
            p2++;
            continue;
          }
          if (firstI == secondI) {
            i=firstI;
            temp_diff=difference(i,inst.valueSparse(p1),cmp.valueSparse(p2));
            p1++;
            p2++;
          }
 else           if (firstI > secondI) {
            i=secondI;
            temp_diff=difference(i,0,cmp.valueSparse(p2));
            p2++;
          }
 else {
            i=firstI;
            temp_diff=difference(i,inst.valueSparse(p1),0);
            p1++;
          }
          if (m_weightByDistance) {
            temp_diff*=(m_weightsByRank[j] / distNormAtt[k]);
          }
 else {
            if (m_stored[k] > 0) {
              temp_diff/=(double)m_stored[k];
            }
          }
          if (m_numClasses > 2) {
            m_weights[i]+=((m_classProbs[k] / w_norm) * temp_diff);
          }
 else {
            m_weights[i]+=temp_diff;
          }
        }
      }
    }
  }
}
