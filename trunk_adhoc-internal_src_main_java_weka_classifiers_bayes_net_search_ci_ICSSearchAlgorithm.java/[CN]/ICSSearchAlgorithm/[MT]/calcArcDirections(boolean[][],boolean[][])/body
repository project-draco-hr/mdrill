{
  int i, j, k, m;
  boolean bFound;
  do {
    bFound=false;
    for (i=0; i < maxn(); i++) {
      for (j=0; j < maxn(); j++) {
        if (i != j && arrows[i][j]) {
          for (k=0; k < maxn(); k++) {
            if (i != k && j != k && edges[j][k] && !edges[i][k] && !arrows[j][k] && !arrows[k][j]) {
              arrows[j][k]=true;
              bFound=true;
            }
          }
        }
      }
    }
    for (i=0; i < maxn(); i++) {
      for (j=0; j < maxn(); j++) {
        if (i != j && arrows[i][j]) {
          for (k=0; k < maxn(); k++) {
            if (i != k && j != k && edges[i][k] && arrows[j][k] && !arrows[i][k] && !arrows[k][i]) {
              arrows[i][k]=true;
              bFound=true;
            }
          }
        }
      }
    }
    for (i=0; i < maxn(); i++) {
      for (j=0; j < maxn(); j++) {
        if (i != j && arrows[i][j]) {
          for (k=0; k < maxn(); k++) {
            if (k != i && k != j && arrows[k][j] && !edges[k][i]) {
              for (m=0; m < maxn(); m++) {
                if (m != i && m != j && m != k && edges[m][i] && !arrows[m][i] && !arrows[i][m] && edges[m][j] && !arrows[m][j] && !arrows[j][m] && edges[m][k] && !arrows[m][k] && !arrows[k][m]) {
                  arrows[m][j]=true;
                  bFound=true;
                }
              }
            }
          }
        }
      }
    }
    for (i=0; i < maxn(); i++) {
      for (j=0; j < maxn(); j++) {
        if (i != j && arrows[j][i]) {
          for (k=0; k < maxn(); k++) {
            if (k != i && k != j && edges[k][j] && !arrows[k][j] && !arrows[j][k] && edges[k][i] && !arrows[k][i] && !arrows[i][k]) {
              for (m=0; m < maxn(); m++) {
                if (m != i && m != j && m != k && edges[m][i] && !arrows[m][i] && !arrows[i][m] && edges[m][k] && !arrows[m][k] && !arrows[k][m]) {
                  arrows[i][m]=true;
                  arrows[k][m]=true;
                  bFound=true;
                }
              }
            }
          }
        }
      }
    }
    if (!bFound) {
      i=0;
      while (!bFound && i < maxn()) {
        j=0;
        while (!bFound && j < maxn()) {
          if (edges[i][j] && !arrows[i][j] && !arrows[j][i]) {
            arrows[i][j]=true;
            bFound=true;
          }
          j++;
        }
        i++;
      }
    }
  }
 while (bFound);
}
