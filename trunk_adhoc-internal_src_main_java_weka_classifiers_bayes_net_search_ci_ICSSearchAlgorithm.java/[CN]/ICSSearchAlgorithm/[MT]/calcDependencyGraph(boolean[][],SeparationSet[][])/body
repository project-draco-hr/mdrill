{
  SeparationSet oSepSet;
  for (int iNode1=0; iNode1 < maxn(); iNode1++) {
    for (int iNode2=0; iNode2 < maxn(); iNode2++) {
      edges[iNode1][iNode2]=true;
    }
  }
  for (int iNode1=0; iNode1 < maxn(); iNode1++) {
    edges[iNode1][iNode1]=false;
  }
  for (int iCardinality=0; iCardinality <= getMaxCardinality(); iCardinality++) {
    for (int iNode1=0; iNode1 <= maxn() - 2; iNode1++) {
      for (int iNode2=iNode1 + 1; iNode2 < maxn(); iNode2++) {
        if (edges[iNode1][iNode2]) {
          oSepSet=existsSepSet(iNode1,iNode2,iCardinality,edges);
          if (oSepSet != null) {
            edges[iNode1][iNode2]=false;
            edges[iNode2][iNode1]=false;
            sepsets[iNode1][iNode2]=oSepSet;
            sepsets[iNode2][iNode1]=oSepSet;
            System.err.print("I(" + name(iNode1) + ", {");
            for (int iNode3=0; iNode3 < iCardinality; iNode3++) {
              System.err.print(name(oSepSet.m_set[iNode3]) + " ");
            }
            System.err.print("} ," + name(iNode2) + ")\n");
          }
        }
      }
    }
    System.err.print(iCardinality + " ");
    for (int iNode1=0; iNode1 < maxn(); iNode1++) {
      System.err.print(name(iNode1) + " ");
    }
    System.err.print('\n');
    for (int iNode1=0; iNode1 < maxn(); iNode1++) {
      for (int iNode2=0; iNode2 < maxn(); iNode2++) {
        if (edges[iNode1][iNode2])         System.err.print("X ");
 else         System.err.print(". ");
      }
      System.err.print(name(iNode1) + " ");
      System.err.print('\n');
    }
  }
}
