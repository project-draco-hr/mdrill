{
  int iNode3, iZ;
  SeparationSet Z=new SeparationSet();
  Z.m_set[nCardinality]=-1;
  if (nCardinality > 0) {
    Z.m_set[0]=next(-1,iNode1,iNode2,edges);
    iNode3=1;
    while (iNode3 < nCardinality) {
      Z.m_set[iNode3]=next(Z.m_set[iNode3 - 1],iNode1,iNode2,edges);
      iNode3++;
    }
  }
  if (nCardinality > 0) {
    iZ=maxn() - Z.m_set[nCardinality - 1] - 1;
  }
 else {
    iZ=0;
  }
  while (iZ >= 0) {
    if (isConditionalIndependent(iNode2,iNode1,Z.m_set,nCardinality)) {
      return Z;
    }
    if (nCardinality > 0) {
      Z.m_set[nCardinality - 1]=next(Z.m_set[nCardinality - 1],iNode1,iNode2,edges);
    }
    iZ=nCardinality - 1;
    while (iZ >= 0 && Z.m_set[iZ] >= maxn()) {
      iZ=nCardinality - 1;
      while (iZ >= 0 && Z.m_set[iZ] >= maxn()) {
        iZ--;
      }
      if (iZ < 0) {
        break;
      }
      Z.m_set[iZ]=next(Z.m_set[iZ],iNode1,iNode2,edges);
      for (iNode3=iZ + 1; iNode3 < nCardinality; iNode3++) {
        Z.m_set[iNode3]=next(Z.m_set[iNode3 - 1],iNode1,iNode2,edges);
      }
      iZ=nCardinality - 1;
    }
  }
  return null;
}
