{
  int x, y;
  g.setColor(this.getBackground().darker().darker());
  g.drawRect(xpos - 1,ypos - 1,cellSize + 1,cellSize + 1);
  g.setColor(Color.white);
  g.fillRect(xpos,ypos,cellSize,cellSize);
  for (int i=0; i < m_points.length; i++) {
    if (!(m_missing[i][yattrib] || m_missing[i][xattrib])) {
      if (m_type[0] == 0)       if (m_missing[i][m_missing[0].length - 1])       g.setColor(m_defaultColors[m_defaultColors.length - 1]);
 else       g.setColor(new Color(m_pointColors[i],150,(255 - m_pointColors[i])));
 else       g.setColor((Color)m_colorList.elementAt(m_pointColors[i]));
      if (m_points[i][xattrib] + jitterVals[i][0] < 0 || m_points[i][xattrib] + jitterVals[i][0] > cellRange)       if (cellRange - m_points[i][yattrib] + jitterVals[i][1] < 0 || cellRange - m_points[i][yattrib] + jitterVals[i][1] > cellRange) {
        x=intpad + m_points[i][xattrib];
        y=intpad + (cellRange - m_points[i][yattrib]);
      }
 else {
        x=intpad + m_points[i][xattrib];
        y=intpad + (cellRange - m_points[i][yattrib]) + jitterVals[i][1];
      }
 else       if (cellRange - m_points[i][yattrib] + jitterVals[i][1] < 0 || cellRange - m_points[i][yattrib] + jitterVals[i][1] > cellRange) {
        x=intpad + m_points[i][xattrib] + jitterVals[i][0];
        y=intpad + (cellRange - m_points[i][yattrib]);
      }
 else {
        x=intpad + m_points[i][xattrib] + jitterVals[i][0];
        y=intpad + (cellRange - m_points[i][yattrib]) + jitterVals[i][1];
      }
      if (datapointSize == 1)       g.drawLine(x + xpos,y + ypos,x + xpos,y + ypos);
 else       g.drawOval(x + xpos - datapointSize / 2,y + ypos - datapointSize / 2,datapointSize,datapointSize);
    }
  }
  g.setColor(fontColor);
}
