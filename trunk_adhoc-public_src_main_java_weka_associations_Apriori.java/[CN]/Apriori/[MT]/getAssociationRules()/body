{
  List<AssociationRule> rules=new ArrayList<AssociationRule>();
  if (m_allTheRules != null && m_allTheRules.length > 3) {
    for (int i=0; i < m_allTheRules[0].size(); i++) {
      List<Item> premise=new ArrayList<Item>();
      List<Item> consequence=new ArrayList<Item>();
      AprioriItemSet premiseSet=(AprioriItemSet)m_allTheRules[0].get(i);
      AprioriItemSet consequenceSet=(AprioriItemSet)m_allTheRules[1].get(i);
      for (int j=0; j < m_instances.numAttributes(); j++) {
        if (premiseSet.m_items[j] != -1) {
          try {
            Item newItem=new NominalItem(m_instances.attribute(j),premiseSet.m_items[j]);
            premise.add(newItem);
          }
 catch (          Exception ex) {
            ex.printStackTrace();
          }
        }
        if (consequenceSet.m_items[j] != -1) {
          try {
            Item newItem=new NominalItem(m_instances.attribute(j),consequenceSet.m_items[j]);
            consequence.add(newItem);
          }
 catch (          Exception ex) {
            ex.printStackTrace();
          }
        }
      }
      int totalTrans=premiseSet.m_totalTransactions;
      int totalSupport=consequenceSet.m_counter;
      int premiseSupport=premiseSet.m_counter;
      double lift=((Double)m_allTheRules[3].get(i)).doubleValue();
      double conf=((Double)m_allTheRules[2].get(i)).doubleValue();
      int consequenceSupport=(int)((totalTrans * conf) / lift);
      DefaultAssociationRule.METRIC_TYPE metric=null;
switch (m_metricType) {
case CONFIDENCE:
        metric=DefaultAssociationRule.METRIC_TYPE.CONFIDENCE;
      break;
case LIFT:
    metric=DefaultAssociationRule.METRIC_TYPE.LIFT;
  break;
case LEVERAGE:
metric=DefaultAssociationRule.METRIC_TYPE.LEVERAGE;
break;
case CONVICTION:
metric=DefaultAssociationRule.METRIC_TYPE.CONVICTION;
break;
}
DefaultAssociationRule newRule=new DefaultAssociationRule(premise,consequence,metric,premiseSupport,consequenceSupport,totalSupport,totalTrans);
rules.add(newRule);
}
}
return new AssociationRules(rules,this);
}
