{
  StringBuffer text=new StringBuffer();
  if (m_Ls.size() <= 1)   return "\nNo large itemsets and rules found!\n";
  text.append("\nApriori\n=======\n\n");
  text.append("Minimum support: " + Utils.doubleToString(m_minSupport,2) + " ("+ ((int)(m_minSupport * (double)m_instances.numInstances() + 0.5))+ " instances)"+ '\n');
  text.append("Minimum metric <");
switch (m_metricType) {
case CONFIDENCE:
    text.append("confidence>: ");
  break;
case LIFT:
text.append("lift>: ");
break;
case LEVERAGE:
text.append("leverage>: ");
break;
case CONVICTION:
text.append("conviction>: ");
break;
}
text.append(Utils.doubleToString(m_minMetric,2) + '\n');
if (m_significanceLevel != -1) text.append("Significance level: " + Utils.doubleToString(m_significanceLevel,2) + '\n');
text.append("Number of cycles performed: " + m_cycles + '\n');
text.append("\nGenerated sets of large itemsets:\n");
if (!m_car) {
for (int i=0; i < m_Ls.size(); i++) {
text.append("\nSize of set of large itemsets L(" + (i + 1) + "): "+ ((FastVector)m_Ls.elementAt(i)).size()+ '\n');
if (m_outputItemSets) {
text.append("\nLarge Itemsets L(" + (i + 1) + "):\n");
for (int j=0; j < ((FastVector)m_Ls.elementAt(i)).size(); j++) text.append(((AprioriItemSet)((FastVector)m_Ls.elementAt(i)).elementAt(j)).toString(m_instances) + "\n");
}
}
text.append("\nBest rules found:\n\n");
for (int i=0; i < m_allTheRules[0].size(); i++) {
text.append(Utils.doubleToString((double)i + 1,(int)(Math.log(m_numRules) / Math.log(10) + 1),0) + ". " + ((AprioriItemSet)m_allTheRules[0].elementAt(i)).toString(m_instances)+ " ==> "+ ((AprioriItemSet)m_allTheRules[1].elementAt(i)).toString(m_instances));
text.append("    " + ((m_metricType == CONFIDENCE) ? "<" : "") + "conf:("+ Utils.doubleToString(((Double)m_allTheRules[2].elementAt(i)).doubleValue(),2)+ ")"+ ((m_metricType == CONFIDENCE) ? ">" : ""));
text.append((m_metricType == LIFT ? " <" : "") + " lift:(" + Utils.doubleToString(((Double)m_allTheRules[3].elementAt(i)).doubleValue(),2)+ ")"+ (m_metricType == LIFT ? ">" : ""));
text.append((m_metricType == LEVERAGE ? " <" : "") + " lev:(" + Utils.doubleToString(((Double)m_allTheRules[4].elementAt(i)).doubleValue(),2)+ ")");
text.append(" [" + (int)(((Double)m_allTheRules[4].elementAt(i)).doubleValue() * (double)m_instances.numInstances()) + "]"+ (m_metricType == LEVERAGE ? ">" : ""));
text.append((m_metricType == CONVICTION ? " <" : "") + " conv:(" + Utils.doubleToString(((Double)m_allTheRules[5].elementAt(i)).doubleValue(),2)+ ")"+ (m_metricType == CONVICTION ? ">" : ""));
text.append('\n');
}
}
 else {
for (int i=0; i < m_Ls.size(); i++) {
text.append("\nSize of set of large itemsets L(" + (i + 1) + "): "+ ((FastVector)m_Ls.elementAt(i)).size()+ '\n');
if (m_outputItemSets) {
text.append("\nLarge Itemsets L(" + (i + 1) + "):\n");
for (int j=0; j < ((FastVector)m_Ls.elementAt(i)).size(); j++) {
text.append(((ItemSet)((FastVector)m_Ls.elementAt(i)).elementAt(j)).toString(m_instances) + "\n");
text.append(((LabeledItemSet)((FastVector)m_Ls.elementAt(i)).elementAt(j)).m_classLabel + "  ");
text.append(((LabeledItemSet)((FastVector)m_Ls.elementAt(i)).elementAt(j)).support() + "\n");
}
}
}
text.append("\nBest rules found:\n\n");
for (int i=0; i < m_allTheRules[0].size(); i++) {
text.append(Utils.doubleToString((double)i + 1,(int)(Math.log(m_numRules) / Math.log(10) + 1),0) + ". " + ((ItemSet)m_allTheRules[0].elementAt(i)).toString(m_instances)+ " ==> "+ ((ItemSet)m_allTheRules[1].elementAt(i)).toString(m_onlyClass)+ "    conf:("+ Utils.doubleToString(((Double)m_allTheRules[2].elementAt(i)).doubleValue(),2)+ ")");
text.append('\n');
}
}
return text.toString();
}
