{
  int numInstances=instances.numInstances();
  StringBuffer deleteString=new StringBuffer();
  int removeCount=0;
  boolean first=true;
  int maxCount=0;
  for (int i=0; i < instances.numAttributes(); i++) {
    AttributeStats as=instances.attributeStats(i);
    if (m_upperBoundMinSupport == 1.0 && maxCount != numInstances) {
      int[] counts=as.nominalCounts;
      if (counts[Utils.maxIndex(counts)] > maxCount) {
        maxCount=counts[Utils.maxIndex(counts)];
      }
    }
    if (as.missingCount == numInstances) {
      if (first) {
        deleteString.append((i + 1));
        first=false;
      }
 else {
        deleteString.append("," + (i + 1));
      }
      removeCount++;
    }
  }
  if (m_verbose) {
    System.err.println("Removed : " + removeCount + " columns with all missing "+ "values.");
  }
  if (m_upperBoundMinSupport == 1.0 && maxCount != numInstances) {
    m_upperBoundMinSupport=(double)maxCount / (double)numInstances;
    if (m_verbose) {
      System.err.println("Setting upper bound min support to : " + m_upperBoundMinSupport);
    }
  }
  if (deleteString.toString().length() > 0) {
    Remove af=new Remove();
    af.setAttributeIndices(deleteString.toString());
    af.setInvertSelection(false);
    af.setInputFormat(instances);
    Instances newInst=Filter.useFilter(instances,af);
    return newInst;
  }
  return instances;
}
