{
  boolean success=false;
  if (indexDivisor < 1 && indexDivisor != -1) {
    throw new IllegalArgumentException("indexDivisor must be -1 (don't load terms index) or greater than 0: got " + indexDivisor);
  }
  try {
    directory=dir;
    segment=seg;
    fieldInfos=fis;
    long tisfilesize=-1;
    String tisFileSize=IndexFileNames.segmentFileName(segment,IndexFileNames.TERMS_EXTENSION_SIZE);
    if (directory.fileExists(tisFileSize)) {
      IndexInput sizebuff=directory.openInput(tisFileSize,readBufferSize);
      tisfilesize=sizebuff.readLong();
      sizebuff.close();
    }
    String filename=IndexFileNames.segmentFileName(segment,IndexFileNames.TERMS_EXTENSION);
    final String indexFileName=IndexFileNames.segmentFileName(segment,IndexFileNames.TERMS_INDEX_EXTENSION);
    final String indexFileNamequick=IndexFileNames.segmentFileName(segment,IndexFileNames.TERMS_INDEX_EXTENSION_QUICK);
    if (directory instanceof FSDirectory) {
      FSDirectory dddir=(FSDirectory)directory;
      String absPath=dddir.getDirectory().getAbsolutePath();
      tisInput=new BlockBufferInput(directory.openInput(filename,readBufferSize),absPath + "@" + filename);
      tiiInput=directory.openInput(indexFileName,readBufferSize);
    }
 else {
      tisInput=directory.openInput(filename,readBufferSize);
      tiiInput=directory.openInput(indexFileName,readBufferSize);
    }
    if (directory.fileExists(indexFileNamequick)) {
      tiiInputquick=directory.openInput(indexFileNamequick,readBufferSize);
      this.isQuickMode=true;
    }
    origEnum=new SegmentTermEnum(tisInput,fieldInfos,false,tisfilesize);
    size=origEnum.size;
    if (indexDivisor != -1) {
      long tiifilesize=-1;
      String tiiFileSize=IndexFileNames.segmentFileName(segment,IndexFileNames.TERMS_INDEX_EXTENSION_SIZE);
      if (directory.fileExists(tiiFileSize)) {
        IndexInput sizebuff=directory.openInput(tiiFileSize,readBufferSize);
        tiifilesize=sizebuff.readLong();
        sizebuff.close();
      }
      totalIndexInterval=origEnum.indexInterval * indexDivisor;
      SegmentTermEnum indexEnum=null;
      try {
        if (this.isQuickMode) {
          index=new TermInfosReaderIndexQuick(tiiInput,tiiInputquick,fieldInfos,tiifilesize,indexDivisor,dir.fileLength(indexFileName),totalIndexInterval);
        }
 else {
          indexEnum=new SegmentTermEnum(tiiInput,fieldInfos,true,tiifilesize);
          index=new TermInfosReaderIndex(indexEnum,indexDivisor,dir.fileLength(indexFileName),totalIndexInterval);
        }
        indexLength=index.length();
      }
  finally {
        if (indexEnum != null) {
          indexEnum.close();
        }
      }
    }
 else {
      totalIndexInterval=-1;
      index=null;
      indexLength=-1;
    }
    success=true;
  }
  finally {
    if (!success) {
      close();
    }
  }
}
