{
  setDebug(Utils.getFlag('D',options));
  String classIndex=Utils.getOption('c',options);
  if (classIndex.length() != 0) {
    if (classIndex.toLowerCase().equals("last")) {
      setClassIndex(0);
    }
 else     if (classIndex.toLowerCase().equals("first")) {
      setClassIndex(1);
    }
 else {
      setClassIndex(Integer.parseInt(classIndex));
    }
  }
 else {
    setClassIndex(0);
  }
  String trainIterations=Utils.getOption('x',options);
  if (trainIterations.length() != 0) {
    setTrainIterations(Integer.parseInt(trainIterations));
  }
 else {
    setTrainIterations(50);
  }
  String trainPoolSize=Utils.getOption('T',options);
  if (trainPoolSize.length() != 0) {
    setTrainPoolSize(Integer.parseInt(trainPoolSize));
  }
 else {
    setTrainPoolSize(100);
  }
  String seedString=Utils.getOption('s',options);
  if (seedString.length() != 0) {
    setSeed(Integer.parseInt(seedString));
  }
 else {
    setSeed(1);
  }
  String dataFile=Utils.getOption('t',options);
  if (dataFile.length() == 0) {
    throw new Exception("An arff file must be specified" + " with the -t option.");
  }
  setDataFileName(dataFile);
  String classifierName=Utils.getOption('W',options);
  if (classifierName.length() == 0) {
    throw new Exception("A learner must be specified with the -W option.");
  }
  setClassifier(AbstractClassifier.forName(classifierName,Utils.partitionOptions(options)));
}
