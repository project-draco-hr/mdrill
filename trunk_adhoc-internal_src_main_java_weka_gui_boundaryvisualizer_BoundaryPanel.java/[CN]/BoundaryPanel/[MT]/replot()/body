{
  if (m_probabilityCache[0][0] == null) {
    return;
  }
  m_stopReplotting=true;
  m_pausePlotting=true;
  try {
    Thread.sleep(300);
  }
 catch (  Exception ex) {
  }
  final Thread replotThread=new Thread(){
    public void run(){
      m_stopReplotting=false;
      int size2=m_size / 2;
      finishedReplot:       for (int i=0; i < m_panelHeight; i+=m_size) {
        for (int j=0; j < m_panelWidth; j+=m_size) {
          if (m_probabilityCache[i][j] == null || m_stopReplotting) {
            break finishedReplot;
          }
          boolean update=(j == 0 && i % 2 == 0);
          if (i < m_panelHeight && j < m_panelWidth) {
            if (m_initialTiling || m_size == 1) {
              if (m_probabilityCache[i][j] == null) {
                break finishedReplot;
              }
              plotPoint(j,i,m_size,m_size,m_probabilityCache[i][j],update);
            }
 else {
              if (m_probabilityCache[i + size2][j] == null) {
                break finishedReplot;
              }
              plotPoint(j,i + size2,size2,size2,m_probabilityCache[i + size2][j],update);
              if (m_probabilityCache[i + size2][j + size2] == null) {
                break finishedReplot;
              }
              plotPoint(j + size2,i + size2,size2,size2,m_probabilityCache[i + size2][j + size2],update);
              if (m_probabilityCache[i][j + size2] == null) {
                break finishedReplot;
              }
              plotPoint(j + size2,i,size2,size2,m_probabilityCache[i + size2][j],update);
            }
          }
        }
      }
      update();
      if (m_plotTrainingData) {
        plotTrainingData();
      }
      m_pausePlotting=false;
      if (!m_stopPlotting) {
synchronized (m_dummy) {
          m_dummy.notifyAll();
        }
      }
    }
  }
;
  replotThread.start();
}
