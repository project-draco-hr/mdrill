{
  m_minX=Double.MAX_VALUE;
  m_minY=Double.MAX_VALUE;
  m_maxX=Double.MIN_VALUE;
  m_maxY=Double.MIN_VALUE;
  boolean allPointsLessThanOne=true;
  if (m_trainingData.numInstances() == 0) {
    m_minX=m_minY=0.0;
    m_maxX=m_maxY=1.0;
  }
 else {
    for (int i=0; i < m_trainingData.numInstances(); i++) {
      Instance inst=m_trainingData.instance(i);
      double x=inst.value(m_xAttribute);
      double y=inst.value(m_yAttribute);
      if (!Utils.isMissingValue(x) && !Utils.isMissingValue(y)) {
        if (x < m_minX) {
          m_minX=x;
        }
        if (x > m_maxX) {
          m_maxX=x;
        }
        if (y < m_minY) {
          m_minY=y;
        }
        if (y > m_maxY) {
          m_maxY=y;
        }
        if (x > 1.0 || y > 1.0)         allPointsLessThanOne=false;
      }
    }
  }
  if (m_minX == m_maxX)   m_minX=0;
  if (m_minY == m_maxY)   m_minY=0;
  if (m_minX == Double.MAX_VALUE)   m_minX=0;
  if (m_minY == Double.MAX_VALUE)   m_minY=0;
  if (m_maxX == Double.MIN_VALUE)   m_maxX=1;
  if (m_maxY == Double.MIN_VALUE)   m_maxY=1;
  if (allPointsLessThanOne) {
    m_minX=m_minY=0.0;
    m_maxX=m_maxY=1.0;
  }
  m_rangeX=(m_maxX - m_minX);
  m_rangeY=(m_maxY - m_minY);
  m_pixWidth=m_rangeX / (double)m_panelWidth;
  m_pixHeight=m_rangeY / (double)m_panelHeight;
}
