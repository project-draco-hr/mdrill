{
  String tmpStr;
  super.setOptions(options);
  tmpStr=Utils.getOption('k',options);
  if (tmpStr.length() != 0)   setNumClusters(Integer.parseInt(tmpStr));
 else   setNumClusters(defaultNumClusters());
  tmpStr=Utils.getOption('N',options);
  if (tmpStr.length() != 0)   setInstNums(tmpStr);
 else   setInstNums(defaultMinInstNum() + ".." + defaultMaxInstNum());
  tmpStr=Utils.getOption('R',options);
  if (tmpStr.length() != 0)   setRadiuses(tmpStr);
 else   setRadiuses(defaultMinRadius() + ".." + defaultMaxRadius());
  boolean grid=Utils.getFlag('G',options);
  boolean sine=Utils.getFlag('I',options);
  if (grid && sine)   throw new Exception("Flags -G and -I can only be set mutually exclusiv.");
  setPattern(new SelectedTag(RANDOM,TAGS_PATTERN));
  if (grid)   setPattern(new SelectedTag(GRID,TAGS_PATTERN));
  if (sine)   setPattern(new SelectedTag(SINE,TAGS_PATTERN));
  tmpStr=Utils.getOption('M',options);
  if (tmpStr.length() != 0) {
    if (!grid)     throw new Exception("Option M can only be used with GRID pattern.");
    setDistMult(Double.parseDouble(tmpStr));
  }
 else {
    setDistMult(defaultDistMult());
  }
  tmpStr=Utils.getOption('C',options);
  if (tmpStr.length() != 0) {
    if (!sine)     throw new Exception("Option C can only be used with SINE pattern.");
    setNumCycles(Integer.parseInt(tmpStr));
  }
 else {
    setNumCycles(defaultNumCycles());
  }
  if (Utils.getFlag('O',options))   setInputOrder(new SelectedTag(ORDERED,TAGS_INPUTORDER));
 else   setInputOrder(defaultInputOrder());
  tmpStr=Utils.getOption('P',options);
  if (tmpStr.length() != 0)   setNoiseRate(Double.parseDouble(tmpStr));
 else   setNoiseRate(defaultNoiseRate());
}
