{
  if (getRawOutput()) {
    if (m_ZipDest == null) {
      m_ZipDest=new OutputZipper(m_OutputFile);
    }
  }
  if (m_Instances == null) {
    throw new Exception("No Instances set");
  }
  Object[] seKey=m_SplitEvaluator.getKey();
  Object[] key=new Object[seKey.length + 2];
  key[0]=Utils.backQuoteChars(m_Instances.relationName());
  key[1]="" + run;
  System.arraycopy(seKey,0,key,2,seKey.length);
  if (m_ResultListener.isResultRequired(this,key)) {
    Instances runInstances=new Instances(m_Instances);
    Instances train;
    Instances test;
    if (!m_randomize) {
      int trainSize=Utils.round(runInstances.numInstances() * m_TrainPercent / 100);
      int testSize=runInstances.numInstances() - trainSize;
      train=new Instances(runInstances,0,trainSize);
      test=new Instances(runInstances,trainSize,testSize);
    }
 else {
      Random rand=new Random(run);
      runInstances.randomize(rand);
      if (runInstances.classAttribute().isNominal()) {
        int numClasses=runInstances.numClasses();
        Instances[] subsets=new Instances[numClasses + 1];
        for (int i=0; i < numClasses + 1; i++) {
          subsets[i]=new Instances(runInstances,10);
        }
        Enumeration e=runInstances.enumerateInstances();
        while (e.hasMoreElements()) {
          Instance inst=(Instance)e.nextElement();
          if (inst.classIsMissing()) {
            subsets[numClasses].add(inst);
          }
 else {
            subsets[(int)inst.classValue()].add(inst);
          }
        }
        for (int i=0; i < numClasses + 1; i++) {
          subsets[i].compactify();
        }
        train=new Instances(runInstances,runInstances.numInstances());
        test=new Instances(runInstances,runInstances.numInstances());
        for (int i=0; i < numClasses + 1; i++) {
          int trainSize=Utils.probRound(subsets[i].numInstances() * m_TrainPercent / 100,rand);
          for (int j=0; j < trainSize; j++) {
            train.add(subsets[i].instance(j));
          }
          for (int j=trainSize; j < subsets[i].numInstances(); j++) {
            test.add(subsets[i].instance(j));
          }
          subsets[i]=null;
        }
        train.compactify();
        test.compactify();
        train.randomize(rand);
        test.randomize(rand);
      }
 else {
        int trainSize=Utils.probRound(runInstances.numInstances() * m_TrainPercent / 100,rand);
        int testSize=runInstances.numInstances() - trainSize;
        train=new Instances(runInstances,0,trainSize);
        test=new Instances(runInstances,trainSize,testSize);
      }
    }
    try {
      Object[] seResults=m_SplitEvaluator.getResult(train,test);
      Object[] results=new Object[seResults.length + 1];
      results[0]=getTimestamp();
      System.arraycopy(seResults,0,results,1,seResults.length);
      if (m_debugOutput) {
        String resultName=("" + run + "."+ Utils.backQuoteChars(runInstances.relationName())+ "."+ m_SplitEvaluator.toString()).replace(' ','_');
        resultName=Utils.removeSubstring(resultName,"weka.classifiers.");
        resultName=Utils.removeSubstring(resultName,"weka.filters.");
        resultName=Utils.removeSubstring(resultName,"weka.attributeSelection.");
        m_ZipDest.zipit(m_SplitEvaluator.getRawResultOutput(),resultName);
      }
      m_ResultListener.acceptResult(this,key,results);
    }
 catch (    Exception ex) {
      throw ex;
    }
  }
}
