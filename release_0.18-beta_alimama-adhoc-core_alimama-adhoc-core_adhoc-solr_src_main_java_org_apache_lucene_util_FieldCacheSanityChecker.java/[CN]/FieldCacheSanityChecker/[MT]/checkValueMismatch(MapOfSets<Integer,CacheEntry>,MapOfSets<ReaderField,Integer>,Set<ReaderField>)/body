{
  final List<Insanity> insanity=new ArrayList<Insanity>(valMismatchKeys.size() * 3);
  if (!valMismatchKeys.isEmpty()) {
    final Map<ReaderField,Set<Integer>> rfMap=readerFieldToValIds.getMap();
    final Map<Integer,Set<CacheEntry>> valMap=valIdToItems.getMap();
    for (    final ReaderField rf : valMismatchKeys) {
      final List<CacheEntry> badEntries=new ArrayList<CacheEntry>(valMismatchKeys.size() * 2);
      for (      final Integer value : rfMap.get(rf)) {
        for (        final CacheEntry cacheEntry : valMap.get(value)) {
          badEntries.add(cacheEntry);
        }
      }
      CacheEntry[] badness=new CacheEntry[badEntries.size()];
      badness=badEntries.toArray(badness);
      insanity.add(new Insanity(InsanityType.VALUEMISMATCH,"Multiple distinct value objects for " + rf.toString(),badness));
    }
  }
  return insanity;
}
