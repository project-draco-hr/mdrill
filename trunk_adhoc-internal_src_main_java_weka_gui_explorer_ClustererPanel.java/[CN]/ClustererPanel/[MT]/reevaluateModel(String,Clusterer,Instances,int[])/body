{
  if (m_RunThread == null) {
    m_StartBut.setEnabled(false);
    m_StopBut.setEnabled(true);
    m_ignoreBut.setEnabled(false);
    m_RunThread=new Thread(){
      public void run(){
        m_Log.statusMessage("Setting up...");
        StringBuffer outBuff=m_History.getNamedBuffer(name);
        Instances userTest=null;
        ClustererAssignmentsPlotInstances plotInstances=ExplorerDefaults.getClustererAssignmentsPlotInstances();
        plotInstances.setClusterer(clusterer);
        if (m_TestInstances != null) {
          userTest=new Instances(m_TestInstances);
        }
        boolean saveVis=m_StorePredictionsBut.isSelected();
        String grph=null;
        try {
          if (userTest == null) {
            throw new Exception("No user test set has been opened");
          }
          if (trainHeader != null && !trainHeader.equalHeaders(userTest)) {
            throw new Exception("Train and test set are not compatible\n" + trainHeader.equalHeadersMsg(userTest));
          }
          m_Log.statusMessage("Evaluating on test data...");
          m_Log.logMessage("Re-evaluating clusterer (" + name + ") on test set");
          m_Log.logMessage("Started reevaluate model");
          if (m_Log instanceof TaskLogger) {
            ((TaskLogger)m_Log).taskStarted();
          }
          ClusterEvaluation eval=new ClusterEvaluation();
          eval.setClusterer(clusterer);
          Instances userTestT=new Instances(userTest);
          if (ignoredAtts != null) {
            userTestT=removeIgnoreCols(userTestT,ignoredAtts);
          }
          eval.evaluateClusterer(userTestT);
          plotInstances.setClusterEvaluation(eval);
          plotInstances.setInstances(userTest);
          plotInstances.setUp();
          outBuff.append("\n=== Re-evaluation on test set ===\n\n");
          outBuff.append("User supplied test set\n");
          outBuff.append("Relation:     " + userTest.relationName() + '\n');
          outBuff.append("Instances:    " + userTest.numInstances() + '\n');
          outBuff.append("Attributes:   " + userTest.numAttributes() + "\n\n");
          if (trainHeader == null)           outBuff.append("NOTE - if test set is not compatible then results are " + "unpredictable\n\n");
          outBuff.append(eval.clusterResultsToString());
          outBuff.append("\n");
          m_History.updateResult(name);
          m_Log.logMessage("Finished re-evaluation");
          m_Log.statusMessage("OK");
        }
 catch (        Exception ex) {
          ex.printStackTrace();
          m_Log.logMessage(ex.getMessage());
          JOptionPane.showMessageDialog(ClustererPanel.this,"Problem evaluating clusterer:\n" + ex.getMessage(),"Evaluate clusterer",JOptionPane.ERROR_MESSAGE);
          m_Log.statusMessage("Problem evaluating clusterer");
        }
 finally {
          if (plotInstances != null) {
            m_CurrentVis=new VisualizePanel();
            m_CurrentVis.setName(name + " (" + userTest.relationName()+ ")");
            m_CurrentVis.setLog(m_Log);
            try {
              m_CurrentVis.addPlot(plotInstances.getPlotData(name));
            }
 catch (            Exception ex) {
              System.err.println(ex);
            }
            FastVector vv=new FastVector();
            vv.addElement(clusterer);
            if (trainHeader != null)             vv.addElement(trainHeader);
            if (ignoredAtts != null)             vv.addElement(ignoredAtts);
            if (saveVis) {
              vv.addElement(m_CurrentVis);
              if (grph != null) {
                vv.addElement(grph);
              }
            }
            m_History.addObject(name,vv);
          }
          if (isInterrupted()) {
            m_Log.logMessage("Interrupted reevaluate model");
            m_Log.statusMessage("See error log");
          }
          m_RunThread=null;
          m_StartBut.setEnabled(true);
          m_StopBut.setEnabled(false);
          m_ignoreBut.setEnabled(true);
          if (m_Log instanceof TaskLogger) {
            ((TaskLogger)m_Log).taskFinished();
          }
        }
      }
    }
;
    m_RunThread.setPriority(Thread.MIN_PRIORITY);
    m_RunThread.start();
  }
}
