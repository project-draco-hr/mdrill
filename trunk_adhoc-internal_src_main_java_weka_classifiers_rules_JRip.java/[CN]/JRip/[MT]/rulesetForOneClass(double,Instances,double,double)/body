{
  Instances newData=data, growData, pruneData;
  boolean stop=false;
  FastVector ruleset=new FastVector();
  double dl=defDL, minDL=defDL;
  RuleStats rstats=null;
  double[] rst;
  boolean defHasPositive=true;
  boolean hasPositive=defHasPositive;
  if (m_Debug)   System.err.println("\n*** Building stage ***");
  while ((!stop) && hasPositive) {
    RipperRule oneRule;
    if (m_UsePruning) {
      newData=RuleStats.stratify(newData,m_Folds,m_Random);
      Instances[] part=RuleStats.partition(newData,m_Folds);
      growData=part[0];
      pruneData=part[1];
      oneRule=new RipperRule();
      oneRule.setConsequent(classIndex);
      if (m_Debug)       System.err.println("\nGrowing a rule ...");
      oneRule.grow(growData);
      if (m_Debug)       System.err.println("One rule found before pruning:" + oneRule.toString(m_Class));
      if (m_Debug)       System.err.println("\nPruning the rule ...");
      oneRule.prune(pruneData,false);
      if (m_Debug)       System.err.println("One rule found after pruning:" + oneRule.toString(m_Class));
    }
 else {
      oneRule=new RipperRule();
      oneRule.setConsequent(classIndex);
      if (m_Debug)       System.err.println("\nNo pruning: growing a rule ...");
      oneRule.grow(newData);
      if (m_Debug)       System.err.println("No pruning: one rule found:\n" + oneRule.toString(m_Class));
    }
    if (rstats == null) {
      rstats=new RuleStats();
      rstats.setNumAllConds(m_Total);
      rstats.setData(newData);
    }
    rstats.addAndUpdate(oneRule);
    int last=rstats.getRuleset().size() - 1;
    dl+=rstats.relativeDL(last,expFPRate,m_CheckErr);
    if (Double.isNaN(dl) || Double.isInfinite(dl))     throw new Exception("Should never happen: dl in " + "building stage NaN or infinite!");
    if (m_Debug)     System.err.println("Before optimization(" + last + "): the dl = "+ dl+ " | best: "+ minDL);
    if (dl < minDL)     minDL=dl;
    rst=rstats.getSimpleStats(last);
    if (m_Debug)     System.err.println("The rule covers: " + rst[0] + " | pos = "+ rst[2]+ " | neg = "+ rst[4]+ "\nThe rule doesn't cover: "+ rst[1]+ " | pos = "+ rst[5]);
    stop=checkStop(rst,minDL,dl);
    if (!stop) {
      ruleset.addElement(oneRule);
      newData=rstats.getFiltered(last)[1];
      hasPositive=Utils.gr(rst[5],0.0);
      if (m_Debug)       System.err.println("One rule added: has positive? " + hasPositive);
    }
 else {
      if (m_Debug)       System.err.println("Quit rule");
      rstats.removeLast();
    }
  }
  RuleStats finalRulesetStat=null;
  if (m_UsePruning) {
    for (int z=0; z < m_Optimizations; z++) {
      if (m_Debug)       System.err.println("\n*** Optimization: run #" + z + " ***");
      newData=data;
      finalRulesetStat=new RuleStats();
      finalRulesetStat.setData(newData);
      finalRulesetStat.setNumAllConds(m_Total);
      int position=0;
      stop=false;
      boolean isResidual=false;
      hasPositive=defHasPositive;
      dl=minDL=defDL;
      oneRule:       while (!stop && hasPositive) {
        isResidual=(position >= ruleset.size());
        newData=RuleStats.stratify(newData,m_Folds,m_Random);
        Instances[] part=RuleStats.partition(newData,m_Folds);
        growData=part[0];
        pruneData=part[1];
        RipperRule finalRule;
        if (m_Debug)         System.err.println("\nRule #" + position + "| isResidual?"+ isResidual+ "| data size: "+ newData.sumOfWeights());
        if (isResidual) {
          RipperRule newRule=new RipperRule();
          newRule.setConsequent(classIndex);
          if (m_Debug)           System.err.println("\nGrowing and pruning" + " a new rule ...");
          newRule.grow(growData);
          newRule.prune(pruneData,false);
          finalRule=newRule;
          if (m_Debug)           System.err.println("\nNew rule found: " + newRule.toString(m_Class));
        }
 else {
          RipperRule oldRule=(RipperRule)ruleset.elementAt(position);
          boolean covers=false;
          for (int i=0; i < newData.numInstances(); i++)           if (oldRule.covers(newData.instance(i))) {
            covers=true;
            break;
          }
          if (!covers) {
            finalRulesetStat.addAndUpdate(oldRule);
            position++;
            continue oneRule;
          }
          if (m_Debug)           System.err.println("\nGrowing and pruning" + " Replace ...");
          RipperRule replace=new RipperRule();
          replace.setConsequent(classIndex);
          replace.grow(growData);
          pruneData=RuleStats.rmCoveredBySuccessives(pruneData,ruleset,position);
          replace.prune(pruneData,true);
          if (m_Debug)           System.err.println("\nGrowing and pruning" + " Revision ...");
          RipperRule revision=(RipperRule)oldRule.copy();
          Instances newGrowData=new Instances(growData,0);
          for (int b=0; b < growData.numInstances(); b++) {
            Instance inst=growData.instance(b);
            if (revision.covers(inst))             newGrowData.add(inst);
          }
          revision.grow(newGrowData);
          revision.prune(pruneData,true);
          double[][] prevRuleStats=new double[position][6];
          for (int c=0; c < position; c++)           prevRuleStats[c]=finalRulesetStat.getSimpleStats(c);
          FastVector tempRules=(FastVector)ruleset.copyElements();
          tempRules.setElementAt(replace,position);
          RuleStats repStat=new RuleStats(data,tempRules);
          repStat.setNumAllConds(m_Total);
          repStat.countData(position,newData,prevRuleStats);
          rst=repStat.getSimpleStats(position);
          if (m_Debug)           System.err.println("Replace rule covers: " + rst[0] + " | pos = "+ rst[2]+ " | neg = "+ rst[4]+ "\nThe rule doesn't cover: "+ rst[1]+ " | pos = "+ rst[5]);
          double repDL=repStat.relativeDL(position,expFPRate,m_CheckErr);
          if (m_Debug)           System.err.println("\nReplace: " + replace.toString(m_Class) + " |dl = "+ repDL);
          if (Double.isNaN(repDL) || Double.isInfinite(repDL))           throw new Exception("Should never happen: repDL" + "in optmz. stage NaN or " + "infinite!");
          tempRules.setElementAt(revision,position);
          RuleStats revStat=new RuleStats(data,tempRules);
          revStat.setNumAllConds(m_Total);
          revStat.countData(position,newData,prevRuleStats);
          double revDL=revStat.relativeDL(position,expFPRate,m_CheckErr);
          if (m_Debug)           System.err.println("Revision: " + revision.toString(m_Class) + " |dl = "+ revDL);
          if (Double.isNaN(revDL) || Double.isInfinite(revDL))           throw new Exception("Should never happen: revDL" + "in optmz. stage NaN or " + "infinite!");
          rstats=new RuleStats(data,ruleset);
          rstats.setNumAllConds(m_Total);
          rstats.countData(position,newData,prevRuleStats);
          double oldDL=rstats.relativeDL(position,expFPRate,m_CheckErr);
          if (Double.isNaN(oldDL) || Double.isInfinite(oldDL))           throw new Exception("Should never happen: oldDL" + "in optmz. stage NaN or " + "infinite!");
          if (m_Debug)           System.err.println("Old rule: " + oldRule.toString(m_Class) + " |dl = "+ oldDL);
          if (m_Debug)           System.err.println("\nrepDL: " + repDL + "\nrevDL: "+ revDL+ "\noldDL: "+ oldDL);
          if ((oldDL <= revDL) && (oldDL <= repDL))           finalRule=oldRule;
 else           if (revDL <= repDL)           finalRule=revision;
 else           finalRule=replace;
        }
        finalRulesetStat.addAndUpdate(finalRule);
        rst=finalRulesetStat.getSimpleStats(position);
        if (isResidual) {
          dl+=finalRulesetStat.relativeDL(position,expFPRate,m_CheckErr);
          if (m_Debug)           System.err.println("After optimization: the dl" + "=" + dl + " | best: "+ minDL);
          if (dl < minDL)           minDL=dl;
          stop=checkStop(rst,minDL,dl);
          if (!stop)           ruleset.addElement(finalRule);
 else {
            finalRulesetStat.removeLast();
            position--;
          }
        }
 else         ruleset.setElementAt(finalRule,position);
        if (m_Debug) {
          System.err.println("The rule covers: " + rst[0] + " | pos = "+ rst[2]+ " | neg = "+ rst[4]+ "\nThe rule doesn't cover: "+ rst[1]+ " | pos = "+ rst[5]);
          System.err.println("\nRuleset so far: ");
          for (int x=0; x < ruleset.size(); x++)           System.err.println(x + ": " + ((RipperRule)ruleset.elementAt(x)).toString(m_Class));
          System.err.println();
        }
        if (finalRulesetStat.getRulesetSize() > 0)         newData=finalRulesetStat.getFiltered(position)[1];
        hasPositive=Utils.gr(rst[5],0.0);
        position++;
      }
      if (ruleset.size() > (position + 1)) {
        for (int k=position + 1; k < ruleset.size(); k++)         finalRulesetStat.addAndUpdate((Rule)ruleset.elementAt(k));
      }
      if (m_Debug)       System.err.println("\nDeleting rules to decrease" + " DL of the whole ruleset ...");
      finalRulesetStat.reduceDL(expFPRate,m_CheckErr);
      if (m_Debug) {
        int del=ruleset.size() - finalRulesetStat.getRulesetSize();
        System.err.println(del + " rules are deleted" + " after DL reduction procedure");
      }
      ruleset=finalRulesetStat.getRuleset();
      rstats=finalRulesetStat;
    }
  }
  if (m_Debug) {
    System.err.println("\nFinal ruleset: ");
    for (int x=0; x < ruleset.size(); x++)     System.err.println(x + ": " + ((RipperRule)ruleset.elementAt(x)).toString(m_Class));
    System.err.println();
  }
  m_Ruleset.appendElements(ruleset);
  m_RulesetStats.addElement(rstats);
  if (ruleset.size() > 0)   return rstats.getFiltered(ruleset.size() - 1)[1];
 else   return data;
}
