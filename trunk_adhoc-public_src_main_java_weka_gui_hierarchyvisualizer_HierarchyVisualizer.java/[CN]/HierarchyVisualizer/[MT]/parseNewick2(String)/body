{
  if (sStr == null || sStr.length() == 0) {
    return null;
  }
  Node node=new Node();
  if (sStr.startsWith("(")) {
    int i1=nextNode(sStr,0);
    int i2=nextNode(sStr,i1);
    node.m_children=new Node[2];
    node.m_children[0]=parseNewick2(sStr.substring(1,i1));
    node.m_children[0].m_Parent=node;
    String sStr2=sStr.substring(i1 + 1,(i2 > 0 ? i2 : sStr.length()));
    node.m_children[1]=parseNewick2(sStr2);
    node.m_children[1].m_Parent=node;
    if (sStr.lastIndexOf('[') > sStr.lastIndexOf(')')) {
      sStr=sStr.substring(sStr.lastIndexOf('['));
      i2=sStr.indexOf(']');
      if (i2 < 0) {
        throw new Exception("unbalanced square bracket found:" + sStr);
      }
      sStr2=sStr.substring(1,i2);
      node.m_sMetaData=sStr2;
    }
    if (sStr.lastIndexOf(':') > sStr.lastIndexOf(')')) {
      sStr=sStr.substring(sStr.lastIndexOf(':'));
      sStr=sStr.replaceAll("[,\\):]","");
      node.m_fLength=new Double(sStr);
    }
 else {
      node.m_fLength=1;
    }
  }
 else {
    if (sStr.contains("[")) {
      int i1=sStr.indexOf('[');
      int i2=sStr.indexOf(']');
      if (i2 < 0) {
        throw new Exception("unbalanced square bracket found:" + sStr);
      }
      String sStr2=sStr.substring(i1 + 1,i2);
      sStr=sStr.substring(0,i1) + sStr.substring(i2 + 1);
      node.m_sMetaData=sStr2;
    }
    if (sStr.indexOf(')') >= 0) {
      sStr=sStr.substring(0,sStr.indexOf(')'));
    }
    sStr=sStr.replaceFirst("[,\\)]","");
    if (sStr.length() > 0) {
      if (sStr.indexOf(':') >= 0) {
        int iColon=sStr.indexOf(':');
        node.m_sLabel=sStr.substring(0,iColon);
        if (sStr.indexOf(':',iColon + 1) >= 0) {
          int iColon2=sStr.indexOf(':',iColon + 1);
          node.m_fLength=new Double(sStr.substring(iColon + 1,iColon2));
          m_fTmpLength=new Double(sStr.substring(iColon2 + 1));
        }
 else {
          node.m_fLength=new Double(sStr.substring(iColon + 1));
        }
      }
 else {
        node.m_sLabel=sStr;
        node.m_fLength=1;
      }
    }
 else {
      return null;
    }
  }
  return node;
}
