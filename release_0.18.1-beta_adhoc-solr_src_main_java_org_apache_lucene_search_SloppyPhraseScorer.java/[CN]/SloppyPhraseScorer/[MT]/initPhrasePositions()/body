{
  int end=Integer.MIN_VALUE;
  if (checkedRepeats && !hasRepeats) {
    pq.clear();
    for (PhrasePositions pp=min, prev=null; prev != max; pp=(prev=pp).next) {
      pp.firstPosition();
      if (pp.position > end) {
        end=pp.position;
      }
      pq.add(pp);
    }
    return end;
  }
  for (PhrasePositions pp=min, prev=null; prev != max; pp=(prev=pp).next) {
    pp.firstPosition();
  }
  if (!checkedRepeats) {
    checkedRepeats=true;
    ArrayList<PhrasePositions> ppsA=new ArrayList<PhrasePositions>();
    PhrasePositions dummyPP=new PhrasePositions(null,-1,-1);
    for (PhrasePositions pp=min, prev=null; prev != max; pp=(prev=pp).next) {
      if (pp.nextRepeating != null) {
        continue;
      }
      ppsA.add(pp);
      int tpPos=tpPos(pp);
      for (PhrasePositions prevB=pp, pp2=pp.next; pp2 != min; pp2=pp2.next) {
        if (pp2.nextRepeating != null || pp.offset == pp2.offset || tpPos(pp2) != tpPos) {
          continue;
        }
        hasRepeats=true;
        prevB.nextRepeating=pp2;
        pp2.nextRepeating=dummyPP;
        prevB=pp2;
      }
    }
    if (hasRepeats) {
      for (PhrasePositions pp=min, prev=null; prev != max; pp=(prev=pp).next) {
        if (pp.nextRepeating == dummyPP) {
          pp.nextRepeating=null;
        }
      }
    }
    nrPps=ppsA.toArray(new PhrasePositions[0]);
    pq=new PhraseQueue(nrPps.length);
  }
  if (hasRepeats) {
    for (    PhrasePositions pp : nrPps) {
      if ((end=advanceRepeats(pp,end)) == Integer.MIN_VALUE) {
        return Integer.MIN_VALUE;
      }
    }
  }
  pq.clear();
  for (  PhrasePositions pp : nrPps) {
    if (pp.position > end) {
      end=pp.position;
    }
    pq.add(pp);
  }
  return end;
}
