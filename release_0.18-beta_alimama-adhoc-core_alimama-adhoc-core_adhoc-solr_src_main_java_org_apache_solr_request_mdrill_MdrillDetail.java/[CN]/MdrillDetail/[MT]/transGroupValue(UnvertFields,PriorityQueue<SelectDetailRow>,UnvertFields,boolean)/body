{
  TermNumToString[] tm=this.prefetchValues(ufs,res,sortufs,isNumberVal);
  PriorityQueue<SelectDetailRow> topItems=new PriorityQueue<SelectDetailRow>(this.limit_offset,Collections.reverseOrder(this.cmpresult));
  boolean usedsort=!isNumberVal && this.SelectDetailSort == null;
  for (  SelectDetailRow row : res) {
    int doc=row.docid;
    String sortString=null;
    if (usedsort) {
      sortString=tm[ufs.length].getTermValueWithNull((int)row.value);
    }
    SortGroupVal buff=new SortGroupVal();
    buff.groupbuff.append("-");
    buff.groupbuff.append(UniqConfig.GroupJoinString());
    buff.groupbuff.append("-");
    for (int i=0; i < ufs.length; i++) {
      buff.groupbuff.append(UniqConfig.GroupJoinString());
      UnvertFile uf=ufs.cols[i];
      if (uf != null) {
        Integer termNum=uf.uif.termNum(doc);
        buff.groupbuff.append(EncodeUtils.encode(tm[i].getTermValue(termNum)));
      }
 else {
        buff.groupbuff.append(EncodeUtils.encode("-"));
      }
    }
    buff.sortString=sortString;
    ArrayList<SortGroupVal> newgroup=this.setGroupJoin(buff,ufs.length,doc);
    for (    SortGroupVal g : newgroup) {
      SelectDetailRow newrow=SelectDetailRow.INSTANCE(doc,row.getCompareValue());
      newrow.setKey(g.groupbuff.toString());
      newrow.colVal=g.sortString;
      MdrillPorcessUtils.put2QueueDetail(newrow,topItems,this.limit_offset,this.cmpresult);
    }
  }
  return topItems;
}
