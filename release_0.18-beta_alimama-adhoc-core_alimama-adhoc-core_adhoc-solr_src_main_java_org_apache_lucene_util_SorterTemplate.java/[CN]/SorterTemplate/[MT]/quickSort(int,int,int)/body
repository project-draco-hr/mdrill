{
  final int diff=hi - lo;
  if (diff <= QUICKSORT_THRESHOLD) {
    insertionSort(lo,hi);
    return;
  }
  if (--maxDepth == 0) {
    mergeSort(lo,hi);
    return;
  }
  final int mid=lo + (diff >>> 1);
  if (compare(lo,mid) > 0) {
    swap(lo,mid);
  }
  if (compare(mid,hi) > 0) {
    swap(mid,hi);
    if (compare(lo,mid) > 0) {
      swap(lo,mid);
    }
  }
  int left=lo + 1;
  int right=hi - 1;
  setPivot(mid);
  for (; ; ) {
    while (comparePivot(right) < 0)     --right;
    while (left < right && comparePivot(left) >= 0)     ++left;
    if (left < right) {
      swap(left,right);
      --right;
    }
 else {
      break;
    }
  }
  quickSort(lo,left,maxDepth);
  quickSort(left + 1,hi,maxDepth);
}
