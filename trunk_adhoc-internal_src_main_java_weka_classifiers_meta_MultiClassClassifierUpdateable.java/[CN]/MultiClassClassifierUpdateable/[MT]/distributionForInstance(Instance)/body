{
  double[] probs=new double[inst.numClasses()];
  if (m_Method == METHOD_1_AGAINST_1) {
    double[][] r=new double[inst.numClasses()][inst.numClasses()];
    double[][] n=new double[inst.numClasses()][inst.numClasses()];
    for (int i=0; i < m_ClassFilters.length; i++) {
      if (m_Classifiers[i] != null && m_SumOfWeights[i] > 0) {
        Instance tempInst=(Instance)inst.copy();
        tempInst.setDataset(m_TwoClassDataset);
        double[] current=m_Classifiers[i].distributionForInstance(tempInst);
        Range range=new Range(((RemoveWithValues)m_ClassFilters[i]).getNominalIndices());
        range.setUpper(m_ClassAttribute.numValues());
        int[] pair=range.getSelection();
        if (m_pairwiseCoupling && inst.numClasses() > 2) {
          r[pair[0]][pair[1]]=current[0];
          n[pair[0]][pair[1]]=m_SumOfWeights[i];
        }
 else {
          if (current[0] > current[1]) {
            probs[pair[0]]+=1.0;
          }
 else {
            probs[pair[1]]+=1.0;
          }
        }
      }
    }
    if (m_pairwiseCoupling && inst.numClasses() > 2) {
      return pairwiseCoupling(n,r);
    }
    Utils.normalize(probs);
  }
 else {
    probs=super.distributionForInstance(inst);
  }
  if (probs.length == 1) {
    return new double[m_ClassAttribute.numValues()];
  }
  return probs;
}
