{
  String classname;
  String name;
  boolean primitive;
  boolean array;
  boolean isnull;
  Class<?> cls;
  Vector<Element> children;
  Object result;
  int i;
  Constructor constructor;
  Class[] methodClasses;
  Object[] methodArgs;
  Element child;
  if (DEBUG)   trace(new Throwable(),node.getAttribute(ATT_NAME));
  m_CurrentNode=node;
  result=null;
  name=node.getAttribute(ATT_NAME);
  classname=node.getAttribute(ATT_CLASS);
  primitive=stringToBoolean(node.getAttribute(ATT_PRIMITIVE));
  array=stringToBoolean(node.getAttribute(ATT_ARRAY));
  isnull=stringToBoolean(node.getAttribute(ATT_NULL));
  if (isnull)   return result;
  children=XMLDocument.getChildTags(node);
  cls=determineClass(classname);
  if (array) {
    result=Array.newInstance(cls,getArrayDimensions(node));
    for (i=0; i < children.size(); i++) {
      child=(Element)children.get(i);
      Array.set(result,Integer.parseInt(child.getAttribute(ATT_NAME)),invokeReadFromXML(child));
    }
  }
 else {
    if (children.size() == 0) {
      if (primitive) {
        result=getPrimitive(node);
      }
 else {
        methodClasses=new Class[1];
        methodClasses[0]=String.class;
        methodArgs=new Object[1];
        methodArgs[0]=XMLDocument.getContent(node);
        try {
          constructor=cls.getConstructor(methodClasses);
          result=constructor.newInstance(methodArgs);
        }
 catch (        Exception e) {
          try {
            result=cls.newInstance();
          }
 catch (          Exception e2) {
            result=null;
            System.out.println("ERROR: Can't instantiate '" + classname + "'!");
          }
        }
      }
    }
 else {
      result=cls.newInstance();
      for (i=0; i < children.size(); i++)       result=readFromXML(result,name,(Element)children.get(i));
    }
  }
  return result;
}
