{
  String classname;
  Element node;
  Hashtable memberlist;
  Enumeration enm;
  Object member;
  String memberName;
  Method method;
  PropertyDescriptor desc;
  boolean primitive;
  int array;
  int i;
  Object obj;
  String tmpStr;
  node=null;
  if (DEBUG)   trace(new Throwable(),name);
  if (o == null) {
    node=addElement(parent,name,"" + null,false,0,true);
    return node;
  }
  obj=null;
  array=0;
  if (o.getClass().isArray())   array=Utils.getArrayDimensions(o);
  if (array > 0) {
    classname=Utils.getArrayClass(o.getClass()).getName();
    primitive=isPrimitiveArray(o.getClass());
  }
 else {
    desc=null;
    if (parent != null)     desc=determineDescriptor(parent.getAttribute(ATT_CLASS),name);
    if (desc != null)     primitive=desc.getPropertyType().isPrimitive();
 else     primitive=o.getClass().isPrimitive();
    if (primitive) {
      classname=desc.getPropertyType().getName();
    }
 else {
      obj=o;
      classname=o.getClass().getName();
    }
  }
  if ((parent != null) && (!parent.getAttribute(ATT_ARRAY).equals("")) && (!parent.getAttribute(ATT_ARRAY).equals(VAL_NO))&& (stringToBoolean(parent.getAttribute(ATT_PRIMITIVE)))) {
    primitive=true;
    classname=parent.getAttribute(ATT_CLASS);
    obj=null;
  }
  if (obj != null)   classname=overrideClassname(obj);
 else   classname=overrideClassname(classname);
  node=addElement(parent,name,classname,primitive,array);
  if (array > 0) {
    for (i=0; i < Array.getLength(o); i++) {
      invokeWriteToXML(node,Array.get(o,i),Integer.toString(i));
    }
  }
 else {
    if (primitive) {
      node.appendChild(node.getOwnerDocument().createTextNode(o.toString()));
    }
 else {
      memberlist=getDescriptors(o);
      if (memberlist.size() == 0) {
        if (!o.toString().equals("")) {
          tmpStr=o.toString();
          tmpStr=tmpStr.replaceAll("&","&amp;").replaceAll("\"","&quot;").replaceAll("'","&apos;").replaceAll("<","&lt;").replaceAll(">","&gt;");
          tmpStr=tmpStr.replaceAll("\n","&#10;").replaceAll("\r","&#13;").replaceAll("\t","&#9;");
          node.appendChild(node.getOwnerDocument().createTextNode(tmpStr));
        }
      }
 else {
        enm=memberlist.keys();
        while (enm.hasMoreElements()) {
          memberName=enm.nextElement().toString();
          if ((m_Properties.isIgnored(memberName)) || (m_Properties.isIgnored(getPath(node) + "." + memberName)) || (m_Properties.isIgnored(o,getPath(node) + "." + memberName)))           continue;
          if (!m_Properties.isAllowed(o,memberName))           continue;
          desc=(PropertyDescriptor)memberlist.get(memberName);
          method=desc.getReadMethod();
          member=method.invoke(o,(Object[])null);
          invokeWriteToXML(node,member,memberName);
        }
      }
    }
  }
  return node;
}
