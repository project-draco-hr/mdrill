{
  Matrix I;
  Matrix A;
  Matrix B;
  try {
    System.out.println("\nIdentity\n");
    I=Matrix.identity(3,5);
    System.out.println("I(3,5)\n" + I);
    System.out.println("\nbasic operations - square\n");
    A=Matrix.random(3,3);
    B=Matrix.random(3,3);
    System.out.println("A\n" + A);
    System.out.println("B\n" + B);
    System.out.println("A'\n" + A.inverse());
    System.out.println("A^T\n" + A.transpose());
    System.out.println("A+B\n" + A.plus(B));
    System.out.println("A*B\n" + A.times(B));
    System.out.println("X from A*X=B\n" + A.solve(B));
    System.out.println("\nbasic operations - non square\n");
    A=Matrix.random(2,3);
    B=Matrix.random(3,4);
    System.out.println("A\n" + A);
    System.out.println("B\n" + B);
    System.out.println("A*B\n" + A.times(B));
    System.out.println("\nsqrt (1)\n");
    A=new Matrix(new double[][]{{5,-4,1,0,0},{-4,6,-4,1,0},{1,-4,6,-4,1},{0,1,-4,6,-4},{0,0,1,-4,5}});
    System.out.println("A\n" + A);
    System.out.println("sqrt(A)\n" + A.sqrt());
    System.out.println("\nsqrt (2)\n");
    A=new Matrix(new double[][]{{7,10},{15,22}});
    System.out.println("A\n" + A);
    System.out.println("sqrt(A)\n" + A.sqrt());
    System.out.println("det(A)\n" + A.det() + "\n");
    System.out.println("\nEigenvalue Decomposition\n");
    EigenvalueDecomposition evd=A.eig();
    System.out.println("[V,D] = eig(A)");
    System.out.println("- V\n" + evd.getV());
    System.out.println("- D\n" + evd.getD());
    System.out.println("\nLU Decomposition\n");
    LUDecomposition lud=A.lu();
    System.out.println("[L,U,P] = lu(A)");
    System.out.println("- L\n" + lud.getL());
    System.out.println("- U\n" + lud.getU());
    System.out.println("- P\n" + Utils.arrayToString(lud.getPivot()) + "\n");
    System.out.println("\nRegression\n");
    B=new Matrix(new double[][]{{3},{2}});
    double ridge=0.5;
    double[] weights=new double[]{0.3,0.7};
    LinearRegression lr=A.regression(B,ridge);
    System.out.println("A\n" + A);
    System.out.println("B\n" + B);
    System.out.println("ridge = " + ridge + "\n");
    System.out.println("weights = " + Utils.arrayToString(weights) + "\n");
    System.out.println("A.regression(B, ridge)\n" + A.regression(B,ridge) + "\n");
    System.out.println("A.regression(B, weights, ridge)\n" + A.regression(B,weights,ridge) + "\n");
    System.out.println("\nWriter/Reader\n");
    StringWriter writer=new StringWriter();
    A.write(writer);
    System.out.println("A.write(Writer)\n" + writer);
    A=new Matrix(new StringReader(writer.toString()));
    System.out.println("A = new Matrix.read(Reader)\n" + A);
    System.out.println("\nMatlab-Format\n");
    String matlab="[ 1   2;3 4 ]";
    System.out.println("Matlab: " + matlab);
    System.out.println("from Matlab:\n" + Matrix.parseMatlab(matlab));
    System.out.println("to Matlab:\n" + Matrix.parseMatlab(matlab).toMatlab());
    matlab="[1 2 3 4;3 4 5 6;7 8 9 10]";
    System.out.println("Matlab: " + matlab);
    System.out.println("from Matlab:\n" + Matrix.parseMatlab(matlab));
    System.out.println("to Matlab:\n" + Matrix.parseMatlab(matlab).toMatlab() + "\n");
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}
