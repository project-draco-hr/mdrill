{
  double[] vals=new double[outputFormatPeek().numAttributes()];
  int attSoFar=0;
  for (int j=0; j < getInputFormat().numAttributes(); j++) {
    Attribute att=getInputFormat().attribute(j);
    if (!att.isNominal() || (j == getInputFormat().classIndex()) || !m_Columns.isInRange(j)) {
      vals[attSoFar]=instance.value(j);
      attSoFar++;
    }
 else {
      if ((att.numValues() <= 2) && (!m_TransformAll)) {
        vals[attSoFar]=instance.value(j);
        attSoFar++;
      }
 else {
        if (instance.isMissing(j)) {
          for (int k=0; k < att.numValues(); k++) {
            vals[attSoFar + k]=instance.value(j);
          }
        }
 else {
          for (int k=0; k < att.numValues(); k++) {
            if (k == (int)instance.value(j)) {
              vals[attSoFar + k]=1;
            }
 else {
              vals[attSoFar + k]=0;
            }
          }
        }
        attSoFar+=att.numValues();
      }
    }
  }
  Instance inst=null;
  if (instance instanceof SparseInstance) {
    inst=new SparseInstance(instance.weight(),vals);
  }
 else {
    inst=new DenseInstance(instance.weight(),vals);
  }
  inst.setDataset(getOutputFormat());
  copyValues(inst,false,instance.dataset(),getOutputFormat());
  inst.setDataset(getOutputFormat());
  push(inst);
}
