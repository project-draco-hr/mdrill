{
  FastVector newAtts;
  int newClassIndex;
  StringBuffer attributeName;
  Instances outputFormat;
  FastVector vals;
  newClassIndex=getInputFormat().classIndex();
  newAtts=new FastVector();
  for (int j=0; j < getInputFormat().numAttributes(); j++) {
    Attribute att=getInputFormat().attribute(j);
    if (!att.isNominal() || (j == getInputFormat().classIndex()) || !m_Columns.isInRange(j)) {
      newAtts.addElement(att.copy());
    }
 else {
      if ((att.numValues() <= 2) && (!m_TransformAll)) {
        if (m_Numeric) {
          newAtts.addElement(new Attribute(att.name()));
        }
 else {
          newAtts.addElement(att.copy());
        }
      }
 else {
        if (newClassIndex >= 0 && j < getInputFormat().classIndex()) {
          newClassIndex+=att.numValues() - 1;
        }
        for (int k=0; k < att.numValues(); k++) {
          attributeName=new StringBuffer(att.name() + "=");
          attributeName.append(att.value(k));
          if (m_Numeric) {
            newAtts.addElement(new Attribute(attributeName.toString()));
          }
 else {
            vals=new FastVector(2);
            vals.addElement("f");
            vals.addElement("t");
            newAtts.addElement(new Attribute(attributeName.toString(),vals));
          }
        }
      }
    }
  }
  outputFormat=new Instances(getInputFormat().relationName(),newAtts,0);
  outputFormat.setClassIndex(newClassIndex);
  setOutputFormat(outputFormat);
}
