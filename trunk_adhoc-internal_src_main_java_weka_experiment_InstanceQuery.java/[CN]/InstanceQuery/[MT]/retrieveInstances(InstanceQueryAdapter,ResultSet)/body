{
  if (adapter.getDebug())   System.err.println("Getting metadata...");
  ResultSetMetaData md=rs.getMetaData();
  if (adapter.getDebug())   System.err.println("Completed getting metadata...");
  int numAttributes=md.getColumnCount();
  int[] attributeTypes=new int[numAttributes];
  Hashtable[] nominalIndexes=new Hashtable[numAttributes];
  FastVector[] nominalStrings=new FastVector[numAttributes];
  for (int i=1; i <= numAttributes; i++) {
switch (adapter.translateDBColumnType(md.getColumnTypeName(i))) {
case STRING:
      attributeTypes[i - 1]=Attribute.NOMINAL;
    nominalIndexes[i - 1]=new Hashtable();
  nominalStrings[i - 1]=new FastVector();
break;
case TEXT:
attributeTypes[i - 1]=Attribute.STRING;
nominalIndexes[i - 1]=new Hashtable();
nominalStrings[i - 1]=new FastVector();
break;
case BOOL:
attributeTypes[i - 1]=Attribute.NOMINAL;
nominalIndexes[i - 1]=new Hashtable();
nominalIndexes[i - 1].put("false",new Double(0));
nominalIndexes[i - 1].put("true",new Double(1));
nominalStrings[i - 1]=new FastVector();
nominalStrings[i - 1].addElement("false");
nominalStrings[i - 1].addElement("true");
break;
case DOUBLE:
attributeTypes[i - 1]=Attribute.NUMERIC;
break;
case BYTE:
attributeTypes[i - 1]=Attribute.NUMERIC;
break;
case SHORT:
attributeTypes[i - 1]=Attribute.NUMERIC;
break;
case INTEGER:
attributeTypes[i - 1]=Attribute.NUMERIC;
break;
case LONG:
attributeTypes[i - 1]=Attribute.NUMERIC;
break;
case FLOAT:
attributeTypes[i - 1]=Attribute.NUMERIC;
break;
case DATE:
attributeTypes[i - 1]=Attribute.DATE;
break;
case TIME:
attributeTypes[i - 1]=Attribute.DATE;
break;
default :
attributeTypes[i - 1]=Attribute.STRING;
}
}
Vector<String> columnNames=new Vector<String>();
for (int i=0; i < numAttributes; i++) {
columnNames.add(md.getColumnLabel(i + 1));
}
if (adapter.getDebug()) System.err.println("Creating instances...");
FastVector instances=new FastVector();
int rowCount=0;
while (rs.next()) {
if (rowCount % 100 == 0) {
if (adapter.getDebug()) {
System.err.print("read " + rowCount + " instances \r");
System.err.flush();
}
}
double[] vals=new double[numAttributes];
for (int i=1; i <= numAttributes; i++) {
switch (adapter.translateDBColumnType(md.getColumnTypeName(i))) {
case STRING:
String str=rs.getString(i);
if (rs.wasNull()) {
vals[i - 1]=Utils.missingValue();
}
 else {
Double index=(Double)nominalIndexes[i - 1].get(str);
if (index == null) {
index=new Double(nominalStrings[i - 1].size());
nominalIndexes[i - 1].put(str,index);
nominalStrings[i - 1].addElement(str);
}
vals[i - 1]=index.doubleValue();
}
break;
case TEXT:
String txt=rs.getString(i);
if (rs.wasNull()) {
vals[i - 1]=Utils.missingValue();
}
 else {
Double index=(Double)nominalIndexes[i - 1].get(txt);
if (index == null) {
index=new Double(nominalStrings[i - 1].size());
nominalIndexes[i - 1].put(txt,index);
nominalStrings[i - 1].addElement(txt);
}
vals[i - 1]=index.doubleValue();
}
break;
case BOOL:
boolean boo=rs.getBoolean(i);
if (rs.wasNull()) {
vals[i - 1]=Utils.missingValue();
}
 else {
vals[i - 1]=(boo ? 1.0 : 0.0);
}
break;
case DOUBLE:
double dd=rs.getDouble(i);
if (rs.wasNull()) {
vals[i - 1]=Utils.missingValue();
}
 else {
vals[i - 1]=dd;
}
break;
case BYTE:
byte by=rs.getByte(i);
if (rs.wasNull()) {
vals[i - 1]=Utils.missingValue();
}
 else {
vals[i - 1]=(double)by;
}
break;
case SHORT:
short sh=rs.getShort(i);
if (rs.wasNull()) {
vals[i - 1]=Utils.missingValue();
}
 else {
vals[i - 1]=(double)sh;
}
break;
case INTEGER:
int in=rs.getInt(i);
if (rs.wasNull()) {
vals[i - 1]=Utils.missingValue();
}
 else {
vals[i - 1]=(double)in;
}
break;
case LONG:
long lo=rs.getLong(i);
if (rs.wasNull()) {
vals[i - 1]=Utils.missingValue();
}
 else {
vals[i - 1]=(double)lo;
}
break;
case FLOAT:
float fl=rs.getFloat(i);
if (rs.wasNull()) {
vals[i - 1]=Utils.missingValue();
}
 else {
vals[i - 1]=(double)fl;
}
break;
case DATE:
Date date=rs.getDate(i);
if (rs.wasNull()) {
vals[i - 1]=Utils.missingValue();
}
 else {
vals[i - 1]=(double)date.getTime();
}
break;
case TIME:
Time time=rs.getTime(i);
if (rs.wasNull()) {
vals[i - 1]=Utils.missingValue();
}
 else {
vals[i - 1]=(double)time.getTime();
}
break;
default :
vals[i - 1]=Utils.missingValue();
}
}
Instance newInst;
if (adapter.getSparseData()) {
newInst=new SparseInstance(1.0,vals);
}
 else {
newInst=new DenseInstance(1.0,vals);
}
instances.addElement(newInst);
rowCount++;
}
if (adapter.getDebug()) System.err.println("Creating header...");
FastVector attribInfo=new FastVector();
for (int i=0; i < numAttributes; i++) {
String attribName=adapter.attributeCaseFix(columnNames.get(i));
switch (attributeTypes[i]) {
case Attribute.NOMINAL:
attribInfo.addElement(new Attribute(attribName,nominalStrings[i]));
break;
case Attribute.NUMERIC:
attribInfo.addElement(new Attribute(attribName));
break;
case Attribute.STRING:
Attribute att=new Attribute(attribName,(FastVector)null);
attribInfo.addElement(att);
for (int n=0; n < nominalStrings[i].size(); n++) {
att.addStringValue((String)nominalStrings[i].elementAt(n));
}
break;
case Attribute.DATE:
attribInfo.addElement(new Attribute(attribName,(String)null));
break;
default :
throw new Exception("Unknown attribute type");
}
}
Instances result=new Instances("QueryResult",attribInfo,instances.size());
for (int i=0; i < instances.size(); i++) {
result.add((Instance)instances.elementAt(i));
}
return result;
}
