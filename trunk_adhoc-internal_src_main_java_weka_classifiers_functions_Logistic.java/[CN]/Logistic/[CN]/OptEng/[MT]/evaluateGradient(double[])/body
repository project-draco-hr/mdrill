{
  double[] grad=new double[x.length];
  int dim=m_NumPredictors + 1;
  for (int i=0; i < cls.length; i++) {
    double[] num=new double[m_NumClasses - 1];
    int index;
    for (int offset=0; offset < m_NumClasses - 1; offset++) {
      double exp=0.0;
      index=offset * dim;
      for (int j=0; j < dim; j++)       exp+=m_Data[i][j] * x[index + j];
      num[offset]=exp;
    }
    double max=num[Utils.maxIndex(num)];
    double denom=Math.exp(-max);
    for (int offset=0; offset < m_NumClasses - 1; offset++) {
      num[offset]=Math.exp(num[offset] - max);
      denom+=num[offset];
    }
    Utils.normalize(num,denom);
    double firstTerm;
    for (int offset=0; offset < m_NumClasses - 1; offset++) {
      index=offset * dim;
      firstTerm=weights[i] * num[offset];
      for (int q=0; q < dim; q++) {
        grad[index + q]+=firstTerm * m_Data[i][q];
      }
    }
    if (cls[i] != m_NumClasses - 1) {
      for (int p=0; p < dim; p++) {
        grad[cls[i] * dim + p]-=weights[i] * m_Data[i][p];
      }
    }
  }
  for (int offset=0; offset < m_NumClasses - 1; offset++) {
    for (int r=1; r < dim; r++)     grad[offset * dim + r]+=2 * m_Ridge * x[offset * dim + r];
  }
  return grad;
}
