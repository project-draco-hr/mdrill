{
  StringBuffer temp=new StringBuffer();
  String result="";
  temp.append("Logistic Regression with ridge parameter of " + m_Ridge);
  if (m_Par == null) {
    return result + ": No model built yet.";
  }
  int attLength=0;
  for (int i=0; i < m_structure.numAttributes(); i++) {
    if (i != m_structure.classIndex() && m_structure.attribute(i).name().length() > attLength) {
      attLength=m_structure.attribute(i).name().length();
    }
  }
  if ("Intercept".length() > attLength) {
    attLength="Intercept".length();
  }
  if ("Variable".length() > attLength) {
    attLength="Variable".length();
  }
  attLength+=2;
  int colWidth=0;
  for (int i=0; i < m_structure.classAttribute().numValues() - 1; i++) {
    if (m_structure.classAttribute().value(i).length() > colWidth) {
      colWidth=m_structure.classAttribute().value(i).length();
    }
  }
  for (int j=1; j <= m_NumPredictors; j++) {
    for (int k=0; k < m_NumClasses - 1; k++) {
      if (Utils.doubleToString(m_Par[j][k],12,4).trim().length() > colWidth) {
        colWidth=Utils.doubleToString(m_Par[j][k],12,4).trim().length();
      }
      double ORc=Math.exp(m_Par[j][k]);
      String t=" " + ((ORc > 1e10) ? "" + ORc : Utils.doubleToString(ORc,12,4));
      if (t.trim().length() > colWidth) {
        colWidth=t.trim().length();
      }
    }
  }
  if ("Class".length() > colWidth) {
    colWidth="Class".length();
  }
  colWidth+=2;
  temp.append("\nCoefficients...\n");
  temp.append(Utils.padLeft(" ",attLength) + Utils.padLeft("Class",colWidth) + "\n");
  temp.append(Utils.padRight("Variable",attLength));
  for (int i=0; i < m_NumClasses - 1; i++) {
    String className=m_structure.classAttribute().value(i);
    temp.append(Utils.padLeft(className,colWidth));
  }
  temp.append("\n");
  int separatorL=attLength + ((m_NumClasses - 1) * colWidth);
  for (int i=0; i < separatorL; i++) {
    temp.append("=");
  }
  temp.append("\n");
  int j=1;
  for (int i=0; i < m_structure.numAttributes(); i++) {
    if (i != m_structure.classIndex()) {
      temp.append(Utils.padRight(m_structure.attribute(i).name(),attLength));
      for (int k=0; k < m_NumClasses - 1; k++) {
        temp.append(Utils.padLeft(Utils.doubleToString(m_Par[j][k],12,4).trim(),colWidth));
      }
      temp.append("\n");
      j++;
    }
  }
  temp.append(Utils.padRight("Intercept",attLength));
  for (int k=0; k < m_NumClasses - 1; k++) {
    temp.append(Utils.padLeft(Utils.doubleToString(m_Par[0][k],10,4).trim(),colWidth));
  }
  temp.append("\n");
  temp.append("\n\nOdds Ratios...\n");
  temp.append(Utils.padLeft(" ",attLength) + Utils.padLeft("Class",colWidth) + "\n");
  temp.append(Utils.padRight("Variable",attLength));
  for (int i=0; i < m_NumClasses - 1; i++) {
    String className=m_structure.classAttribute().value(i);
    temp.append(Utils.padLeft(className,colWidth));
  }
  temp.append("\n");
  for (int i=0; i < separatorL; i++) {
    temp.append("=");
  }
  temp.append("\n");
  j=1;
  for (int i=0; i < m_structure.numAttributes(); i++) {
    if (i != m_structure.classIndex()) {
      temp.append(Utils.padRight(m_structure.attribute(i).name(),attLength));
      for (int k=0; k < m_NumClasses - 1; k++) {
        double ORc=Math.exp(m_Par[j][k]);
        String ORs=" " + ((ORc > 1e10) ? "" + ORc : Utils.doubleToString(ORc,12,4));
        temp.append(Utils.padLeft(ORs.trim(),colWidth));
      }
      temp.append("\n");
      j++;
    }
  }
  return temp.toString();
}
