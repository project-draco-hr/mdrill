{
  return "Class for building and using a multinomial logistic " + "regression model with a ridge estimator.\n\n" + "There are some modifications, however, compared to the paper of "+ "leCessie and van Houwelingen(1992): \n\n"+ "If there are k classes for n instances with m attributes, the "+ "parameter matrix B to be calculated will be an m*(k-1) matrix.\n\n"+ "The probability for class j with the exception of the last class is\n\n"+ "Pj(Xi) = exp(XiBj)/((sum[j=1..(k-1)]exp(Xi*Bj))+1) \n\n"+ "The last class has probability\n\n"+ "1-(sum[j=1..(k-1)]Pj(Xi)) \n\t= 1/((sum[j=1..(k-1)]exp(Xi*Bj))+1)\n\n"+ "The (negative) multinomial log-likelihood is thus: \n\n"+ "L = -sum[i=1..n]{\n\tsum[j=1..(k-1)](Yij * ln(Pj(Xi)))"+ "\n\t+(1 - (sum[j=1..(k-1)]Yij)) \n\t* ln(1 - sum[j=1..(k-1)]Pj(Xi))"+ "\n\t} + ridge * (B^2)\n\n"+ "In order to find the matrix B for which L is minimised, a "+ "Quasi-Newton Method is used to search for the optimized values of "+ "the m*(k-1) variables.  Note that before we use the optimization "+ "procedure, we 'squeeze' the matrix B into a m*(k-1) vector.  For "+ "details of the optimization procedure, please check "+ "weka.core.Optimization class.\n\n"+ "Although original Logistic Regression does not deal with instance "+ "weights, we modify the algorithm a little bit to handle the "+ "instance weights.\n\n"+ "For more information see:\n\n" + getTechnicalInformation().toString() + "\n\n"+ "Note: Missing values are replaced using a ReplaceMissingValuesFilter, and "+ "nominal attributes are transformed into numeric attributes using a "+ "NominalToBinaryFilter.";
}
