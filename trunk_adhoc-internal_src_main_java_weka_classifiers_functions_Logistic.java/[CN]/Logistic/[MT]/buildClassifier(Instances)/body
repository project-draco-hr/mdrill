{
  getCapabilities().testWithFail(train);
  train=new Instances(train);
  train.deleteWithMissingClass();
  m_ReplaceMissingValues=new ReplaceMissingValues();
  m_ReplaceMissingValues.setInputFormat(train);
  train=Filter.useFilter(train,m_ReplaceMissingValues);
  m_AttFilter=new RemoveUseless();
  m_AttFilter.setInputFormat(train);
  train=Filter.useFilter(train,m_AttFilter);
  m_NominalToBinary=new NominalToBinary();
  m_NominalToBinary.setInputFormat(train);
  train=Filter.useFilter(train,m_NominalToBinary);
  m_structure=new Instances(train,0);
  m_ClassIndex=train.classIndex();
  m_NumClasses=train.numClasses();
  int nK=m_NumClasses - 1;
  int nR=m_NumPredictors=train.numAttributes() - 1;
  int nC=train.numInstances();
  m_Data=new double[nC][nR + 1];
  int[] Y=new int[nC];
  double[] xMean=new double[nR + 1];
  double[] xSD=new double[nR + 1];
  double[] sY=new double[nK + 1];
  double[] weights=new double[nC];
  double totWeights=0;
  m_Par=new double[nR + 1][nK];
  if (m_Debug) {
    System.out.println("Extracting data...");
  }
  for (int i=0; i < nC; i++) {
    Instance current=train.instance(i);
    Y[i]=(int)current.classValue();
    weights[i]=current.weight();
    totWeights+=weights[i];
    m_Data[i][0]=1;
    int j=1;
    for (int k=0; k <= nR; k++) {
      if (k != m_ClassIndex) {
        double x=current.value(k);
        m_Data[i][j]=x;
        xMean[j]+=weights[i] * x;
        xSD[j]+=weights[i] * x * x;
        j++;
      }
    }
    sY[Y[i]]++;
  }
  if ((totWeights <= 1) && (nC > 1))   throw new Exception("Sum of weights of instances less than 1, please reweight!");
  xMean[0]=0;
  xSD[0]=1;
  for (int j=1; j <= nR; j++) {
    xMean[j]=xMean[j] / totWeights;
    if (totWeights > 1)     xSD[j]=Math.sqrt(Math.abs(xSD[j] - totWeights * xMean[j] * xMean[j]) / (totWeights - 1));
 else     xSD[j]=0;
  }
  if (m_Debug) {
    System.out.println("Descriptives...");
    for (int m=0; m <= nK; m++)     System.out.println(sY[m] + " cases have class " + m);
    System.out.println("\n Variable     Avg       SD    ");
    for (int j=1; j <= nR; j++)     System.out.println(Utils.doubleToString(j,8,4) + Utils.doubleToString(xMean[j],10,4) + Utils.doubleToString(xSD[j],10,4));
  }
  for (int i=0; i < nC; i++) {
    for (int j=0; j <= nR; j++) {
      if (xSD[j] != 0) {
        m_Data[i][j]=(m_Data[i][j] - xMean[j]) / xSD[j];
      }
    }
  }
  if (m_Debug) {
    System.out.println("\nIteration History...");
  }
  double x[]=new double[(nR + 1) * nK];
  double[][] b=new double[2][x.length];
  for (int p=0; p < nK; p++) {
    int offset=p * (nR + 1);
    x[offset]=Math.log(sY[p] + 1.0) - Math.log(sY[nK] + 1.0);
    b[0][offset]=Double.NaN;
    b[1][offset]=Double.NaN;
    for (int q=1; q <= nR; q++) {
      x[offset + q]=0.0;
      b[0][offset + q]=Double.NaN;
      b[1][offset + q]=Double.NaN;
    }
  }
  OptEng opt=new OptEng();
  opt.setDebug(m_Debug);
  opt.setWeights(weights);
  opt.setClassLabels(Y);
  if (m_MaxIts == -1) {
    x=opt.findArgmin(x,b);
    while (x == null) {
      x=opt.getVarbValues();
      if (m_Debug)       System.out.println("200 iterations finished, not enough!");
      x=opt.findArgmin(x,b);
    }
    if (m_Debug)     System.out.println(" -------------<Converged>--------------");
  }
 else {
    opt.setMaxIteration(m_MaxIts);
    x=opt.findArgmin(x,b);
    if (x == null)     x=opt.getVarbValues();
  }
  m_LL=-opt.getMinFunction();
  m_Data=null;
  for (int i=0; i < nK; i++) {
    m_Par[0][i]=x[i * (nR + 1)];
    for (int j=1; j <= nR; j++) {
      m_Par[j][i]=x[i * (nR + 1) + j];
      if (xSD[j] != 0) {
        m_Par[j][i]/=xSD[j];
        m_Par[0][i]-=m_Par[j][i] * xMean[j];
      }
    }
  }
}
