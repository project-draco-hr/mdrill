{
  if (m_advancedConfig != null) {
    String timeStampSelected=m_timeStampCombo.getSelectedItem().toString();
    String selectedP=m_periodicityCombo.getSelectedItem().toString();
    if (selectedP.equals("<Detect automatically>") && !timeStampSelected.equals("<Use an artificial time index>") && !timeStampSelected.equals("<None>")&& forecaster != null) {
      forecaster.getTSLagMaker().setPeriodicity(TSLagMaker.Periodicity.UNKNOWN);
      TSLagMaker.PeriodicityHandler detected=TSLagMaker.determinePeriodicity(m_instances,forecaster.getTSLagMaker().getTimeStampField(),forecaster.getTSLagMaker().getPeriodicity());
switch (detected.getPeriodicity()) {
case HOURLY:
        selectedP="Hourly";
      break;
case DAILY:
    selectedP="Daily";
  break;
case WEEKLY:
selectedP="Weekly";
break;
case MONTHLY:
selectedP="Monthly";
break;
case QUARTERLY:
selectedP="Quarterly";
break;
case YEARLY:
selectedP="Yearly";
break;
}
}
if (forecaster != null) {
if (selectedP.equals("Hourly")) {
forecaster.getTSLagMaker().setPeriodicity(TSLagMaker.Periodicity.HOURLY);
}
 else if (selectedP.equals("Daily")) {
forecaster.getTSLagMaker().setPeriodicity(TSLagMaker.Periodicity.DAILY);
}
 else if (selectedP.equals("Weekly")) {
forecaster.getTSLagMaker().setPeriodicity(TSLagMaker.Periodicity.WEEKLY);
}
 else if (selectedP.equals("Monthly")) {
forecaster.getTSLagMaker().setPeriodicity(TSLagMaker.Periodicity.MONTHLY);
}
 else if (selectedP.equals("Quarterly")) {
forecaster.getTSLagMaker().setPeriodicity(TSLagMaker.Periodicity.QUARTERLY);
}
 else if (selectedP.equals("Yearly")) {
forecaster.getTSLagMaker().setPeriodicity(TSLagMaker.Periodicity.YEARLY);
}
 else {
forecaster.getTSLagMaker().setPeriodicity(TSLagMaker.Periodicity.UNKNOWN);
}
if (m_skipText.isEnabled() && m_skipText.getText() != null && m_skipText.getText().length() > 0) {
forecaster.getTSLagMaker().setSkipEntries(m_skipText.getText().trim());
}
 else {
forecaster.getTSLagMaker().setSkipEntries("");
}
}
if (!m_advancedConfig.isUsingCustomLags()) {
if (forecaster != null) {
forecaster.getTSLagMaker().setMinLag(1);
}
m_advancedConfig.m_minLagSpinner.setValue(1);
if (selectedP.equals("Hourly")) {
if (forecaster != null) {
forecaster.getTSLagMaker().setMaxLag(Math.min(m_instances.numInstances() / 2,24));
}
m_advancedConfig.m_maxLagSpinner.setValue(Math.min(m_instances.numInstances() / 2,24));
}
 else if (selectedP.equals("Daily")) {
if (forecaster != null) {
forecaster.getTSLagMaker().setMaxLag(Math.min(m_instances.numInstances() / 2,7));
}
m_advancedConfig.m_maxLagSpinner.setValue(Math.min(m_instances.numInstances() / 2,7));
}
 else if (selectedP.equals("Weekly")) {
if (forecaster != null) {
forecaster.getTSLagMaker().setMaxLag(Math.min(m_instances.numInstances() / 2,52));
}
m_advancedConfig.m_maxLagSpinner.setValue(Math.min(m_instances.numInstances() / 2,52));
}
 else if (selectedP.equals("Monthly")) {
if (forecaster != null) {
forecaster.getTSLagMaker().setMaxLag(Math.min(m_instances.numInstances() / 2,12));
}
m_advancedConfig.m_maxLagSpinner.setValue(Math.min(m_instances.numInstances() / 2,12));
}
 else if (selectedP.equals("Quarterly")) {
if (forecaster != null) {
forecaster.getTSLagMaker().setMaxLag(Math.min(m_instances.numInstances() / 2,4));
}
m_advancedConfig.m_maxLagSpinner.setValue(Math.min(m_instances.numInstances() / 2,4));
}
 else if (selectedP.equals("Yearly")) {
if (forecaster != null) {
forecaster.getTSLagMaker().setMaxLag(Math.min(m_instances.numInstances() / 2,5));
}
m_advancedConfig.m_maxLagSpinner.setValue(Math.min(m_instances.numInstances() / 2,5));
}
 else {
if (forecaster != null) {
forecaster.getTSLagMaker().setMaxLag(Math.min(m_instances.numInstances() / 2,12));
}
m_advancedConfig.m_maxLagSpinner.setValue(Math.min(m_instances.numInstances() / 2,12));
}
}
if (!m_advancedConfig.getCustomizeDateDerivedPeriodics() && forecaster != null) {
if (selectedP.equals("Hourly")) {
forecaster.getTSLagMaker().setAddAMIndicator(true);
}
 else if (selectedP.equals("Daily")) {
forecaster.getTSLagMaker().setAddDayOfWeek(true);
forecaster.getTSLagMaker().setAddWeekendIndicator(true);
}
 else if (selectedP.equals("Weekly")) {
forecaster.getTSLagMaker().setAddMonthOfYear(true);
forecaster.getTSLagMaker().setAddQuarterOfYear(true);
}
 else if (selectedP.equals("Monthly")) {
forecaster.getTSLagMaker().setAddMonthOfYear(true);
forecaster.getTSLagMaker().setAddQuarterOfYear(true);
}
}
}
}
