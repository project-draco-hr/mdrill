{
  correctlyInitialized();
  m_Rand=new Random(m_RandSeed);
  int ridx=node.m_Start + m_Rand.nextInt(node.m_NumInstances);
  Instance randomInst=(Instance)m_Instances.instance(m_Instlist[ridx]).copy();
  double[] distList=new double[node.m_NumInstances - 1];
  Instance temp;
  for (int i=node.m_Start, j=0; i < node.m_End; i++, j++) {
    temp=m_Instances.instance(m_Instlist[i]);
    distList[j]=m_DistanceFunction.distance(randomInst,temp,Double.POSITIVE_INFINITY);
  }
  int medianIdx=select(distList,m_Instlist,0,distList.length - 1,node.m_Start,(node.m_End - node.m_Start) / 2 + 1) + node.m_Start;
  Instance pivot;
  node.m_Left=new BallNode(node.m_Start,medianIdx,numNodesCreated + 1,(pivot=BallNode.calcCentroidPivot(node.m_Start,medianIdx,m_Instlist,m_Instances)),BallNode.calcRadius(node.m_Start,medianIdx,m_Instlist,m_Instances,pivot,m_DistanceFunction));
  node.m_Right=new BallNode(medianIdx + 1,node.m_End,numNodesCreated + 2,(pivot=BallNode.calcCentroidPivot(medianIdx + 1,node.m_End,m_Instlist,m_Instances)),BallNode.calcRadius(medianIdx + 1,node.m_End,m_Instlist,m_Instances,pivot,m_DistanceFunction));
}
