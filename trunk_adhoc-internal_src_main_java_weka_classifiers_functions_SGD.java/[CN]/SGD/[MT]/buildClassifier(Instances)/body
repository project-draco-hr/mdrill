{
  reset();
  getCapabilities().testWithFail(data);
  data=new Instances(data);
  data.deleteWithMissingClass();
  if (data.numInstances() > 0 && !m_dontReplaceMissing) {
    m_replaceMissing=new ReplaceMissingValues();
    m_replaceMissing.setInputFormat(data);
    data=Filter.useFilter(data,m_replaceMissing);
  }
  boolean onlyNumeric=true;
  for (int i=0; i < data.numAttributes(); i++) {
    if (i != data.classIndex()) {
      if (!data.attribute(i).isNumeric()) {
        onlyNumeric=false;
        break;
      }
    }
  }
  if (!onlyNumeric) {
    if (data.numInstances() > 0) {
      m_nominalToBinary=new weka.filters.supervised.attribute.NominalToBinary();
    }
 else {
      m_nominalToBinary=new weka.filters.unsupervised.attribute.NominalToBinary();
    }
    m_nominalToBinary.setInputFormat(data);
    data=Filter.useFilter(data,m_nominalToBinary);
  }
  if (!m_dontNormalize && data.numInstances() > 0) {
    m_normalize=new Normalize();
    m_normalize.setInputFormat(data);
    data=Filter.useFilter(data,m_normalize);
  }
  m_numInstances=data.numInstances();
  m_weights=new double[data.numAttributes() + 1];
  m_data=new Instances(data,0);
  if (data.numInstances() > 0) {
    data.randomize(new Random(getSeed()));
    train(data);
  }
}
