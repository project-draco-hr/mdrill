{
  if (!structureFrozen) {
    updateStats(newInstance,false);
  }
  double[] categoryUtils=cuScoresForChildren(newInstance);
  CNode newLeaf=new CNode(m_numAttributes,newInstance);
  m_children.addElement(newLeaf);
  double bestHostCU=categoryUtility();
  CNode finalBestHost=newLeaf;
  m_children.removeElementAt(m_children.size() - 1);
  int best=0;
  int secondBest=0;
  for (int i=0; i < categoryUtils.length; i++) {
    if (categoryUtils[i] > categoryUtils[secondBest]) {
      if (categoryUtils[i] > categoryUtils[best]) {
        secondBest=best;
        best=i;
      }
 else {
        secondBest=i;
      }
    }
  }
  CNode a=(CNode)m_children.elementAt(best);
  CNode b=(CNode)m_children.elementAt(secondBest);
  if (categoryUtils[best] > bestHostCU) {
    bestHostCU=categoryUtils[best];
    finalBestHost=a;
  }
  if (structureFrozen) {
    if (finalBestHost == newLeaf) {
      return null;
    }
 else {
      return finalBestHost;
    }
  }
  double mergedCU=-Double.MAX_VALUE;
  CNode merged=new CNode(m_numAttributes);
  if (a != b) {
    mergedCU=cuScoreForBestTwoMerged(merged,a,b,newInstance);
    if (mergedCU > bestHostCU) {
      bestHostCU=mergedCU;
      finalBestHost=merged;
    }
  }
  double splitCU=-Double.MAX_VALUE;
  double splitBestChildCU=-Double.MAX_VALUE;
  double splitPlusNewLeafCU=-Double.MAX_VALUE;
  double splitPlusMergeBestTwoCU=-Double.MAX_VALUE;
  if (a.m_children != null) {
    FastVector tempChildren=new FastVector();
    for (int i=0; i < m_children.size(); i++) {
      CNode existingChild=(CNode)m_children.elementAt(i);
      if (existingChild != a) {
        tempChildren.addElement(existingChild);
      }
    }
    for (int i=0; i < a.m_children.size(); i++) {
      CNode promotedChild=(CNode)a.m_children.elementAt(i);
      tempChildren.addElement(promotedChild);
    }
    tempChildren.addElement(newLeaf);
    FastVector saveStatusQuo=m_children;
    m_children=tempChildren;
    splitPlusNewLeafCU=categoryUtility();
    tempChildren.removeElementAt(tempChildren.size() - 1);
    categoryUtils=cuScoresForChildren(newInstance);
    best=0;
    secondBest=0;
    for (int i=0; i < categoryUtils.length; i++) {
      if (categoryUtils[i] > categoryUtils[secondBest]) {
        if (categoryUtils[i] > categoryUtils[best]) {
          secondBest=best;
          best=i;
        }
 else {
          secondBest=i;
        }
      }
    }
    CNode sa=(CNode)m_children.elementAt(best);
    CNode sb=(CNode)m_children.elementAt(secondBest);
    splitBestChildCU=categoryUtils[best];
    CNode mergedSplitChildren=new CNode(m_numAttributes);
    if (sa != sb) {
      splitPlusMergeBestTwoCU=cuScoreForBestTwoMerged(mergedSplitChildren,sa,sb,newInstance);
    }
    splitCU=(splitBestChildCU > splitPlusNewLeafCU) ? splitBestChildCU : splitPlusNewLeafCU;
    splitCU=(splitCU > splitPlusMergeBestTwoCU) ? splitCU : splitPlusMergeBestTwoCU;
    if (splitCU > bestHostCU) {
      bestHostCU=splitCU;
      finalBestHost=this;
    }
 else {
      m_children=saveStatusQuo;
    }
  }
  if (finalBestHost != this) {
    m_clusterInstances.add(newInstance);
  }
 else {
    m_numberSplits++;
  }
  if (finalBestHost == merged) {
    m_numberMerges++;
    m_children.removeElementAt(m_children.indexOf(a));
    m_children.removeElementAt(m_children.indexOf(b));
    m_children.addElement(merged);
  }
  if (finalBestHost == newLeaf) {
    finalBestHost=new CNode(m_numAttributes);
    m_children.addElement(finalBestHost);
  }
  if (bestHostCU < m_cutoff) {
    if (finalBestHost == this) {
      m_clusterInstances.add(newInstance);
    }
    m_children=null;
    finalBestHost=null;
  }
  if (finalBestHost == this) {
    updateStats(newInstance,true);
  }
  return finalBestHost;
}
