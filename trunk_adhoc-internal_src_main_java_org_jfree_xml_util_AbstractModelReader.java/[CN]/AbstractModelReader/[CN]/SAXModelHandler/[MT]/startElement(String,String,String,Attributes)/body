{
  setOpenComment(getCommentHandler().getComments());
  this.openComments.push(getOpenComment());
  setCloseComment(null);
  try {
    if (!this.isInclude && qName.equals(ClassModelTags.OBJECTS_TAG)) {
      startRootDocument();
      return;
    }
    if (getState() == STATE_START) {
      startRootElement(qName,attributes);
    }
 else     if (getState() == IGNORE_OBJECT) {
      return;
    }
 else     if (getState() == IN_OBJECT) {
      startObjectElement(qName,attributes);
    }
 else     if (getState() == MAPPING_STATE) {
      if (!qName.equals(ClassModelTags.TYPE_TAG)) {
        throw new SAXException("Expected 'type' tag");
      }
      final String name=attributes.getValue(ClassModelTags.NAME_ATTR);
      final String target=attributes.getValue(ClassModelTags.CLASS_ATTR);
      handleMultiplexMapping(name,target);
    }
 else     if (getState() == CONSTRUCTOR_STATE) {
      if (!qName.equals(ClassModelTags.PARAMETER_TAG)) {
        throw new SAXException("Expected 'parameter' tag");
      }
      final String parameterClass=attributes.getValue(ClassModelTags.CLASS_ATTR);
      final String tagName=attributes.getValue(ClassModelTags.PROPERTY_ATTR);
      handleConstructorDefinition(tagName,parameterClass);
    }
  }
 catch (  ObjectDescriptionException e) {
    throw new SAXException(e);
  }
 finally {
    getCommentHandler().clearComments();
  }
}
