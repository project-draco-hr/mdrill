{
  int[] nodes=node.m_nNodes;
  g.setColor(new Color(m_nClique % 7 * 256 / 7,(m_nClique % 2 * 256 / 2),(m_nClique % 3 * 256 / 3)));
  int dX=m_nPaddedNodeWidth / 2 + m_nClique;
  int dY=m_nNodeHeight / 2;
  int nPosX=0;
  int nPosY=0;
  String sStr="";
  for (int j=0; j < nodes.length; j++) {
    nPosX+=m_BayesNet.getPositionX(nodes[j]);
    nPosY+=m_BayesNet.getPositionY(nodes[j]);
    sStr+=" " + nodes[j];
    for (int k=j + 1; k < nodes.length; k++) {
      g.drawLine(m_BayesNet.getPositionX(nodes[j]) + dX,m_BayesNet.getPositionY(nodes[j]) + dY,m_BayesNet.getPositionX(nodes[k]) + dX,m_BayesNet.getPositionY(nodes[k]) + dY);
    }
  }
  m_nClique++;
  nPosX/=nodes.length;
  nPosY/=nodes.length;
  g.drawString("Clique " + m_nClique + "("+ sStr+ ")",nPosX,nPosY);
  for (int iChild=0; iChild < node.m_children.size(); iChild++) {
    viewCliques(g,(JunctionTreeNode)node.m_children.elementAt(iChild));
  }
}
