{
  ByteArrayOutputStream ramout=new ByteArrayOutputStream();
  OutputStreamWriter ramwriter=new OutputStreamWriter(ramout);
  writeArrfHeader(ramwriter,fields);
  String maxThedate=null;
  for (int i=0; i < end; i++) {
    JSONObject item=list.getJSONObject(i);
    String joinl="";
    StringBuilder bl=new StringBuilder();
    for (    String f : fields) {
      Object val=item.get(f);
      maxThedate=maxThedate(f,maxThedate,val);
      bl.append(joinl);
      bl.append(val);
      joinl=",";
      if (writeline && lines.containsKey(f)) {
        ArrayList<ArrayList<Object>> d=(ArrayList<ArrayList<Object>>)lines.get(f).get("data");
        ArrayList<Object> drow=new ArrayList<Object>();
        long t=fmt.parse(item.getString("thedate")).getTime();
        minmax.min=Math.min(minmax.min,t);
        minmax.max=Math.max(minmax.max,t);
        drow.add(0,t);
        drow.add(1,val);
        d.add(drow);
      }
    }
    ramwriter.append(bl.toString() + "\r\n");
  }
  ramwriter.close();
  byte[] data=ramout.toByteArray();
  ByteArrayInputStream ramStrem=new ByteArrayInputStream(data);
  Instances wine=new Instances(new InputStreamReader(ramStrem));
  WekaForecaster forecaster=new WekaForecaster();
  forecaster.setFieldsToForecast(numberfield.toString());
  forecaster.setBaseForecaster(new GaussianProcesses());
  forecaster.getTSLagMaker().setTimeStampField("thedate");
  forecaster.getTSLagMaker().setMinLag(1);
  forecaster.getTSLagMaker().setMaxLag(12);
  forecaster.getTSLagMaker().setAddMonthOfYear(true);
  forecaster.getTSLagMaker().setAddQuarterOfYear(true);
  forecaster.buildForecaster(wine);
  forecaster.primeForecaster(wine);
  List<List<NumericPrediction>> forecast=forecaster.forecast(presize);
  Date startdate=fmt.parse(maxThedate);
  String[] numfieldsarr=numberfield.toString().split(",");
  for (int i=0; i < presize; i++) {
    List<NumericPrediction> predsAtStep=forecast.get(i);
    for (int j=0; j < numfieldsarr.length; j++) {
      NumericPrediction predForTarget=predsAtStep.get(j);
      if (lines.containsKey(numfieldsarr[j] + "_pre")) {
        ArrayList<ArrayList<Object>> d=(ArrayList<ArrayList<Object>>)lines.get(numfieldsarr[j] + "_pre").get("data");
        ArrayList<Object> drow=new ArrayList<Object>();
        long t=new Date(startdate.getTime() + 1000l * 3600 * 24* (i)).getTime();
        minmax.min=Math.min(minmax.min,t);
        minmax.max=Math.max(minmax.max,t);
        drow.add(0,t);
        drow.add(0,t);
        drow.add(1,predForTarget.predicted());
        d.add(drow);
      }
    }
  }
}
