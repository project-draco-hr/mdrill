{
  if (overlay != null) {
    if (m_lagMaker.getOverlayFields() == null || m_lagMaker.getOverlayFields().size() == 0) {
      throw new Exception("[WekaForecaster] overlay data has been supplied to the" + " forecasting routine but no overlay data has been trained with.");
    }
    String message=m_originalHeader.equalHeadersMsg(overlay);
    if (message != null) {
      throw new Exception("[WekaForecaster] supplied overlay data does not " + "have the same structure as the data used to learn " + "the model!");
    }
  }
 else {
    if (m_lagMaker.getOverlayFields() != null && m_lagMaker.getOverlayFields().size() > 0) {
      throw new Exception("[WekaForecaster] was trained with overlay data but " + "none has been supplied for making a forecast!");
    }
  }
  if (m_missingBuffer != null && m_missingBuffer.numInstances() > 0) {
    System.err.println("Here..... \n\n" + m_missingBuffer);
    Instances missingReplaced=weka.classifiers.timeseries.core.Utils.replaceMissing(m_missingBuffer,m_fieldsToForecast,m_lagMaker.getTimeStampField(),false,m_lagMaker.getPeriodicity(),m_lagMaker.getSkipEntries());
    for (int i=0; i < m_missingBuffer.numInstances(); i++) {
      applyFilters(missingReplaced.instance(i),false,false);
    }
    for (    PrintStream p : progress) {
      p.println("WARNING: priming data contained missing target/date values that could " + "not be interpolated/replaced. Forecasting performance may be " + "adversely affected.");
    }
  }
  if (m_hadLeadingMissingPrime) {
    for (    PrintStream p : progress) {
      p.println("WARNING: priming data contained missing target/date values that could " + "not be interpolated/replaced. Forecasting performance may be " + "adversely affected.");
    }
  }
  if (!m_lagMaker.isUsingAnArtificialTimeIndex() && m_lagMaker.getAdjustForTrends() && m_lagMaker.getTimeStampField() != null && m_lagMaker.getTimeStampField().length() > 0 && !m_atLeastOneNonMissingTimeStamp) {
    throw new Exception("All values of the time stamp field (" + m_lagMaker.getTimeStampField() + ") were missing in the priming "+ "data!");
  }
  List<List<NumericPrediction>> forecastForSteps=new ArrayList<List<NumericPrediction>>();
  int stepsToDo=(overlay != null) ? overlay.numInstances() : numSteps;
  boolean setPeriodics=true, incrementTime=true;
  for (int i=0; i < stepsToDo; i++) {
    incrementTime=true;
    double[] newVals=new double[m_originalHeader.numAttributes()];
    for (int j=0; j < newVals.length; j++) {
      newVals[j]=Utils.missingValue();
    }
    if (overlay != null) {
      Instance overlayI=overlay.instance(i);
      for (      String field : m_lagMaker.getOverlayFields()) {
        int index=m_originalHeader.attribute(field).index();
        newVals[index]=overlayI.value(index);
      }
      if (!m_lagMaker.isUsingAnArtificialTimeIndex() && m_lagMaker.getAdjustForTrends() && m_lagMaker.getTimeStampField() != null && m_lagMaker.getTimeStampField().length() > 0) {
        int timeStampIndex=m_originalHeader.attribute(m_lagMaker.getTimeStampField()).index();
        if (!overlayI.isMissing(timeStampIndex)) {
          newVals[timeStampIndex]=overlayI.value(timeStampIndex);
          incrementTime=false;
        }
      }
    }
    Instance origTest=new DenseInstance(1.0,newVals);
    origTest.setDataset(m_originalHeader);
    Instance transformedWithDate=origTest;
    transformedWithDate=m_lagMaker.processInstancePreview(transformedWithDate,incrementTime,setPeriodics);
    m_dateRemover.input(transformedWithDate);
    Instance transformed=m_dateRemover.output();
    double[] preds=new double[m_singleTargetForecasters.size()];
    for (int j=0; j < m_singleTargetForecasters.size(); j++) {
      preds[j]=m_singleTargetForecasters.get(j).forecastOneStepAhead(transformed);
    }
    List<NumericPrediction> finalForecast=new ArrayList<NumericPrediction>();
    for (int j=0; j < m_fieldsToForecast.size(); j++) {
      if (m_confidenceLimitEstimator != null && i < m_calculateConfLimitsSteps) {
        double[] limits=m_confidenceLimitEstimator.getConfidenceLimitsForTarget(m_fieldsToForecast.get(j),preds[j],i + 1);
        double[][] limitsToAdd=new double[1][];
        limitsToAdd[0]=limits;
        finalForecast.add(new NumericPrediction(Utils.missingValue(),preds[j],1.0,limitsToAdd));
      }
 else {
        finalForecast.add(new NumericPrediction(Utils.missingValue(),preds[j]));
      }
    }
    forecastForSteps.add(finalForecast);
    for (int j=0; j < m_fieldsToForecast.size(); j++) {
      int targetIndex=m_originalHeader.attribute(m_fieldsToForecast.get(j)).index();
      origTest.setValue(targetIndex,preds[j]);
    }
    if (!m_lagMaker.isUsingAnArtificialTimeIndex() && m_lagMaker.getAdjustForTrends() && m_lagMaker.getTimeStampField() != null && m_lagMaker.getTimeStampField().length() > 0) {
      int timeIndex=m_originalHeader.attribute(m_lagMaker.getTimeStampField()).index();
      double timeValue=transformedWithDate.value(transformedWithDate.dataset().attribute(m_lagMaker.getTimeStampField()));
      origTest.setValue(timeIndex,timeValue);
    }
    primeForecasterIncremental(origTest);
  }
  if (m_lagMaker.isUsingAnArtificialTimeIndex()) {
    m_lagMaker.incrementArtificialTimeValue(-(stepsToDo - 1));
  }
  m_primedInput=null;
  return forecastForSteps;
}
