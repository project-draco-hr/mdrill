{
  if (format.classIndex() < 0 || format.classAttribute().isNumeric()) {
    m_messageLabel.setText((format.classIndex() < 0) ? "EROR: no class attribute set" : "ERROR: class is numeric");
    return;
  }
  if (m_displayValNames == false) {
    remove(m_messageLabel);
  }
  m_textBoxEntryMode=false;
  if (format.classAttribute().numValues() == 0) {
    setupTextBoxSelection();
    validate();
    repaint();
    return;
  }
  String existingClassVal=m_classValuePicker.getClassValue();
  if (existingClassVal == null) {
    existingClassVal="";
  }
  int classValIndex=format.classAttribute().indexOfValue(existingClassVal);
  if (existingClassVal.startsWith("/")) {
    existingClassVal=existingClassVal.substring(1);
    if (existingClassVal.equalsIgnoreCase("first")) {
      classValIndex=0;
    }
 else     if (existingClassVal.equalsIgnoreCase("last")) {
      classValIndex=format.classAttribute().numValues() - 1;
    }
 else {
      classValIndex=Integer.parseInt(existingClassVal);
      classValIndex--;
    }
  }
  if (classValIndex < 0) {
    classValIndex=0;
  }
  String[] attribValNames=new String[format.classAttribute().numValues()];
  for (int i=0; i < attribValNames.length; i++) {
    attribValNames[i]=format.classAttribute().value(i);
  }
  m_ClassValueCombo.setModel(new DefaultComboBoxModel(attribValNames));
  if (attribValNames.length > 0) {
    m_ClassValueCombo.setSelectedIndex(classValIndex);
  }
  if (m_displayValNames == false) {
    add(m_holderP,BorderLayout.CENTER);
    m_displayValNames=true;
  }
  validate();
  repaint();
}
