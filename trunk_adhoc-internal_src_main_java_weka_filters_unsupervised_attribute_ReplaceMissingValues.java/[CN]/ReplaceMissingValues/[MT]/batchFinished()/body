{
  if (getInputFormat() == null) {
    throw new IllegalStateException("No input instance format defined");
  }
  if (m_ModesAndMeans == null) {
    double sumOfWeights=getInputFormat().sumOfWeights();
    double[][] counts=new double[getInputFormat().numAttributes()][];
    for (int i=0; i < getInputFormat().numAttributes(); i++) {
      if (getInputFormat().attribute(i).isNominal()) {
        counts[i]=new double[getInputFormat().attribute(i).numValues()];
        if (counts[i].length > 0)         counts[i][0]=sumOfWeights;
      }
    }
    double[] sums=new double[getInputFormat().numAttributes()];
    for (int i=0; i < sums.length; i++) {
      sums[i]=sumOfWeights;
    }
    double[] results=new double[getInputFormat().numAttributes()];
    for (int j=0; j < getInputFormat().numInstances(); j++) {
      Instance inst=getInputFormat().instance(j);
      for (int i=0; i < inst.numValues(); i++) {
        if (!inst.isMissingSparse(i)) {
          double value=inst.valueSparse(i);
          if (inst.attributeSparse(i).isNominal()) {
            if (counts[inst.index(i)].length > 0) {
              counts[inst.index(i)][(int)value]+=inst.weight();
              counts[inst.index(i)][0]-=inst.weight();
            }
          }
 else           if (inst.attributeSparse(i).isNumeric()) {
            results[inst.index(i)]+=inst.weight() * inst.valueSparse(i);
          }
        }
 else {
          if (inst.attributeSparse(i).isNominal()) {
            if (counts[inst.index(i)].length > 0) {
              counts[inst.index(i)][0]-=inst.weight();
            }
          }
 else           if (inst.attributeSparse(i).isNumeric()) {
            sums[inst.index(i)]-=inst.weight();
          }
        }
      }
    }
    m_ModesAndMeans=new double[getInputFormat().numAttributes()];
    for (int i=0; i < getInputFormat().numAttributes(); i++) {
      if (getInputFormat().attribute(i).isNominal()) {
        if (counts[i].length == 0)         m_ModesAndMeans[i]=Utils.missingValue();
 else         m_ModesAndMeans[i]=(double)Utils.maxIndex(counts[i]);
      }
 else       if (getInputFormat().attribute(i).isNumeric()) {
        if (Utils.gr(sums[i],0)) {
          m_ModesAndMeans[i]=results[i] / sums[i];
        }
      }
    }
    for (int i=0; i < getInputFormat().numInstances(); i++) {
      convertInstance(getInputFormat().instance(i));
    }
  }
  flushInput();
  m_NewBatch=true;
  return (numPendingOutput() != 0);
}
