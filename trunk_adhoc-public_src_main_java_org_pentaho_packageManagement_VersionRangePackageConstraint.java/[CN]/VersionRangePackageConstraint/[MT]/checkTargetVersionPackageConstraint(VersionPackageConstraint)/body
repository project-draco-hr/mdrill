{
  VersionPackageConstraint.VersionComparison targetComp=target.getVersionComparison();
  String targetVersion=target.getPackage().getPackageMetaDataElement(VersionPackageConstraint.VERSION_KEY).toString();
  VersionPackageConstraint.VersionComparison lowerComp=VersionPackageConstraint.compare(targetVersion,m_lowerBound);
  VersionPackageConstraint.VersionComparison upperComp=VersionPackageConstraint.compare(targetVersion,m_upperBound);
  boolean lowerCheck=false;
  boolean upperCheck=false;
  String coveringLowerBound=null;
  String coveringUpperBound=null;
  VersionPackageConstraint.VersionComparison coveringLowerConstraint=null;
  VersionPackageConstraint.VersionComparison coveringUpperConstraint=null;
  if (targetComp == VersionPackageConstraint.VersionComparison.EQUAL) {
    if (checkConstraint(target.getPackage())) {
      return target;
    }
 else {
      return null;
    }
  }
 else {
    if (m_boundOr) {
      if (m_lowerConstraint == VersionPackageConstraint.VersionComparison.LESSTHAN) {
        if (lowerComp == VersionPackageConstraint.VersionComparison.EQUAL || lowerComp == VersionPackageConstraint.VersionComparison.GREATERTHAN) {
          if (targetComp == VersionPackageConstraint.VersionComparison.GREATERTHAN || targetComp == VersionPackageConstraint.VersionComparison.GREATERTHANOREQUAL) {
            lowerCheck=false;
          }
 else {
            lowerCheck=true;
            coveringLowerBound=m_lowerBound;
            coveringLowerConstraint=m_lowerConstraint;
          }
        }
 else         if (lowerComp == VersionPackageConstraint.VersionComparison.LESSTHAN) {
          lowerCheck=true;
          coveringLowerBound=targetVersion;
          coveringLowerConstraint=targetComp;
          if (targetComp == VersionPackageConstraint.VersionComparison.LESSTHAN || targetComp == VersionPackageConstraint.VersionComparison.LESSTHANOREQUAL) {
            coveringUpperBound=null;
          }
 else {
            coveringUpperBound=m_lowerBound;
            coveringUpperConstraint=m_lowerConstraint;
          }
        }
      }
 else {
        if (lowerComp == VersionPackageConstraint.VersionComparison.GREATERTHAN) {
          if (targetComp == VersionPackageConstraint.VersionComparison.GREATERTHAN || targetComp == VersionPackageConstraint.VersionComparison.GREATERTHANOREQUAL) {
            lowerCheck=false;
          }
 else {
            lowerCheck=true;
            coveringLowerBound=m_lowerBound;
            coveringLowerConstraint=m_lowerConstraint;
          }
        }
 else         if (lowerComp == VersionPackageConstraint.VersionComparison.EQUAL) {
          if (targetComp == VersionPackageConstraint.VersionComparison.GREATERTHAN) {
            lowerCheck=false;
          }
 else {
            lowerCheck=true;
            coveringLowerBound=targetVersion;
            coveringLowerConstraint=targetComp;
            coveringUpperBound=null;
          }
        }
 else {
          lowerCheck=true;
          coveringLowerBound=targetVersion;
          coveringLowerConstraint=targetComp;
          if (targetComp == VersionPackageConstraint.VersionComparison.LESSTHAN || targetComp == VersionPackageConstraint.VersionComparison.LESSTHANOREQUAL) {
            coveringUpperBound=null;
          }
 else {
            coveringUpperBound=m_lowerBound;
            coveringUpperConstraint=m_lowerConstraint;
          }
        }
      }
      if (!lowerCheck) {
        if (m_upperConstraint == VersionPackageConstraint.VersionComparison.GREATERTHAN) {
          if (upperComp == VersionPackageConstraint.VersionComparison.EQUAL || upperComp == VersionPackageConstraint.VersionComparison.LESSTHAN) {
            if (targetComp == VersionPackageConstraint.VersionComparison.LESSTHAN || targetComp == VersionPackageConstraint.VersionComparison.LESSTHANOREQUAL) {
              upperCheck=false;
            }
 else {
              lowerCheck=true;
              coveringUpperBound=m_upperBound;
              coveringUpperConstraint=m_upperConstraint;
            }
          }
 else           if (upperComp == VersionPackageConstraint.VersionComparison.GREATERTHAN) {
            upperCheck=true;
            coveringUpperBound=targetVersion;
            coveringUpperConstraint=targetComp;
            if (targetComp == VersionPackageConstraint.VersionComparison.GREATERTHAN || targetComp == VersionPackageConstraint.VersionComparison.GREATERTHANOREQUAL) {
              coveringLowerBound=null;
            }
 else {
              coveringLowerBound=m_upperBound;
              coveringLowerConstraint=m_upperConstraint;
            }
          }
        }
 else {
          if (upperComp == VersionPackageConstraint.VersionComparison.LESSTHAN) {
            if (targetComp == VersionPackageConstraint.VersionComparison.LESSTHAN || targetComp == VersionPackageConstraint.VersionComparison.LESSTHANOREQUAL) {
              upperCheck=false;
            }
 else {
              upperCheck=true;
              coveringUpperBound=m_upperBound;
              coveringUpperConstraint=m_upperConstraint;
            }
          }
 else           if (upperComp == VersionPackageConstraint.VersionComparison.EQUAL) {
            if (targetComp == VersionPackageConstraint.VersionComparison.LESSTHAN) {
              upperCheck=false;
            }
 else {
              upperCheck=true;
              coveringUpperBound=targetVersion;
              coveringUpperConstraint=targetComp;
              coveringLowerBound=null;
            }
          }
 else {
            upperCheck=true;
            coveringUpperBound=targetVersion;
            coveringUpperConstraint=targetComp;
            if (targetComp == VersionPackageConstraint.VersionComparison.GREATERTHAN || targetComp == VersionPackageConstraint.VersionComparison.GREATERTHANOREQUAL) {
              coveringLowerBound=null;
            }
 else {
              coveringLowerBound=m_upperBound;
              coveringLowerConstraint=m_upperConstraint;
            }
          }
        }
      }
      if (!lowerCheck && !upperCheck) {
        throw new Exception("[VersionRangePackageConstraint] This shouldn't be possible!!");
      }
      if (coveringLowerBound != null && coveringUpperBound != null) {
        VersionRangePackageConstraint result=new VersionRangePackageConstraint(getPackage());
        result.setRangeConstraint(coveringLowerBound,coveringLowerConstraint,coveringUpperBound,coveringUpperConstraint);
        return result;
      }
      String newVersionNumber=(coveringLowerBound != null) ? coveringLowerBound : coveringUpperBound;
      VersionPackageConstraint.VersionComparison newConstraint=(coveringLowerConstraint != null) ? coveringLowerConstraint : coveringUpperConstraint;
      Package p=(Package)getPackage().clone();
      p.setPackageMetaDataElement(VersionPackageConstraint.VERSION_KEY,newVersionNumber);
      VersionPackageConstraint result=new VersionPackageConstraint(p);
      result.setVersionConstraint(newConstraint);
      return result;
    }
 else {
      if (lowerComp == VersionPackageConstraint.VersionComparison.LESSTHAN) {
        if (targetComp == VersionPackageConstraint.VersionComparison.LESSTHAN || targetComp == VersionPackageConstraint.VersionComparison.LESSTHANOREQUAL || targetComp == VersionPackageConstraint.VersionComparison.EQUAL) {
          lowerCheck=false;
        }
 else {
          lowerCheck=true;
          coveringLowerBound=m_lowerBound;
          coveringLowerConstraint=m_lowerConstraint;
          coveringUpperBound=m_upperBound;
          coveringUpperConstraint=m_upperConstraint;
        }
      }
 else       if (lowerComp == VersionPackageConstraint.VersionComparison.EQUAL) {
        if (targetComp == VersionPackageConstraint.VersionComparison.GREATERTHANOREQUAL || targetComp == VersionPackageConstraint.VersionComparison.GREATERTHAN) {
          lowerCheck=true;
          coveringLowerBound=m_lowerBound;
          coveringLowerConstraint=(m_lowerConstraint == VersionPackageConstraint.VersionComparison.GREATERTHAN || targetComp == VersionPackageConstraint.VersionComparison.GREATERTHAN) ? VersionPackageConstraint.VersionComparison.GREATERTHAN : VersionPackageConstraint.VersionComparison.GREATERTHANOREQUAL;
          coveringUpperBound=m_upperBound;
          coveringUpperConstraint=m_upperConstraint;
        }
 else {
          if (targetComp == VersionPackageConstraint.VersionComparison.LESSTHANOREQUAL && m_lowerConstraint == VersionPackageConstraint.VersionComparison.GREATERTHANOREQUAL) {
            VersionPackageConstraint.VersionComparison newComp=VersionPackageConstraint.VersionComparison.EQUAL;
            VersionPackageConstraint result=new VersionPackageConstraint(target.getPackage());
            result.setVersionConstraint(newComp);
            return result;
          }
        }
      }
 else       if (lowerComp == VersionPackageConstraint.VersionComparison.GREATERTHAN) {
        if (upperComp == VersionPackageConstraint.VersionComparison.LESSTHAN) {
          if (targetComp == VersionPackageConstraint.VersionComparison.LESSTHAN || targetComp == VersionPackageConstraint.VersionComparison.LESSTHANOREQUAL) {
            lowerCheck=true;
            upperCheck=true;
            coveringLowerBound=m_lowerBound;
            coveringLowerConstraint=m_lowerConstraint;
            coveringUpperBound=targetVersion;
            coveringUpperConstraint=targetComp;
          }
 else {
            coveringLowerBound=targetVersion;
            coveringLowerConstraint=targetComp;
            coveringUpperBound=m_upperBound;
            coveringUpperConstraint=m_upperConstraint;
          }
        }
      }
      if (coveringLowerBound == null || coveringUpperBound == null) {
        if (upperComp == VersionPackageConstraint.VersionComparison.EQUAL) {
          if (targetComp == VersionPackageConstraint.VersionComparison.LESSTHANOREQUAL || targetComp == VersionPackageConstraint.VersionComparison.LESSTHAN) {
            upperCheck=true;
            coveringUpperBound=m_upperBound;
            coveringUpperConstraint=(m_upperConstraint == VersionPackageConstraint.VersionComparison.LESSTHAN || targetComp == VersionPackageConstraint.VersionComparison.LESSTHAN) ? VersionPackageConstraint.VersionComparison.LESSTHAN : VersionPackageConstraint.VersionComparison.LESSTHANOREQUAL;
            coveringLowerBound=m_lowerBound;
            coveringLowerConstraint=m_lowerConstraint;
          }
 else {
            if (targetComp == VersionPackageConstraint.VersionComparison.GREATERTHANOREQUAL && m_upperConstraint == VersionPackageConstraint.VersionComparison.LESSTHANOREQUAL) {
              VersionPackageConstraint.VersionComparison newComp=VersionPackageConstraint.VersionComparison.EQUAL;
              VersionPackageConstraint result=new VersionPackageConstraint(target.getPackage());
              result.setVersionConstraint(newComp);
              return result;
            }
          }
        }
 else         if (upperComp == VersionPackageConstraint.VersionComparison.GREATERTHAN) {
          if (targetComp == VersionPackageConstraint.VersionComparison.GREATERTHAN || targetComp == VersionPackageConstraint.VersionComparison.GREATERTHANOREQUAL || targetComp == VersionPackageConstraint.VersionComparison.EQUAL) {
            upperCheck=false;
          }
 else {
            upperCheck=true;
            coveringUpperBound=m_upperBound;
            coveringUpperConstraint=m_upperConstraint;
            coveringLowerBound=m_lowerBound;
            coveringLowerConstraint=m_lowerConstraint;
          }
        }
      }
      if (coveringUpperBound == null && coveringLowerBound == null) {
        return null;
      }
      if (coveringUpperBound == null || coveringLowerBound == null) {
        throw new Exception("[VersionRangePackageConstraint] This shouldn't be possible!!");
      }
      VersionRangePackageConstraint result=new VersionRangePackageConstraint(getPackage());
      result.setRangeConstraint(coveringLowerBound,coveringLowerConstraint,coveringUpperBound,coveringUpperConstraint);
      return result;
    }
  }
}
