{
  getCapabilities().testWithFail(data);
  Instances filteredData=new Instances(data);
  filteredData.deleteWithMissingClass();
  m_replaceMissing=new ReplaceMissingValues();
  m_replaceMissing.setInputFormat(filteredData);
  filteredData=Filter.useFilter(filteredData,m_replaceMissing);
  if (m_convertNominal) {
    m_nominalToBinary=new NominalToBinary();
    m_nominalToBinary.setInputFormat(filteredData);
    filteredData=Filter.useFilter(filteredData,m_nominalToBinary);
  }
  int minNumInstances=2;
  ModelSelection modSelection;
  if (m_splitOnResiduals) {
    modSelection=new ResidualModelSelection(minNumInstances);
  }
 else {
    modSelection=new C45ModelSelection(minNumInstances,filteredData,true);
  }
  m_tree=new LMTNode(modSelection,m_numBoostingIterations,m_fastRegression,m_errorOnProbabilities,m_minNumInstances,m_weightTrimBeta,m_useAIC);
  m_tree.buildClassifier(filteredData);
  if (modSelection instanceof C45ModelSelection)   ((C45ModelSelection)modSelection).cleanup();
}
