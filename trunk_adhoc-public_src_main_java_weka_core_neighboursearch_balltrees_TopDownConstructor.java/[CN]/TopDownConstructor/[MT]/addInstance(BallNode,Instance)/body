{
  double leftDist, rightDist;
  if (node.m_Left != null && node.m_Right != null) {
    leftDist=m_DistanceFunction.distance(inst,node.m_Left.getPivot(),Double.POSITIVE_INFINITY);
    rightDist=m_DistanceFunction.distance(inst,node.m_Right.getPivot(),Double.POSITIVE_INFINITY);
    if (leftDist < rightDist) {
      addInstance(node.m_Left,inst);
      processNodesAfterAddInstance(node.m_Right);
    }
 else {
      addInstance(node.m_Right,inst);
    }
    node.m_End++;
  }
 else   if (node.m_Left != null || node.m_Right != null) {
    throw new Exception("Error: Only one leaf of the built ball tree is " + "assigned. Please check code.");
  }
 else {
    int index=m_Instances.numInstances() - 1;
    int instList[]=new int[m_Instances.numInstances()];
    System.arraycopy(m_InstList,0,instList,0,node.m_End + 1);
    if (node.m_End < m_InstList.length - 1)     System.arraycopy(m_InstList,node.m_End + 2,instList,node.m_End + 2,m_InstList.length - node.m_End - 1);
    instList[node.m_End + 1]=index;
    node.m_End++;
    node.m_NumInstances++;
    m_InstList=instList;
    m_Splitter.setInstanceList(m_InstList);
    if (node.m_NumInstances > m_MaxInstancesInLeaf) {
      m_Splitter.splitNode(node,m_NumNodes);
      m_NumNodes+=2;
    }
  }
  return m_InstList;
}
