{
  List<Dependency> missing=new ArrayList<Dependency>();
  String dependencies=getPackageMetaDataElement("Depends").toString();
  if (dependencies != null) {
    StringTokenizer tok=new StringTokenizer(dependencies,",");
    while (tok.hasMoreTokens()) {
      String nextT=tok.nextToken().trim();
      String[] split=splitNameVersion(nextT);
      if (!(split[0].equalsIgnoreCase(m_packageManager.getBaseSystemName()))) {
        Package tempDep=m_packageManager.getRepositoryPackageInfo(split[0],split[2]);
        if (!findPackage(split[0],packages)) {
          VersionPackageConstraint versionConstraint=new VersionPackageConstraint(tempDep);
          if (split[2] == null) {
            versionConstraint.setVersionConstraint(VersionPackageConstraint.VersionComparison.LESSTHANOREQUAL);
            missing.add(new Dependency(this,versionConstraint));
          }
 else {
            if (split.length == 3) {
              versionConstraint.setVersionConstraint(split[1]);
              missing.add(new Dependency(this,versionConstraint));
            }
 else {
              VersionRangePackageConstraint versionRConstraint=new VersionRangePackageConstraint(tempDep);
              VersionPackageConstraint.VersionComparison comp1=VersionPackageConstraint.getVersionComparison(split[1]);
              VersionPackageConstraint.VersionComparison comp2=VersionPackageConstraint.getVersionComparison(split[3]);
              versionRConstraint.setRangeConstraint(split[2],comp1,split[4],comp2);
              missing.add(new Dependency(this,versionRConstraint));
            }
          }
        }
      }
    }
  }
  return missing;
}
