{
  String installed=args[0];
  String toCheckAgainst=args[1];
  String[] splitI=splitNameVersion(installed);
  String[] splitA=splitNameVersion(toCheckAgainst);
  try {
    if (splitA.length == 3) {
      System.out.println("Checking first version number against second constraint");
      VersionPackageConstraint.VersionComparison constraint=VersionPackageConstraint.getVersionComparison(splitA[1]);
      if (VersionPackageConstraint.checkConstraint(splitI[2],constraint,splitA[2])) {
        System.out.println(splitI[2] + " is compatible with " + args[1]);
      }
 else {
        System.out.println(splitI[2] + " is not compatible with " + args[1]);
      }
      Map<String,String> baseMap=new HashMap<String,String>();
      baseMap.put("PackageName",splitA[0]);
      baseMap.put("Version",splitA[2]);
      Package packageA=new DefaultPackage(null,null,baseMap);
      packageA.setPackageMetaData(baseMap);
      VersionPackageConstraint constrA=new VersionPackageConstraint(packageA);
      constrA.setVersionConstraint(constraint);
      if (splitI.length == 3) {
        VersionPackageConstraint.VersionComparison constraintI=VersionPackageConstraint.getVersionComparison(splitI[1]);
        Package packageI=(Package)packageA.clone();
        packageI.setPackageMetaDataElement(VersionPackageConstraint.VERSION_KEY,splitI[2]);
        VersionPackageConstraint constrI=new VersionPackageConstraint(packageI);
        constrI.setVersionConstraint(constraintI);
        PackageConstraint pc=null;
        if ((pc=constrI.checkConstraint(constrA)) != null) {
          System.out.println(constrI + " and " + constrA+ " are compatible\n\n"+ "compatible constraint "+ pc);
        }
 else {
          System.out.println(constrI + " and " + constrA+ " are not compatible");
        }
      }
 else {
      }
    }
 else {
      System.out.println("Checking first version number against second constraint");
      Map<String,String> baseMap=new HashMap<String,String>();
      baseMap.put("PackageName",splitI[0]);
      baseMap.put("Version",splitI[2]);
      Package p=new DefaultPackage(null,null,baseMap);
      VersionRangePackageConstraint c=new VersionRangePackageConstraint(p);
      VersionPackageConstraint.VersionComparison comp1=VersionPackageConstraint.getVersionComparison(splitA[1]);
      VersionPackageConstraint.VersionComparison comp2=VersionPackageConstraint.getVersionComparison(splitA[3]);
      c.setRangeConstraint(splitA[2],comp1,splitA[4],comp2);
      if (c.checkConstraint(p)) {
        System.out.println(splitI[2] + " is compatible with " + args[1]);
      }
 else {
        System.out.println(splitI[2] + " is not compatible with " + args[1]);
      }
    }
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
}
