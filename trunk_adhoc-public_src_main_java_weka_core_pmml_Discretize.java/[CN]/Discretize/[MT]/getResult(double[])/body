{
  double result=Utils.missingValue();
  double value=incoming[m_fieldIndex];
  if (Utils.isMissingValue(value)) {
    if (m_mapMissingDefined) {
      if (m_outputDef.isNominal()) {
        result=m_outputDef.indexOfValue(m_mapMissingTo);
      }
 else {
        try {
          result=Double.parseDouble(m_mapMissingTo);
        }
 catch (        NumberFormatException ex) {
          throw new Exception("[Discretize] Optype is continuous but value of mapMissingTo " + "can not be parsed as a number!");
        }
      }
    }
  }
 else {
    boolean found=false;
    for (    DiscretizeBin b : m_bins) {
      if (b.containsValue(value)) {
        found=true;
        if (m_outputDef.isNominal()) {
          result=m_outputDef.indexOfValue(b.getBinValue());
        }
 else {
          result=b.getBinValueNumeric();
        }
        break;
      }
    }
    if (!found) {
      if (m_defaultValueDefined) {
        if (m_outputDef.isNominal()) {
          result=m_outputDef.indexOfValue(m_defaultValue);
        }
 else {
          try {
            result=Double.parseDouble(m_defaultValue);
          }
 catch (          NumberFormatException ex) {
            throw new Exception("[Discretize] Optype is continuous but value of " + "default value can not be parsed as a number!");
          }
        }
      }
    }
  }
  return result;
}
