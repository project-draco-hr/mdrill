{
  double[][] trainYs=getYs(m_train);
  double[][] trainFs=getFs(m_numericData);
  double[][] probs=getProbs(trainFs);
  int iteration=0;
  double[] trainErrors=new double[m_maxIterations + 1];
  trainErrors[0]=getErrorRate(m_train);
  int noMin=0;
  double lastMin=Double.MAX_VALUE;
  while (iteration < m_maxIterations) {
    boolean foundAttribute=performIteration(iteration,trainYs,trainFs,probs,m_numericData);
    if (foundAttribute) {
      iteration++;
      m_numRegressions=iteration;
    }
 else {
      break;
    }
    trainErrors[iteration]=getErrorRate(m_train);
    if (noMin > m_heuristicStop)     break;
    if (trainErrors[iteration] < lastMin) {
      lastMin=trainErrors[iteration];
      noMin=0;
    }
 else {
      noMin++;
    }
  }
  m_numRegressions=getBestIteration(trainErrors,iteration);
}
