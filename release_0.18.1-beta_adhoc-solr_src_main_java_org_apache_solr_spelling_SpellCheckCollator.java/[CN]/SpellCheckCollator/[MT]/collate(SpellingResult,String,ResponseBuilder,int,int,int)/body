{
  List<SpellCheckCollation> collations=new ArrayList<SpellCheckCollation>();
  QueryComponent queryComponent=null;
  if (ultimateResponse.components != null) {
    for (    SearchComponent sc : ultimateResponse.components) {
      if (sc instanceof QueryComponent) {
        queryComponent=(QueryComponent)sc;
        break;
      }
    }
  }
  boolean verifyCandidateWithQuery=true;
  if (maxTries < 1) {
    maxTries=1;
    verifyCandidateWithQuery=false;
  }
  if (queryComponent == null && verifyCandidateWithQuery) {
    LOG.info("Could not find an instance of QueryComponent.  Disabling collation verification against the index.");
    maxTries=1;
    verifyCandidateWithQuery=false;
  }
  int tryNo=0;
  int collNo=0;
  PossibilityIterator possibilityIter=new PossibilityIterator(result.getSuggestions(),maxTries,maxEvaluations);
  while (tryNo < maxTries && collNo < maxCollations && possibilityIter.hasNext()) {
    RankedSpellPossibility possibility=possibilityIter.next();
    String collationQueryStr=getCollation(originalQuery,possibility.getCorrections());
    int hits=0;
    if (verifyCandidateWithQuery) {
      tryNo++;
      ResponseBuilder checkResponse=new ResponseBuilder();
      checkResponse.setQparser(ultimateResponse.getQparser());
      checkResponse.setFilters(ultimateResponse.getFilters());
      checkResponse.setQueryString(collationQueryStr);
      checkResponse.components=Arrays.asList(new SearchComponent[]{queryComponent});
      ModifiableSolrParams params=new ModifiableSolrParams(ultimateResponse.req.getParams());
      params.set(CommonParams.Q,collationQueryStr);
      params.remove(CommonParams.START);
      params.set(CommonParams.FL,"id");
      params.set(CommonParams.ROWS,"0");
      checkResponse.req=new LocalSolrQueryRequest(ultimateResponse.req.getCore(),params);
      checkResponse.rsp=new SolrQueryResponse();
      try {
        queryComponent.prepare(checkResponse);
        queryComponent.process(checkResponse);
        hits=(Integer)checkResponse.rsp.getToLog().get("hits");
      }
 catch (      Exception e) {
        LOG.warn("Exception trying to re-query to check if a spell check possibility would return any hits.",e);
      }
 finally {
        checkResponse.req.close();
      }
    }
    if (hits > 0 || !verifyCandidateWithQuery) {
      collNo++;
      SpellCheckCollation collation=new SpellCheckCollation();
      collation.setCollationQuery(collationQueryStr);
      collation.setHits(hits);
      collation.setInternalRank(possibility.getRank());
      NamedList<String> misspellingsAndCorrections=new NamedList<String>();
      for (      SpellCheckCorrection corr : possibility.getCorrections()) {
        misspellingsAndCorrections.add(corr.getOriginal().toString(),corr.getCorrection());
      }
      collation.setMisspellingsAndCorrections(misspellingsAndCorrections);
      collations.add(collation);
    }
    if (LOG.isDebugEnabled()) {
      LOG.debug("Collation: " + collationQueryStr + (verifyCandidateWithQuery ? (" will return " + hits + " hits.") : ""));
    }
  }
  return collations;
}
