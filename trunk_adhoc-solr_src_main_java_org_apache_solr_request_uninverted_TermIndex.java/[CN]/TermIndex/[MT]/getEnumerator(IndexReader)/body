{
  if (index == null)   return new NumberedTermEnum(reader,this,prefix == null ? "" : prefix,0){
    ArrayList<String> lst;
    @Override protected boolean setTerm(){
      boolean b=super.setTerm();
      if (b && (pos & intervalMask) == 0) {
        String text=term().text();
        sizeOfStrings+=text.length() << 1;
        if (lst == null) {
          lst=new ArrayList<String>();
        }
        lst.add(text);
      }
      return b;
    }
    @Override public boolean skipTo(    Term target) throws IOException {
      throw new UnsupportedOperationException();
    }
    @Override public boolean skipTo(    int termNumber) throws IOException {
      throw new UnsupportedOperationException();
    }
    @Override public void close() throws IOException {
      nTerms=pos;
      super.close();
      index=lst != null ? lst.toArray(new String[lst.size()]) : new String[0];
      String filename=field + ".index" + UnInvertedFieldBase.CacheVersion+ "."+ key;
      if (cachedir != null) {
        if (cachedir.fileExists(filename)) {
          cachedir.deleteFile(filename);
        }
        IndexOutput out=cachedir.createOutput(filename);
        out.writeInt(nTerms);
        out.writeLong(sizeOfStrings);
        out.writeInt(index.length);
        for (int i=0; i < index.length; i++) {
          out.writeString(index[i]);
        }
        out.close();
      }
    }
  }
;
 else   return new NumberedTermEnum(reader,this,"",0);
}
