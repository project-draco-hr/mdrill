{
  MergeSpecification spec=new MergeSpecification();
  final List<SegmentInfo> segments=infos.asList();
  int start=last - 1;
  while (start >= 0) {
    SegmentInfo info=infos.info(start);
    if (size(info) > maxMergeSizeForForcedMerge || sizeDocs(info) > maxMergeDocs) {
      if (verbose()) {
        message("findForcedMergesSizeLimit: skip segment=" + info + ": size is > maxMergeSize ("+ maxMergeSizeForForcedMerge+ ") or sizeDocs is > maxMergeDocs ("+ maxMergeDocs+ ")");
      }
      if (last - start - 1 > 1 || (start != last - 1 && !isMerged(infos.info(start + 1)))) {
        spec.add(new OneMerge(segments.subList(start + 1,last)));
      }
      last=start;
    }
 else     if (last - start == mergeFactor) {
      spec.add(new OneMerge(segments.subList(start,last)));
      last=start;
    }
    --start;
  }
  if (last > 0 && (++start + 1 < last || !isMerged(infos.info(start)))) {
    spec.add(new OneMerge(segments.subList(start,last)));
  }
  return spec.merges.size() == 0 ? null : spec;
}
