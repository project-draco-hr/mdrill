{
  JPanel basePanel=new JPanel();
  basePanel.setLayout(new BorderLayout());
  JPanel base1=new JPanel();
  base1.setLayout(new BorderLayout());
  base1.add(m_evaluationMetrics,BorderLayout.CENTER);
  List<TSEvalModule> evalModulesL=TSEvalModule.getModuleList();
  ArrayList<Attribute> atts=new ArrayList<Attribute>();
  int numMods=0;
  for (  TSEvalModule s : evalModulesL) {
    if (!(s.getEvalName().equals("Error"))) {
      atts.add(new Attribute(s.toString()));
      numMods++;
    }
  }
  Instances modInsts=new Instances("Eval modules",atts,1);
  m_evaluationModsHeader=modInsts;
  m_evaluationMetrics.setInstances(modInsts);
  boolean[] selected=new boolean[numMods];
  selected[0]=true;
  selected[2]=true;
  try {
    m_evaluationMetrics.setSelectedAttributes(selected);
  }
 catch (  Exception ex) {
  }
  m_evaluationMetrics.setPreferredScrollableViewportSize(new Dimension(260,80));
  m_evaluationMetrics.setBorder(BorderFactory.createTitledBorder("Metrics"));
  JPanel temp1=new JPanel();
  temp1.setLayout(new BorderLayout());
  temp1.setBorder(BorderFactory.createTitledBorder("Test options"));
  temp1.add(m_trainingCheckBox,BorderLayout.NORTH);
  m_trainingCheckBox.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      updateEvalAndOutputEnabledStatus();
      if (m_simpleConfig != null) {
        m_simpleConfig.m_performEvaluation.setSelected(m_trainingCheckBox.isSelected() || m_holdoutCheckBox.isSelected());
      }
    }
  }
);
  JPanel temp2=new JPanel();
  temp2.setLayout(new BorderLayout());
  temp2.add(m_holdoutCheckBox,BorderLayout.WEST);
  temp2.add(m_holdoutSize,BorderLayout.EAST);
  m_holdoutSize.setEnabled(false);
  int width=m_minLagSpinner.getPreferredSize().width;
  int height=m_minLagSpinner.getPreferredSize().height;
  m_holdoutSize.setPreferredSize(new Dimension(width * 1,height));
  m_holdoutSize.setMinimumSize(new Dimension(width * 1,height));
  m_holdoutSize.setToolTipText("Number of instances (value >=1) or percentage " + "(value < 1) to hold out from the end of the data");
  m_holdoutSize.setText("0.3");
  m_holdoutCheckBox.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      updateEvalAndOutputEnabledStatus();
      if (m_simpleConfig != null) {
        m_simpleConfig.m_performEvaluation.setSelected(m_trainingCheckBox.isSelected() || m_holdoutCheckBox.isSelected());
      }
    }
  }
);
  temp1.add(temp2,BorderLayout.CENTER);
  if (m_allowSeparateTestSet) {
    JPanel checkAndButHolder=new JPanel();
    checkAndButHolder.setLayout(new BorderLayout());
    checkAndButHolder.add(m_separateTestSetCheckBox,BorderLayout.NORTH);
    checkAndButHolder.add(m_testSetBut,BorderLayout.SOUTH);
    temp1.add(checkAndButHolder,BorderLayout.SOUTH);
    m_separateTestSetCheckBox.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        updateEvalAndOutputEnabledStatus();
      }
    }
);
  }
  JPanel temp3=new JPanel();
  temp3.setLayout(new BorderLayout());
  temp3.add(temp1,BorderLayout.NORTH);
  base1.add(temp3,BorderLayout.EAST);
  basePanel.add(base1,BorderLayout.NORTH);
  m_testSetBut.setToolTipText("Evaluate on a separate test set");
  m_testSetBut.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
    }
  }
);
  m_configHolder.addTab("Evaluation",null,basePanel,"Evaluation options");
}
