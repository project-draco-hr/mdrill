{
  JPanel basePanel=new JPanel();
  basePanel.setLayout(new BorderLayout());
  JPanel temp=new JPanel();
  temp.setLayout(new BorderLayout());
  JPanel checkHolder=new JPanel();
  checkHolder.setLayout(new BorderLayout());
  checkHolder.add(m_customizeDateDerivedPeriodics,BorderLayout.EAST);
  JPanel editButsP=new JPanel();
  editButsP.setLayout(new GridLayout(1,5));
  editButsP.add(m_addCustomPeriodicBut);
  editButsP.add(m_deleteCustomPeriodicBut);
  editButsP.add(m_editCustomPeriodicBut);
  editButsP.add(m_savePeriodicBut);
  editButsP.add(m_loadPeriodicBut);
  m_loadPeriodicBut.setEnabled(false);
  m_savePeriodicBut.setEnabled(false);
  m_savePeriodicBut.setToolTipText("Save checked date-derived " + "periodic definitions to a file");
  m_savePeriodicBut.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      try {
        savePeriodicsToFile();
      }
 catch (      IOException ex) {
        ex.printStackTrace();
      }
    }
  }
);
  m_loadPeriodicBut.setToolTipText("Load pre-saved date-derived periodic " + "definitions from a file");
  m_loadPeriodicBut.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      try {
        loadPeriodicsFromFile();
      }
 catch (      IOException ex) {
        ex.printStackTrace();
      }
    }
  }
);
  checkHolder.add(editButsP,BorderLayout.WEST);
  m_editCustomPeriodicBut.setEnabled(false);
  m_editCustomPeriodicBut.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      int selectedRow=m_dateDerivedPeriodicSelector.getTable().getSelectedRow();
      if (selectedRow > NUM_PREDEFINED_PERIODICS - 1) {
        String fieldName=m_dateDerivedPeriodicsHeader.attribute(selectedRow).name();
        fieldName=fieldName.replaceFirst("c_","");
        ArrayList<CustomPeriodicTest> toEdit=m_customPeriodics.get(fieldName);
        if (toEdit == null) {
          System.err.println("Oh oh, couldn't find " + fieldName + " to edit!");
        }
 else {
          try {
            SerializedObject so=new SerializedObject(toEdit);
            toEdit=(ArrayList<CustomPeriodicTest>)so.getObject();
            String newFieldName=displayAddEditDialog(toEdit,fieldName);
            if (newFieldName.length() == 0) {
            }
 else             if (!newFieldName.equals(fieldName)) {
              m_customPeriodics.remove(fieldName);
              m_customPeriodics.put(newFieldName,toEdit);
              int[] selected=m_dateDerivedPeriodicSelector.getSelectedAttributes();
              Instances insts=createDateDerivedPeriodicList();
              m_dateDerivedPeriodicSelector.setInstances(insts);
              m_dateDerivedPeriodicsHeader=insts;
              boolean[] newSelected=new boolean[insts.numAttributes()];
              for (int i=0; i < selected.length; i++) {
                newSelected[selected[i]]=true;
              }
              try {
                m_dateDerivedPeriodicSelector.setSelectedAttributes(newSelected);
              }
 catch (              Exception ex) {
                ex.printStackTrace();
              }
            }
 else {
              m_customPeriodics.put(fieldName,toEdit);
            }
          }
 catch (          Exception e1) {
            e1.printStackTrace();
          }
        }
      }
    }
  }
);
  m_deleteCustomPeriodicBut.setEnabled(false);
  m_deleteCustomPeriodicBut.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      int selectedRow=m_dateDerivedPeriodicSelector.getTable().getSelectedRow();
      if (selectedRow > NUM_PREDEFINED_PERIODICS - 1) {
        String fieldName=m_dateDerivedPeriodicsHeader.attribute(selectedRow).name();
        fieldName=fieldName.replaceFirst("c_","");
        int result=JOptionPane.showConfirmDialog(AdvancedConfigPanel.this,"Delete field " + fieldName + "?","Delete custom periodic field",JOptionPane.YES_NO_OPTION);
        if (result == JOptionPane.NO_OPTION) {
          return;
        }
        m_customPeriodics.remove(fieldName);
        int[] selected=m_dateDerivedPeriodicSelector.getSelectedAttributes();
        Instances oldList=m_dateDerivedPeriodicsHeader;
        Instances insts=createDateDerivedPeriodicList();
        m_dateDerivedPeriodicSelector.setInstances(insts);
        m_dateDerivedPeriodicsHeader=insts;
        boolean[] newSelected=new boolean[insts.numAttributes()];
        for (int i=0; i < selected.length; i++) {
          Attribute toFind=oldList.attribute(selected[i]);
          Attribute toSet=insts.attribute(toFind.name());
          if (toSet != null) {
            newSelected[toSet.index()]=true;
          }
        }
        try {
          m_dateDerivedPeriodicSelector.setSelectedAttributes(newSelected);
        }
 catch (        Exception e1) {
          e1.printStackTrace();
        }
      }
    }
  }
);
  m_addCustomPeriodicBut.setEnabled(false);
  m_addCustomPeriodicBut.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      ArrayList<CustomPeriodicTest> testList=new ArrayList<CustomPeriodicTest>();
      String fieldName=displayAddEditDialog(testList,null);
      if (fieldName.length() == 0) {
      }
 else {
        m_customPeriodics.put(fieldName,testList);
        int[] selected=m_dateDerivedPeriodicSelector.getSelectedAttributes();
        Instances insts=createDateDerivedPeriodicList();
        m_dateDerivedPeriodicSelector.setInstances(insts);
        m_dateDerivedPeriodicsHeader=insts;
        boolean[] newSelected=new boolean[insts.numAttributes()];
        for (int i=0; i < selected.length; i++) {
          newSelected[selected[i]]=true;
        }
        newSelected[newSelected.length - 1]=true;
        try {
          m_dateDerivedPeriodicSelector.setSelectedAttributes(newSelected);
        }
 catch (        Exception e1) {
          e1.printStackTrace();
        }
      }
    }
  }
);
  temp.add(checkHolder,BorderLayout.NORTH);
  temp.add(m_dateDerivedPeriodicSelector,BorderLayout.CENTER);
  m_dateDerivedPeriodicSelector.setPreferredScrollableViewportSize(new Dimension(250,80));
  JPanel botP=new JPanel();
  botP.setLayout(new BorderLayout());
  botP.setBorder(BorderFactory.createTitledBorder("Date-derived periodic creation"));
  botP.add(temp,BorderLayout.CENTER);
  JPanel primaryPeriodicP=new JPanel();
  primaryPeriodicP.setLayout(new BorderLayout());
  primaryPeriodicP.add(m_primaryPeriodicCombo,BorderLayout.NORTH);
  JPanel topP=new JPanel();
  topP.setLayout(new BorderLayout());
  topP.setBorder(BorderFactory.createTitledBorder("Periodic attribute"));
  topP.add(primaryPeriodicP,BorderLayout.EAST);
  JPanel temp2=new JPanel();
  temp2.setLayout(new BorderLayout());
  temp2.add(topP,BorderLayout.EAST);
  temp2.add(botP,BorderLayout.CENTER);
  basePanel.add(temp2,BorderLayout.NORTH);
  m_customizeDateDerivedPeriodics.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      if (m_instances != null && m_customizeDateDerivedPeriodics.isSelected()) {
        String selectedTimeStamp=m_simpleConfig.m_timeStampCombo.getSelectedItem().toString();
        Attribute timeStampAtt=m_instances.attribute(selectedTimeStamp);
        if (timeStampAtt != null && timeStampAtt.isDate()) {
          if (m_dateDerivedPeriodicSelector.getSelectionModel() != null) {
            Instances insts=createDateDerivedPeriodicList();
            m_dateDerivedPeriodicSelector.setInstances(insts);
            m_dateDerivedPeriodicsHeader=insts;
            m_addCustomPeriodicBut.setEnabled(true);
            m_savePeriodicBut.setEnabled(true);
            m_loadPeriodicBut.setEnabled(true);
            m_dateDerivedPeriodicSelector.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
              public void valueChanged(              ListSelectionEvent e){
                if (!e.getValueIsAdjusting()) {
                  if (m_dateDerivedPeriodicSelector.getTable().getSelectedRow() > NUM_PREDEFINED_PERIODICS - 1) {
                    m_editCustomPeriodicBut.setEnabled(true);
                    m_deleteCustomPeriodicBut.setEnabled(true);
                  }
 else {
                    m_editCustomPeriodicBut.setEnabled(false);
                    m_deleteCustomPeriodicBut.setEnabled(false);
                  }
                }
              }
            }
);
          }
        }
      }
 else {
        m_addCustomPeriodicBut.setEnabled(false);
        m_loadPeriodicBut.setEnabled(false);
        m_savePeriodicBut.setEnabled(false);
      }
    }
  }
);
  updatePrimaryPeriodic();
  m_configHolder.addTab("Periodic attributes",null,basePanel,"Specify/clustomize periodic attributes");
  updateDateDerivedPanel();
}
