{
  super(ruleE,miningSchema);
  String id=ruleE.getAttribute("id");
  if (id != null && id.length() > 0) {
    m_ID=id;
  }
  m_scoreString=ruleE.getAttribute("score");
  Attribute classAtt=miningSchema.getFieldsAsInstances().classAttribute();
  if (classAtt.isNumeric()) {
    m_score=Double.parseDouble(m_scoreString);
  }
 else {
    if (classAtt.indexOfValue(m_scoreString) < 0) {
      throw new Exception("[SimpleRule] class value " + m_scoreString + "does not exist in class attribute "+ classAtt.name());
    }
    m_score=classAtt.indexOfValue(m_scoreString);
  }
  String recordCount=ruleE.getAttribute("recordCount");
  if (recordCount != null && recordCount.length() > 0) {
    m_recordCount=Double.parseDouble(recordCount);
  }
  String nbCorrect=ruleE.getAttribute("nbCorrect");
  if (nbCorrect != null && nbCorrect.length() > 0) {
    m_nbCorrect=Double.parseDouble(nbCorrect);
  }
  String confidence=ruleE.getAttribute("confidence");
  if (confidence != null && confidence.length() > 0) {
    m_confidence=Double.parseDouble(confidence);
  }
  String weight=ruleE.getAttribute("weight");
  if (weight != null && weight.length() > 0) {
    m_weight=Double.parseDouble(weight);
  }
  if (miningSchema.getFieldsAsInstances().classAttribute().isNominal()) {
    NodeList scoreChildren=ruleE.getChildNodes();
    for (int i=0; i < scoreChildren.getLength(); i++) {
      Node child=scoreChildren.item(i);
      if (child.getNodeType() == Node.ELEMENT_NODE) {
        String tagName=((Element)child).getTagName();
        if (tagName.equals("ScoreDistribution")) {
          TreeModel.ScoreDistribution newDist=new TreeModel.ScoreDistribution((Element)child,miningSchema,m_recordCount);
          m_scoreDistributions.add(newDist);
        }
      }
    }
    if (m_scoreDistributions.size() > 0 && m_scoreDistributions.size() != miningSchema.getFieldsAsInstances().classAttribute().numValues()) {
      throw new Exception("[SimpleRule] Number of score distribution elements is " + " different than the number of class labels!");
    }
    if (Utils.isMissingValue(m_recordCount)) {
      double baseCount=0;
      for (      TreeModel.ScoreDistribution s : m_scoreDistributions) {
        baseCount+=s.getRecordCount();
      }
      for (      TreeModel.ScoreDistribution s : m_scoreDistributions) {
        s.deriveConfidenceValue(baseCount);
      }
    }
  }
}
