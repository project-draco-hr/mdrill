{
  ProcessedFilter pf=new ProcessedFilter();
  if (queries == null || queries.size() == 0) {
    if (setFilter != null)     pf.filter=setFilter.getTopFilter();
    return pf;
  }
  DocSet answer=null;
  boolean[] neg=new boolean[queries.size() + 1];
  DocSet[] sets=new DocSet[queries.size() + 1];
  List<Query> notCached=null;
  List<Query> postFilters=null;
  int end=0;
  int smallestIndex=-1;
  if (setFilter != null) {
    answer=sets[end++]=setFilter;
    smallestIndex=end;
  }
  int smallestCount=Integer.MAX_VALUE;
  for (  Query q : queries) {
    if (q instanceof ExtendedQuery) {
      ExtendedQuery eq=(ExtendedQuery)q;
      if (!eq.getCache()) {
        if (eq.getCost() >= 100 && eq instanceof PostFilter) {
          if (postFilters == null)           postFilters=new ArrayList<Query>(sets.length - end);
          postFilters.add(q);
        }
 else {
          if (notCached == null)           notCached=new ArrayList<Query>(sets.length - end);
          notCached.add(q);
        }
        continue;
      }
    }
    Query posQuery=QueryUtils.getAbs(q);
    sets[end]=getPositiveDocSet(posQuery);
    if (q == posQuery) {
      neg[end]=false;
      int sz=sets[end].size();
      if (sz < smallestCount) {
        smallestCount=sz;
        smallestIndex=end;
        answer=sets[end];
      }
    }
 else {
      neg[end]=true;
    }
    end++;
  }
  if (end > 0 && answer == null) {
    answer=getPositiveDocSet(matchAllDocsQuery);
  }
  for (int i=0; i < end; i++) {
    if (neg[i])     answer=answer.andNot(sets[i]);
  }
  for (int i=0; i < end; i++) {
    if (!neg[i] && i != smallestIndex)     answer=answer.intersection(sets[i]);
  }
  if (notCached != null) {
    Collections.sort(notCached,sortByCost);
    List<Weight> weights=new ArrayList<Weight>(notCached.size());
    for (    Query q : notCached) {
      Query qq=QueryUtils.makeQueryable(q);
      weights.add(createNormalizedWeight(qq));
    }
    pf.filter=new FilterImpl(answer,weights);
  }
 else {
    if (postFilters == null) {
      if (answer == null) {
        answer=getPositiveDocSet(matchAllDocsQuery);
      }
      pf.answer=answer;
    }
    if (answer != null) {
      pf.filter=answer.getTopFilter();
    }
  }
  if (postFilters != null) {
    Collections.sort(postFilters,sortByCost);
    for (int i=postFilters.size() - 1; i >= 0; i--) {
      DelegatingCollector prev=pf.postFilter;
      pf.postFilter=((PostFilter)postFilters.get(i)).getFilterCollector(this);
      if (prev != null)       pf.postFilter.setDelegate(prev);
    }
  }
  return pf;
}
