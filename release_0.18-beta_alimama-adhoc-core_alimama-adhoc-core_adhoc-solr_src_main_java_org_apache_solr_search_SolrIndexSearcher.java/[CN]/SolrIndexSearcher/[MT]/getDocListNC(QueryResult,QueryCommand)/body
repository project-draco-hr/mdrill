{
  final long timeAllowed=cmd.getTimeAllowed();
  int len=cmd.getSupersetMaxDoc();
  int last=len;
  if (last < 0 || last > maxDoc())   last=maxDoc();
  final int lastDocRequested=last;
  int nDocsReturned;
  int totalHits;
  float maxScore;
  int[] ids;
  float[] scores;
  double sum=0.0f;
  double max=Double.NEGATIVE_INFINITY;
  double min=Double.POSITIVE_INFINITY;
  boolean needScores=(cmd.getFlags() & GET_SCORES) != 0;
  Query query=QueryUtils.makeQueryable(cmd.getQuery());
  ProcessedFilter pf=getProcessedFilter(cmd.getFilter(),cmd.getFilterList());
  final Filter luceneFilter=pf.filter;
  if (lastDocRequested <= 0) {
    final float[] topscore=new float[]{Float.NEGATIVE_INFINITY};
    final int[] numHits=new int[1];
    Collector collector;
    if (!needScores) {
      collector=new Collector(){
        @Override public void setScorer(        Scorer scorer) throws IOException {
        }
        @Override public void collect(        int doc) throws IOException {
          numHits[0]++;
        }
        @Override public void setNextReader(        IndexReader reader,        int docBase) throws IOException {
        }
        @Override public boolean acceptsDocsOutOfOrder(){
          return true;
        }
      }
;
    }
 else {
      collector=new Collector(){
        Scorer scorer;
        @Override public void setScorer(        Scorer scorer) throws IOException {
          this.scorer=scorer;
        }
        @Override public void collect(        int doc) throws IOException {
          numHits[0]++;
          float score=scorer.score();
          if (score > topscore[0])           topscore[0]=score;
        }
        @Override public void setNextReader(        IndexReader reader,        int docBase) throws IOException {
        }
        @Override public boolean acceptsDocsOutOfOrder(){
          return true;
        }
      }
;
    }
    if (timeAllowed > 0) {
      collector=new TimeLimitingCollector(collector,TimeLimitingCollector.getGlobalCounter(),timeAllowed);
    }
    if (pf.postFilter != null) {
      pf.postFilter.setLastDelegate(collector);
      collector=pf.postFilter;
    }
    try {
      super.search(query,luceneFilter,collector);
    }
 catch (    TimeLimitingCollector.TimeExceededException x) {
      log.warn("Query: " + query + "; "+ x.getMessage());
      qr.setPartialResults(true);
    }
    nDocsReturned=0;
    ids=new int[nDocsReturned];
    scores=new float[nDocsReturned];
    totalHits=numHits[0];
    maxScore=totalHits > 0 ? topscore[0] : 0.0f;
  }
 else {
    TopDocsCollector topCollector;
    if (cmd.getSort() == null) {
      topCollector=TopScoreDocCollector.create(len,true);
    }
 else {
      topCollector=StatisticFieldCollector.create(weightSort(cmd.getSort()),len,false,needScores,needScores,true);
    }
    Collector collector=topCollector;
    if (timeAllowed > 0) {
      collector=new TimeLimitingCollector(collector,TimeLimitingCollector.getGlobalCounter(),timeAllowed);
    }
    if (pf.postFilter != null) {
      pf.postFilter.setLastDelegate(collector);
      collector=pf.postFilter;
    }
    try {
      super.search(query,luceneFilter,collector);
    }
 catch (    TimeLimitingCollector.TimeExceededException x) {
      log.warn("Query: " + query + "; "+ x.getMessage());
      qr.setPartialResults(true);
    }
    totalHits=topCollector.getTotalHits();
    TopDocs topDocs=topCollector.topDocs(0,len);
    maxScore=totalHits > 0 ? topDocs.getMaxScore() : 0.0f;
    nDocsReturned=topDocs.scoreDocs.length;
    sum=topCollector.getSum();
    max=topCollector.getMax();
    min=topCollector.getMin();
    ids=new int[nDocsReturned];
    scores=(cmd.getFlags() & GET_SCORES) != 0 ? new float[nDocsReturned] : null;
    for (int i=0; i < nDocsReturned; i++) {
      ScoreDoc scoreDoc=topDocs.scoreDocs[i];
      ids[i]=scoreDoc.doc;
      if (scores != null)       scores[i]=scoreDoc.score;
    }
  }
  int sliceLen=Math.min(lastDocRequested,nDocsReturned);
  if (sliceLen < 0)   sliceLen=0;
  qr.setDocList(new DocSlice(0,sliceLen,ids,scores,totalHits,maxScore,sum,max,min));
}
