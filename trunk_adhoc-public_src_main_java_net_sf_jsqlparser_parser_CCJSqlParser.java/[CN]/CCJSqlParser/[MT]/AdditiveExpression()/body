{
  Expression result=null;
  Expression leftExpression=null;
  Expression rightExpression=null;
  leftExpression=MultiplicativeExpression();
  result=leftExpression;
  label_22:   while (true) {
    if (jj_2_22(2)) {
      ;
    }
 else {
      break label_22;
    }
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case 94:
      jj_consume_token(94);
    result=new Addition();
  break;
case 95:
jj_consume_token(95);
result=new Subtraction();
break;
default :
jj_la1[103]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
rightExpression=MultiplicativeExpression();
BinaryExpression binExp=(BinaryExpression)result;
binExp.setLeftExpression(leftExpression);
binExp.setRightExpression(rightExpression);
leftExpression=result;
}
{
if (true) return result;
}
throw new Error("Missing return statement in function");
}
