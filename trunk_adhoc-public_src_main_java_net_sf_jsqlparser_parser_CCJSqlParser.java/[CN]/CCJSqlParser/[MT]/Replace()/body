{
  Replace replace=new Replace();
  Table table=null;
  Column tableColumn=null;
  Expression value=null;
  List columns=new ArrayList();
  List expList=new ArrayList();
  ItemsList itemsList=null;
  Expression exp=null;
  jj_consume_token(K_REPLACE);
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case K_INTO:
    jj_consume_token(K_INTO);
  break;
default :
jj_la1[4]=jj_gen;
;
}
table=Table();
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case K_SET:
jj_consume_token(K_SET);
tableColumn=Column();
jj_consume_token(77);
value=SimpleExpression();
columns.add(tableColumn);
expList.add(value);
label_2: while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case 78:
;
break;
default :
jj_la1[5]=jj_gen;
break label_2;
}
jj_consume_token(78);
tableColumn=Column();
jj_consume_token(77);
value=SimpleExpression();
columns.add(tableColumn);
expList.add(value);
}
replace.setExpressions(expList);
break;
case K_SELECT:
case K_VALUES:
case 79:
if (jj_2_1(2)) {
jj_consume_token(79);
tableColumn=Column();
columns.add(tableColumn);
label_3: while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case 78:
;
break;
default :
jj_la1[6]=jj_gen;
break label_3;
}
jj_consume_token(78);
tableColumn=Column();
columns.add(tableColumn);
}
jj_consume_token(80);
}
 else {
;
}
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case K_VALUES:
jj_consume_token(K_VALUES);
jj_consume_token(79);
exp=PrimaryExpression();
expList.add(exp);
label_4: while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case 78:
;
break;
default :
jj_la1[7]=jj_gen;
break label_4;
}
jj_consume_token(78);
exp=PrimaryExpression();
expList.add(exp);
}
jj_consume_token(80);
itemsList=new ExpressionList(expList);
break;
case K_SELECT:
case 79:
replace.setUseValues(false);
itemsList=SubSelect();
break;
default :
jj_la1[8]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
replace.setItemsList(itemsList);
break;
default :
jj_la1[9]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
if (columns.size() > 0) replace.setColumns(columns);
replace.setTable(table);
{
if (true) return replace;
}
throw new Error("Missing return statement in function");
}
