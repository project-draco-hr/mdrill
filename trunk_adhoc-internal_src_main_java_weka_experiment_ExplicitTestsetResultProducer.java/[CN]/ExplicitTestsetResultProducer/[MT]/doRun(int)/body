{
  if (getRawOutput()) {
    if (m_ZipDest == null)     m_ZipDest=new OutputZipper(m_OutputFile);
  }
  if (m_Instances == null)   throw new Exception("No Instances set");
  Object[] seKey=m_SplitEvaluator.getKey();
  Object[] key=new Object[seKey.length + 2];
  key[0]=Utils.backQuoteChars(m_Instances.relationName());
  key[1]="" + run;
  System.arraycopy(seKey,0,key,2,seKey.length);
  if (m_ResultListener.isResultRequired(this,key)) {
    Instances train=new Instances(m_Instances);
    if (m_randomize) {
      Random rand=new Random(run);
      train.randomize(rand);
    }
    String filename=createFilename(train);
    File file=new File(filename);
    if (!file.exists())     throw new WekaException("Test set '" + filename + "' not found!");
    Instances test=DataSource.read(filename);
    if (train.numAttributes() == test.numAttributes())     test.setClassIndex(train.classIndex());
 else     throw new WekaException("Train and test set (= " + filename + ") "+ "differ in number of attributes: "+ train.numAttributes()+ " != "+ test.numAttributes());
    if (!train.equalHeaders(test))     throw new WekaException("Train and test set (= " + filename + ") "+ "are not compatible:\n"+ train.equalHeadersMsg(test));
    try {
      Object[] seResults=m_SplitEvaluator.getResult(train,test);
      Object[] results=new Object[seResults.length + 1];
      results[0]=getTimestamp();
      System.arraycopy(seResults,0,results,1,seResults.length);
      if (m_debugOutput) {
        String resultName=("" + run + "."+ Utils.backQuoteChars(train.relationName())+ "."+ m_SplitEvaluator.toString()).replace(' ','_');
        resultName=Utils.removeSubstring(resultName,"weka.classifiers.");
        resultName=Utils.removeSubstring(resultName,"weka.filters.");
        resultName=Utils.removeSubstring(resultName,"weka.attributeSelection.");
        m_ZipDest.zipit(m_SplitEvaluator.getRawResultOutput(),resultName);
      }
      m_ResultListener.acceptResult(this,key,results);
    }
 catch (    Exception e) {
      throw e;
    }
  }
}
