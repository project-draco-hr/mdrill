{
  if (train.classAttribute().type() != Attribute.NUMERIC) {
    throw new Exception("Class attribute is not numeric!");
  }
  if (m_Template == null) {
    throw new Exception("No classifier has been specified");
  }
  ThreadMXBean thMonitor=ManagementFactory.getThreadMXBean();
  boolean canMeasureCPUTime=thMonitor.isThreadCpuTimeSupported();
  if (canMeasureCPUTime && !thMonitor.isThreadCpuTimeEnabled())   thMonitor.setThreadCpuTimeEnabled(true);
  int addm=(m_AdditionalMeasures != null) ? m_AdditionalMeasures.length : 0;
  Object[] result=new Object[RESULT_SIZE + addm];
  long thID=Thread.currentThread().getId();
  long CPUStartTime=-1, trainCPUTimeElapsed=-1, testCPUTimeElapsed=-1, trainTimeStart, trainTimeElapsed, testTimeStart, testTimeElapsed;
  Evaluation eval=new Evaluation(train);
  m_Classifier=AbstractClassifier.makeCopy(m_Template);
  trainTimeStart=System.currentTimeMillis();
  if (canMeasureCPUTime)   CPUStartTime=thMonitor.getThreadUserTime(thID);
  m_Classifier.buildClassifier(train);
  if (canMeasureCPUTime)   trainCPUTimeElapsed=thMonitor.getThreadUserTime(thID) - CPUStartTime;
  trainTimeElapsed=System.currentTimeMillis() - trainTimeStart;
  testTimeStart=System.currentTimeMillis();
  if (canMeasureCPUTime)   CPUStartTime=thMonitor.getThreadUserTime(thID);
  eval.evaluateModel(m_Classifier,test);
  if (canMeasureCPUTime)   testCPUTimeElapsed=thMonitor.getThreadUserTime(thID) - CPUStartTime;
  testTimeElapsed=System.currentTimeMillis() - testTimeStart;
  thMonitor=null;
  m_result=eval.toSummaryString();
  int current=0;
  result[current++]=new Double(train.numInstances());
  result[current++]=new Double(eval.numInstances());
  result[current++]=new Double(eval.meanAbsoluteError());
  result[current++]=new Double(eval.rootMeanSquaredError());
  result[current++]=new Double(eval.relativeAbsoluteError());
  result[current++]=new Double(eval.rootRelativeSquaredError());
  result[current++]=new Double(eval.correlationCoefficient());
  result[current++]=new Double(eval.SFPriorEntropy());
  result[current++]=new Double(eval.SFSchemeEntropy());
  result[current++]=new Double(eval.SFEntropyGain());
  result[current++]=new Double(eval.SFMeanPriorEntropy());
  result[current++]=new Double(eval.SFMeanSchemeEntropy());
  result[current++]=new Double(eval.SFMeanEntropyGain());
  result[current++]=new Double(trainTimeElapsed / 1000.0);
  result[current++]=new Double(testTimeElapsed / 1000.0);
  if (canMeasureCPUTime) {
    result[current++]=new Double((trainCPUTimeElapsed / 1000000.0) / 1000.0);
    result[current++]=new Double((testCPUTimeElapsed / 1000000.0) / 1000.0);
  }
 else {
    result[current++]=new Double(Utils.missingValue());
    result[current++]=new Double(Utils.missingValue());
  }
  ByteArrayOutputStream bastream=new ByteArrayOutputStream();
  ObjectOutputStream oostream=new ObjectOutputStream(bastream);
  oostream.writeObject(m_Classifier);
  result[current++]=new Double(bastream.size());
  bastream=new ByteArrayOutputStream();
  oostream=new ObjectOutputStream(bastream);
  oostream.writeObject(train);
  result[current++]=new Double(bastream.size());
  bastream=new ByteArrayOutputStream();
  oostream=new ObjectOutputStream(bastream);
  oostream.writeObject(test);
  result[current++]=new Double(bastream.size());
  result[current++]=new Double(eval.coverageOfTestCasesByPredictedRegions());
  result[current++]=new Double(eval.sizeOfPredictedRegions());
  if (m_Classifier instanceof Summarizable) {
    result[current++]=((Summarizable)m_Classifier).toSummaryString();
  }
 else {
    result[current++]=null;
  }
  for (int i=0; i < addm; i++) {
    if (m_doesProduce[i]) {
      try {
        double dv=((AdditionalMeasureProducer)m_Classifier).getMeasure(m_AdditionalMeasures[i]);
        if (!Utils.isMissingValue(dv)) {
          Double value=new Double(dv);
          result[current++]=value;
        }
 else {
          result[current++]=null;
        }
      }
 catch (      Exception ex) {
        System.err.println(ex);
      }
    }
 else {
      result[current++]=null;
    }
  }
  if (current != RESULT_SIZE + addm) {
    throw new Error("Results didn't fit RESULT_SIZE");
  }
  return result;
}
