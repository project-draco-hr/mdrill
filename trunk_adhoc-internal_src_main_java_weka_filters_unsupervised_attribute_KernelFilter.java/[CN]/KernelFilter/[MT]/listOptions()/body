{
  Vector result;
  Enumeration enm;
  result=new Vector();
  enm=super.listOptions();
  while (enm.hasMoreElements())   result.addElement(enm.nextElement());
  result.addElement(new Option("\tTurns off all checks - use with caution!\n" + "\tTurning them off assumes that data is purely numeric, doesn't\n" + "\tcontain any missing values, and has a nominal class. Turning them\n"+ "\toff also means that no header information will be stored if the\n"+ "\tmachine is linear. Finally, it also assumes that no instance has\n"+ "\ta weight equal to 0.\n"+ "\t(default: checks on)","no-checks",0,"-no-checks"));
  result.addElement(new Option("\tThe file to initialize the filter with (optional).","F",1,"-F <filename>"));
  result.addElement(new Option("\tThe class index for the file to initialize with,\n" + "\tFirst and last are valid (optional, default: last).","C",1,"-C <num>"));
  result.addElement(new Option("\tThe Kernel to use.\n" + "\t(default: weka.classifiers.functions.supportVector.PolyKernel)","K",1,"-K <classname and parameters>"));
  result.addElement(new Option("\tDefines a factor for the kernel.\n" + "\t\t- RBFKernel: a factor for gamma\n" + "\t\t\tStandardize: 1/(2*N)\n"+ "\t\t\tNormalize..: 6/N\n"+ "\tAvailable parameters are:\n"+ "\t\tN for # of instances, A for # of attributes\n"+ "\t(default: 1)","kernel-factor",0,"-kernel-factor"));
  result.addElement(new Option("\tThe Filter used for preprocessing (use weka.filters.AllFilter\n" + "\tto disable preprocessing).\n" + "\t(default: " + Center.class.getName() + ")","P",1,"-P <classname and parameters>"));
  result.addElement(new Option("","",0,"\nOptions specific to kernel " + getKernel().getClass().getName() + ":"));
  enm=((OptionHandler)getKernel()).listOptions();
  while (enm.hasMoreElements())   result.addElement(enm.nextElement());
  if (getPreprocessing() instanceof OptionHandler) {
    result.addElement(new Option("","",0,"\nOptions specific to preprocessing filter " + getPreprocessing().getClass().getName() + ":"));
    enm=((OptionHandler)getPreprocessing()).listOptions();
    while (enm.hasMoreElements())     result.addElement(enm.nextElement());
  }
  return result.elements();
}
