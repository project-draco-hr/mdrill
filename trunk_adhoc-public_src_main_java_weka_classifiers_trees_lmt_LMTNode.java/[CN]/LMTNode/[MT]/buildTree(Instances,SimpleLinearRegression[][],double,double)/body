{
  m_totalInstanceWeight=totalInstanceWeight;
  m_train=new Instances(data);
  m_isLeaf=true;
  m_sons=null;
  m_numInstances=m_train.numInstances();
  m_numClasses=m_train.numClasses();
  m_numericData=getNumericData(m_train);
  m_numericDataHeader=new Instances(m_numericData,0);
  m_regressions=initRegressions();
  m_numRegressions=0;
  if (higherRegressions != null)   m_higherRegressions=higherRegressions;
 else   m_higherRegressions=new SimpleLinearRegression[m_numClasses][0];
  m_numHigherRegressions=m_higherRegressions[0].length;
  m_numParameters=higherNumParameters;
  if (m_numInstances >= m_numFoldsBoosting) {
    if (m_fixedNumIterations > 0) {
      performBoosting(m_fixedNumIterations);
    }
 else     if (getUseAIC()) {
      performBoostingInfCriterion();
    }
 else {
      performBoostingCV();
    }
  }
  m_numParameters+=m_numRegressions;
  m_regressions=selectRegressions(m_regressions);
  boolean grow;
  if (m_numInstances > m_minNumInstances) {
    if (m_modelSelection instanceof ResidualModelSelection) {
      double[][] probs=getProbs(getFs(m_numericData));
      double[][] trainYs=getYs(m_train);
      double[][] dataZs=getZs(probs,trainYs);
      double[][] dataWs=getWs(probs,trainYs);
      m_localModel=((ResidualModelSelection)m_modelSelection).selectModel(m_train,dataZs,dataWs);
    }
 else {
      m_localModel=m_modelSelection.selectModel(m_train);
    }
    grow=(m_localModel.numSubsets() > 1);
  }
 else {
    grow=false;
  }
  if (grow) {
    m_isLeaf=false;
    Instances[] localInstances=m_localModel.split(m_train);
    m_sons=new LMTNode[m_localModel.numSubsets()];
    for (int i=0; i < m_sons.length; i++) {
      m_sons[i]=new LMTNode(m_modelSelection,m_fixedNumIterations,m_fastRegression,m_errorOnProbabilities,m_minNumInstances,getWeightTrimBeta(),getUseAIC());
      m_sons[i].buildTree(localInstances[i],mergeArrays(m_regressions,m_higherRegressions),m_totalInstanceWeight,m_numParameters);
      localInstances[i]=null;
    }
  }
}
