{
  SolrParams params=req.getParams();
  SolrIndexSearcher searcher=req.getSearcher();
  MoreLikeThisHelper mlt=new MoreLikeThisHelper(params,searcher);
  List<Query> filters=SolrPluginUtils.parseFilterQueries(req);
  TermStyle termStyle=TermStyle.get(params.get(MoreLikeThisParams.INTERESTING_TERMS));
  List<InterestingTerm> interesting=(termStyle == TermStyle.NONE) ? null : new ArrayList<InterestingTerm>(mlt.mlt.getMaxQueryTerms());
  DocListAndSet mltDocs=null;
  String q=params.get(CommonParams.Q);
  Reader reader=null;
  try {
    if (q == null || q.trim().length() < 1) {
      Iterable<ContentStream> streams=req.getContentStreams();
      if (streams != null) {
        Iterator<ContentStream> iter=streams.iterator();
        if (iter.hasNext()) {
          reader=iter.next().getReader();
        }
        if (iter.hasNext()) {
          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"MoreLikeThis does not support multiple ContentStreams");
        }
      }
    }
    String fl=params.get(CommonParams.FL);
    int flags=0;
    if (fl != null) {
      flags|=SolrPluginUtils.setReturnFields(fl,rsp);
    }
    int start=params.getInt(CommonParams.START,0);
    int rows=params.getInt(CommonParams.ROWS,10);
    if (reader != null) {
      mltDocs=mlt.getMoreLikeThis(reader,start,rows,filters,interesting,flags);
    }
 else     if (q != null) {
      boolean includeMatch=params.getBool(MoreLikeThisParams.MATCH_INCLUDE,true);
      int matchOffset=params.getInt(MoreLikeThisParams.MATCH_OFFSET,0);
      Query query=QueryParsing.parseQuery(q,params.get(CommonParams.DF),params,req.getSchema());
      DocList match=searcher.getDocList(query,null,null,matchOffset,1,flags);
      if (includeMatch) {
        rsp.add("match",match);
      }
      DocIterator iterator=match.iterator();
      if (iterator.hasNext()) {
        int id=iterator.nextDoc();
        mltDocs=mlt.getMoreLikeThis(id,start,rows,filters,interesting,flags);
      }
    }
 else {
      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"MoreLikeThis requires either a query (?q=) or text to find similar documents.");
    }
  }
  finally {
    if (reader != null) {
      reader.close();
    }
  }
  if (mltDocs == null) {
    mltDocs=new DocListAndSet();
  }
  rsp.add("response",mltDocs.docList);
  if (interesting != null) {
    if (termStyle == TermStyle.DETAILS) {
      NamedList<Float> it=new NamedList<Float>();
      for (      InterestingTerm t : interesting) {
        it.add(t.term.toString(),t.boost);
      }
      rsp.add("interestingTerms",it);
    }
 else {
      List<String> it=new ArrayList<String>(interesting.size());
      for (      InterestingTerm t : interesting) {
        it.add(t.term.text());
      }
      rsp.add("interestingTerms",it);
    }
  }
  if (params.getBool(FacetParams.FACET,false)) {
    if (mltDocs.docSet == null) {
      rsp.add("facet_counts",null);
    }
 else {
      SimpleFacets f=new SimpleFacets(req,mltDocs.docSet,params);
      rsp.add("facet_counts",f.getFacetCounts());
    }
  }
  boolean dbg=req.getParams().getBool(CommonParams.DEBUG_QUERY,false);
  if (dbg) {
    try {
      NamedList<Object> dbgInfo=SolrPluginUtils.doStandardDebug(req,q,mlt.getRawMLTQuery(),mltDocs.docList);
      if (null != dbgInfo) {
        if (null != filters) {
          dbgInfo.add("filter_queries",req.getParams().getParams(CommonParams.FQ));
          List<String> fqs=new ArrayList<String>(filters.size());
          for (          Query fq : filters) {
            fqs.add(QueryParsing.toString(fq,req.getSchema()));
          }
          dbgInfo.add("parsed_filter_queries",fqs);
        }
        rsp.add("debug",dbgInfo);
      }
    }
 catch (    Exception e) {
      SolrException.logOnce(SolrCore.log,"Exception during debug",e);
      rsp.add("exception_during_debug",SolrException.toStr(e));
    }
  }
}
