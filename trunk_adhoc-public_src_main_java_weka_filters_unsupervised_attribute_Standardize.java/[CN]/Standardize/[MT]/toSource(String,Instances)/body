{
  StringBuffer result;
  boolean[] process;
  int i;
  result=new StringBuffer();
  process=new boolean[data.numAttributes()];
  for (i=0; i < data.numAttributes(); i++) {
    process[i]=(data.attribute(i).isNumeric() && (i != data.classIndex()));
  }
  result.append("class " + className + " {\n");
  result.append("\n");
  result.append("  /** lists which attributes will be processed */\n");
  result.append("  protected final static boolean[] PROCESS = new boolean[]{" + Utils.arrayToString(process) + "};\n");
  result.append("\n");
  result.append("  /** the computed means */\n");
  result.append("  protected final static double[] MEANS = new double[]{" + Utils.arrayToString(m_Means) + "};\n");
  result.append("\n");
  result.append("  /** the computed standard deviations */\n");
  result.append("  protected final static double[] STDEVS = new double[]{" + Utils.arrayToString(m_StdDevs) + "};\n");
  result.append("\n");
  result.append("  /**\n");
  result.append("   * filters a single row\n");
  result.append("   * \n");
  result.append("   * @param i the row to process\n");
  result.append("   * @return the processed row\n");
  result.append("   */\n");
  result.append("  public static Object[] filter(Object[] i) {\n");
  result.append("    Object[] result;\n");
  result.append("\n");
  result.append("    result = new Object[i.length];\n");
  result.append("    for (int n = 0; n < i.length; n++) {\n");
  result.append("      if (PROCESS[n] && (i[n] != null)) {\n");
  result.append("        if (STDEVS[n] > 0)\n");
  result.append("          result[n] = (((Double) i[n]) - MEANS[n]) / STDEVS[n];\n");
  result.append("        else\n");
  result.append("          result[n] = ((Double) i[n]) - MEANS[n];\n");
  result.append("      }\n");
  result.append("      else {\n");
  result.append("        result[n] = i[n];\n");
  result.append("      }\n");
  result.append("    }\n");
  result.append("\n");
  result.append("    return result;\n");
  result.append("  }\n");
  result.append("\n");
  result.append("  /**\n");
  result.append("   * filters multiple rows\n");
  result.append("   * \n");
  result.append("   * @param i the rows to process\n");
  result.append("   * @return the processed rows\n");
  result.append("   */\n");
  result.append("  public static Object[][] filter(Object[][] i) {\n");
  result.append("    Object[][] result;\n");
  result.append("\n");
  result.append("    result = new Object[i.length][];\n");
  result.append("    for (int n = 0; n < i.length; n++) {\n");
  result.append("      result[n] = filter(i[n]);\n");
  result.append("    }\n");
  result.append("\n");
  result.append("    return result;\n");
  result.append("  }\n");
  result.append("}\n");
  return result.toString();
}
