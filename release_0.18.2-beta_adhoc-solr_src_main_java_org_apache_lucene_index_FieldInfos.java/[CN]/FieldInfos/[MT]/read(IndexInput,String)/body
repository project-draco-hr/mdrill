{
  int firstInt=input.readVInt();
  if (firstInt < 0) {
    format=firstInt;
  }
 else {
    format=FORMAT_PRE;
  }
  if (format != FORMAT_PRE && format != FORMAT_START && format != FORMAT_OMIT_POSITIONS) {
    throw new CorruptIndexException("unrecognized format " + format + " in file \""+ fileName+ "\"");
  }
  int size;
  if (format == FORMAT_PRE) {
    size=firstInt;
  }
 else {
    size=input.readVInt();
  }
  for (int i=0; i < size; i++) {
    String name=StringHelper.intern(input.readString());
    byte bits=input.readByte();
    boolean isIndexed=(bits & IS_INDEXED) != 0;
    boolean storeTermVector=(bits & STORE_TERMVECTOR) != 0;
    boolean storePositionsWithTermVector=(bits & STORE_POSITIONS_WITH_TERMVECTOR) != 0;
    boolean storeOffsetWithTermVector=(bits & STORE_OFFSET_WITH_TERMVECTOR) != 0;
    boolean omitNorms=(bits & OMIT_NORMS) != 0;
    boolean storePayloads=(bits & STORE_PAYLOADS) != 0;
    final IndexOptions indexOptions;
    if ((bits & OMIT_TERM_FREQ_AND_POSITIONS) != 0) {
      indexOptions=IndexOptions.DOCS_ONLY;
    }
 else     if ((bits & OMIT_POSITIONS) != 0) {
      if (format <= FORMAT_OMIT_POSITIONS) {
        indexOptions=IndexOptions.DOCS_AND_FREQS;
      }
 else {
        throw new CorruptIndexException("Corrupt fieldinfos, OMIT_POSITIONS set but format=" + format + " (resource: "+ input+ ")");
      }
    }
 else {
      indexOptions=IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;
    }
    if (indexOptions != IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {
      storePayloads=false;
    }
    addInternal(name,isIndexed,storeTermVector,storePositionsWithTermVector,storeOffsetWithTermVector,omitNorms,storePayloads,indexOptions);
  }
  if (input.getFilePointer() != input.length()) {
    throw new CorruptIndexException("did not read all bytes from file \"" + fileName + "\": read "+ input.getFilePointer()+ " vs size "+ input.length()+ " (resource: "+ input+ ")");
  }
}
