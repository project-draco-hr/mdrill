{
  Set<Integer> rtn=null;
  if (taskHeartbeatsCache == null) {
    taskHeartbeatsCache=new ConcurrentHashMap<String,Map<Integer,Map<TkHbCacheTime,Integer>>>();
  }
  if (taskIds != null) {
    rtn=new HashSet<Integer>();
    for (Iterator<Integer> it=taskIds.iterator(); it.hasNext(); ) {
      int taskId=it.next();
      TaskHeartbeat taskHeartbeat=stormClusterState.task_heartbeat(topologyid,taskId);
      Integer reportTime=null;
      if (taskHeartbeat != null) {
        reportTime=taskHeartbeat.getTimeSecs();
      }
      Integer lastNimbusTime=null;
      Integer lastReportedTime=null;
      if (taskHeartbeatsCache.get(topologyid) != null) {
        Map<TkHbCacheTime,Integer> last=taskHeartbeatsCache.get(topologyid).get(taskId);
        if (last != null) {
          lastNimbusTime=last.get(TkHbCacheTime.nimbusTime);
          lastReportedTime=last.get(TkHbCacheTime.taskReportedTime);
        }
      }
      Integer taskStartTime=taskStartTimes.get(taskId);
      Integer nimbusTime=null;
      if (lastNimbusTime == null || lastReportedTime != reportTime) {
        nimbusTime=TimeUtils.current_time_secs();
      }
 else {
        nimbusTime=lastNimbusTime;
      }
      Map<Integer,Map<TkHbCacheTime,Integer>> val=taskHeartbeatsCache.get(topologyid);
      if (val == null) {
        val=new HashMap<Integer,Map<TkHbCacheTime,Integer>>();
      }
      Map<TkHbCacheTime,Integer> times=new HashMap<TkHbCacheTime,Integer>();
      times.put(TkHbCacheTime.nimbusTime,nimbusTime);
      times.put(TkHbCacheTime.taskReportedTime,reportTime);
      val.put(taskId,times);
      taskHeartbeatsCache.put(topologyid,val);
      if (taskStartTime != null && ((TimeUtils.time_delta(taskStartTime) < (Integer)conf.get(Config.NIMBUS_TASK_LAUNCH_SECS)) || (nimbusTime == null) || (TimeUtils.time_delta(nimbusTime) < (Integer)conf.get(Config.NIMBUS_TASK_TIMEOUT_SECS)))) {
        rtn.add(taskId);
      }
 else {
        LOG.info("Task " + topologyid + ":"+ taskId+ " timed out taskStartTime="+ String.valueOf(taskStartTime)+ ",nimbustime="+ String.valueOf(nimbusTime));
      }
    }
  }
  return rtn;
}
