{
  ConcurrentHashMap<String,Map<Integer,Map<TkHbCacheTime,Integer>>> taskHeartbeatsCache=data.getTaskHeartbeatsCache();
  Map<?,?> topology_conf=readStormConf(data.getConf(),topologyid);
  Set<NodePort> availableSlots=availableSlots(supInfos,stormClusterState,callback);
  Set<Integer> allTaskIds=StormUtils.listToSet(stormClusterState.task_ids(topologyid));
  Map<NodePort,List<Integer>> existingAssigned=new HashMap<NodePort,List<Integer>>();
  if (existingAssignment != null) {
    existingAssigned=StormUtils.reverse_map(existingAssignment.getTaskToNodeport());
  }
  Set<Integer> aliveIds=null;
  if (isScratch) {
    aliveIds=allTaskIds;
  }
 else   if (existingAssignment != null) {
    aliveIds=aliveTasks(data.getConf(),topologyid,stormClusterState,allTaskIds,existingAssignment.getTaskStartTimeSecs(),taskHeartbeatsCache);
  }
  Map<NodePort,List<Integer>> aliveAssigned=new HashMap<NodePort,List<Integer>>();
  if (existingAssignment != null) {
    for (    Entry<NodePort,List<Integer>> entry : existingAssigned.entrySet()) {
      NodePort np=entry.getKey();
      List<Integer> tasks=entry.getValue();
      if (aliveIds != null && aliveIds.containsAll(tasks)) {
        aliveAssigned.put(np,tasks);
      }
    }
  }
  Integer workers=0;
  if (topology_conf.get(Config.TOPOLOGY_WORKERS) instanceof Long) {
    Long tmp=(Long)topology_conf.get(Config.TOPOLOGY_WORKERS);
    workers=Integer.parseInt(tmp.toString());
  }
 else {
    workers=(Integer)topology_conf.get(Config.TOPOLOGY_WORKERS);
  }
  int totalSlotsToUse=Math.min(workers,availableSlots.size() + aliveAssigned.size());
  IAssignment customAssignment=CustomAssignment.getAssignmentInstance(topology_conf);
  Map<NodePort,List<Integer>> keepAssigned=null;
  if (!isScratch && allTaskIds != null) {
    if (customAssignment != null) {
      keepAssigned=customAssignment.keeperSlots(aliveAssigned,allTaskIds.size(),totalSlotsToUse);
    }
 else {
      keepAssigned=keeperSlots(aliveAssigned,allTaskIds.size(),totalSlotsToUse);
    }
  }
  int reassign_num=totalSlotsToUse;
  if (keepAssigned != null) {
    for (    Entry<NodePort,List<Integer>> entry : keepAssigned.entrySet()) {
      aliveAssigned.remove(entry.getKey());
    }
    reassign_num=totalSlotsToUse - keepAssigned.size();
  }
  Set<NodePort> freedSlots=new HashSet<NodePort>();
  Set<NodePort> freedSlotstmp=aliveAssigned.keySet();
  if (freedSlotstmp.size() == 0) {
    freedSlotstmp=new HashSet<NodePort>();
  }
  freedSlots.addAll(freedSlotstmp);
  freedSlots.addAll(availableSlots);
  if (customAssignment != null) {
    customAssignment.setup(topology_conf,topologyid,stormClusterState,keepAssigned,supInfos);
  }
  Collection<List<Integer>> keepAssignedTaskSet=null;
  if (keepAssigned != null) {
    keepAssignedTaskSet=keepAssigned.values();
  }
  Set<Integer> reassignIds=null;
  if (allTaskIds != null) {
    reassignIds=new HashSet<Integer>(allTaskIds);
  }
  if (keepAssignedTaskSet != null && reassignIds != null) {
    for (    List<Integer> rm : keepAssignedTaskSet) {
      reassignIds.removeAll(rm);
    }
  }
  Map<Integer,NodePort> reassignment=new HashMap<Integer,NodePort>();
  List<NodePort> reassignSlots=null;
  List<NodePort> sortedFreeSlots=sortSlots(freedSlots);
  if (customAssignment != null) {
    reassignSlots=customAssignment.slotsAssignment(sortedFreeSlots,reassign_num,reassignIds);
  }
 else {
    if (sortedFreeSlots != null) {
      reassignSlots=sortedFreeSlots.subList(0,reassign_num);
    }
  }
  if (customAssignment != null) {
    reassignment=customAssignment.tasksAssignment(reassignSlots,reassignIds);
  }
 else {
    int index=0;
    if (reassignIds != null && reassignSlots != null && reassignSlots.size() != 0) {
      for (Iterator<Integer> it=reassignIds.iterator(); it.hasNext(); ) {
        Integer entry=it.next();
        if (index >= reassignSlots.size()) {
          index=0;
        }
        reassignment.put(entry,reassignSlots.get(index));
        index++;
      }
    }
  }
  Map<Integer,NodePort> stayAssignment=new HashMap<Integer,NodePort>();
  if (keepAssigned != null) {
    for (    Entry<NodePort,List<Integer>> entry : keepAssigned.entrySet()) {
      NodePort np=entry.getKey();
      List<Integer> tasks=entry.getValue();
      for (      Integer taskid : tasks) {
        stayAssignment.put(taskid,np);
      }
    }
  }
  if (reassignment.size() > 0) {
    LOG.info("Reassigning " + topologyid + " to "+ totalSlotsToUse+ " slots isScratch="+ isScratch+ ",totalSlotsToUse="+ totalSlotsToUse);
    LOG.info("Reassign ids: " + reassignIds + ",keepAssigned="+ keepAssigned+ ",existingAssigned="+ existingAssigned);
    LOG.info("Available slots: " + availableSlots);
  }
  reassignment.putAll(stayAssignment);
  if (customAssignment != null) {
    customAssignment.cleanup();
  }
  return reassignment;
}
