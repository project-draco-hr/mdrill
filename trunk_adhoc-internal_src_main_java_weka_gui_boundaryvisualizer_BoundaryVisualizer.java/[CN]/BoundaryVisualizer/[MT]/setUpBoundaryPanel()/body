{
  int returner=0;
  int tempSamples=m_numberOfSamplesFromEachRegion;
  try {
    tempSamples=Integer.parseInt(m_regionSamplesText.getText().trim());
  }
 catch (  Exception ex) {
    m_regionSamplesText.setText("" + tempSamples);
  }
  m_numberOfSamplesFromEachRegion=tempSamples;
  m_boundaryPanel.setNumSamplesPerRegion(tempSamples);
  tempSamples=m_generatorSamplesBase;
  try {
    tempSamples=Integer.parseInt(m_generatorSamplesText.getText().trim());
  }
 catch (  Exception ex) {
    m_generatorSamplesText.setText("" + tempSamples);
  }
  m_generatorSamplesBase=tempSamples;
  m_boundaryPanel.setGeneratorSamplesBase((double)tempSamples);
  tempSamples=m_kernelBandwidth;
  try {
    tempSamples=Integer.parseInt(m_kernelBandwidthText.getText().trim());
  }
 catch (  Exception ex) {
    m_kernelBandwidthText.setText("" + tempSamples);
  }
  m_kernelBandwidth=tempSamples;
  m_dataGenerator.setKernelBandwidth(tempSamples);
  if (m_kernelBandwidth < 0)   returner=1;
  if (m_kernelBandwidth >= m_trainingInstances.numInstances())   returner=2;
  m_trainingInstances.setClassIndex(m_classAttBox.getSelectedIndex());
  m_boundaryPanel.setClassifier(m_classifier);
  m_boundaryPanel.setTrainingData(m_trainingInstances);
  m_boundaryPanel.setXAttribute(m_xIndex);
  m_boundaryPanel.setYAttribute(m_yIndex);
  m_boundaryPanel.setPlotTrainingData(m_plotTrainingData.isSelected());
  return returner;
}
