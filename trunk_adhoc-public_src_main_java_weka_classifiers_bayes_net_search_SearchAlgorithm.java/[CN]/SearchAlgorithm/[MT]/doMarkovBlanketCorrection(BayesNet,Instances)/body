{
  int iClass=instances.classIndex();
  ParentSet ancestors=new ParentSet();
  int nOldSize=0;
  ancestors.addParent(iClass,instances);
  while (nOldSize != ancestors.getNrOfParents()) {
    nOldSize=ancestors.getNrOfParents();
    for (int iNode=0; iNode < nOldSize; iNode++) {
      int iCurrent=ancestors.getParent(iNode);
      ParentSet p=bayesNet.getParentSet(iCurrent);
      for (int iParent=0; iParent < p.getNrOfParents(); iParent++) {
        if (!ancestors.contains(p.getParent(iParent))) {
          ancestors.addParent(p.getParent(iParent),instances);
        }
      }
    }
  }
  for (int iAttribute=0; iAttribute < instances.numAttributes(); iAttribute++) {
    boolean bIsInMarkovBoundary=(iAttribute == iClass) || bayesNet.getParentSet(iAttribute).contains(iClass) || bayesNet.getParentSet(iClass).contains(iAttribute);
    for (int iAttribute2=0; !bIsInMarkovBoundary && iAttribute2 < instances.numAttributes(); iAttribute2++) {
      bIsInMarkovBoundary=bayesNet.getParentSet(iAttribute2).contains(iAttribute) && bayesNet.getParentSet(iAttribute2).contains(iClass);
    }
    if (!bIsInMarkovBoundary) {
      if (ancestors.contains(iAttribute)) {
        if (bayesNet.getParentSet(iClass).getCardinalityOfParents() < 1024) {
          bayesNet.getParentSet(iClass).addParent(iAttribute,instances);
        }
 else {
        }
      }
 else {
        bayesNet.getParentSet(iAttribute).addParent(iClass,instances);
      }
    }
  }
}
