{
  double[] firstRow={10,5,20};
  double[] secondRow={2,10,6};
  double[] thirdRow={5,10,10};
  double[][] matrix=new double[3][0];
  matrix[0]=firstRow;
  matrix[1]=secondRow;
  matrix[2]=thirdRow;
  for (int i=0; i < matrix.length; i++) {
    for (int j=0; j < matrix[i].length; j++) {
      System.out.print(matrix[i][j] + " ");
    }
    System.out.println();
  }
  System.out.println("Chi-squared probability: " + ContingencyTables.chiSquared(matrix,false));
  System.out.println("Chi-squared value: " + ContingencyTables.chiVal(matrix,false));
  System.out.println("Cochran's criterion fullfilled: " + ContingencyTables.cochransCriterion(matrix));
  System.out.println("Cramer's V: " + ContingencyTables.CramersV(matrix));
  System.out.println("Entropy of first row: " + ContingencyTables.entropy(firstRow));
  System.out.println("Entropy conditioned on columns: " + ContingencyTables.entropyConditionedOnColumns(matrix));
  System.out.println("Entropy conditioned on rows: " + ContingencyTables.entropyConditionedOnRows(matrix));
  System.out.println("Entropy conditioned on rows (with Laplace): " + ContingencyTables.entropyConditionedOnRows(matrix,matrix,3));
  System.out.println("Entropy of rows: " + ContingencyTables.entropyOverRows(matrix));
  System.out.println("Entropy of columns: " + ContingencyTables.entropyOverColumns(matrix));
  System.out.println("Gain ratio: " + ContingencyTables.gainRatio(matrix));
  System.out.println("Negative log2 of multiple hypergeometric probability: " + ContingencyTables.log2MultipleHypergeometric(matrix));
  System.out.println("Symmetrical uncertainty: " + ContingencyTables.symmetricalUncertainty(matrix));
  System.out.println("Tau value: " + ContingencyTables.tauVal(matrix));
  double[][] newMatrix=new double[3][3];
  newMatrix[0][0]=1;
  newMatrix[0][1]=0;
  newMatrix[0][2]=1;
  newMatrix[1][0]=0;
  newMatrix[1][1]=0;
  newMatrix[1][2]=0;
  newMatrix[2][0]=1;
  newMatrix[2][1]=0;
  newMatrix[2][2]=1;
  System.out.println("Matrix with empty row and column: ");
  for (int i=0; i < newMatrix.length; i++) {
    for (int j=0; j < newMatrix[i].length; j++) {
      System.out.print(newMatrix[i][j] + " ");
    }
    System.out.println();
  }
  System.out.println("Reduced matrix: ");
  newMatrix=ContingencyTables.reduceMatrix(newMatrix);
  for (int i=0; i < newMatrix.length; i++) {
    for (int j=0; j < newMatrix[i].length; j++) {
      System.out.print(newMatrix[i][j] + " ");
    }
    System.out.println();
  }
}
