{
  double[] rtotal, ctotal;
  double n=0, expect, smallfreq=5;
  int smallcount=0, nonZeroRows=0, nonZeroColumns=0, nrows, ncols, row, col;
  nrows=matrix.length;
  ncols=matrix[0].length;
  rtotal=new double[nrows];
  ctotal=new double[ncols];
  for (row=0; row < nrows; row++) {
    for (col=0; col < ncols; col++) {
      rtotal[row]+=matrix[row][col];
      ctotal[col]+=matrix[row][col];
      n+=matrix[row][col];
    }
  }
  for (row=0; row < nrows; row++) {
    if (Utils.gr(rtotal[row],0)) {
      nonZeroRows++;
    }
  }
  for (col=0; col < ncols; col++) {
    if (Utils.gr(ctotal[col],0)) {
      nonZeroColumns++;
    }
  }
  for (row=0; row < nrows; row++) {
    if (Utils.gr(rtotal[row],0)) {
      for (col=0; col < ncols; col++) {
        if (Utils.gr(ctotal[col],0)) {
          expect=(ctotal[col] * rtotal[row]) / n;
          if (Utils.sm(expect,smallfreq)) {
            if (Utils.sm(expect,1)) {
              return false;
            }
 else {
              smallcount++;
              if (smallcount > (nonZeroRows * nonZeroColumns) / smallfreq) {
                return false;
              }
            }
          }
        }
      }
    }
  }
  return true;
}
