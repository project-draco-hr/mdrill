{
  try {
    if (instances.classIndex() < 0) {
      instances.setClassIndex(instances.numAttributes() - 1);
    }
    m_Instances=normalizeDataSet(instances);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  int nNodes=getNrOfNodes();
  m_ParentSets=new ParentSet[nNodes];
  for (int i=0; i < nNodes; i++) {
    m_ParentSets[i]=new ParentSet();
  }
  m_Distributions=new Estimator[nNodes][];
  for (int iNode=0; iNode < nNodes; iNode++) {
    m_Distributions[iNode]=new Estimator[1];
    m_Distributions[iNode][0]=new DiscreteEstimatorBayes(getCardinality(iNode),0.5);
  }
  m_nEvidence=new FastVector(nNodes);
  for (int i=0; i < nNodes; i++) {
    m_nEvidence.addElement(-1);
  }
  m_fMarginP=new FastVector(nNodes);
  for (int i=0; i < nNodes; i++) {
    double[] P=new double[getCardinality(i)];
    m_fMarginP.addElement(P);
  }
  m_nPositionX=new FastVector(nNodes);
  m_nPositionY=new FastVector(nNodes);
  for (int iNode=0; iNode < nNodes; iNode++) {
    m_nPositionX.addElement(iNode % 10 * 50);
    m_nPositionY.addElement(((int)(iNode / 10)) * 50);
  }
}
