{
  ArrayList<DistinctCount> list=new ArrayList<DistinctCount>(this.size + 1);
  list.addAll(this.ajust.values());
  long totalsize=0l;
  for (  DistinctCount d : list) {
    int t=Math.max(d.getIncreateTimes(false),1);
    totalsize+=t;
  }
  double pre_uniqsize=Math.max((totalsize * 1.0 / zjustsize),1d);
  double pre_uniqsize_max=pre_uniqsize * 3;
  double pre_uniqsize_min=pre_uniqsize / 2;
  totalsize=0l;
  for (  DistinctCount d : list) {
    int t=d.getIncreateTimes(true);
    if (t > pre_uniqsize_max) {
      t=(int)pre_uniqsize_max;
    }
 else     if (t < pre_uniqsize_min) {
      t=(int)pre_uniqsize_min;
    }
    t=Math.max(t,1);
    totalsize+=t;
  }
  pre_uniqsize=Math.max((totalsize * 1.0 / zjustsize),1);
  int allowSize=0;
  try {
    for (    DistinctCount d : list) {
      int t=d.getIncreateTimes(true);
      if (t > pre_uniqsize_max) {
        t=(int)pre_uniqsize_max;
      }
 else       if (t < pre_uniqsize_min) {
        t=(int)pre_uniqsize_min;
      }
      t=Math.max(t,1);
      double times=t / pre_uniqsize;
      int uniqsize=(int)(persize * times);
      if (uniqsize < 20) {
        uniqsize=20;
      }
      if (uniqsize > this.size) {
        uniqsize=this.size;
      }
      allowSize+=uniqsize;
      int lastuniqsize=d.getMaxUniqSize();
      d.setMaxUniqSize(uniqsize);
      if (lastuniqsize > uniqsize) {
        d.reAjuest();
      }
    }
  }
 catch (  Throwable e) {
  }
  LOG.info("autoAjust _ajust:" + persize + ",size:"+ size+ ",zjustsize:"+ zjustsize+ ",avg:"+ pre_uniqsize+ ",max:"+ pre_uniqsize_max+ ",min:"+ pre_uniqsize_min+ ",allowSize:"+ allowSize);
}
