{
  Stack<d_node> cover_set_current=new Stack<d_node>(), cover_set_next, zero_set=new Stack<d_node>();
  CoverTreeNode parent, child;
  d_node par;
  MyHeap upper_k=new MyHeap(k);
  double d=Math.sqrt(m_DistanceFunction.distance(m_Root.p(),target,Double.POSITIVE_INFINITY,m_TreeStats)), upper_bound;
  cover_set_current.push(new d_node(d,m_Root));
  setter(upper_k,Double.POSITIVE_INFINITY,k);
  this.update(upper_k,d);
  if (m_TreeStats != null) {
    if (m_Root.num_children > 0)     m_TreeStats.incrIntNodeCount();
 else     m_TreeStats.incrLeafCount();
    m_TreeStats.incrPointCount();
  }
  if (m_Root.num_children == 0) {
    NeighborList list=new NeighborList(k);
    list.insertSorted(d,m_Root.p());
    return list;
  }
  while (cover_set_current.length > 0) {
    cover_set_next=new Stack<d_node>();
    for (int i=0; i < cover_set_current.length; i++) {
      par=cover_set_current.element(i);
      parent=par.n;
      for (int c=0; c < parent.num_children; c++) {
        child=parent.children.element(c);
        upper_bound=upper_k.peek().distance;
        if (c == 0)         d=par.dist;
 else {
          d=upper_bound + child.max_dist;
          d=Math.sqrt(m_DistanceFunction.distance(child.p(),target,d * d,m_TreeStats));
          if (m_TreeStats != null)           m_TreeStats.incrPointCount();
        }
        if (d <= (upper_bound + child.max_dist)) {
          if (c > 0 && d < upper_bound) {
            update(upper_k,d);
          }
          if (child.num_children > 0) {
            cover_set_next.push(new d_node(d,child));
            if (m_TreeStats != null)             m_TreeStats.incrIntNodeCount();
          }
 else           if (d <= upper_bound) {
            zero_set.push(new d_node(d,child));
            if (m_TreeStats != null)             m_TreeStats.incrLeafCount();
          }
        }
      }
    }
    cover_set_current=cover_set_next;
  }
  NeighborList list=new NeighborList(k);
  d_node tmpnode;
  upper_bound=upper_k.peek().distance;
  for (int i=0; i < zero_set.length; i++) {
    tmpnode=zero_set.element(i);
    if (tmpnode.dist <= upper_bound)     list.insertSorted(tmpnode.dist,tmpnode.n.p());
  }
  if (list.currentLength() <= 0)   throw new Exception("Error: No neighbour found. This cannot happen");
  return list;
}
