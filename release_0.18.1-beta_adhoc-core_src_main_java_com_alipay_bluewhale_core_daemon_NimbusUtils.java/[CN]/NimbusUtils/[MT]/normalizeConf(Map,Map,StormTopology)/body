{
  List baseSers=(List)stormConf.get(Config.TOPOLOGY_KRYO_REGISTER);
  if (baseSers == null) {
    baseSers=(List)conf.get(Config.TOPOLOGY_KRYO_REGISTER);
  }
  Set<String> cids=ThriftTopologyUtils.getComponentIds(topology);
  List componentSers=new ArrayList();
  for (Iterator it=cids.iterator(); it.hasNext(); ) {
    String componentId=(String)it.next();
    ComponentCommon common=ThriftTopologyUtils.getComponentCommon(topology,componentId);
    String json=common.get_json_conf();
    if (json != null) {
      Map mtmp=(Map)StormUtils.from_json(json);
      List ltmp=(List)mtmp.get(Config.TOPOLOGY_KRYO_REGISTER);
      componentSers.add(ltmp);
    }
  }
  Map totalConf=new HashMap();
  totalConf.putAll(conf);
  totalConf.putAll(stormConf);
  Map rtn=new HashMap();
  rtn.putAll(stormConf);
  Map map=new HashMap();
  map.putAll(mapifySerializations(componentSers));
  map.putAll(mapifySerializations(baseSers));
  rtn.put(Config.TOPOLOGY_KRYO_REGISTER,map);
  rtn.put(Config.TOPOLOGY_ACKERS,totalConf.get(Config.TOPOLOGY_ACKERS));
  return rtn;
}
