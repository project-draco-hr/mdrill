{
  this.labelDistributor.clear();
  double lGap=plotArea.getWidth() * this.labelGap;
  double verticalLinkRadius=state.getLinkArea().getHeight() / 2.0;
  for (int i=0; i < keys.getItemCount(); i++) {
    String label=this.labelGenerator.generateSectionLabel(this.dataset,keys.getKey(i));
    if (label != null) {
      TextBlock block=TextUtilities.createTextBlock(label,this.labelFont,this.labelPaint,maxLabelWidth,new G2TextMeasurer(g2));
      TextBox labelBox=new TextBox(block);
      labelBox.setBackgroundPaint(this.labelBackgroundPaint);
      labelBox.setOutlinePaint(this.labelOutlinePaint);
      labelBox.setOutlineStroke(this.labelOutlineStroke);
      labelBox.setShadowPaint(this.labelShadowPaint);
      labelBox.setInteriorGap(this.labelPadding);
      double theta=Math.toRadians(keys.getValue(i).doubleValue());
      double baseY=state.getPieCenterY() - Math.sin(theta) * verticalLinkRadius;
      double hh=labelBox.getHeight(g2);
      this.labelDistributor.addPieLabelRecord(new PieLabelRecord(keys.getKey(i),theta,baseY,labelBox,hh,lGap / 2.0 + lGap / 2.0 * Math.cos(theta),1.0 - getLabelLinkDepth() + getExplodePercent(keys.getKey(i))));
    }
  }
  double hh=plotArea.getHeight();
  double gap=hh * getInteriorGap();
  this.labelDistributor.distributeLabels(plotArea.getMinY() + gap,hh - 2 * gap);
  for (int i=0; i < this.labelDistributor.getItemCount(); i++) {
    drawRightLabel(g2,state,this.labelDistributor.getPieLabelRecord(i));
  }
}
