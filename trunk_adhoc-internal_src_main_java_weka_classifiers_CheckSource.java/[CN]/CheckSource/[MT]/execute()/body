{
  boolean result;
  Classifier cls;
  Classifier code;
  int i;
  Instances data;
  DataSource source;
  boolean numeric;
  boolean different;
  double predClassifier;
  double predSource;
  result=true;
  if (getClassifier() == null)   throw new Exception("No classifier set!");
  if (getSourceCode() == null)   throw new Exception("No source code set!");
  if (getDataset() == null)   throw new Exception("No dataset set!");
  if (!getDataset().exists())   throw new Exception("Dataset '" + getDataset().getAbsolutePath() + "' does not exist!");
  source=new DataSource(getDataset().getAbsolutePath());
  data=source.getDataSet();
  if (getClassIndex() == -1)   data.setClassIndex(data.numAttributes() - 1);
 else   data.setClassIndex(getClassIndex());
  numeric=data.classAttribute().isNumeric();
  cls=AbstractClassifier.makeCopy(getClassifier());
  cls.buildClassifier(data);
  code=getSourceCode();
  for (i=0; i < data.numInstances(); i++) {
    predClassifier=cls.classifyInstance(data.instance(i));
    predSource=code.classifyInstance(data.instance(i));
    if (Double.isNaN(predClassifier) && Double.isNaN(predSource)) {
      different=false;
    }
 else {
      if (numeric)       different=!Utils.eq(predClassifier,predSource);
 else       different=((int)predClassifier != (int)predSource);
    }
    if (different) {
      result=false;
      if (numeric)       System.out.println((i + 1) + ". instance (Classifier/Source code): " + predClassifier+ " != "+ predSource);
 else       System.out.println((i + 1) + ". instance (Classifier/Source code): " + data.classAttribute().value((int)predClassifier)+ " != "+ data.classAttribute().value((int)predSource));
    }
  }
  return result;
}
