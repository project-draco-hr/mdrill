{
  GrouperType grouperType=null;
  if (GroupingConstants.fields.equals(fields)) {
    if (Thrift.isGlobalGrouping(thrift_grouping)) {
      grouperType=GrouperType.global;
    }
 else {
      List<String> fields_group=Thrift.fieldGrouping(thrift_grouping);
      Fields fields=new Fields(fields_group);
      fields_grouper=new MkFieldsGrouper(out_fields,fields,num_tasks);
      grouperType=GrouperType.fields;
    }
  }
 else   if (GroupingConstants.all.equals(fields)) {
    grouperType=GrouperType.all;
  }
 else   if (GroupingConstants.shuffle.equals(fields)) {
    this.randomrange=new RandomRange(num_tasks);
    grouperType=GrouperType.shuffle;
  }
 else   if (GroupingConstants.none.equals(fields)) {
    this.random=new Random();
    grouperType=GrouperType.none;
  }
 else   if (GroupingConstants.custom_object.equals(fields)) {
    JavaObject jobj=thrift_grouping.get_custom_object();
    CustomStreamGrouping g=Thrift.instantiateJavaObject(jobj);
    custom_grouper=new MkCustomGrouper(g,out_fields,num_tasks);
    grouperType=GrouperType.custom_obj;
  }
 else   if (GroupingConstants.custom_serialized.equals(fields)) {
    byte[] obj=thrift_grouping.get_custom_serialized();
    CustomStreamGrouping g=(CustomStreamGrouping)Utils.deserialize(obj);
    custom_grouper=new MkCustomGrouper(g,out_fields,num_tasks);
    grouperType=GrouperType.custom_serialized;
  }
 else   if (GroupingConstants.direct.equals(fields)) {
    grouperType=GrouperType.direct;
  }
  return grouperType;
}
