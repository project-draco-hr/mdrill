{
  double evalMetric=0;
  double[] repError=new double[5];
  int numAttributes=0;
  int i, j;
  Random Rnd=new Random(m_seed);
  Remove delTransform=new Remove();
  delTransform.setInvertSelection(true);
  Instances trainCopy=new Instances(m_trainInstances);
  for (i=0; i < m_numAttribs; i++) {
    if (subset.get(i)) {
      numAttributes++;
    }
  }
  int[] featArray=new int[numAttributes + 1];
  for (i=0, j=0; i < m_numAttribs; i++) {
    if (subset.get(i)) {
      featArray[j++]=i;
    }
  }
  featArray[j]=m_classIndex;
  delTransform.setAttributeIndicesArray(featArray);
  delTransform.setInputFormat(trainCopy);
  trainCopy=Filter.useFilter(trainCopy,delTransform);
  for (i=0; i < 5; i++) {
    m_Evaluation=new Evaluation(trainCopy);
    m_Evaluation.crossValidateModel(m_BaseClassifier,trainCopy,m_folds,Rnd);
switch (m_evaluationMeasure) {
case EVAL_DEFAULT:
      repError[i]=m_Evaluation.errorRate();
    break;
case EVAL_ACCURACY:
  repError[i]=m_Evaluation.errorRate();
break;
case EVAL_RMSE:
repError[i]=m_Evaluation.rootMeanSquaredError();
break;
case EVAL_MAE:
repError[i]=m_Evaluation.meanAbsoluteError();
break;
case EVAL_FMEASURE:
repError[i]=m_Evaluation.weightedFMeasure();
break;
case EVAL_AUC:
repError[i]=m_Evaluation.weightedAreaUnderROC();
break;
}
if (!repeat(repError,i + 1)) {
i++;
break;
}
}
for (j=0; j < i; j++) {
evalMetric+=repError[j];
}
evalMetric/=(double)i;
m_Evaluation=null;
switch (m_evaluationMeasure) {
case EVAL_DEFAULT:
case EVAL_ACCURACY:
case EVAL_RMSE:
case EVAL_MAE:
evalMetric=-evalMetric;
break;
}
return evalMetric;
}
