{
  Instances result;
  int i;
  int n;
  int m;
  int index;
  Instances[] processed;
  Instance inst;
  Instance newInst;
  double[] values;
  Vector errors;
  if (!isFirstBatchDone()) {
    checkDimensions();
    for (i=0; i < m_Ranges.length; i++)     m_Ranges[i].setUpper(instances.numAttributes() - 1);
    determineUnusedIndices(instances);
  }
  processed=new Instances[getFilters().length];
  for (i=0; i < getFilters().length; i++) {
    processed[i]=generateSubset(instances,getRange(i));
    if (!isFirstBatchDone())     getFilter(i).setInputFormat(processed[i]);
    processed[i]=Filter.useFilter(processed[i],getFilter(i));
  }
  if (!isFirstBatchDone()) {
    result=determineOutputFormat(instances);
    setOutputFormat(result);
  }
 else {
    result=getOutputFormat();
  }
  errors=new Vector();
  for (i=0; i < processed.length; i++) {
    if (processed[i].numInstances() != instances.numInstances())     errors.add(new Integer(i));
  }
  if (errors.size() > 0)   throw new IllegalStateException("The following filter(s) changed the number of instances: " + errors);
  for (i=0; i < instances.numInstances(); i++) {
    inst=instances.instance(i);
    values=new double[result.numAttributes()];
    index=0;
    for (n=0; n < processed.length; n++) {
      for (m=0; m < processed[n].numAttributes(); m++) {
        if (m == processed[n].classIndex())         continue;
        if (result.attribute(index).isString())         values[index]=result.attribute(index).addStringValue(processed[n].instance(i).stringValue(m));
 else         if (result.attribute(index).isRelationValued())         values[index]=result.attribute(index).addRelation(processed[n].instance(i).relationalValue(m));
 else         values[index]=processed[n].instance(i).value(m);
        index++;
      }
    }
    if (!getRemoveUnused()) {
      for (n=0; n < m_IndicesUnused.length; n++) {
        if (result.attribute(index).isString())         values[index]=result.attribute(index).addStringValue(inst.stringValue(m_IndicesUnused[n]));
 else         if (result.attribute(index).isRelationValued())         values[index]=result.attribute(index).addRelation(inst.relationalValue(m_IndicesUnused[n]));
 else         values[index]=inst.value(m_IndicesUnused[n]);
        index++;
      }
    }
    if (instances.classIndex() > -1)     values[values.length - 1]=inst.value(instances.classIndex());
    if (inst instanceof SparseInstance)     newInst=new SparseInstance(instances.instance(i).weight(),values);
 else     newInst=new DenseInstance(instances.instance(i).weight(),values);
    result.add(newInst);
  }
  return result;
}
