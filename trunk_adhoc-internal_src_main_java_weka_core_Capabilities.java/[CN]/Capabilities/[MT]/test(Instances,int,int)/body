{
  int i;
  int n;
  int m;
  Attribute att;
  Instance inst;
  boolean testClass;
  Capabilities cap;
  boolean missing;
  Iterator iter;
  if (!m_InstancesTest)   return true;
  if ((m_Capabilities.size() == 0) || ((m_Capabilities.size() == 1) && handles(Capability.NO_CLASS)))   System.err.println(createMessage("No capabilities set!"));
  if (toIndex - fromIndex < 0) {
    m_FailReason=new WekaException(createMessage("No attributes!"));
    return false;
  }
  testClass=(data.classIndex() > -1) && (data.classIndex() >= fromIndex) && (data.classIndex() <= toIndex);
  for (i=fromIndex; i <= toIndex; i++) {
    att=data.attribute(i);
    if (i == data.classIndex())     continue;
    if (!test(att))     return false;
  }
  if (!handles(Capability.NO_CLASS) && (data.classIndex() == -1)) {
    m_FailReason=new UnassignedClassException(createMessage("Class attribute not set!"));
    return false;
  }
  if (handles(Capability.NO_CLASS) && (data.classIndex() > -1)) {
    cap=getClassCapabilities();
    cap.disable(Capability.NO_CLASS);
    iter=cap.capabilities();
    if (!iter.hasNext()) {
      m_FailReason=new WekaException(createMessage("Cannot handle any class attribute!"));
      return false;
    }
  }
  if (testClass && !handles(Capability.NO_CLASS)) {
    att=data.classAttribute();
    if (!test(att,true))     return false;
    if (m_MissingClassValuesTest) {
      if (!handles(Capability.MISSING_CLASS_VALUES)) {
        for (i=0; i < data.numInstances(); i++) {
          if (data.instance(i).classIsMissing()) {
            m_FailReason=new WekaException(createMessage("Cannot handle missing class values!"));
            return false;
          }
        }
      }
 else {
        if (m_MinimumNumberInstancesTest) {
          int hasClass=0;
          for (i=0; i < data.numInstances(); i++) {
            if (!data.instance(i).classIsMissing())             hasClass++;
          }
          if (hasClass < getMinimumNumberInstances()) {
            m_FailReason=new WekaException(createMessage("Not enough training instances with class labels (required: " + getMinimumNumberInstances() + ", provided: "+ hasClass+ ")!"));
            return false;
          }
        }
      }
    }
  }
  if (m_MissingValuesTest) {
    if (!handles(Capability.MISSING_VALUES)) {
      missing=false;
      for (i=0; i < data.numInstances(); i++) {
        inst=data.instance(i);
        if (inst instanceof SparseInstance) {
          for (m=0; m < inst.numValues(); m++) {
            n=inst.index(m);
            if (n < fromIndex)             continue;
            if (n > toIndex)             break;
            if (n == inst.classIndex())             continue;
            if (inst.isMissing(n)) {
              missing=true;
              break;
            }
          }
        }
 else {
          for (n=fromIndex; n <= toIndex; n++) {
            if (n == inst.classIndex())             continue;
            if (inst.isMissing(n)) {
              missing=true;
              break;
            }
          }
        }
        if (missing) {
          m_FailReason=new NoSupportForMissingValuesException(createMessage("Cannot handle missing values!"));
          return false;
        }
      }
    }
  }
  if (m_MinimumNumberInstancesTest) {
    if (data.numInstances() < getMinimumNumberInstances()) {
      m_FailReason=new WekaException(createMessage("Not enough training instances (required: " + getMinimumNumberInstances() + ", provided: "+ data.numInstances()+ ")!"));
      return false;
    }
  }
  if (handles(Capability.ONLY_MULTIINSTANCE)) {
    if (data.numAttributes() != 3) {
      m_FailReason=new WekaException(createMessage("Incorrect Multi-Instance format, must be 'bag-id, bag, class'!"));
      return false;
    }
    if (!data.attribute(0).isNominal() || !data.attribute(1).isRelationValued() || (data.classIndex() != data.numAttributes() - 1)) {
      m_FailReason=new WekaException(createMessage("Incorrect Multi-Instance format, must be 'NOMINAL att, RELATIONAL att, CLASS att'!"));
      return false;
    }
    if (getOwner() instanceof MultiInstanceCapabilitiesHandler) {
      MultiInstanceCapabilitiesHandler handler=(MultiInstanceCapabilitiesHandler)getOwner();
      cap=handler.getMultiInstanceCapabilities();
      boolean result;
      if (data.numInstances() > 0)       result=cap.test(data.attribute(1).relation(0));
 else       result=cap.test(data.attribute(1).relation());
      if (!result) {
        m_FailReason=cap.m_FailReason;
        return false;
      }
    }
  }
  return true;
}
