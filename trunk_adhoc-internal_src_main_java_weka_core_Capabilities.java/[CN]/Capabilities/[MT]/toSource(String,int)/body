{
  StringBuffer result;
  String capsName;
  String capName;
  String indentStr;
  int i;
  result=new StringBuffer();
  capsName=Capabilities.class.getName();
  capName=Capabilities.Capability.class.getName().replaceAll("\\$",".");
  indentStr="";
  for (i=0; i < indent; i++)   indentStr+=" ";
  result.append(indentStr + capsName + " "+ objectname+ " = new "+ capsName+ "(this);\n");
  List<Capability> capsList=new ArrayList<Capability>();
  boolean hasNominalAtt=false;
  boolean hasBinaryAtt=false;
  boolean hasUnaryAtt=false;
  boolean hasEmptyNomAtt=false;
  boolean hasNominalClass=false;
  result.append("\n");
  for (  Capability cap : Capability.values()) {
    if (handles(cap)) {
      if (cap == Capability.NOMINAL_ATTRIBUTES) {
        hasNominalAtt=true;
      }
      if (cap == Capability.NOMINAL_CLASS) {
        hasNominalClass=true;
      }
      if (cap == Capability.BINARY_ATTRIBUTES) {
        hasBinaryAtt=true;
      }
      if (cap == Capability.UNARY_ATTRIBUTES) {
        hasUnaryAtt=true;
      }
      if (cap == Capability.EMPTY_NOMINAL_ATTRIBUTES) {
        hasEmptyNomAtt=true;
      }
      capsList.add(cap);
    }
  }
  for (  Capability cap : capsList) {
    if ((cap == Capability.BINARY_ATTRIBUTES && hasNominalAtt) || (cap == Capability.UNARY_ATTRIBUTES && hasBinaryAtt) || (cap == Capability.EMPTY_NOMINAL_ATTRIBUTES && hasUnaryAtt)|| (cap == Capability.BINARY_CLASS && hasNominalClass)) {
      continue;
    }
    result.append(indentStr + objectname + ".enable("+ capName+ "."+ cap.name()+ ");\n");
    if (hasDependency(cap))     result.append(indentStr + objectname + ".enableDependency("+ capName+ "."+ cap.name()+ ");\n");
  }
  result.append("\n");
  result.append("\n");
  result.append(indentStr + objectname + ".setMinimumNumberInstances("+ getMinimumNumberInstances()+ ");\n");
  result.append("\n");
  return result.toString();
}
