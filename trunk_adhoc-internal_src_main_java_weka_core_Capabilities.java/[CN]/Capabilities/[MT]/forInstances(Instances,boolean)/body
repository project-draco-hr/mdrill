{
  Capabilities result;
  Capabilities multiInstance;
  int i;
  int n;
  int m;
  Instance inst;
  boolean missing;
  result=new Capabilities(null);
  if (data.classIndex() == -1) {
    result.enable(Capability.NO_CLASS);
  }
 else {
switch (data.classAttribute().type()) {
case Attribute.NOMINAL:
      if (data.classAttribute().numValues() == 1)       result.enable(Capability.UNARY_CLASS);
 else       if (data.classAttribute().numValues() == 2)       result.enable(Capability.BINARY_CLASS);
 else       result.enable(Capability.NOMINAL_CLASS);
    break;
case Attribute.NUMERIC:
  result.enable(Capability.NUMERIC_CLASS);
break;
case Attribute.STRING:
result.enable(Capability.STRING_CLASS);
break;
case Attribute.DATE:
result.enable(Capability.DATE_CLASS);
break;
case Attribute.RELATIONAL:
result.enable(Capability.RELATIONAL_CLASS);
break;
default :
throw new UnsupportedAttributeTypeException("Unknown class attribute type '" + data.classAttribute() + "'!");
}
for (i=0; i < data.numInstances(); i++) {
if (data.instance(i).classIsMissing()) {
result.enable(Capability.MISSING_CLASS_VALUES);
break;
}
}
}
for (i=0; i < data.numAttributes(); i++) {
if (i == data.classIndex()) continue;
switch (data.attribute(i).type()) {
case Attribute.NOMINAL:
result.enable(Capability.UNARY_ATTRIBUTES);
if (data.attribute(i).numValues() == 2) result.enable(Capability.BINARY_ATTRIBUTES);
 else if (data.attribute(i).numValues() > 2) result.enable(Capability.NOMINAL_ATTRIBUTES);
break;
case Attribute.NUMERIC:
result.enable(Capability.NUMERIC_ATTRIBUTES);
break;
case Attribute.DATE:
result.enable(Capability.DATE_ATTRIBUTES);
break;
case Attribute.STRING:
result.enable(Capability.STRING_ATTRIBUTES);
break;
case Attribute.RELATIONAL:
result.enable(Capability.RELATIONAL_ATTRIBUTES);
break;
default :
throw new UnsupportedAttributeTypeException("Unknown attribute type '" + data.attribute(i).type() + "'!");
}
}
missing=false;
for (i=0; i < data.numInstances(); i++) {
inst=data.instance(i);
if (inst instanceof SparseInstance) {
for (m=0; m < inst.numValues(); m++) {
n=inst.index(m);
if (n == inst.classIndex()) continue;
if (inst.isMissing(n)) {
missing=true;
break;
}
}
}
 else {
for (n=0; n < data.numAttributes(); n++) {
if (n == inst.classIndex()) continue;
if (inst.isMissing(n)) {
missing=true;
break;
}
}
}
if (missing) {
result.enable(Capability.MISSING_VALUES);
break;
}
}
if (multi) {
if ((data.numAttributes() == 3) && (data.attribute(0).isNominal()) && (data.attribute(1).isRelationValued())&& (data.classIndex() == data.numAttributes() - 1)) {
multiInstance=new Capabilities(null);
multiInstance.or(result.getClassCapabilities());
multiInstance.enable(Capability.NOMINAL_ATTRIBUTES);
multiInstance.enable(Capability.RELATIONAL_ATTRIBUTES);
multiInstance.enable(Capability.ONLY_MULTIINSTANCE);
result.assign(multiInstance);
}
}
return result;
}
