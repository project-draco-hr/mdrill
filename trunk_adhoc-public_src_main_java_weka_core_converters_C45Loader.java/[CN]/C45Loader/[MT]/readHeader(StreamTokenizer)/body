{
  ArrayList<Attribute> attribDefs=new ArrayList<Attribute>();
  ArrayList<Integer> ignores=new ArrayList<Integer>();
  ConverterUtils.getFirstToken(tokenizer);
  if (tokenizer.ttype == StreamTokenizer.TT_EOF) {
    ConverterUtils.errms(tokenizer,"premature end of file");
  }
  m_numAttribs=1;
  ArrayList<String> classVals=new ArrayList<String>();
  while (tokenizer.ttype != StreamTokenizer.TT_EOL) {
    String val=tokenizer.sval.trim();
    if (val.length() > 0) {
      val=removeTrailingPeriod(val);
      classVals.add(val);
    }
    ConverterUtils.getToken(tokenizer);
  }
  int counter=0;
  while (tokenizer.ttype != StreamTokenizer.TT_EOF) {
    ConverterUtils.getFirstToken(tokenizer);
    if (tokenizer.ttype != StreamTokenizer.TT_EOF) {
      String attribName=tokenizer.sval;
      ConverterUtils.getToken(tokenizer);
      if (tokenizer.ttype == StreamTokenizer.TT_EOL) {
        ConverterUtils.errms(tokenizer,"premature end of line. Expected " + "attribute type.");
      }
      String temp=tokenizer.sval.toLowerCase().trim();
      if (temp.startsWith("ignore") || temp.startsWith("label")) {
        ignores.add(new Integer(counter));
        counter++;
      }
 else       if (temp.startsWith("continuous")) {
        attribDefs.add(new Attribute(attribName));
        counter++;
      }
 else {
        counter++;
        ArrayList<String> attribVals=new ArrayList<String>();
        while (tokenizer.ttype != StreamTokenizer.TT_EOL && tokenizer.ttype != StreamTokenizer.TT_EOF) {
          String val=tokenizer.sval.trim();
          if (val.length() > 0) {
            val=removeTrailingPeriod(val);
            attribVals.add(val);
          }
          ConverterUtils.getToken(tokenizer);
        }
        attribDefs.add(new Attribute(attribName,attribVals));
      }
    }
  }
  boolean ok=true;
  int i=-1;
  if (classVals.size() == 1) {
    for (i=0; i < attribDefs.size(); i++) {
      if (((Attribute)attribDefs.get(i)).name().compareTo((String)classVals.get(0)) == 0) {
        ok=false;
        m_numAttribs--;
        break;
      }
    }
  }
  if (ok) {
    attribDefs.add(new Attribute("Class",classVals));
  }
  m_structure=new Instances(m_fileStem,attribDefs,0);
  try {
    if (ok) {
      m_structure.setClassIndex(m_structure.numAttributes() - 1);
    }
 else {
      m_structure.setClassIndex(i);
    }
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
  m_numAttribs=m_structure.numAttributes() + ignores.size();
  m_ignore=new boolean[m_numAttribs];
  for (i=0; i < ignores.size(); i++) {
    m_ignore[((Integer)ignores.get(i)).intValue()]=true;
  }
}
