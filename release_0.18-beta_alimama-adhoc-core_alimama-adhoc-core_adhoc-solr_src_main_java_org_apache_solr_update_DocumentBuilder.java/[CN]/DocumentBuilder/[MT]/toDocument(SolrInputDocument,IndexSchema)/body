{
  Document out=new Document();
  out.setBoost(doc.getDocumentBoost());
  for (  SolrInputField field : doc) {
    String name=field.getName();
    SchemaField sfield=schema.getFieldOrNull(name);
    boolean used=false;
    float boost=field.getBoost();
    if (sfield != null && !sfield.multiValued() && field.getValueCount() > 1) {
      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"ERROR: " + getID(doc,schema) + "multiple values encountered for non multiValued field "+ sfield.getName()+ ": "+ field.getValue());
    }
    boolean hasField=false;
    try {
      for (      Object v : field) {
        if (v == null) {
          continue;
        }
        String val=null;
        hasField=true;
        boolean isBinaryField=false;
        if (sfield != null && sfield.getType() instanceof BinaryField) {
          isBinaryField=true;
          BinaryField binaryField=(BinaryField)sfield.getType();
          Fieldable f=binaryField.createField(sfield,v,boost);
          if (f != null) {
            out.add(f);
          }
          used=true;
        }
 else {
          if (sfield != null && v instanceof Date && sfield.getType() instanceof DateField) {
            DateField df=(DateField)sfield.getType();
            val=df.toInternal((Date)v) + 'Z';
          }
 else           if (v != null) {
            val=v.toString();
          }
          if (sfield != null) {
            used=true;
            addField(out,sfield,val,boost);
          }
        }
        List<CopyField> copyFields=schema.getCopyFieldsList(name);
        for (        CopyField cf : copyFields) {
          SchemaField destinationField=cf.getDestination();
          if (!destinationField.multiValued() && out.get(destinationField.getName()) != null) {
            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"ERROR: " + getID(doc,schema) + "multiple values encountered for non multiValued copy field "+ destinationField.getName()+ ": "+ val);
          }
          used=true;
          Fieldable[] fields=null;
          if (isBinaryField) {
            if (destinationField.getType() instanceof BinaryField) {
              BinaryField binaryField=(BinaryField)destinationField.getType();
              fields=new Fieldable[]{binaryField.createField(destinationField,v,boost)};
            }
          }
 else {
            fields=destinationField.createFields(cf.getLimitedValue(val),boost);
          }
          if (fields != null) {
            for (            Fieldable f : fields) {
              out.add(f);
            }
          }
        }
        boost=1.0f;
      }
    }
 catch (    Exception ex) {
      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"ERROR: " + getID(doc,schema) + "Error adding field '"+ field.getName()+ "'='"+ field.getValue()+ "'",ex);
    }
    if (!used && hasField) {
      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"ERROR: " + getID(doc,schema) + "unknown field '"+ name+ "'");
    }
  }
  for (  SchemaField field : schema.getRequiredFields()) {
    if (out.getFieldable(field.getName()) == null) {
      if (field.getDefaultValue() != null) {
        addField(out,field,field.getDefaultValue(),1.0f);
      }
 else {
      }
    }
  }
  return out;
}
