{
  long t1=System.currentTimeMillis();
  UnvertFields ufs=new UnvertFields(fields,searcher);
  UnvertFields crossufs=new UnvertFields(this.crossFs,searcher);
  UnvertFields distufs=new UnvertFields(this.distFS,searcher);
  this.joinInvert=new HigoJoinInvert[this.joinList.length];
  this.joinSort=new HigoJoinSort[this.joinList.length];
  int presize=baseDocs.size();
  for (int i=0; i < this.joinList.length; i++) {
    this.joinSort[i]=new HigoJoinSort(this.joinList[i],this.req);
    this.joinInvert[i]=new HigoJoinInvert(this.joinList[i],this.searcher);
    this.joinInvert[i].open(this.req);
    baseDocs=this.joinInvert[i].filterByRight(baseDocs);
  }
  this.cmpString=new ShardGroupByGroupbyRowCompare(this.sort_column_type,fields,crossFs,distFS,this.joinSort,this.sort_fl,this.sort_type,this.isdesc);
  this.cmpTermNum=new ShardGroupByTermNumCompare(fields,crossFs,distFS,this.joinSort,this.sort_fl,this.sort_type,this.isdesc);
  int groupbySize=ufs.length;
  for (  HigoJoinInvert inv : joinInvert) {
    groupbySize+=inv.fieldCount();
  }
  this.groupListCache=MdrillPorcessUtils.getGroupListQueue(groupbySize);
  HashSet<GroupList> preSet=new HashSet<GroupList>(this.preGroupList.length);
  for (int i=0; i < this.preGroupList.length; i++) {
    preSet.add(makePreGroup(this.preGroupList[i],ufs,this.joinInvert));
  }
  Iprecontains pre=new EmptyPrecontains();
  if (preSet.size() > 0) {
    pre=new PreContains(preSet);
  }
  LOG.info("##baseDocs.size## " + baseDocs.size() + "@"+ presize);
  long t2=System.currentTimeMillis();
  QuickHashMap<GroupList,RefRow> groups=this.makeGroups(this.maxlimit,crossufs,distufs,ufs,fields,baseDocs,pre);
  long t3=System.currentTimeMillis();
  this.transGroupValue(groups,ufs,res);
  long t4=System.currentTimeMillis();
  ufs.free();
  crossufs.free();
  distufs.free();
  for (  GroupList g : preSet) {
    this.groupListCache.add(g);
  }
  for (  GroupList g : groups.keySet()) {
    this.groupListCache.add(g);
  }
  MdrillPorcessUtils.cleanFieldValueCache(groupbySize);
  for (int i=0; i < this.joinList.length; i++) {
    this.joinInvert[i].close();
  }
  long t5=System.currentTimeMillis();
  LOG.info("##FacetCross## time taken " + ",total:" + (t5 - t1) + ",init:"+ (t2 - t1)+ ",makeGroups:"+ (t3 - t2)+ ",transGroupValue:"+ (t4 - t3)+ ",groups.size:"+ groups.size());
}
