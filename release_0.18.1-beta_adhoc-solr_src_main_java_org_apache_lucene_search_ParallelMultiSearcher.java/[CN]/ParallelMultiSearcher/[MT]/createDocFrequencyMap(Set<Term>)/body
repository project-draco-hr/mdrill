{
  final Term[] allTermsArray=terms.toArray(new Term[terms.size()]);
  final int[] aggregatedDocFreqs=new int[terms.size()];
  final ExecutionHelper<int[]> runner=new ExecutionHelper<int[]>(executor);
  for (  Searchable searchable : searchables) {
    runner.submit(new DocumentFrequencyCallable(searchable,allTermsArray));
  }
  final int docFreqLen=aggregatedDocFreqs.length;
  for (  final int[] docFreqs : runner) {
    for (int i=0; i < docFreqLen; i++) {
      aggregatedDocFreqs[i]+=docFreqs[i];
    }
  }
  final HashMap<Term,Integer> dfMap=new HashMap<Term,Integer>();
  for (int i=0; i < allTermsArray.length; i++) {
    dfMap.put(allTermsArray[i],Integer.valueOf(aggregatedDocFreqs[i]));
  }
  return dfMap;
}
