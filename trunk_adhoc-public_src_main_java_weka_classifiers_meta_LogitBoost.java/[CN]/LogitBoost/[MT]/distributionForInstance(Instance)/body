{
  if (m_ZeroR != null) {
    return m_ZeroR.distributionForInstance(instance);
  }
  instance=(Instance)instance.copy();
  instance.setDataset(m_NumericClassData);
  double[] pred=new double[m_NumClasses];
  double[] Fs=new double[m_NumClasses];
  for (int i=0; i < m_NumGenerated; i++) {
    double predSum=0;
    for (int j=0; j < m_NumClasses; j++) {
      pred[j]=m_Shrinkage * m_Classifiers[j][i].classifyInstance(instance);
      predSum+=pred[j];
    }
    predSum/=m_NumClasses;
    for (int j=0; j < m_NumClasses; j++) {
      Fs[j]+=(pred[j] - predSum) * (m_NumClasses - 1) / m_NumClasses;
    }
  }
  return probs(Fs);
}
