{
  String knnString=Utils.getOption('K',options);
  if (knnString.length() != 0) {
    setKNN(Integer.parseInt(knnString));
  }
 else {
    setKNN(1);
  }
  String windowString=Utils.getOption('W',options);
  if (windowString.length() != 0) {
    setWindowSize(Integer.parseInt(windowString));
  }
 else {
    setWindowSize(0);
  }
  if (Utils.getFlag('I',options)) {
    setDistanceWeighting(new SelectedTag(WEIGHT_INVERSE,TAGS_WEIGHTING));
  }
 else   if (Utils.getFlag('F',options)) {
    setDistanceWeighting(new SelectedTag(WEIGHT_SIMILARITY,TAGS_WEIGHTING));
  }
 else {
    setDistanceWeighting(new SelectedTag(WEIGHT_NONE,TAGS_WEIGHTING));
  }
  setCrossValidate(Utils.getFlag('X',options));
  setMeanSquared(Utils.getFlag('E',options));
  String nnSearchClass=Utils.getOption('A',options);
  if (nnSearchClass.length() != 0) {
    String nnSearchClassSpec[]=Utils.splitOptions(nnSearchClass);
    if (nnSearchClassSpec.length == 0) {
      throw new Exception("Invalid NearestNeighbourSearch algorithm " + "specification string.");
    }
    String className=nnSearchClassSpec[0];
    nnSearchClassSpec[0]="";
    setNearestNeighbourSearchAlgorithm((NearestNeighbourSearch)Utils.forName(NearestNeighbourSearch.class,className,nnSearchClassSpec));
  }
 else   this.setNearestNeighbourSearchAlgorithm(new LinearNNSearch());
  Utils.checkForRemainingOptions(options);
}
