{
  AprioriItemSet newPremise;
  FastVector[] result, moreResults;
  FastVector newConsequences, newPremises=new FastVector(), newConf=new FastVector();
  Hashtable hashtable;
  FastVector newLift=null, newLev=null, newConv=null;
  newLift=new FastVector();
  newLev=new FastVector();
  newConv=new FastVector();
  if (numItemsInSet > numItemsInConsequence + 1) {
    hashtable=(Hashtable)hashtables.elementAt(numItemsInSet - numItemsInConsequence - 2);
    newConsequences=mergeAllItemSets(rules[1],numItemsInConsequence - 1,m_totalTransactions);
    int newNumInConsequence=numItemsInConsequence + 1;
    Hashtable hashtableForConsequence=(Hashtable)hashtables.elementAt(newNumInConsequence - 1);
    Enumeration enu=newConsequences.elements();
    while (enu.hasMoreElements()) {
      AprioriItemSet current=(AprioriItemSet)enu.nextElement();
      int z=0;
      for (int jj=0; jj < current.m_items.length; jj++) {
        if (current.m_items[jj] != -1) {
          z++;
        }
      }
      current.m_counter=m_counter;
      newPremise=subtract(current);
      newPremise.m_counter=((Integer)hashtable.get(newPremise)).intValue();
      newPremises.addElement(newPremise);
      newConf.addElement(new Double(confidenceForRule(newPremise,current)));
      int consequenceUnconditionedCounter=((Integer)hashtableForConsequence.get(current)).intValue();
      double tempLift=liftForRule(newPremise,current,consequenceUnconditionedCounter);
      double tempLev=leverageForRule(newPremise,current,newPremise.m_counter,consequenceUnconditionedCounter);
      double tempConv=convictionForRule(newPremise,current,newPremise.m_counter,consequenceUnconditionedCounter);
      newLift.addElement(new Double(tempLift));
      newLev.addElement(new Double(tempLev));
      newConv.addElement(new Double(tempConv));
    }
    result=new FastVector[rules.length];
    result[0]=newPremises;
    result[1]=newConsequences;
    result[2]=newConf;
    result[3]=newLift;
    result[4]=newLev;
    result[5]=newConv;
    pruneRules(result,minConfidence);
    moreResults=moreComplexRules(result,numItemsInSet,numItemsInConsequence + 1,minConfidence,hashtables);
    if (moreResults != null)     for (int i=0; i < moreResults[0].size(); i++) {
      result[0].addElement(moreResults[0].elementAt(i));
      result[1].addElement(moreResults[1].elementAt(i));
      result[2].addElement(moreResults[2].elementAt(i));
      result[3].addElement(moreResults[3].elementAt(i));
      result[4].addElement(moreResults[4].elementAt(i));
      result[5].addElement(moreResults[5].elementAt(i));
    }
    return result;
  }
 else   return null;
}
