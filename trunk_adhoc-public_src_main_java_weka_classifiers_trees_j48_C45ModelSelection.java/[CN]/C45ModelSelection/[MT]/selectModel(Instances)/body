{
  double minResult;
  double currentResult;
  C45Split[] currentModel;
  C45Split bestModel=null;
  NoSplit noSplitModel=null;
  double averageInfoGain=0;
  int validModels=0;
  boolean multiVal=true;
  Distribution checkDistribution;
  Attribute attribute;
  double sumOfWeights;
  int i;
  try {
    checkDistribution=new Distribution(data);
    noSplitModel=new NoSplit(checkDistribution);
    if (Utils.sm(checkDistribution.total(),2 * m_minNoObj) || Utils.eq(checkDistribution.total(),checkDistribution.perClass(checkDistribution.maxClass())))     return noSplitModel;
    if (m_allData != null) {
      Enumeration enu=data.enumerateAttributes();
      while (enu.hasMoreElements()) {
        attribute=(Attribute)enu.nextElement();
        if ((attribute.isNumeric()) || (Utils.sm((double)attribute.numValues(),(0.3 * (double)m_allData.numInstances())))) {
          multiVal=false;
          break;
        }
      }
    }
    currentModel=new C45Split[data.numAttributes()];
    sumOfWeights=data.sumOfWeights();
    for (i=0; i < data.numAttributes(); i++) {
      if (i != (data).classIndex()) {
        currentModel[i]=new C45Split(i,m_minNoObj,sumOfWeights,m_useMDLcorrection);
        currentModel[i].buildClassifier(data);
        if (currentModel[i].checkModel())         if (m_allData != null) {
          if ((data.attribute(i).isNumeric()) || (multiVal || Utils.sm((double)data.attribute(i).numValues(),(0.3 * (double)m_allData.numInstances())))) {
            averageInfoGain=averageInfoGain + currentModel[i].infoGain();
            validModels++;
          }
        }
 else {
          averageInfoGain=averageInfoGain + currentModel[i].infoGain();
          validModels++;
        }
      }
 else       currentModel[i]=null;
    }
    if (validModels == 0)     return noSplitModel;
    averageInfoGain=averageInfoGain / (double)validModels;
    minResult=0;
    for (i=0; i < data.numAttributes(); i++) {
      if ((i != (data).classIndex()) && (currentModel[i].checkModel()))       if ((currentModel[i].infoGain() >= (averageInfoGain - 1E-3)) && Utils.gr(currentModel[i].gainRatio(),minResult)) {
        bestModel=currentModel[i];
        minResult=currentModel[i].gainRatio();
      }
    }
    if (Utils.eq(minResult,0))     return noSplitModel;
    bestModel.distribution().addInstWithUnknown(data,bestModel.attIndex());
    if (m_allData != null)     bestModel.setSplitPoint(m_allData);
    return bestModel;
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return null;
}
