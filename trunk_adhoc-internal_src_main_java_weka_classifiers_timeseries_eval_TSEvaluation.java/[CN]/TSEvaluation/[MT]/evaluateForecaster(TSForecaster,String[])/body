{
  if (Utils.getFlag('h',options) || Utils.getFlag("-help",options)) {
    boolean globalInfo=Utils.getFlag("synopsis",options) || Utils.getFlag("info",options);
    throw new Exception("\nHelp requested." + makeOptionString(forecaster,globalInfo));
  }
  String trainingFileName=Utils.getOption('t',options);
  String testingFileName=Utils.getOption('T',options);
  String testSizeS=Utils.getOption("holdout",options);
  String loadForecasterName=Utils.getOption('l',options);
  String saveForecasterName=Utils.getOption('d',options);
  String horizonS=Utils.getOption("horizon",options);
  String primeWindowSizeS=Utils.getOption("prime",options);
  String evalModuleList=Utils.getOption("metrics",options);
  String outputPredictionsS=Utils.getOption('p',options);
  String saveGraphS=Utils.getOption("graph",options);
  boolean printFutureForecast=Utils.getFlag("future",options);
  String graphFutureForecastS=Utils.getOption("future-graph",options);
  Instances inputHeader=null;
  Instances trainingData=null;
  Instances testData=null;
  int testSize=0;
  int horizon=1;
  int primeWindowSize=1;
  boolean primeWithTest=Utils.getFlag("primeWithTest",options);
  boolean rebuildModelAfterEachStep=Utils.getFlag('r',options);
  boolean noEvalForTrainingData=Utils.getFlag('v',options);
  if (loadForecasterName.length() > 0 && trainingFileName.length() > 0) {
    System.out.println("When a model is loaded from a file any training" + " data is only used for priming the model.");
  }
  if (loadForecasterName.length() > 0) {
    ObjectInputStream ois=new ObjectInputStream(new FileInputStream(loadForecasterName));
    forecaster=(TSForecaster)ois.readObject();
    try {
      inputHeader=(Instances)ois.readObject();
    }
 catch (    Exception ex) {
    }
    ois.close();
  }
  if (testingFileName.length() > 0 && testSizeS.length() > 0) {
    throw new Exception("Can't specify both a test file and a holdout size.");
  }
  if (testingFileName.length() == 0 && primeWithTest) {
    throw new Exception("Can't prime the forecaster with data from the test " + "file if no test file is specified!");
  }
  if (testSizeS.length() > 0) {
    testSize=Integer.parseInt(testSizeS);
  }
  if (testingFileName.length() == 0 && testSize == 0 && rebuildModelAfterEachStep) {
    throw new Exception("Can't rebuild the model after each forecasting step on" + " the test data if there is no test data specified or no holdout" + " size specified!");
  }
  if (trainingFileName.length() > 0) {
    trainingData=new Instances(new BufferedReader(new FileReader(trainingFileName)));
  }
 else {
    noEvalForTrainingData=true;
  }
  if (testingFileName.length() > 0) {
    testData=new Instances(new BufferedReader(new FileReader(testingFileName)));
  }
  if (horizonS.length() > 0) {
    horizon=Integer.parseInt(horizonS);
  }
  if (primeWindowSizeS.length() > 0) {
    primeWindowSize=Integer.parseInt(primeWindowSizeS);
  }
 else {
    throw new Exception("Must specify the number of instances to prime the " + "forecaster with for generating predictions (-prime)");
  }
  String outputPredsForTarget=null;
  int stepNum=1;
  if (outputPredictionsS.length() > 0) {
    String[] parts=outputPredictionsS.split(":");
    outputPredsForTarget=parts[0].trim();
    if (parts.length > 1) {
      stepNum=Integer.parseInt(parts[1]);
    }
  }
  String saveGraphFileName=null;
  List<String> graphTargets=null;
  List<Integer> stepsToPlot=new ArrayList<Integer>();
  graphTargets=new ArrayList<String>();
  if (saveGraphS.length() > 0) {
    String[] parts=saveGraphS.split(":");
    saveGraphFileName=parts[0].trim();
    String targets=parts[1].trim();
    String[] targetParts=targets.split(",");
    for (    String s : targetParts) {
      graphTargets.add(s.trim());
    }
    if (parts.length > 2) {
      String[] graphStepNums=parts[2].split(",");
      for (      String s : graphStepNums) {
        Integer step=new Integer(Integer.parseInt(s.trim()));
        if (step < 1 || step > horizon) {
          throw new Exception("Can't specify a step to graph that is less " + "than 1 or greater than the selected horizon!");
        }
        stepsToPlot.add(step);
      }
    }
 else {
      stepsToPlot.add(new Integer(1));
    }
  }
  if (graphTargets.size() > 1 && stepsToPlot.size() > 1) {
    throw new Exception("Can't specify multiple targets to plot and multiple steps. " + "Specify either multiple target names to plot for a single step, or, " + "a single target to plot at multiple steps.");
  }
  if (forecaster instanceof OptionHandler && loadForecasterName.length() == 0) {
    ((OptionHandler)forecaster).setOptions(options);
  }
  TSEvaluation eval=new TSEvaluation(trainingData,testSize);
  if (testData != null) {
    eval.setTestData(testData);
  }
  eval.setHorizon(horizon);
  eval.setPrimeWindowSize(primeWindowSize);
  eval.setPrimeForTestDataWithTestData(primeWithTest);
  eval.setRebuildModelAfterEachTestForecastStep(rebuildModelAfterEachStep);
  eval.setForecastFuture(printFutureForecast || graphFutureForecastS.length() > 0);
  if (evalModuleList.length() > 0) {
    eval.setEvaluationModules(evalModuleList);
  }
  eval.setEvaluateOnTrainingData(!noEvalForTrainingData);
  if (loadForecasterName.length() == 0) {
    forecaster.buildForecaster(eval.getTrainingData());
  }
  System.out.println(forecaster.toString());
  if (saveForecasterName.length() > 0) {
    ObjectOutputStream oos=new ObjectOutputStream(new FileOutputStream(saveForecasterName));
    oos.writeObject(forecaster);
    oos.writeObject(new Instances(eval.getTrainingData(),0));
    oos.close();
  }
  eval.evaluateForecaster(forecaster,false);
  if (outputPredsForTarget != null && trainingData != null && !noEvalForTrainingData) {
    System.out.println(eval.printPredictionsForTrainingData("=== Predictions " + "for training data: " + outputPredsForTarget + " ("+ stepNum+ (stepNum > 1 ? "-steps ahead)" : "-step ahead)")+ " ===",outputPredsForTarget,stepNum,primeWindowSize));
  }
  if (outputPredsForTarget != null && (testData != null || testSize > 0)) {
    int instanceNumberOffset=(trainingData != null && testSize > 0) ? eval.getTrainingData().numInstances() : 0;
    if (primeWithTest) {
      instanceNumberOffset+=primeWindowSize;
    }
    System.out.println(eval.printPredictionsForTestData("=== Predictions for test data: " + outputPredsForTarget + " ("+ stepNum+ (stepNum > 1 ? "-steps ahead)" : "-step ahead)")+ " ===",outputPredsForTarget,stepNum,instanceNumberOffset));
  }
  if (printFutureForecast) {
    if (trainingData != null && !noEvalForTrainingData) {
      System.out.println("=== Future predictions from end of training data ===\n");
      System.out.println(eval.printFutureTrainingForecast(forecaster));
    }
    if (testData != null || testSize > 0) {
      System.out.println("=== Future predictions from end of test data ===\n");
      System.out.println(eval.printFutureTestForecast(forecaster));
    }
  }
  System.out.println(eval.toSummaryString());
  if (saveGraphFileName != null && trainingData != null && !noEvalForTrainingData) {
    if (graphTargets.size() >= 1 || (graphTargets.size() == 1 && stepsToPlot.size() == 1)) {
      JPanel result=eval.graphPredictionsForTargetsOnTraining(GraphDriver.getDefaultDriver(),forecaster,graphTargets,stepsToPlot.get(0),primeWindowSize);
      GraphDriver.getDefaultDriver().saveChartToFile(result,saveGraphFileName + "_train",1000,600);
    }
 else {
      JPanel result=eval.graphPredictionsForStepsOnTraining(GraphDriver.getDefaultDriver(),forecaster,graphTargets.get(0),stepsToPlot,primeWindowSize);
      GraphDriver.getDefaultDriver().saveChartToFile(result,saveGraphFileName + "_train",1000,600);
    }
  }
  if (saveGraphFileName != null && (testData != null || testSize > 0)) {
    int instanceOffset=(primeWithTest) ? primeWindowSize : 0;
    if (graphTargets.size() > 1 || (graphTargets.size() == 1 && stepsToPlot.size() == 1)) {
      JPanel result=eval.graphPredictionsForTargetsOnTesting(GraphDriver.getDefaultDriver(),forecaster,graphTargets,stepsToPlot.get(0),instanceOffset);
      GraphDriver.getDefaultDriver().saveChartToFile(result,saveGraphFileName + "_test",1000,600);
    }
 else {
      JPanel result=eval.graphPredictionsForStepsOnTesting(GraphDriver.getDefaultDriver(),forecaster,graphTargets.get(0),stepsToPlot,instanceOffset);
      GraphDriver.getDefaultDriver().saveChartToFile(result,saveGraphFileName + "_test",1000,600);
    }
  }
  if (graphFutureForecastS.length() > 0) {
    if (trainingData != null && !noEvalForTrainingData && eval.m_trainingFuture != null) {
      JPanel result=eval.graphFutureForecastOnTraining(GraphDriver.getDefaultDriver(),forecaster,AbstractForecaster.stringToList(forecaster.getFieldsToForecast()));
      GraphDriver.getDefaultDriver().saveChartToFile(result,graphFutureForecastS + "_train",1000,600);
    }
    if (testData != null || testSize > 0 && eval.m_testFuture != null) {
      JPanel result=eval.graphFutureForecastOnTesting(GraphDriver.getDefaultDriver(),forecaster,AbstractForecaster.stringToList(forecaster.getFieldsToForecast()));
      GraphDriver.getDefaultDriver().saveChartToFile(result,graphFutureForecastS + "_test",1000,600);
    }
  }
}
