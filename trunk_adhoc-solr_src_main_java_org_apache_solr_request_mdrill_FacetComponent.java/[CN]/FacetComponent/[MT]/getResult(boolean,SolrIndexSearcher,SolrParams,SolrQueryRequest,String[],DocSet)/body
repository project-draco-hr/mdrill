{
  String crcget=params.get("mdrill.crc.key.get",null);
  if (crcget != null && params.getBool("fetchfdt",false)) {
    SolrIndexReader reader=searcher.getReader();
    IndexReader.InvertParams invparam=new IndexReader.InvertParams();
    invparam.searcher=searcher;
    invparam.params=params;
    invparam.fields=fields;
    invparam.base=base;
    invparam.req=req;
    invparam.isdetail=isdetail;
    IndexReader.InvertResult result=reader.invertScan(searcher.getSchema(),invparam);
    ArrayList<NamedList> resultlist=result.getResult();
    Map<Long,String> crcvalue=new HashMap<Long,String>();
    for (    NamedList nl : resultlist) {
      crcvalue.putAll((Map<? extends Long,? extends String>)nl.get("fdtcre"));
    }
    return crcvalue;
  }
  if (crcget != null) {
    ConcurrentHashMap<Long,String> cache=MdrillUtils.CRC_CACHE_SIZE.remove(crcget);
    Map<Long,String> crcvalue=new HashMap<Long,String>();
    if (cache == null) {
      return crcvalue;
    }
    String crcliststr=params.get("mdrill.crc.key.get.crclist");
    if (crcliststr != null) {
      String[] crclist=crcliststr.split(",");
      for (      String s : crclist) {
        Long crc=Long.parseLong(s);
        String v=cache.get(crc);
        if (v != null) {
          crcvalue.put(crc,v);
        }
      }
    }
    return crcvalue;
  }
  SolrIndexReader reader=searcher.getReader();
  IndexReader.InvertParams invparam=new IndexReader.InvertParams();
  invparam.searcher=searcher;
  invparam.params=params;
  invparam.fields=fields;
  invparam.base=base;
  invparam.req=req;
  invparam.isdetail=isdetail;
  IndexReader.InvertResult result=reader.invertScan(searcher.getSchema(),invparam);
  ArrayList<NamedList> resultlist=result.getResult();
  if (resultlist.size() == 1) {
    return resultlist.get(0);
  }
  FacetComponent.FacetInfo fi=new FacetComponent.FacetInfo(params);
  DistribFieldFacet dff=fi.cross;
  dff.isdetail=isdetail;
  for (  NamedList nl : resultlist) {
    dff.add(nl);
  }
  int offset=params.getInt(FacetParams.FACET_CROSS_OFFSET,0);
  int limit=params.getInt(FacetParams.FACET_CROSS_LIMIT,100);
  int limit_offset=offset + limit;
  NamedList fieldCounts=new NamedList();
  GroupbyItem[] counts=dff.getPairSorted(limit_offset);
  if (dff.recordcount != null) {
    GroupbyItem recordcount=dff.recordcount;
    fieldCounts.add("count",recordcount.toNamedList());
  }
  ArrayList<Object> list=new ArrayList<Object>();
  int end=limit_offset > counts.length ? counts.length : limit_offset;
  for (int i=offset; i < end; i++) {
    list.add(counts[i].toNamedList());
  }
  fieldCounts.add("list",list);
  return fieldCounts;
}
