{
  this.cleanTmp();
  if (this.type.equals("single")) {
    String partionvertify="partionV20130513@001@single@" + this.shards + "@"+ java.util.UUID.randomUUID().toString();
    Path indexOtherPath=new Path(this.index,"single");
    Path tmpindexOtherPath=new Path(this.tmp,"single");
    HashSet<String> days=new HashSet<String>();
    days.add("*");
    int ret=this.subRun(days,tmpindexOtherPath.toString(),args[0],args[1]);
    parse.writeStr(new Path(tmpindexOtherPath,"vertify"),partionvertify);
    if (this.fs.exists(indexOtherPath)) {
      this.fs.delete(indexOtherPath,true);
    }
    Path parent=indexOtherPath.getParent();
    if (!this.fs.exists(parent)) {
      this.fs.mkdirs(parent);
    }
    this.fs.rename(tmpindexOtherPath,indexOtherPath);
    this.cleanTmp();
    return ret;
  }
  String startyyyymmddd=parse.getStartDay(dayDelay,maxRunDays,this.startday);
  String upFinishyyyymmdd=parse.getUpdateFinishDay(dayDelay,this.startday);
  HashSet<String> daylist=parse.getDayList(startyyyymmddd);
  HashMap<String,HashSet<String>> partions=Partions.parseDays(daylist,this.type);
  HashSet<String> copy=new HashSet<String>();
  Set<String> olds=parse.readPartion(this.index);
  for (  Entry<String,HashSet<String>> e : partions.entrySet()) {
    String partion=e.getKey();
    olds.remove(partion);
    HashSet<String> days=e.getValue();
    boolean writeDay=false;
    for (    String day : days) {
      if (day.compareTo(upFinishyyyymmdd) >= 0) {
        writeDay=true;
        break;
      }
    }
    String partionvertify="partionV20130513@001@" + partion + "@"+ this.shards+ "@"+ days.size()+ "@"+ days.hashCode();
    if (writeDay) {
      partionvertify+="@" + parse.getYyyymmdd() + "@"+ upFinishyyyymmdd;
    }
    Path indexOtherPath=new Path(this.index,partion);
    Path tmpindexOtherPath=new Path(this.tmp,partion);
    Path otherveritify=new Path(indexOtherPath,"vertify");
    if (!partionvertify.equals(parse.readFirstLineStr(otherveritify))) {
      int ret=0;
      if (days.size() > 0) {
        ret=this.subRun(days,tmpindexOtherPath.toString(),args[0],args[1]);
        parse.writeStr(new Path(tmpindexOtherPath,"vertify"),partionvertify);
        copy.add(partion);
      }
      if (ret != 0) {
        return ret;
      }
    }
  }
  for (  String old : olds) {
    Path indexOtherPath=new Path(this.index,old);
    if (this.fs.exists(indexOtherPath)) {
      this.fs.delete(indexOtherPath,true);
    }
  }
  for (  String partion : copy) {
    Path indexOtherPath=new Path(this.index,partion);
    Path tmpindexOtherPath=new Path(this.tmp,partion);
    if (this.fs.exists(indexOtherPath)) {
      this.fs.delete(indexOtherPath,true);
    }
    this.fs.mkdirs(indexOtherPath.getParent());
    this.fs.rename(tmpindexOtherPath,indexOtherPath);
  }
  this.cleanTmp();
  return 0;
}
