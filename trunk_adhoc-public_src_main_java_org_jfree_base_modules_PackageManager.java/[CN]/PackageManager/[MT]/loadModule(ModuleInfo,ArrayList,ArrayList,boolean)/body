{
  try {
    final Class c=ObjectUtilities.getClassLoader(getClass()).loadClass(moduleInfo.getModuleClass());
    final Module module=(Module)c.newInstance();
    if (acceptVersion(moduleInfo,module) == false) {
      Log.warn("Module " + module.getName() + ": required version: "+ moduleInfo+ ", but found Version: \n"+ module);
      final PackageState state=new PackageState(module,PackageState.STATE_ERROR);
      dropFailedModule(state);
      return false;
    }
    final int moduleContained=containsModule(modules,module);
    if (moduleContained == RETURN_MODULE_ERROR) {
      Log.debug("Indicated failure for module: " + module.getModuleClass());
      final PackageState state=new PackageState(module,PackageState.STATE_ERROR);
      dropFailedModule(state);
      return false;
    }
 else     if (moduleContained == RETURN_MODULE_UNKNOWN) {
      if (incompleteModules.contains(module)) {
        Log.error(new Log.SimpleMessage("Circular module reference: This module definition is invalid: ",module.getClass()));
        final PackageState state=new PackageState(module,PackageState.STATE_ERROR);
        dropFailedModule(state);
        return false;
      }
      incompleteModules.add(module);
      final ModuleInfo[] required=module.getRequiredModules();
      for (int i=0; i < required.length; i++) {
        if (loadModule(required[i],incompleteModules,modules,true) == false) {
          Log.debug("Indicated failure for module: " + module.getModuleClass());
          final PackageState state=new PackageState(module,PackageState.STATE_ERROR);
          dropFailedModule(state);
          return false;
        }
      }
      final ModuleInfo[] optional=module.getOptionalModules();
      for (int i=0; i < optional.length; i++) {
        if (loadModule(optional[i],incompleteModules,modules,true) == false) {
          Log.debug(new Log.SimpleMessage("Optional module: ",optional[i].getModuleClass()," was not loaded."));
        }
      }
      if (containsModule(modules,module) == RETURN_MODULE_UNKNOWN) {
        modules.add(module);
      }
      incompleteModules.remove(module);
    }
    return true;
  }
 catch (  ClassNotFoundException cnfe) {
    if (fatal) {
      Log.warn(new Log.SimpleMessage("Unresolved dependency for package: ",moduleInfo.getModuleClass()));
    }
    Log.debug(new Log.SimpleMessage("ClassNotFound: ",cnfe.getMessage()));
    return false;
  }
catch (  Exception e) {
    Log.warn(new Log.SimpleMessage("Exception while loading module: ",moduleInfo),e);
    return false;
  }
}
