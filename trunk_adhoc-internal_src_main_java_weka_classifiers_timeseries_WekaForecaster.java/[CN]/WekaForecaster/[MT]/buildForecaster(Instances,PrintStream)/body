{
  reset();
  m_originalHeader=new Instances(insts,0);
  insts=new Instances(insts);
  insts=weka.classifiers.timeseries.core.Utils.replaceMissing(insts,m_fieldsToForecast,m_lagMaker.getTimeStampField(),false,m_lagMaker.getPeriodicity(),m_lagMaker.getSkipEntries(),m_missingTargetList,m_missingTimeStampList,m_missingTimeStampRows);
  for (  PrintStream p : progress) {
    p.println("Transforming input data...");
  }
  Instances trainingData=insts;
  trainingData=m_lagMaker.getTransformedData(trainingData);
  m_transformedHeader=new Instances(trainingData,0);
  m_dateRemover=new RemoveType();
  m_dateRemover.setOptions(new String[]{"-T","date"});
  m_dateRemover.setInputFormat(trainingData);
  trainingData=Filter.useFilter(trainingData,m_dateRemover);
  m_singleTargetForecasters=new ArrayList<SingleTargetForecaster>();
  for (int i=0; i < m_fieldsToForecast.size(); i++) {
    SingleTargetForecaster f=new SingleTargetForecaster();
    Classifier c=AbstractClassifier.makeCopy(m_forecaster);
    f.setClassifier(c);
    f.buildForecaster(trainingData,m_fieldsToForecast.get(i));
    m_singleTargetForecasters.add(f);
  }
  m_modelBuilt=true;
  if (m_calculateConfLimitsSteps > 0) {
    for (    PrintStream p : progress) {
      p.println("Computing confidence intervals...");
    }
    int artificialTimeStart=(m_lagMaker.isUsingAnArtificialTimeIndex()) ? 1 : -1;
    ErrorBasedConfidenceIntervalEstimator e=new ErrorBasedConfidenceIntervalEstimator();
    e.calculateConfidenceOffsets(this,insts,m_lagMaker.getMaxLag(),artificialTimeStart,m_calculateConfLimitsSteps,m_confidenceLevel,progress);
    m_confidenceLimitEstimator=e;
  }
}
