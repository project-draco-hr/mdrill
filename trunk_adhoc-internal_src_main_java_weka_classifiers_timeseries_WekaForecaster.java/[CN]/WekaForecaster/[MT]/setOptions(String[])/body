{
  String fieldsToForecast=Utils.getOption('F',options);
  if (fieldsToForecast.length() == 0) {
    throw new Exception("Must specify the name of at least one field to forecast!");
  }
  setFieldsToForecast(fieldsToForecast);
  String overlayFields=Utils.getOption("overlay",options);
  if (overlayFields.length() > 0) {
    setOverlayFields(overlayFields);
  }
  String minL=Utils.getOption('L',options);
  if (minL.length() > 0) {
    int mL=Integer.parseInt(minL);
    m_lagMaker.setMinLag(mL);
    if (mL < 1) {
      throw new Exception("Minimum lag can't be less than 1!");
    }
  }
  String maxL=Utils.getOption('M',options);
  if (maxL.length() > 0) {
    int mL=Integer.parseInt(maxL);
    m_lagMaker.setMaxLag(mL);
  }
  if (m_lagMaker.getMaxLag() < m_lagMaker.getMinLag()) {
    throw new Exception("Can't have the maximum lag set lower than the minimum lag!");
  }
  String lagRange=Utils.getOption('R',options);
  if (lagRange.length() > 0) {
    m_lagMaker.setLagRange(lagRange);
  }
  boolean avLongLags=Utils.getFlag('A',options);
  m_lagMaker.setAverageConsecutiveLongLags(avLongLags);
  String avLongerThan=Utils.getOption('B',options);
  if (avLongerThan.length() > 0) {
    int avL=Integer.parseInt(avLongerThan);
    if (avL < m_lagMaker.getMinLag() || avL > m_lagMaker.getMaxLag()) {
      throw new Exception("Average consecutive long lags value can't " + "be less than the minimum lag or greater than the " + "maximum lag!");
    }
    m_lagMaker.setAverageLagsAfter(avL);
  }
  String consecutiveLongLagS=Utils.getOption('C',options);
  if (consecutiveLongLagS.length() > 0) {
    int consecutive=Integer.parseInt(consecutiveLongLagS);
    if (consecutive < 1 || consecutive > (m_lagMaker.getMaxLag() - m_lagMaker.getAverageLagsAfter())) {
      throw new Exception("Number of consecutive long lags to average " + "must be greater than 0 and less than " + (m_lagMaker.getMaxLag() - m_lagMaker.getMinLag()));
    }
    m_lagMaker.setNumConsecutiveLongLagsToAverage(consecutive);
  }
  boolean dontAdjTrends=Utils.getFlag('Z',options);
  m_lagMaker.setAdjustForTrends(!dontAdjTrends);
  boolean adjVariance=Utils.getFlag("V",options);
  m_lagMaker.setAdjustForVariance(adjVariance);
  String timeStampF=Utils.getOption('G',options);
  if (timeStampF.length() > 0) {
    m_lagMaker.setTimeStampField(timeStampF);
  }
  m_lagMaker.setAddAMIndicator(Utils.getFlag("am-pm",options));
  m_lagMaker.setAddDayOfWeek(Utils.getFlag("dayofweek",options));
  m_lagMaker.setAddWeekendIndicator(Utils.getFlag("weekend",options));
  m_lagMaker.setAddMonthOfYear(Utils.getFlag("month",options));
  m_lagMaker.setAddQuarterOfYear(Utils.getFlag("quarter",options));
  m_lagMaker.setAddDayOfMonth(Utils.getFlag("dayofmonth",options));
  m_lagMaker.setAddNumDaysInMonth(Utils.getFlag("numdaysinmonth",options));
  String customPeriodic=Utils.getOption("custom",options);
  while (customPeriodic.length() > 0) {
    m_lagMaker.addCustomPeriodic(customPeriodic);
  }
  String primaryPeriodicN=Utils.getOption("periodic",options);
  if (primaryPeriodicN.length() > 0) {
    m_lagMaker.setPrimaryPeriodicFieldName(primaryPeriodicN);
  }
  String skipString=Utils.getOption("skip",options);
  if (skipString.length() > 0) {
    m_lagMaker.setSkipEntries(skipString);
  }
  String confSteps=Utils.getOption("conf",options);
  if (confSteps.length() > 0) {
    int numSteps=Integer.parseInt(confSteps);
    if (numSteps < 0) {
      throw new Exception("Number of steps must be >= 0");
    }
    setCalculateConfIntervalsForForecasts(numSteps);
  }
  String confLevel=Utils.getOption('P',options);
  if (confLevel.length() > 0) {
    double cL=Double.parseDouble(confLevel);
    if (cL < 0 || cL > 1) {
      throw new Exception("Confidence level must be between 0 and 1.");
    }
    setConfidenceLevel(cL);
  }
  String baseClassifierS=Utils.getOption('W',options);
  if (baseClassifierS.length() == 0) {
    baseClassifierS="weka.classifiers.functions.SMOreg";
  }
  String[] classifierSpec=Utils.splitOptions(baseClassifierS);
  if (classifierSpec.length == 0) {
    throw new Exception("Invalid classifier specification.");
  }
  String classifierName=classifierSpec[0];
  classifierSpec[0]="";
  setBaseForecaster(AbstractClassifier.forName(classifierName,classifierSpec));
}
