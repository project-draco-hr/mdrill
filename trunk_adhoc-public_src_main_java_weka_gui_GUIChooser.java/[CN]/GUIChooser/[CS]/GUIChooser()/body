{
  super("Weka GUI Chooser");
  m_Self=this;
  m_FileChooserGraphVisualizer.addChoosableFileFilter(new ExtensionFileFilter(".bif","BIF Files (*.bif)"));
  m_FileChooserGraphVisualizer.addChoosableFileFilter(new ExtensionFileFilter(".xml","XML Files (*.xml)"));
  m_FileChooserPlot.addChoosableFileFilter(new ExtensionFileFilter(Instances.FILE_EXTENSION,"ARFF Files (*" + Instances.FILE_EXTENSION + ")"));
  m_FileChooserPlot.setMultiSelectionEnabled(true);
  m_FileChooserROC.addChoosableFileFilter(new ExtensionFileFilter(Instances.FILE_EXTENSION,"ARFF Files (*" + Instances.FILE_EXTENSION + ")"));
  m_Icon=Toolkit.getDefaultToolkit().getImage(GUIChooser.class.getClassLoader().getResource("weka/gui/weka_icon_new_48.png"));
  setIconImage(m_Icon);
  this.getContentPane().setLayout(new BorderLayout());
  this.getContentPane().add(m_PanelApplications,BorderLayout.EAST);
  m_PanelApplications.setBorder(BorderFactory.createTitledBorder("Applications"));
  m_PanelApplications.setLayout(new GridLayout(4,1));
  m_PanelApplications.add(m_ExplorerBut);
  m_PanelApplications.add(m_ExperimenterBut);
  m_PanelApplications.add(m_KnowledgeFlowBut);
  m_PanelApplications.add(m_SimpleBut);
  JPanel wekaPan=new JPanel();
  wekaPan.setBorder(BorderFactory.createEmptyBorder(5,5,5,5));
  wekaPan.setLayout(new BorderLayout());
  wekaPan.setToolTipText("Weka, a native bird of New Zealand");
  ImageIcon wii=new ImageIcon(m_weka);
  JLabel wekaLab=new JLabel(wii);
  wekaPan.add(wekaLab,BorderLayout.CENTER);
  String infoString="<html>" + "<font size=-2>" + "Waikato Environment for Knowledge Analysis<br>"+ "Version " + Version.VERSION + "<br>"+ "(c) "+ Copyright.getFromYear()+ " - "+ Copyright.getToYear()+ "<br>"+ Copyright.getOwner()+ "<br>"+ Copyright.getAddress()+ "</font>"+ "</html>";
  JLabel infoLab=new JLabel(infoString);
  infoLab.setBorder(BorderFactory.createEmptyBorder(5,5,5,5));
  wekaPan.add(infoLab,BorderLayout.SOUTH);
  this.getContentPane().add(wekaPan,BorderLayout.CENTER);
  m_jMenuBar=new JMenuBar();
  m_jMenuProgram=new JMenu();
  m_jMenuBar.add(m_jMenuProgram);
  m_jMenuProgram.setText("Program");
  m_jMenuProgram.setMnemonic('P');
  JMenuItem jMenuItemProgramLogWindow=new JMenuItem();
  m_jMenuProgram.add(jMenuItemProgramLogWindow);
  jMenuItemProgramLogWindow.setText("LogWindow");
  jMenuItemProgramLogWindow.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_L,KeyEvent.CTRL_MASK));
  m_LogWindow.setIconImage(m_Icon);
  jMenuItemProgramLogWindow.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      m_LogWindow.setVisible(true);
    }
  }
);
  final JMenuItem jMenuItemProgramMemUsage=new JMenuItem();
  m_jMenuProgram.add(jMenuItemProgramMemUsage);
  jMenuItemProgramMemUsage.setText("Memory usage");
  jMenuItemProgramMemUsage.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_M,KeyEvent.CTRL_MASK));
  jMenuItemProgramMemUsage.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      if (m_MemoryUsageFrame == null) {
        final MemoryUsagePanel panel=new MemoryUsagePanel();
        jMenuItemProgramMemUsage.setEnabled(false);
        m_MemoryUsageFrame=new JFrame("Memory usage");
        m_MemoryUsageFrame.setIconImage(m_Icon);
        m_MemoryUsageFrame.getContentPane().setLayout(new BorderLayout());
        m_MemoryUsageFrame.getContentPane().add(panel,BorderLayout.CENTER);
        m_MemoryUsageFrame.addWindowListener(new WindowAdapter(){
          public void windowClosing(          WindowEvent w){
            panel.stopMonitoring();
            m_MemoryUsageFrame.dispose();
            m_MemoryUsageFrame=null;
            jMenuItemProgramMemUsage.setEnabled(true);
            checkExit();
          }
        }
);
        m_MemoryUsageFrame.pack();
        m_MemoryUsageFrame.setSize(400,50);
        Point l=panel.getFrameLocation();
        if ((l.x != -1) && (l.y != -1))         m_MemoryUsageFrame.setLocation(l);
        m_MemoryUsageFrame.setVisible(true);
        Dimension size=m_MemoryUsageFrame.getPreferredSize();
        m_MemoryUsageFrame.setSize(new Dimension((int)size.getWidth(),(int)size.getHeight()));
      }
    }
  }
);
  m_jMenuProgram.add(new JSeparator());
  JMenuItem jMenuItemProgramExit=new JMenuItem();
  m_jMenuProgram.add(jMenuItemProgramExit);
  jMenuItemProgramExit.setText("Exit");
  jMenuItemProgramExit.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_E,KeyEvent.CTRL_MASK));
  jMenuItemProgramExit.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      dispose();
      checkExit();
    }
  }
);
  m_jMenuVisualization=new JMenu();
  m_jMenuBar.add(m_jMenuVisualization);
  m_jMenuVisualization.setText("Visualization");
  m_jMenuVisualization.setMnemonic('V');
  JMenuItem jMenuItemVisualizationPlot=new JMenuItem();
  m_jMenuVisualization.add(jMenuItemVisualizationPlot);
  jMenuItemVisualizationPlot.setText("Plot");
  jMenuItemVisualizationPlot.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_P,KeyEvent.CTRL_MASK));
  jMenuItemVisualizationPlot.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      int retVal=m_FileChooserPlot.showOpenDialog(m_Self);
      if (retVal != JFileChooser.APPROVE_OPTION)       return;
      VisualizePanel panel=new VisualizePanel();
      String filenames="";
      File[] files=m_FileChooserPlot.getSelectedFiles();
      for (int j=0; j < files.length; j++) {
        String filename=files[j].getAbsolutePath();
        if (j > 0)         filenames+=", ";
        filenames+=filename;
        System.err.println("Loading instances from " + filename);
        try {
          Reader r=new java.io.BufferedReader(new FileReader(filename));
          Instances i=new Instances(r);
          i.setClassIndex(i.numAttributes() - 1);
          PlotData2D pd1=new PlotData2D(i);
          if (j == 0) {
            pd1.setPlotName("Master plot");
            panel.setMasterPlot(pd1);
          }
 else {
            pd1.setPlotName("Plot " + (j + 1));
            pd1.m_useCustomColour=true;
            pd1.m_customColour=(j % 2 == 0) ? Color.red : Color.blue;
            panel.addPlot(pd1);
          }
        }
 catch (        Exception ex) {
          ex.printStackTrace();
          JOptionPane.showMessageDialog(m_Self,"Error loading file '" + files[j] + "':\n"+ ex.getMessage());
          return;
        }
      }
      final JFrame frame=new JFrame("Plot - " + filenames);
      frame.setIconImage(m_Icon);
      frame.getContentPane().setLayout(new BorderLayout());
      frame.getContentPane().add(panel,BorderLayout.CENTER);
      frame.addWindowListener(new WindowAdapter(){
        public void windowClosing(        WindowEvent e){
          m_Plots.remove(frame);
          frame.dispose();
          checkExit();
        }
      }
);
      frame.pack();
      frame.setSize(800,600);
      frame.setVisible(true);
      m_Plots.add(frame);
    }
  }
);
  JMenuItem jMenuItemVisualizationROC=new JMenuItem();
  m_jMenuVisualization.add(jMenuItemVisualizationROC);
  jMenuItemVisualizationROC.setText("ROC");
  jMenuItemVisualizationROC.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_R,KeyEvent.CTRL_MASK));
  jMenuItemVisualizationROC.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      int retVal=m_FileChooserROC.showOpenDialog(m_Self);
      if (retVal != JFileChooser.APPROVE_OPTION)       return;
      String filename=m_FileChooserROC.getSelectedFile().getAbsolutePath();
      Instances result=null;
      try {
        result=new Instances(new BufferedReader(new FileReader(filename)));
      }
 catch (      Exception ex) {
        ex.printStackTrace();
        JOptionPane.showMessageDialog(m_Self,"Error loading file '" + filename + "':\n"+ ex.getMessage());
        return;
      }
      result.setClassIndex(result.numAttributes() - 1);
      ThresholdVisualizePanel vmc=new ThresholdVisualizePanel();
      vmc.setROCString("(Area under ROC = " + Utils.doubleToString(ThresholdCurve.getROCArea(result),4) + ")");
      vmc.setName(result.relationName());
      PlotData2D tempd=new PlotData2D(result);
      tempd.setPlotName(result.relationName());
      tempd.addInstanceNumberAttribute();
      try {
        vmc.addPlot(tempd);
      }
 catch (      Exception ex) {
        ex.printStackTrace();
        JOptionPane.showMessageDialog(m_Self,"Error adding plot:\n" + ex.getMessage());
        return;
      }
      final JFrame frame=new JFrame("ROC - " + filename);
      frame.setIconImage(m_Icon);
      frame.getContentPane().setLayout(new BorderLayout());
      frame.getContentPane().add(vmc,BorderLayout.CENTER);
      frame.addWindowListener(new WindowAdapter(){
        public void windowClosing(        WindowEvent e){
          m_ROCs.remove(frame);
          frame.dispose();
          checkExit();
        }
      }
);
      frame.pack();
      frame.setSize(800,600);
      frame.setVisible(true);
      m_ROCs.add(frame);
    }
  }
);
  JMenuItem jMenuItemVisualizationTree=new JMenuItem();
  m_jMenuVisualization.add(jMenuItemVisualizationTree);
  jMenuItemVisualizationTree.setText("TreeVisualizer");
  jMenuItemVisualizationTree.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_T,KeyEvent.CTRL_MASK));
  jMenuItemVisualizationTree.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      int retVal=m_FileChooserTreeVisualizer.showOpenDialog(m_Self);
      if (retVal != JFileChooser.APPROVE_OPTION)       return;
      String filename=m_FileChooserTreeVisualizer.getSelectedFile().getAbsolutePath();
      TreeBuild builder=new TreeBuild();
      Node top=null;
      NodePlace arrange=new PlaceNode2();
      try {
        top=builder.create(new FileReader(filename));
      }
 catch (      Exception ex) {
        ex.printStackTrace();
        JOptionPane.showMessageDialog(m_Self,"Error loading file '" + filename + "':\n"+ ex.getMessage());
        return;
      }
      final JFrame frame=new JFrame("TreeVisualizer - " + filename);
      frame.setIconImage(m_Icon);
      frame.getContentPane().setLayout(new BorderLayout());
      frame.getContentPane().add(new TreeVisualizer(null,top,arrange),BorderLayout.CENTER);
      frame.addWindowListener(new WindowAdapter(){
        public void windowClosing(        WindowEvent e){
          m_TreeVisualizers.remove(frame);
          frame.dispose();
          checkExit();
        }
      }
);
      frame.pack();
      frame.setSize(800,600);
      frame.setVisible(true);
      m_TreeVisualizers.add(frame);
    }
  }
);
  JMenuItem jMenuItemVisualizationGraph=new JMenuItem();
  m_jMenuVisualization.add(jMenuItemVisualizationGraph);
  jMenuItemVisualizationGraph.setText("GraphVisualizer");
  jMenuItemVisualizationGraph.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_G,KeyEvent.CTRL_MASK));
  jMenuItemVisualizationGraph.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      int retVal=m_FileChooserGraphVisualizer.showOpenDialog(m_Self);
      if (retVal != JFileChooser.APPROVE_OPTION)       return;
      String filename=m_FileChooserGraphVisualizer.getSelectedFile().getAbsolutePath();
      GraphVisualizer panel=new GraphVisualizer();
      try {
        if (filename.toLowerCase().endsWith(".xml") || filename.toLowerCase().endsWith(".bif")) {
          panel.readBIF(new FileInputStream(filename));
        }
 else {
          panel.readDOT(new FileReader(filename));
        }
      }
 catch (      Exception ex) {
        ex.printStackTrace();
        JOptionPane.showMessageDialog(m_Self,"Error loading file '" + filename + "':\n"+ ex.getMessage());
        return;
      }
      final JFrame frame=new JFrame("GraphVisualizer - " + filename);
      frame.setIconImage(m_Icon);
      frame.getContentPane().setLayout(new BorderLayout());
      frame.getContentPane().add(panel,BorderLayout.CENTER);
      frame.addWindowListener(new WindowAdapter(){
        public void windowClosing(        WindowEvent e){
          m_GraphVisualizers.remove(frame);
          frame.dispose();
          checkExit();
        }
      }
);
      frame.pack();
      frame.setSize(800,600);
      frame.setVisible(true);
      m_GraphVisualizers.add(frame);
    }
  }
);
  final JMenuItem jMenuItemVisualizationBoundary=new JMenuItem();
  m_jMenuVisualization.add(jMenuItemVisualizationBoundary);
  jMenuItemVisualizationBoundary.setText("BoundaryVisualizer");
  jMenuItemVisualizationBoundary.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_B,KeyEvent.CTRL_MASK));
  jMenuItemVisualizationBoundary.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      if (m_BoundaryVisualizerFrame == null) {
        jMenuItemVisualizationBoundary.setEnabled(false);
        m_BoundaryVisualizerFrame=new JFrame("BoundaryVisualizer");
        m_BoundaryVisualizerFrame.setIconImage(m_Icon);
        m_BoundaryVisualizerFrame.getContentPane().setLayout(new BorderLayout());
        final BoundaryVisualizer bv=new BoundaryVisualizer();
        m_BoundaryVisualizerFrame.getContentPane().add(bv,BorderLayout.CENTER);
        m_BoundaryVisualizerFrame.setSize(bv.getMinimumSize());
        m_BoundaryVisualizerFrame.addWindowListener(new WindowAdapter(){
          public void windowClosing(          WindowEvent w){
            bv.stopPlotting();
            m_BoundaryVisualizerFrame.dispose();
            m_BoundaryVisualizerFrame=null;
            jMenuItemVisualizationBoundary.setEnabled(true);
            checkExit();
          }
        }
);
        m_BoundaryVisualizerFrame.pack();
        m_BoundaryVisualizerFrame.setResizable(false);
        m_BoundaryVisualizerFrame.setVisible(true);
        BoundaryVisualizer.setExitIfNoWindowsOpen(false);
      }
    }
  }
);
  JMenu jMenuExtensions=new JMenu("Extensions");
  jMenuExtensions.setMnemonic(java.awt.event.KeyEvent.VK_E);
  m_jMenuBar.add(jMenuExtensions);
  jMenuExtensions.setVisible(false);
  String extensions=GenericObjectEditor.EDITOR_PROPERTIES.getProperty(MainMenuExtension.class.getName(),"");
  if (extensions.length() > 0) {
    jMenuExtensions.setVisible(true);
    String[] classnames=GenericObjectEditor.EDITOR_PROPERTIES.getProperty(MainMenuExtension.class.getName(),"").split(",");
    Hashtable<String,JMenu> submenus=new Hashtable<String,JMenu>();
    for (int i=0; i < classnames.length; i++) {
      String classname=classnames[i];
      try {
        MainMenuExtension ext=(MainMenuExtension)Class.forName(classname).newInstance();
        JMenu submenu=null;
        if (ext.getSubmenuTitle() != null) {
          submenu=submenus.get(ext.getSubmenuTitle());
          if (submenu == null) {
            submenu=new JMenu(ext.getSubmenuTitle());
            submenus.put(ext.getSubmenuTitle(),submenu);
            insertMenuItem(jMenuExtensions,submenu);
          }
        }
        JMenuItem menuitem=new JMenuItem();
        menuitem.setText(ext.getMenuTitle());
        ActionListener listener=ext.getActionListener(m_Self);
        if (listener != null) {
          menuitem.addActionListener(listener);
        }
 else {
          final JMenuItem finalMenuitem=menuitem;
          final MainMenuExtension finalExt=ext;
          menuitem.addActionListener(new ActionListener(){
            public void actionPerformed(            ActionEvent e){
              Component frame=createFrame(m_Self,finalMenuitem.getText(),null,null,null,-1,-1,null,false,false);
              finalExt.fillFrame(frame);
              frame.setVisible(true);
            }
          }
);
        }
        if (submenu != null)         insertMenuItem(submenu,menuitem);
 else         insertMenuItem(jMenuExtensions,menuitem);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
  }
  m_jMenuTools=new JMenu();
  m_jMenuBar.add(m_jMenuTools);
  m_jMenuTools.setText("Tools");
  m_jMenuTools.setMnemonic('T');
  final JMenuItem jMenuItemToolsPackageManager=new JMenuItem();
  m_jMenuTools.add(jMenuItemToolsPackageManager);
  jMenuItemToolsPackageManager.setText("Package manager");
  jMenuItemToolsPackageManager.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_U,KeyEvent.CTRL_MASK));
  jMenuItemToolsPackageManager.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      if (m_PackageManagerFrame == null) {
        jMenuItemToolsPackageManager.setEnabled(false);
        Thread temp=new Thread(){
          public void run(){
            final weka.gui.PackageManager pm;
            pm=new weka.gui.PackageManager();
            m_PackageManagerFrame=new JFrame("Package Manager");
            m_PackageManagerFrame.setIconImage(m_Icon);
            m_PackageManagerFrame.getContentPane().setLayout(new BorderLayout());
            m_PackageManagerFrame.getContentPane().add(pm,BorderLayout.CENTER);
            m_PackageManagerFrame.addWindowListener(new WindowAdapter(){
              public void windowClosing(              WindowEvent w){
                m_PackageManagerFrame.dispose();
                m_PackageManagerFrame=null;
                jMenuItemToolsPackageManager.setEnabled(true);
                checkExit();
              }
            }
);
            Dimension screenSize=m_PackageManagerFrame.getToolkit().getScreenSize();
            int width=screenSize.width * 8 / 10;
            int height=screenSize.height * 8 / 10;
            m_PackageManagerFrame.setBounds(width / 8,height / 8,width,height);
            m_PackageManagerFrame.setVisible(true);
            pm.setInitialSplitPaneDividerLocation();
          }
        }
;
        temp.start();
      }
    }
  }
);
  JMenuItem jMenuItemToolsArffViewer=new JMenuItem();
  m_jMenuTools.add(jMenuItemToolsArffViewer);
  jMenuItemToolsArffViewer.setText("ArffViewer");
  jMenuItemToolsArffViewer.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_A,KeyEvent.CTRL_MASK));
  jMenuItemToolsArffViewer.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      final ArffViewer av=new ArffViewer();
      av.addWindowListener(new WindowAdapter(){
        public void windowClosing(        WindowEvent w){
          m_ArffViewers.remove(av);
          checkExit();
        }
      }
);
      av.setVisible(true);
      m_ArffViewers.add(av);
    }
  }
);
  final JMenuItem jMenuItemToolsSql=new JMenuItem();
  m_jMenuTools.add(jMenuItemToolsSql);
  jMenuItemToolsSql.setText("SqlViewer");
  jMenuItemToolsSql.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S,KeyEvent.CTRL_MASK));
  jMenuItemToolsSql.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      if (m_SqlViewerFrame == null) {
        jMenuItemToolsSql.setEnabled(false);
        final SqlViewer sql=new SqlViewer(null);
        m_SqlViewerFrame=new JFrame("SqlViewer");
        m_SqlViewerFrame.setIconImage(m_Icon);
        m_SqlViewerFrame.getContentPane().setLayout(new BorderLayout());
        m_SqlViewerFrame.getContentPane().add(sql,BorderLayout.CENTER);
        m_SqlViewerFrame.addWindowListener(new WindowAdapter(){
          public void windowClosing(          WindowEvent w){
            sql.saveSize();
            m_SqlViewerFrame.dispose();
            m_SqlViewerFrame=null;
            jMenuItemToolsSql.setEnabled(true);
            checkExit();
          }
        }
);
        m_SqlViewerFrame.pack();
        m_SqlViewerFrame.setVisible(true);
      }
    }
  }
);
  final JMenuItem jMenuItemBayesNet=new JMenuItem();
  m_jMenuTools.add(jMenuItemBayesNet);
  jMenuItemBayesNet.setText("Bayes net editor");
  jMenuItemBayesNet.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_N,KeyEvent.CTRL_MASK));
  jMenuItemBayesNet.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      if (m_BayesNetGUIFrame == null) {
        jMenuItemBayesNet.setEnabled(false);
        final GUI bayesNetGUI=new GUI();
        JMenuBar bayesBar=bayesNetGUI.getMenuBar();
        m_BayesNetGUIFrame=new JFrame("Bayes Network Editor");
        m_BayesNetGUIFrame.setIconImage(m_Icon);
        m_BayesNetGUIFrame.setJMenuBar(bayesBar);
        m_BayesNetGUIFrame.getContentPane().add(bayesNetGUI,BorderLayout.CENTER);
        m_BayesNetGUIFrame.addWindowListener(new WindowAdapter(){
          public void windowClosing(          WindowEvent w){
            m_BayesNetGUIFrame.dispose();
            m_BayesNetGUIFrame=null;
            jMenuItemBayesNet.setEnabled(true);
            checkExit();
          }
        }
);
        m_BayesNetGUIFrame.setSize(800,600);
        m_BayesNetGUIFrame.setVisible(true);
      }
    }
  }
);
  if (Groovy.isPresent()) {
    final JMenuItem jMenuItemGroovyConsole=new JMenuItem();
    m_jMenuTools.add(jMenuItemGroovyConsole);
    jMenuItemGroovyConsole.setText("Groovy console");
    jMenuItemGroovyConsole.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_G,KeyEvent.CTRL_MASK));
    jMenuItemGroovyConsole.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        if (m_BayesNetGUIFrame == null) {
          jMenuItemGroovyConsole.setEnabled(false);
          final GroovyPanel groovyPanel=new GroovyPanel();
          m_GroovyConsoleFrame=new JFrame(groovyPanel.getPlainTitle());
          m_GroovyConsoleFrame.setIconImage(m_Icon);
          m_GroovyConsoleFrame.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
          m_GroovyConsoleFrame.setJMenuBar(groovyPanel.getMenuBar());
          m_GroovyConsoleFrame.getContentPane().add(groovyPanel,BorderLayout.CENTER);
          m_GroovyConsoleFrame.addWindowListener(new WindowAdapter(){
            public void windowClosed(            WindowEvent w){
              m_GroovyConsoleFrame=null;
              jMenuItemGroovyConsole.setEnabled(true);
              checkExit();
            }
          }
);
          m_GroovyConsoleFrame.setSize(800,600);
          m_GroovyConsoleFrame.setVisible(true);
        }
      }
    }
);
  }
  if (Jython.isPresent()) {
    final JMenuItem jMenuItemJythonConsole=new JMenuItem();
    m_jMenuTools.add(jMenuItemJythonConsole);
    jMenuItemJythonConsole.setText("Jython console");
    jMenuItemJythonConsole.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_J,KeyEvent.CTRL_MASK));
    jMenuItemJythonConsole.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        if (m_BayesNetGUIFrame == null) {
          jMenuItemJythonConsole.setEnabled(false);
          final JythonPanel jythonPanel=new JythonPanel();
          m_JythonConsoleFrame=new JFrame(jythonPanel.getPlainTitle());
          m_JythonConsoleFrame.setIconImage(m_Icon);
          m_JythonConsoleFrame.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
          m_JythonConsoleFrame.setJMenuBar(jythonPanel.getMenuBar());
          m_JythonConsoleFrame.getContentPane().add(jythonPanel,BorderLayout.CENTER);
          m_JythonConsoleFrame.addWindowListener(new WindowAdapter(){
            public void windowClosed(            WindowEvent w){
              m_JythonConsoleFrame=null;
              jMenuItemJythonConsole.setEnabled(true);
              checkExit();
            }
          }
);
          m_JythonConsoleFrame.setSize(800,600);
          m_JythonConsoleFrame.setVisible(true);
        }
      }
    }
);
  }
  m_jMenuHelp=new JMenu();
  m_jMenuBar.add(m_jMenuHelp);
  m_jMenuHelp.setText("Help");
  m_jMenuHelp.setMnemonic('H');
  JMenuItem jMenuItemHelpHomepage=new JMenuItem();
  m_jMenuHelp.add(jMenuItemHelpHomepage);
  jMenuItemHelpHomepage.setText("Weka homepage");
  jMenuItemHelpHomepage.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_H,KeyEvent.CTRL_MASK));
  jMenuItemHelpHomepage.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      BrowserHelper.openURL("http://www.cs.waikato.ac.nz/~ml/weka/");
    }
  }
);
  m_jMenuHelp.add(new JSeparator());
  JMenuItem jMenuItemHelpWekaWiki=new JMenuItem();
  m_jMenuHelp.add(jMenuItemHelpWekaWiki);
  jMenuItemHelpWekaWiki.setText("HOWTOs, code snippets, etc.");
  jMenuItemHelpWekaWiki.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_W,KeyEvent.CTRL_MASK));
  jMenuItemHelpWekaWiki.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      BrowserHelper.openURL("http://weka.wikispaces.com/");
    }
  }
);
  JMenuItem jMenuItemHelpSourceforge=new JMenuItem();
  m_jMenuHelp.add(jMenuItemHelpSourceforge);
  jMenuItemHelpSourceforge.setText("Weka on Sourceforge");
  jMenuItemHelpSourceforge.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_F,KeyEvent.CTRL_MASK));
  jMenuItemHelpSourceforge.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      BrowserHelper.openURL("http://sourceforge.net/projects/weka/");
    }
  }
);
  final JMenuItem jMenuItemHelpSysInfo=new JMenuItem();
  m_jMenuHelp.add(jMenuItemHelpSysInfo);
  jMenuItemHelpSysInfo.setText("SystemInfo");
  jMenuItemHelpSysInfo.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_I,KeyEvent.CTRL_MASK));
  jMenuItemHelpSysInfo.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      if (m_SystemInfoFrame == null) {
        jMenuItemHelpSysInfo.setEnabled(false);
        m_SystemInfoFrame=new JFrame("SystemInfo");
        m_SystemInfoFrame.setIconImage(m_Icon);
        m_SystemInfoFrame.getContentPane().setLayout(new BorderLayout());
        Hashtable info=new SystemInfo().getSystemInfo();
        Vector names=new Vector();
        Enumeration enm=info.keys();
        while (enm.hasMoreElements())         names.add(enm.nextElement());
        Collections.sort(names);
        String[][] data=new String[info.size()][2];
        for (int i=0; i < names.size(); i++) {
          data[i][0]=names.get(i).toString();
          data[i][1]=info.get(data[i][0]).toString();
        }
        String[] titles=new String[]{"Key","Value"};
        JTable table=new JTable(data,titles);
        m_SystemInfoFrame.getContentPane().add(new JScrollPane(table),BorderLayout.CENTER);
        m_SystemInfoFrame.addWindowListener(new WindowAdapter(){
          public void windowClosing(          WindowEvent w){
            m_SystemInfoFrame.dispose();
            m_SystemInfoFrame=null;
            jMenuItemHelpSysInfo.setEnabled(true);
            checkExit();
          }
        }
);
        m_SystemInfoFrame.pack();
        m_SystemInfoFrame.setSize(800,600);
        m_SystemInfoFrame.setVisible(true);
      }
    }
  }
);
  m_ExplorerBut.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      showExplorer(null);
    }
  }
);
  m_ExperimenterBut.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      if (m_ExperimenterFrame == null) {
        m_ExperimenterBut.setEnabled(false);
        m_ExperimenterFrame=new JFrame("Weka Experiment Environment");
        m_ExperimenterFrame.setIconImage(m_Icon);
        m_ExperimenterFrame.getContentPane().setLayout(new BorderLayout());
        m_ExperimenterFrame.getContentPane().add(new Experimenter(false),BorderLayout.CENTER);
        m_ExperimenterFrame.addWindowListener(new WindowAdapter(){
          public void windowClosing(          WindowEvent w){
            m_ExperimenterFrame.dispose();
            m_ExperimenterFrame=null;
            m_ExperimenterBut.setEnabled(true);
            checkExit();
          }
        }
);
        m_ExperimenterFrame.pack();
        m_ExperimenterFrame.setSize(800,600);
        m_ExperimenterFrame.setVisible(true);
      }
    }
  }
);
  KnowledgeFlowApp.addStartupListener(new weka.gui.beans.StartUpListener(){
    public void startUpComplete(){
      if (m_KnowledgeFlowFrame == null) {
        final KnowledgeFlowApp kna=KnowledgeFlowApp.getSingleton();
        m_KnowledgeFlowBut.setEnabled(false);
        if (m_pendingKnowledgeFlowLoad != null && m_pendingKnowledgeFlowLoad.length() > 0) {
          KnowledgeFlowApp.getSingleton().loadLayout(new File(m_pendingKnowledgeFlowLoad),true);
          m_pendingKnowledgeFlowLoad=null;
        }
        m_KnowledgeFlowFrame=new JFrame("Weka KnowledgeFlow Environment");
        m_KnowledgeFlowFrame.setIconImage(m_Icon);
        m_KnowledgeFlowFrame.getContentPane().setLayout(new BorderLayout());
        m_KnowledgeFlowFrame.getContentPane().add(kna,BorderLayout.CENTER);
        m_KnowledgeFlowFrame.addWindowListener(new WindowAdapter(){
          public void windowClosing(          WindowEvent w){
            kna.closeAllTabs();
            kna.clearLayout();
            m_KnowledgeFlowFrame.dispose();
            m_KnowledgeFlowFrame=null;
            m_KnowledgeFlowBut.setEnabled(true);
            checkExit();
          }
        }
);
        m_KnowledgeFlowFrame.pack();
        m_KnowledgeFlowFrame.setSize(1000,750);
        m_KnowledgeFlowFrame.setVisible(true);
      }
    }
  }
);
  m_KnowledgeFlowBut.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      showKnowledgeFlow(null);
    }
  }
);
  m_SimpleBut.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      if (m_SimpleCLI == null) {
        m_SimpleBut.setEnabled(false);
        try {
          m_SimpleCLI=new SimpleCLI();
          m_SimpleCLI.setIconImage(m_Icon);
        }
 catch (        Exception ex) {
          throw new Error("Couldn't start SimpleCLI!");
        }
        m_SimpleCLI.addWindowListener(new WindowAdapter(){
          public void windowClosing(          WindowEvent w){
            m_SimpleCLI.dispose();
            m_SimpleCLI=null;
            m_SimpleBut.setEnabled(true);
            checkExit();
          }
        }
);
        m_SimpleCLI.setVisible(true);
      }
    }
  }
);
  setJMenuBar(m_jMenuBar);
  addWindowListener(new WindowAdapter(){
    public void windowClosing(    WindowEvent w){
      dispose();
      checkExit();
    }
  }
);
  pack();
  if (!Utils.getDontShowDialog("weka.gui.GUIChooser.HowToFindPackageManager")) {
    Thread tipThread=new Thread(){
      public void run(){
        JCheckBox dontShow=new JCheckBox("Do not show this message again");
        Object[] stuff=new Object[2];
        stuff[0]="Weka has a package manager that you\n" + "can use to install many learning schemes and tools.\nThe package manager can be " + "found under the \"Tools\" menu.\n";
        stuff[1]=dontShow;
        JOptionPane.showMessageDialog(GUIChooser.this,stuff,"Weka GUIChooser",JOptionPane.OK_OPTION);
        if (dontShow.isSelected()) {
          try {
            Utils.setDontShowDialog("weka.gui.GUIChooser.HowToFindPackageManager");
          }
 catch (          Exception ex) {
          }
        }
      }
    }
;
    tipThread.setPriority(Thread.MIN_PRIORITY);
    tipThread.start();
  }
}
