{
  SimpleOrderedMap<Object> info=new SimpleOrderedMap<Object>();
  long tid=ti.getThreadId();
  info.add("id",tid);
  info.add("name",ti.getThreadName());
  info.add("state",ti.getThreadState().toString());
  if (ti.getLockName() != null) {
    info.add("lock",ti.getLockName());
  }
  if (ti.isSuspended()) {
    info.add("suspended",true);
  }
  if (ti.isInNative()) {
    info.add("native",true);
  }
  if (tmbean.isThreadCpuTimeSupported()) {
    info.add("cpuTime",formatNanos(tmbean.getThreadCpuTime(tid)));
    info.add("userTime",formatNanos(tmbean.getThreadUserTime(tid)));
  }
  if (ti.getLockOwnerName() != null) {
    SimpleOrderedMap<Object> owner=new SimpleOrderedMap<Object>();
    owner.add("name",ti.getLockOwnerName());
    owner.add("id",ti.getLockOwnerId());
  }
  int i=0;
  String[] trace=new String[ti.getStackTrace().length];
  for (  StackTraceElement ste : ti.getStackTrace()) {
    trace[i++]=ste.toString();
  }
  info.add("stackTrace",trace);
  return info;
}
