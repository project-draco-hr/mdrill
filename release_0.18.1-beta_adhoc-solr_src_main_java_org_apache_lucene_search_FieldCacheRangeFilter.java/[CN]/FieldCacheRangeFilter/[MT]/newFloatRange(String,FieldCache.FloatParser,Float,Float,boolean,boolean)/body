{
  return new FieldCacheRangeFilter<Float>(field,parser,lowerVal,upperVal,includeLower,includeUpper){
    @Override public DocIdSet getDocIdSet(    IndexReader reader) throws IOException {
      final float inclusiveLowerPoint, inclusiveUpperPoint;
      if (lowerVal != null) {
        float f=lowerVal.floatValue();
        if (!includeUpper && f > 0.0f && Float.isInfinite(f))         return DocIdSet.EMPTY_DOCIDSET;
        int i=NumericUtils.floatToSortableInt(f);
        inclusiveLowerPoint=NumericUtils.sortableIntToFloat(includeLower ? i : (i + 1));
      }
 else {
        inclusiveLowerPoint=Float.NEGATIVE_INFINITY;
      }
      if (upperVal != null) {
        float f=upperVal.floatValue();
        if (!includeUpper && f < 0.0f && Float.isInfinite(f))         return DocIdSet.EMPTY_DOCIDSET;
        int i=NumericUtils.floatToSortableInt(f);
        inclusiveUpperPoint=NumericUtils.sortableIntToFloat(includeUpper ? i : (i - 1));
      }
 else {
        inclusiveUpperPoint=Float.POSITIVE_INFINITY;
      }
      if (inclusiveLowerPoint > inclusiveUpperPoint)       return DocIdSet.EMPTY_DOCIDSET;
      final float[] values=FieldCache.DEFAULT.getFloats(reader,field,(FieldCache.FloatParser)parser);
      return new FieldCacheDocIdSet(reader,(inclusiveLowerPoint <= 0.0f && inclusiveUpperPoint >= 0.0f)){
        @Override boolean matchDoc(        int doc){
          return values[doc] >= inclusiveLowerPoint && values[doc] <= inclusiveUpperPoint;
        }
      }
;
    }
  }
;
}
