{
  final long begintime=System.currentTimeMillis();
  Callable<ShardResponse> task=new Callable<ShardResponse>(){
    public ShardResponse call() throws Exception {
      ShardResponse srsp=new ShardResponse();
      srsp.setShardRequest(sreq);
      srsp.setShard(shard);
      SimpleSolrResponse ssr=new SimpleSolrResponse();
      srsp.setSolrResponse(ssr);
      long startTime=System.currentTimeMillis();
      String[] shardparams=shard.split("@");
      String url="http://" + shardparams[0];
      try {
        params.set("__higo_ms_depth__",(depth + 1));
        HttpCommComponent.setupParams(params,shardparams);
        HttpClient cli=HttpCommComponent.makeHttpClient();
        SolrServer server=new CommonsHttpSolrServer(url,cli);
        QueryRequest req=new QueryRequest(params);
        req.setMethod(SolrRequest.METHOD.POST);
        ssr.nl=server.request(req);
        cli.getHttpConnectionManager().closeIdleConnections(0);
        Map<String,String> timetaken=(Map<String,String>)ssr.nl.get("mdrill_shard_time");
        if (timetaken == null) {
          timetaken=new LinkedHashMap<String,String>();
          ssr.nl.add("mdrill_shard_time",timetaken);
        }
        long t2=System.currentTimeMillis();
        long timetake=t2 - startTime;
        long waittime=startTime - begintime;
        timetaken.put(String.valueOf(depth) + "@" + shard,String.valueOf(timetake) + "@" + waittime);
        SearchHandler.log.info("##HttpClient## timetaken=" + (timetake) + "@"+ waittime+ ",shard:"+ shard);
      }
 catch (      RuntimeException th) {
        SearchHandler.log.error(shard + "@" + params.toString(),th);
        srsp.setException(new Exception(shard,th));
        srsp.setResponseCode(-1);
      }
catch (      Throwable th) {
        SearchHandler.log.error(shard + "@" + params.toString(),th);
        srsp.setException(new Exception(shard,th));
        if (th instanceof SolrException) {
          srsp.setResponseCode(((SolrException)th).code());
        }
 else {
          srsp.setResponseCode(-1);
        }
      }
      ssr.elapsedTime=System.currentTimeMillis() - startTime;
      return srsp;
    }
  }
;
  pending.add(completionService.submit(task));
}
