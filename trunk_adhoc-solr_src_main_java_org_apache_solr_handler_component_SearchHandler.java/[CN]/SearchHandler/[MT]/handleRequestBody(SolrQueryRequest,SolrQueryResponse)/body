{
  ResponseBuilder rb=new ResponseBuilder();
  rb.req=req;
  rb.rsp=rsp;
  rb.components=components;
  rb.setDebug(false);
  for (  SearchComponent c : components) {
    c.prepare(rb);
  }
  SolrParams paramsr=req.getParams();
  String shards=paramsr.get(ShardParams.SHARDS);
  if (shards == null) {
    for (    SearchComponent c : components) {
      c.process(rb);
    }
    return;
  }
  String mergeServers=paramsr.get(FacetParams.MERGER_SERVERS);
  if (shards != null) {
    List<String> lst=StrUtils.splitSmart(shards,",",true);
    List<String> mslist=lst;
    if (mergeServers != null) {
      mslist=StrUtils.splitSmart(mergeServers,",",true);
    }
    MergerSchedule.schedule(paramsr,lst,mslist,rb);
  }
  int depth=req.getParams().getInt("__higo_ms_depth__",0);
  HttpCommComponent comm=new HttpCommComponent(depth);
  ShardRequest sreq=new ShardRequest();
  sreq.params=new ModifiableSolrParams(rb.req.getParams());
  for (  SearchComponent c : components) {
    c.modifyRequest(rb,c,sreq);
    c.distributedProcess(rb);
  }
  sreq.actualShards=rb.shards;
  sreq.responses=new ArrayList<ShardResponse>();
  for (int i=0; i < sreq.actualShards.length; i++) {
    String shard=sreq.actualShards[i];
    ModifiableSolrParams params=new ModifiableSolrParams(sreq.params);
    params.remove(ShardParams.SHARDS);
    params.remove("indent");
    params.remove(CommonParams.HEADER_ECHO_PARAMS);
    params.set(ShardParams.IS_SHARD,true);
    if (rb.issubshard) {
      params.set(ShardParams.SHARDS,rb.subShards[i]);
      params.set(FacetParams.IS_SUB_SHARDS,true);
      if (params.getBool("fetchfdt",false)) {
        int offset=params.getInt(FacetParams.FACET_CROSS_OFFSET,0);
        int limit=params.getInt(FacetParams.FACET_CROSS_LIMIT,0);
        params.remove(FacetParams.FACET_CROSS_OFFSET);
        params.remove(FacetParams.FACET_CROSS_LIMIT);
        params.set(FacetParams.FACET_CROSS_OFFSET,0);
        params.set(FacetParams.FACET_CROSS_LIMIT,offset + limit);
      }
 else {
        params.set(FacetParams.FACET_CROSS_OFFSET,0);
        int maxlimit=MdrillGroupBy.MAX_CROSS_ROWS;
        params.set(FacetParams.FACET_CROSS_LIMIT,maxlimit);
      }
    }
    params.remove(CommonParams.QT);
    comm.submit(sreq,shard,params,depth);
  }
  while (true) {
    ShardResponse srsp=comm.takeCompletedOrError();
    if (srsp == null) {
      break;
    }
    if (srsp.getException() != null) {
      comm.cancelAll();
      if (srsp.getException() instanceof SolrException) {
        throw (SolrException)srsp.getException();
      }
 else {
        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,srsp.getException());
      }
    }
    for (    SearchComponent c : components) {
      c.handleResponses(rb,srsp.getShardRequest());
    }
  }
  for (  SearchComponent c : components) {
    c.finishStage(rb);
  }
}
