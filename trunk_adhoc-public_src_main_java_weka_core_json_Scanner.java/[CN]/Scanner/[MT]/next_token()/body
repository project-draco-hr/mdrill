{
  int zzInput;
  int zzAction;
  int zzCurrentPosL;
  int zzMarkedPosL;
  int zzEndReadL=zzEndRead;
  char[] zzBufferL=zzBuffer;
  char[] zzCMapL=ZZ_CMAP;
  int[] zzTransL=ZZ_TRANS;
  int[] zzRowMapL=ZZ_ROWMAP;
  int[] zzAttrL=ZZ_ATTRIBUTE;
  while (true) {
    zzMarkedPosL=zzMarkedPos;
    zzAction=-1;
    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;
    zzState=ZZ_LEXSTATE[zzLexicalState];
    zzForAction: {
      while (true) {
        if (zzCurrentPosL < zzEndReadL)         zzInput=zzBufferL[zzCurrentPosL++];
 else         if (zzAtEOF) {
          zzInput=YYEOF;
          break zzForAction;
        }
 else {
          zzCurrentPos=zzCurrentPosL;
          zzMarkedPos=zzMarkedPosL;
          boolean eof=zzRefill();
          zzCurrentPosL=zzCurrentPos;
          zzMarkedPosL=zzMarkedPos;
          zzBufferL=zzBuffer;
          zzEndReadL=zzEndRead;
          if (eof) {
            zzInput=YYEOF;
            break zzForAction;
          }
 else {
            zzInput=zzBufferL[zzCurrentPosL++];
          }
        }
        int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
        if (zzNext == -1)         break zzForAction;
        zzState=zzNext;
        int zzAttributes=zzAttrL[zzState];
        if ((zzAttributes & 1) == 1) {
          zzAction=zzState;
          zzMarkedPosL=zzCurrentPosL;
          if ((zzAttributes & 8) == 8)           break zzForAction;
        }
      }
    }
    zzMarkedPos=zzMarkedPosL;
switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
case 20:
{
        m_String.append('\b');
      }
case 23:
    break;
case 7:
{
    return m_SF.newSymbol("Colon",sym.COLON);
  }
case 24:
break;
case 13:
{
m_String.append('\\');
}
case 25:
break;
case 22:
{
return m_SF.newSymbol("Boolean",sym.BOOLEAN,new Boolean(yytext()));
}
case 26:
break;
case 14:
{
return m_SF.newSymbol("Double",sym.DOUBLE,new Double(yytext()));
}
case 27:
break;
case 17:
{
m_String.append('\r');
}
case 28:
break;
case 3:
{
return m_SF.newSymbol("Right curly bracket",sym.RCURLY);
}
case 29:
break;
case 19:
{
m_String.append('\"');
}
case 30:
break;
case 1:
{
System.err.println("Illegal character: " + yytext());
}
case 31:
break;
case 18:
{
m_String.append('\f');
}
case 32:
break;
case 21:
{
return m_SF.newSymbol("Null",sym.NULL);
}
case 33:
break;
case 16:
{
m_String.append('\t');
}
case 34:
break;
case 4:
{
return m_SF.newSymbol("Left square bracket",sym.LSQUARE);
}
case 35:
break;
case 12:
{
yybegin(YYINITIAL);
return m_SF.newSymbol("String",sym.STRING,m_String.toString());
}
case 36:
break;
case 15:
{
m_String.append('\n');
}
case 37:
break;
case 2:
{
return m_SF.newSymbol("Left curly bracket",sym.LCURLY);
}
case 38:
break;
case 6:
{
return m_SF.newSymbol("Comma",sym.COMMA);
}
case 39:
break;
case 8:
{
return m_SF.newSymbol("Integer",sym.INTEGER,new Integer(yytext()));
}
case 40:
break;
case 9:
{
m_String.setLength(0);
yybegin(STRING);
}
case 41:
break;
case 11:
{
m_String.append(yytext());
}
case 42:
break;
case 10:
{
}
case 43:
break;
case 5:
{
return m_SF.newSymbol("Right square bracket",sym.RSQUARE);
}
case 44:
break;
default :
if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
zzAtEOF=true;
{
return m_SF.newSymbol("EOF",sym.EOF);
}
}
 else {
zzScanError(ZZ_NO_MATCH);
}
}
}
}
