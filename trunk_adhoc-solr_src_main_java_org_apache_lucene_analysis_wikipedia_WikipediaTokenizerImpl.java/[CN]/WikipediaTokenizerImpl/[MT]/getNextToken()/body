{
  int zzInput;
  int zzAction;
  int zzCurrentPosL;
  int zzMarkedPosL;
  int zzEndReadL=zzEndRead;
  char[] zzBufferL=zzBuffer;
  char[] zzCMapL=ZZ_CMAP;
  int[] zzTransL=ZZ_TRANS;
  int[] zzRowMapL=ZZ_ROWMAP;
  int[] zzAttrL=ZZ_ATTRIBUTE;
  while (true) {
    zzMarkedPosL=zzMarkedPos;
    yychar+=zzMarkedPosL - zzStartRead;
    zzAction=-1;
    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;
    zzState=ZZ_LEXSTATE[zzLexicalState];
    int zzAttributes=zzAttrL[zzState];
    if ((zzAttributes & 1) == 1) {
      zzAction=zzState;
    }
    zzForAction: {
      while (true) {
        if (zzCurrentPosL < zzEndReadL)         zzInput=zzBufferL[zzCurrentPosL++];
 else         if (zzAtEOF) {
          zzInput=YYEOF;
          break zzForAction;
        }
 else {
          zzCurrentPos=zzCurrentPosL;
          zzMarkedPos=zzMarkedPosL;
          boolean eof=zzRefill();
          zzCurrentPosL=zzCurrentPos;
          zzMarkedPosL=zzMarkedPos;
          zzBufferL=zzBuffer;
          zzEndReadL=zzEndRead;
          if (eof) {
            zzInput=YYEOF;
            break zzForAction;
          }
 else {
            zzInput=zzBufferL[zzCurrentPosL++];
          }
        }
        int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
        if (zzNext == -1)         break zzForAction;
        zzState=zzNext;
        zzAttributes=zzAttrL[zzState];
        if ((zzAttributes & 1) == 1) {
          zzAction=zzState;
          zzMarkedPosL=zzCurrentPosL;
          if ((zzAttributes & 8) == 8)           break zzForAction;
        }
      }
    }
    zzMarkedPos=zzMarkedPosL;
switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
case 44:
{
        numWikiTokensSeen=0;
        positionInc=1;
        currentTokType=CATEGORY;
        yybegin(CATEGORY_STATE);
        break;
      }
case 47:
    break;
case 37:
{
    currentTokType=BOLD_ITALICS;
    yybegin(FIVE_SINGLE_QUOTES_STATE);
    break;
  }
case 48:
break;
case 16:
{
currentTokType=HEADING;
yybegin(DOUBLE_EQUALS_STATE);
numWikiTokensSeen++;
return currentTokType;
}
case 49:
break;
case 20:
{
numBalanced=0;
numWikiTokensSeen=0;
currentTokType=EXTERNAL_LINK;
yybegin(EXTERNAL_LINK_STATE);
break;
}
case 50:
break;
case 40:
{
positionInc=1;
return ACRONYM;
}
case 51:
break;
case 5:
{
positionInc=1;
break;
}
case 52:
break;
case 36:
{
positionInc=1;
return COMPANY;
}
case 53:
break;
case 10:
{
numLinkToks=0;
positionInc=0;
yybegin(YYINITIAL);
break;
}
case 54:
break;
case 15:
{
currentTokType=SUB_HEADING;
numWikiTokensSeen=0;
yybegin(STRING);
break;
}
case 55:
break;
case 22:
{
numWikiTokensSeen=0;
positionInc=1;
if (numBalanced == 0) {
numBalanced++;
yybegin(TWO_SINGLE_QUOTES_STATE);
}
 else {
numBalanced=0;
}
break;
}
case 56:
break;
case 35:
{
positionInc=1;
return NUM;
}
case 57:
break;
case 33:
{
positionInc=1;
return APOSTROPHE;
}
case 58:
break;
case 21:
{
yybegin(STRING);
return currentTokType;
}
case 59:
break;
case 18:
{
break;
}
case 60:
break;
case 2:
{
positionInc=1;
return ALPHANUM;
}
case 61:
break;
case 1:
{
numWikiTokensSeen=0;
positionInc=1;
break;
}
case 62:
break;
case 17:
{
yybegin(DOUBLE_BRACE_STATE);
numWikiTokensSeen=0;
return currentTokType;
}
case 63:
break;
case 39:
{
numBalanced=0;
currentTokType=ALPHANUM;
yybegin(YYINITIAL);
break;
}
case 64:
break;
case 29:
{
currentTokType=INTERNAL_LINK;
numWikiTokensSeen=0;
yybegin(INTERNAL_LINK_STATE);
break;
}
case 65:
break;
case 46:
{
numBalanced=0;
numWikiTokensSeen=0;
currentTokType=CATEGORY;
yybegin(CATEGORY_STATE);
break;
}
case 66:
break;
case 27:
{
numLinkToks=0;
yybegin(YYINITIAL);
break;
}
case 67:
break;
case 4:
{
numWikiTokensSeen=0;
positionInc=1;
currentTokType=EXTERNAL_LINK_URL;
yybegin(EXTERNAL_LINK_STATE);
break;
}
case 68:
break;
case 38:
{
numBalanced=0;
currentTokType=ALPHANUM;
yybegin(YYINITIAL);
break;
}
case 69:
break;
case 13:
{
currentTokType=EXTERNAL_LINK;
numWikiTokensSeen=0;
yybegin(EXTERNAL_LINK_STATE);
break;
}
case 70:
break;
case 3:
{
positionInc=1;
return CJ;
}
case 71:
break;
case 45:
{
currentTokType=CATEGORY;
numWikiTokensSeen=0;
yybegin(CATEGORY_STATE);
break;
}
case 72:
break;
case 6:
{
yybegin(CATEGORY_STATE);
numWikiTokensSeen++;
return currentTokType;
}
case 73:
break;
case 11:
{
currentTokType=BOLD;
yybegin(THREE_SINGLE_QUOTES_STATE);
break;
}
case 74:
break;
case 25:
{
numWikiTokensSeen=0;
positionInc=1;
currentTokType=CITATION;
yybegin(DOUBLE_BRACE_STATE);
break;
}
case 75:
break;
case 8:
{
break;
}
case 76:
break;
case 19:
{
yybegin(STRING);
numWikiTokensSeen++;
return currentTokType;
}
case 77:
break;
case 43:
{
positionInc=1;
numWikiTokensSeen++;
yybegin(EXTERNAL_LINK_STATE);
return currentTokType;
}
case 78:
break;
case 42:
{
numBalanced=0;
currentTokType=ALPHANUM;
yybegin(YYINITIAL);
break;
}
case 79:
break;
case 30:
{
yybegin(YYINITIAL);
break;
}
case 80:
break;
case 14:
{
yybegin(STRING);
numWikiTokensSeen++;
return currentTokType;
}
case 81:
break;
case 9:
{
if (numLinkToks == 0) {
positionInc=0;
}
 else {
positionInc=1;
}
numWikiTokensSeen++;
currentTokType=EXTERNAL_LINK;
yybegin(EXTERNAL_LINK_STATE);
numLinkToks++;
return currentTokType;
}
case 82:
break;
case 7:
{
yybegin(INTERNAL_LINK_STATE);
numWikiTokensSeen++;
return currentTokType;
}
case 83:
break;
case 41:
{
positionInc=1;
return EMAIL;
}
case 84:
break;
case 28:
{
currentTokType=INTERNAL_LINK;
numWikiTokensSeen=0;
yybegin(INTERNAL_LINK_STATE);
break;
}
case 85:
break;
case 23:
{
numWikiTokensSeen=0;
positionInc=1;
yybegin(DOUBLE_EQUALS_STATE);
break;
}
case 86:
break;
case 34:
{
positionInc=1;
return HOST;
}
case 87:
break;
case 32:
{
numBalanced=0;
numWikiTokensSeen=0;
currentTokType=INTERNAL_LINK;
yybegin(INTERNAL_LINK_STATE);
break;
}
case 88:
break;
case 12:
{
currentTokType=ITALICS;
numWikiTokensSeen++;
yybegin(STRING);
return currentTokType;
}
case 89:
break;
case 24:
{
numWikiTokensSeen=0;
positionInc=1;
currentTokType=INTERNAL_LINK;
yybegin(INTERNAL_LINK_STATE);
break;
}
case 90:
break;
case 31:
{
numBalanced=0;
currentTokType=ALPHANUM;
yybegin(YYINITIAL);
break;
}
case 91:
break;
case 26:
{
yybegin(YYINITIAL);
break;
}
case 92:
break;
default :
if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
zzAtEOF=true;
return YYEOF;
}
 else {
zzScanError(ZZ_NO_MATCH);
}
}
}
}
