{
  m_eval.aggregate(eval);
  if (m_aggregatedPlotInstances == null) {
    m_aggregatedPlotInstances=new Instances(plotInstances.getPlotInstances());
    m_aggregatedPlotShapes=plotInstances.getPlotShapes();
    m_aggregatedPlotSizes=plotInstances.getPlotSizes();
  }
 else {
    Instances temp=plotInstances.getPlotInstances();
    for (int i=0; i < temp.numInstances(); i++) {
      m_aggregatedPlotInstances.add(temp.get(i));
      m_aggregatedPlotShapes.addElement(plotInstances.getPlotShapes().get(i));
      m_aggregatedPlotSizes.addElement(plotInstances.getPlotSizes().get(i));
    }
  }
  m_setsComplete++;
  if (m_setsComplete == maxSetNum) {
    try {
      String textTitle=classifier.getClass().getName();
      String textOptions="";
      if (classifier instanceof OptionHandler) {
        textOptions=Utils.joinOptions(((OptionHandler)classifier).getOptions());
      }
      textTitle=textTitle.substring(textTitle.lastIndexOf('.') + 1,textTitle.length());
      String resultT="=== Evaluation result ===\n\n" + "Scheme: " + textTitle + "\n"+ ((textOptions.length() > 0) ? "Options: " + textOptions + "\n" : "")+ "Relation: "+ testData.relationName()+ "\n\n"+ m_eval.toSummaryString();
      if (testData.classAttribute().isNominal()) {
        resultT+="\n" + m_eval.toClassDetailsString() + "\n"+ m_eval.toMatrixString();
      }
      TextEvent te=new TextEvent(ClassifierPerformanceEvaluator.this,resultT,textTitle);
      notifyTextListeners(te);
      if (m_visualizableErrorListeners.size() > 0) {
        PlotData2D errorD=new PlotData2D(m_aggregatedPlotInstances);
        errorD.setShapeSize(m_aggregatedPlotSizes);
        errorD.setShapeType(m_aggregatedPlotShapes);
        errorD.setPlotName(textTitle + " " + textOptions);
        VisualizableErrorEvent vel=new VisualizableErrorEvent(ClassifierPerformanceEvaluator.this,errorD);
        notifyVisualizableErrorListeners(vel);
        m_PlotInstances.cleanUp();
      }
      if (testData.classAttribute().isNominal() && m_thresholdListeners.size() > 0) {
        ThresholdCurve tc=new ThresholdCurve();
        Instances result=tc.getCurve(m_eval.predictions(),0);
        result.setRelationName(testData.relationName());
        PlotData2D pd=new PlotData2D(result);
        String htmlTitle="<html><font size=-2>" + textTitle;
        String newOptions="";
        if (classifier instanceof OptionHandler) {
          String[] options=((OptionHandler)classifier).getOptions();
          if (options.length > 0) {
            for (int ii=0; ii < options.length; ii++) {
              if (options[ii].length() == 0) {
                continue;
              }
              if (options[ii].charAt(0) == '-' && !(options[ii].charAt(1) >= '0' && options[ii].charAt(1) <= '9')) {
                newOptions+="<br>";
              }
              newOptions+=options[ii];
            }
          }
        }
        htmlTitle+=" " + newOptions + "<br>"+ " (class: "+ testData.classAttribute().value(0)+ ")"+ "</font></html>";
        pd.setPlotName(textTitle + " (class: " + testData.classAttribute().value(0)+ ")");
        pd.setPlotNameHTML(htmlTitle);
        boolean[] connectPoints=new boolean[result.numInstances()];
        for (int jj=1; jj < connectPoints.length; jj++) {
          connectPoints[jj]=true;
        }
        pd.setConnectPoints(connectPoints);
        ThresholdDataEvent rde=new ThresholdDataEvent(ClassifierPerformanceEvaluator.this,pd,testData.classAttribute());
        notifyThresholdListeners(rde);
      }
      if (m_logger != null) {
        m_logger.statusMessage(statusMessagePrefix() + "Finished.");
      }
    }
 catch (    Exception ex) {
      if (m_logger != null) {
        m_logger.logMessage("[ClassifierPerformanceEvaluator] " + statusMessagePrefix() + " problem constructing evaluation results. "+ ex.getMessage());
      }
      ex.printStackTrace();
    }
 finally {
      m_visual.setStatic();
      m_PlotInstances=null;
      m_setsComplete=0;
      m_tasks=null;
      m_aggregatedPlotInstances=null;
    }
  }
}
