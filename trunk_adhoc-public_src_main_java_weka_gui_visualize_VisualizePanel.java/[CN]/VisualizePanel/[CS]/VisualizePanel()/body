{
  super();
  setProperties(null);
  m_FileChooser.setFileFilter(m_ArffFilter);
  m_FileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
  m_XCombo.setToolTipText("Select the attribute for the x axis");
  m_YCombo.setToolTipText("Select the attribute for the y axis");
  m_ColourCombo.setToolTipText("Select the attribute to colour on");
  m_ShapeCombo.setToolTipText("Select the shape to use for data selection");
  m_XCombo.setPreferredSize(COMBO_SIZE);
  m_YCombo.setPreferredSize(COMBO_SIZE);
  m_ColourCombo.setPreferredSize(COMBO_SIZE);
  m_ShapeCombo.setPreferredSize(COMBO_SIZE);
  m_XCombo.setMaximumSize(COMBO_SIZE);
  m_YCombo.setMaximumSize(COMBO_SIZE);
  m_ColourCombo.setMaximumSize(COMBO_SIZE);
  m_ShapeCombo.setMaximumSize(COMBO_SIZE);
  m_XCombo.setMinimumSize(COMBO_SIZE);
  m_YCombo.setMinimumSize(COMBO_SIZE);
  m_ColourCombo.setMinimumSize(COMBO_SIZE);
  m_ShapeCombo.setMinimumSize(COMBO_SIZE);
  m_XCombo.setEnabled(false);
  m_YCombo.setEnabled(false);
  m_ColourCombo.setEnabled(false);
  m_ShapeCombo.setEnabled(false);
  m_classPanel.addRepaintNotify(this);
  m_legendPanel.addRepaintNotify(this);
  for (int i=0; i < m_DefaultColors.length; i++) {
    Color c=m_DefaultColors[i];
    if (c.equals(m_plot.m_plot2D.getBackground())) {
      int red=c.getRed();
      int blue=c.getBlue();
      int green=c.getGreen();
      red+=(red < 128) ? (255 - red) / 2 : -(red / 2);
      blue+=(blue < 128) ? (blue - red) / 2 : -(blue / 2);
      green+=(green < 128) ? (255 - green) / 2 : -(green / 2);
      m_DefaultColors[i]=new Color(red,green,blue);
    }
  }
  m_classPanel.setDefaultColourList(m_DefaultColors);
  m_attrib.setDefaultColourList(m_DefaultColors);
  m_colorList=new FastVector(10);
  for (int noa=m_colorList.size(); noa < 10; noa++) {
    Color pc=m_DefaultColors[noa % 10];
    int ija=noa / 10;
    ija*=2;
    for (int j=0; j < ija; j++) {
      pc=pc.darker();
    }
    m_colorList.addElement(pc);
  }
  m_plot.setColours(m_colorList);
  m_classPanel.setColours(m_colorList);
  m_attrib.setColours(m_colorList);
  m_attrib.addAttributePanelListener(new AttributePanelListener(){
    public void attributeSelectionChange(    AttributePanelEvent e){
      if (e.m_xChange) {
        m_XCombo.setSelectedIndex(e.m_indexVal);
      }
 else {
        m_YCombo.setSelectedIndex(e.m_indexVal);
      }
    }
  }
);
  m_XCombo.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      int selected=m_XCombo.getSelectedIndex();
      if (selected < 0) {
        selected=0;
      }
      m_plot.setXindex(selected);
      if (listener != null) {
        listener.actionPerformed(e);
      }
    }
  }
);
  m_YCombo.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      int selected=m_YCombo.getSelectedIndex();
      if (selected < 0) {
        selected=0;
      }
      m_plot.setYindex(selected);
      if (listener != null) {
        listener.actionPerformed(e);
      }
    }
  }
);
  m_ColourCombo.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      int selected=m_ColourCombo.getSelectedIndex();
      if (selected < 0) {
        selected=0;
      }
      m_plot.setCindex(selected);
      if (listener != null) {
        listener.actionPerformed(e);
      }
    }
  }
);
  m_ShapeCombo.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      int selected=m_ShapeCombo.getSelectedIndex();
      if (selected < 0) {
        selected=0;
      }
      m_plot.setSindex(selected);
      if (listener != null) {
        listener.actionPerformed(e);
      }
    }
  }
);
  m_Jitter.addChangeListener(new ChangeListener(){
    public void stateChanged(    ChangeEvent e){
      m_plot.setJitter(m_Jitter.getValue());
    }
  }
);
  m_openBut.setToolTipText("Loads previously saved instances from a file");
  m_openBut.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      openVisibleInstances();
    }
  }
);
  m_saveBut.setEnabled(false);
  m_saveBut.setToolTipText("Save the visible instances to a file");
  m_saveBut.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      saveVisibleInstances();
    }
  }
);
  JPanel combos=new JPanel();
  GridBagLayout gb=new GridBagLayout();
  GridBagConstraints constraints=new GridBagConstraints();
  m_XCombo.setLightWeightPopupEnabled(false);
  m_YCombo.setLightWeightPopupEnabled(false);
  m_ColourCombo.setLightWeightPopupEnabled(false);
  m_ShapeCombo.setLightWeightPopupEnabled(false);
  combos.setBorder(BorderFactory.createEmptyBorder(10,5,10,5));
  combos.setLayout(gb);
  constraints.gridx=0;
  constraints.gridy=0;
  constraints.weightx=5;
  constraints.fill=GridBagConstraints.HORIZONTAL;
  constraints.gridwidth=2;
  constraints.gridheight=1;
  constraints.insets=new Insets(0,2,0,2);
  combos.add(m_XCombo,constraints);
  constraints.gridx=2;
  constraints.gridy=0;
  constraints.weightx=5;
  constraints.gridwidth=2;
  constraints.gridheight=1;
  combos.add(m_YCombo,constraints);
  constraints.gridx=0;
  constraints.gridy=1;
  constraints.weightx=5;
  constraints.gridwidth=2;
  constraints.gridheight=1;
  combos.add(m_ColourCombo,constraints);
  constraints.gridx=2;
  constraints.gridy=1;
  constraints.weightx=5;
  constraints.gridwidth=2;
  constraints.gridheight=1;
  combos.add(m_ShapeCombo,constraints);
  JPanel mbts=new JPanel();
  mbts.setLayout(new GridLayout(1,4));
  mbts.add(m_submit);
  mbts.add(m_cancel);
  mbts.add(m_openBut);
  mbts.add(m_saveBut);
  constraints.gridx=0;
  constraints.gridy=2;
  constraints.weightx=5;
  constraints.gridwidth=2;
  constraints.gridheight=1;
  combos.add(mbts,constraints);
  constraints.gridx=2;
  constraints.gridy=2;
  constraints.weightx=5;
  constraints.gridwidth=1;
  constraints.gridheight=1;
  constraints.insets=new Insets(10,0,0,5);
  combos.add(m_JitterLab,constraints);
  constraints.gridx=3;
  constraints.gridy=2;
  constraints.weightx=5;
  constraints.insets=new Insets(10,0,0,0);
  combos.add(m_Jitter,constraints);
  m_classSurround=new JPanel();
  m_classSurround.setBorder(BorderFactory.createTitledBorder("Class colour"));
  m_classSurround.setLayout(new BorderLayout());
  m_classPanel.setBorder(BorderFactory.createEmptyBorder(15,10,10,10));
  m_classSurround.add(m_classPanel,BorderLayout.CENTER);
  GridBagLayout gb2=new GridBagLayout();
  m_plotSurround.setBorder(BorderFactory.createTitledBorder("Plot"));
  m_plotSurround.setLayout(gb2);
  constraints.fill=GridBagConstraints.BOTH;
  constraints.insets=new Insets(0,0,0,10);
  constraints.gridx=0;
  constraints.gridy=0;
  constraints.weightx=3;
  constraints.gridwidth=4;
  constraints.gridheight=1;
  constraints.weighty=5;
  m_plotSurround.add(m_plot,constraints);
  if (m_showAttBars) {
    constraints.insets=new Insets(0,0,0,0);
    constraints.gridx=4;
    constraints.gridy=0;
    constraints.weightx=1;
    constraints.gridwidth=1;
    constraints.gridheight=1;
    constraints.weighty=5;
    m_plotSurround.add(m_attrib,constraints);
  }
  setLayout(new BorderLayout());
  add(combos,BorderLayout.NORTH);
  add(m_plotSurround,BorderLayout.CENTER);
  add(m_classSurround,BorderLayout.SOUTH);
  String[] SNames=new String[4];
  SNames[0]="Select Instance";
  SNames[1]="Rectangle";
  SNames[2]="Polygon";
  SNames[3]="Polyline";
  m_ShapeCombo.setModel(new DefaultComboBoxModel(SNames));
  m_ShapeCombo.setEnabled(true);
}
