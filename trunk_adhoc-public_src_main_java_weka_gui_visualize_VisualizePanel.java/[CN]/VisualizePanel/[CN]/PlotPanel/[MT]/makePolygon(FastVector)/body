{
  FastVector building=new FastVector(v.size() + 10);
  double x1, y1, x2, y2;
  int edge1=0, edge2=0;
  for (int noa=0; noa < v.size() - 2; noa++) {
    building.addElement(new Double(((Double)v.elementAt(noa)).doubleValue()));
  }
  double[] new_coords;
  x1=m_plot2D.convertToPanelX(((Double)v.elementAt(1)).doubleValue());
  y1=m_plot2D.convertToPanelY(((Double)v.elementAt(2)).doubleValue());
  x2=m_plot2D.convertToPanelX(((Double)v.elementAt(3)).doubleValue());
  y2=m_plot2D.convertToPanelY(((Double)v.elementAt(4)).doubleValue());
  if (x1 < 0) {
    new_coords=lineIntersect(x1,y1,x2,y2,0,this.getHeight(),0);
    edge1=0;
    if (new_coords[0] < 0) {
      if (y1 < 0) {
        new_coords=lineIntersect(x1,y1,x2,y2,this.getWidth(),0,0);
        edge1=1;
      }
 else {
        new_coords=lineIntersect(x1,y1,x2,y2,this.getWidth(),0,this.getHeight());
        edge1=3;
      }
    }
  }
 else   if (x1 > this.getWidth()) {
    new_coords=lineIntersect(x1,y1,x2,y2,0,this.getHeight(),this.getWidth());
    edge1=2;
    if (new_coords[0] < 0) {
      if (y1 < 0) {
        new_coords=lineIntersect(x1,y1,x2,y2,this.getWidth(),0,0);
        edge1=1;
      }
 else {
        new_coords=lineIntersect(x1,y1,x2,y2,this.getWidth(),0,this.getHeight());
        edge1=3;
      }
    }
  }
 else   if (y1 < 0) {
    new_coords=lineIntersect(x1,y1,x2,y2,this.getWidth(),0,0);
    edge1=1;
  }
 else {
    new_coords=lineIntersect(x1,y1,x2,y2,this.getWidth(),0,this.getHeight());
    edge1=3;
  }
  building.setElementAt(new Double(m_plot2D.convertToAttribX(new_coords[0])),1);
  building.setElementAt(new Double(m_plot2D.convertToAttribY(new_coords[1])),2);
  x1=m_plot2D.convertToPanelX(((Double)v.elementAt(v.size() - 4)).doubleValue());
  y1=m_plot2D.convertToPanelY(((Double)v.elementAt(v.size() - 3)).doubleValue());
  x2=m_plot2D.convertToPanelX(((Double)v.elementAt(v.size() - 6)).doubleValue());
  y2=m_plot2D.convertToPanelY(((Double)v.elementAt(v.size() - 5)).doubleValue());
  if (x1 < 0) {
    new_coords=lineIntersect(x1,y1,x2,y2,0,this.getHeight(),0);
    edge2=0;
    if (new_coords[0] < 0) {
      if (y1 < 0) {
        new_coords=lineIntersect(x1,y1,x2,y2,this.getWidth(),0,0);
        edge2=1;
      }
 else {
        new_coords=lineIntersect(x1,y1,x2,y2,this.getWidth(),0,this.getHeight());
        edge2=3;
      }
    }
  }
 else   if (x1 > this.getWidth()) {
    new_coords=lineIntersect(x1,y1,x2,y2,0,this.getHeight(),this.getWidth());
    edge2=2;
    if (new_coords[0] < 0) {
      if (y1 < 0) {
        new_coords=lineIntersect(x1,y1,x2,y2,this.getWidth(),0,0);
        edge2=1;
      }
 else {
        new_coords=lineIntersect(x1,y1,x2,y2,this.getWidth(),0,this.getHeight());
        edge2=3;
      }
    }
  }
 else   if (y1 < 0) {
    new_coords=lineIntersect(x1,y1,x2,y2,this.getWidth(),0,0);
    edge2=1;
  }
 else {
    new_coords=lineIntersect(x1,y1,x2,y2,this.getWidth(),0,this.getHeight());
    edge2=3;
  }
  building.setElementAt(new Double(m_plot2D.convertToAttribX(new_coords[0])),building.size() - 2);
  building.setElementAt(new Double(m_plot2D.convertToAttribY(new_coords[1])),building.size() - 1);
  int xp, yp;
  xp=this.getWidth() * ((edge2 & 1) ^ ((edge2 & 2) / 2));
  yp=this.getHeight() * ((edge2 & 2) / 2);
  if (inPolyline(v,m_plot2D.convertToAttribX(xp),m_plot2D.convertToAttribY(yp))) {
    building.addElement(new Double(m_plot2D.convertToAttribX(xp)));
    building.addElement(new Double(m_plot2D.convertToAttribY(yp)));
    for (int noa=(edge2 + 1) % 4; noa != edge1; noa=(noa + 1) % 4) {
      xp=this.getWidth() * ((noa & 1) ^ ((noa & 2) / 2));
      yp=this.getHeight() * ((noa & 2) / 2);
      building.addElement(new Double(m_plot2D.convertToAttribX(xp)));
      building.addElement(new Double(m_plot2D.convertToAttribY(yp)));
    }
  }
 else {
    xp=this.getWidth() * ((edge2 & 2) / 2);
    yp=this.getHeight() * (1 & ~((edge2 & 1) ^ ((edge2 & 2) / 2)));
    if (inPolyline(v,m_plot2D.convertToAttribX(xp),m_plot2D.convertToAttribY(yp))) {
      building.addElement(new Double(m_plot2D.convertToAttribX(xp)));
      building.addElement(new Double(m_plot2D.convertToAttribY(yp)));
      for (int noa=(edge2 + 3) % 4; noa != edge1; noa=(noa + 3) % 4) {
        xp=this.getWidth() * ((noa & 2) / 2);
        yp=this.getHeight() * (1 & ~((noa & 1) ^ ((noa & 2) / 2)));
        building.addElement(new Double(m_plot2D.convertToAttribX(xp)));
        building.addElement(new Double(m_plot2D.convertToAttribY(yp)));
      }
    }
  }
  return building;
}
